{
	"lib": [
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//code from blackle https://www.shadertoy.com/view/wtVyWK\n\nfloat blackle_sdf3d_generator_neural_stanford_bunny(vec3 p) {\n   p.xyz=vec3(-p.x,-p.z,p.y);\n   //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n    //neural networks can be really compact... when they want to be\n    vec4 f00=sin(p.y*vec4(-3.02,1.95,-3.42,-.60)+p.z*vec4(3.08,.85,-2.25,-.24)-p.x*vec4(-.29,1.16,-3.74,2.89)+vec4(-.71,4.50,-3.24,-3.50));\n    vec4 f01=sin(p.y*vec4(-.40,-3.61,3.23,-.14)+p.z*vec4(-.36,3.64,-3.91,2.66)-p.x*vec4(2.90,-.54,-2.75,2.71)+vec4(7.02,-5.41,-1.12,-7.41));\n    vec4 f02=sin(p.y*vec4(-1.77,-1.28,-4.29,-3.20)+p.z*vec4(-3.49,-2.81,-.64,2.79)-p.x*vec4(3.15,2.14,-3.85,1.83)+vec4(-2.07,4.49,5.33,-2.17));\n    vec4 f03=sin(p.y*vec4(-.49,.68,3.05,.42)+p.z*vec4(-2.87,.78,3.78,-3.41)-p.x*vec4(-2.65,.33,.07,-.64)+vec4(-3.24,-5.90,1.14,-4.71));\n    vec4 f10=sin(mat4(vec4(-.34,.06,-.59,-.76),vec4(.10,-.19,-.12,.44),vec4(.64,-.02,-.26,.15),vec4(-.16,.21,.91,.15))*f00+\n        mat4(vec4(.01,.54,-.77,.11),vec4(.06,-.14,.43,.51),vec4(-.18,.08,.39,.20),vec4(.33,-.49,-.10,.19))*f01+\n        mat4(vec4(.27,.22,.43,.53),vec4(.18,-.17,.23,-.64),vec4(-.14,.02,-.10,.16),vec4(-.13,-.06,-.04,-.36))*f02+\n        mat4(vec4(-.13,.29,-.29,.08),vec4(1.13,.02,-.83,.32),vec4(-.32,.04,-.31,-.16),vec4(.14,-.03,-.20,.39))*f03+\n        vec4(.73,-4.28,-1.56,-1.80))/1.0+f00;\n    vec4 f11=sin(mat4(vec4(-1.11,.55,-.12,-1.00),vec4(.16,.15,-.30,.31),vec4(-.01,.01,.31,-.42),vec4(-.29,.38,-.04,.71))*f00+\n        mat4(vec4(.96,-.02,.86,.52),vec4(-.14,.60,.44,.43),vec4(.02,-.15,-.49,-.05),vec4(-.06,-.25,-.03,-.22))*f01+\n        mat4(vec4(.52,.44,-.05,-.11),vec4(-.56,-.10,-.61,-.40),vec4(-.04,.55,.32,-.07),vec4(-.02,.28,.26,-.49))*f02+\n        mat4(vec4(.02,-.32,.06,-.17),vec4(-.59,.00,-.24,.60),vec4(-.06,.13,-.21,-.27),vec4(-.12,-.14,.58,-.55))*f03+\n        vec4(-2.24,-3.48,-.80,1.41))/1.0+f01;\n    vec4 f12=sin(mat4(vec4(.44,-.06,-.79,-.46),vec4(.05,-.60,.30,.36),vec4(.35,.12,.02,.12),vec4(.40,-.26,.63,-.21))*f00+\n        mat4(vec4(-.48,.43,-.73,-.40),vec4(.11,-.01,.71,.05),vec4(-.25,.25,-.28,-.20),vec4(.32,-.02,-.84,.16))*f01+\n        mat4(vec4(.39,-.07,.90,.36),vec4(-.38,-.27,-1.86,-.39),vec4(.48,-.20,-.05,.10),vec4(-.00,-.21,.29,.63))*f02+\n        mat4(vec4(.46,-.32,.06,.09),vec4(.72,-.47,.81,.78),vec4(.90,.02,-.21,.08),vec4(-.16,.22,.32,-.13))*f03+\n        vec4(3.38,1.20,.84,1.41))/1.0+f02;\n    vec4 f13=sin(mat4(vec4(-.41,-.24,-.71,-.25),vec4(-.24,-.75,-.09,.02),vec4(-.27,-.42,.02,.03),vec4(-.01,.51,-.12,-1.24))*f00+\n        mat4(vec4(.64,.31,-1.36,.61),vec4(-.34,.11,.14,.79),vec4(.22,-.16,-.29,-.70),vec4(.02,-.37,.49,.39))*f01+\n        mat4(vec4(.79,.47,.54,-.47),vec4(-1.13,-.35,-1.03,-.22),vec4(-.67,-.26,.10,.21),vec4(-.07,-.73,-.11,.72))*f02+\n        mat4(vec4(.43,-.23,.13,.09),vec4(1.38,-.63,1.57,-.20),vec4(.39,-.14,.42,.13),vec4(-.57,-.08,-.21,.21))*f03+\n        vec4(-.34,-3.28,.43,-.52))/1.0+f03;\n    f00=sin(mat4(vec4(-.72,.23,-.89,.52),vec4(.38,.19,-.16,-.88),vec4(.26,-.37,.09,.63),vec4(.29,-.72,.30,-.95))*f10+\n        mat4(vec4(-.22,-.51,-.42,-.73),vec4(-.32,.00,-1.03,1.17),vec4(-.20,-.03,-.13,-.16),vec4(-.41,.09,.36,-.84))*f11+\n        mat4(vec4(-.21,.01,.33,.47),vec4(.05,.20,-.44,-1.04),vec4(.13,.12,-.13,.31),vec4(.01,-.34,.41,-.34))*f12+\n        mat4(vec4(-.13,-.06,-.39,-.22),vec4(.48,.25,.24,-.97),vec4(-.34,.14,.42,-.00),vec4(-.44,.05,.09,-.95))*f13+\n        vec4(.48,.87,-.87,-2.06))/1.4+f10;\n    f01=sin(mat4(vec4(-.27,.29,-.21,.15),vec4(.34,-.23,.85,-.09),vec4(-1.15,-.24,-.05,-.25),vec4(-.12,-.73,-.17,-.37))*f10+\n        mat4(vec4(-1.11,.35,-.93,-.06),vec4(-.79,-.03,-.46,-.37),vec4(.60,-.37,-.14,.45),vec4(-.03,-.21,.02,.59))*f11+\n        mat4(vec4(-.92,-.17,-.58,-.18),vec4(.58,.60,.83,-1.04),vec4(-.80,-.16,.23,-.11),vec4(.08,.16,.76,.61))*f12+\n        mat4(vec4(.29,.45,.30,.39),vec4(-.91,.66,-.35,-.35),vec4(.21,.16,-.54,-.63),vec4(1.10,-.38,.20,.15))*f13+\n        vec4(-1.72,-.14,1.92,2.08))/1.4+f11;\n    f02=sin(mat4(vec4(1.00,.66,1.30,-.51),vec4(.88,.25,-.67,.03),vec4(-.68,-.08,-.12,-.14),vec4(.46,1.15,.38,-.10))*f10+\n        mat4(vec4(.51,-.57,.41,-.09),vec4(.68,-.50,-.04,-1.01),vec4(.20,.44,-.60,.46),vec4(-.09,-.37,-1.30,.04))*f11+\n        mat4(vec4(.14,.29,-.45,-.06),vec4(-.65,.33,-.37,-.95),vec4(.71,-.07,1.00,-.60),vec4(-1.68,-.20,-.00,-.70))*f12+\n        mat4(vec4(-.31,.69,.56,.13),vec4(.95,.36,.56,.59),vec4(-.63,.52,-.30,.17),vec4(1.23,.72,.95,.75))*f13+\n        vec4(-.90,-3.26,-.44,-3.11))/1.4+f12;\n    f03=sin(mat4(vec4(.51,-.98,-.28,.16),vec4(-.22,-.17,-1.03,.22),vec4(.70,-.15,.12,.43),vec4(.78,.67,-.85,-.25))*f10+\n        mat4(vec4(.81,.60,-.89,.61),vec4(-1.03,-.33,.60,-.11),vec4(-.06,.01,-.02,-.44),vec4(.73,.69,1.02,.62))*f11+\n        mat4(vec4(-.10,.52,.80,-.65),vec4(.40,-.75,.47,1.56),vec4(.03,.05,.08,.31),vec4(-.03,.22,-1.63,.07))*f12+\n        mat4(vec4(-.18,-.07,-1.22,.48),vec4(-.01,.56,.07,.15),vec4(.24,.25,-.09,-.54),vec4(.23,-.08,.20,.36))*f13+\n        vec4(-1.11,-4.28,1.02,-.23))/1.4+f13;\n    return dot(f00,vec4(.09,.12,-.07,-.03))+dot(f01,vec4(-.04,.07,-.08,.05))+\n        dot(f02,vec4(-.01,.06,-.02,.07))+dot(f03,vec4(-.05,.07,.03,.04))-0.16;\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - Blackle\n\nGenerates a stanford bunny using a neural network using Blackle code from https://www.shadertoy.com/view/wtVyWK",
				"name": "Neural Stanford Bunny",
				"outputs": [
					{
						"sdf3d": "blackle_sdf3d_generator_neural_stanford_bunny($uv)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [

				],
				"shortdesc": "Neural Stanford Bunny"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/Neural Standford Bunny",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//code from https://www.shadertoy.com/view/3lyfzw\n//Made with this wonderful tutorial https://www.youtube.com/watch?v=8pwXpfi-0bU\n//Using Ida Faber model - CC Attribution\n//https://sketchfab.com/3d-models/stylized-fox-92c2a35e54664974b8564c674cc712da\n\nfloat paulofalcao_sdf3d_generator_neural_fox(vec3 p) {\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n\tp.xyz=vec3(-p.x,-p.z,p.y);\n    p.y=-sqrt(p.y*p.y+0.001)+0.01;\n    //neural networks can be really compact... when they want to be\n\tvec4 f0_0=sin(p.y*vec4(1.627,-3.273,.822,-1.929)+p.z*vec4(4.114,.716,-3.074,2.185)+p.x*vec4(2.235,.937,3.908,-1.072)+vec4(6.915,3.461,-1.359,1.899));\n\tvec4 f0_1=sin(p.y*vec4(-.001,-3.255,1.831,.966)+p.z*vec4(-3.328,.890,1.475,-.323)+p.x*vec4(.290,-1.169,-4.054,3.146)+vec4(-4.517,-2.674,6.099,.070));\n\tvec4 f0_2=sin(p.y*vec4(3.113,-1.089,2.397,-.459)+p.z*vec4(-4.309,1.202,1.134,2.052)+p.x*vec4(-1.018,.550,-3.955,4.027)+vec4(-7.136,2.863,-1.640,-5.590));\n\tvec4 f0_3=sin(p.y*vec4(.343,1.509,4.401,-1.962)+p.z*vec4(1.198,1.852,2.207,-4.658)+p.x*vec4(2.067,.056,-.156,-.631)+vec4(-4.943,.051,7.095,3.128));\n\tvec4 f1_0=sin(mat4(vec4(.234,.264,-.181,.015),vec4(1.018,-.023,.417,-.338),vec4(.527,-.030,.056,-.005),vec4(-.843,.446,-.139,-.079))*f0_0+\n    \tmat4(vec4(-.512,.346,-.264,.380),vec4(.135,.249,.118,-.188),vec4(-.110,.210,.101,-.157),vec4(.126,.259,.262,.446))*f0_1+\n    \tmat4(vec4(.595,.318,.262,-.279),vec4(.802,.891,-.050,-.347),vec4(.131,-.369,.420,-.025),vec4(-.217,-.197,.152,.931))*f0_2+\n    \tmat4(vec4(.522,.906,-.530,.246),vec4(.685,.684,-.106,.175),vec4(.437,.507,-.459,.127),vec4(.342,-.398,-.243,.008))*f0_3+\n    \tvec4(.376,-.814,1.500,-1.007))/1.0+f0_0;\n\tvec4 f1_1=sin(mat4(vec4(.124,.489,-.159,-.094),vec4(.099,.611,-.257,-.614),vec4(-.108,.309,-.121,-.389),vec4(.049,-.606,.030,-.723))*f0_0+\n    \tmat4(vec4(.511,.456,-.645,-1.008),vec4(.009,-.461,-.198,-.754),vec4(.978,.413,-.641,-.412),vec4(-1.068,-.308,.291,-.170))*f0_1+\n    \tmat4(vec4(.428,-.220,-.163,-.356),vec4(.744,.548,.221,.563),vec4(.242,-.214,-.224,-.567),vec4(.391,.045,-.061,-.186))*f0_2+\n    \tmat4(vec4(-.001,-.252,.747,-.435),vec4(.539,.003,-.305,-.643),vec4(-.261,.164,-.336,.295),vec4(.383,-.395,-.136,-.008))*f0_3+\n    \tvec4(-1.007,-1.304,1.076,1.194))/1.0+f0_1;\n\tvec4 f1_2=sin(mat4(vec4(-.502,.308,-.174,.023),vec4(-.560,-.534,.624,-.555),vec4(.309,.630,-.122,.310),vec4(.368,.878,-.206,-.350))*f0_0+\n    \tmat4(vec4(.684,.334,-.702,.420),vec4(-.698,.960,-.053,-.676),vec4(-.272,.365,-.074,.407),vec4(-.375,.202,.532,-.207))*f0_1+\n    \tmat4(vec4(-.116,-.269,.153,-.453),vec4(-.530,.488,-.724,.065),vec4(.405,.667,-.642,.043),vec4(-.103,.430,-.562,.346))*f0_2+\n    \tmat4(vec4(.472,-.026,-.433,.070),vec4(-.210,-.057,-.253,.310),vec4(-.344,.047,.386,.552),vec4(.246,-.111,.331,.350))*f0_3+\n    \tvec4(-.725,-1.197,.825,-3.455))/1.0+f0_2;\n\tvec4 f1_3=sin(mat4(vec4(.027,.173,.253,-.822),vec4(-.478,.458,.101,.045),vec4(.025,.248,.759,.184),vec4(-.317,-.014,-.077,-.353))*f0_0+\n    \tmat4(vec4(-.283,-.201,.219,-.248),vec4(-.571,-.458,.401,-.226),vec4(.432,.245,-.160,-.065),vec4(-.421,-1.315,-.569,-.520))*f0_1+\n    \tmat4(vec4(.313,-.258,.291,-.284),vec4(-.732,.295,-.087,-.441),vec4(.836,-.701,.566,.889),vec4(-.116,-.252,-.542,-.396))*f0_2+\n    \tmat4(vec4(-.381,-.907,.516,.431),vec4(-.273,.257,.027,-.179),vec4(-.214,.077,-.130,-.282),vec4(-.368,-.270,.618,-.041))*f0_3+\n    \tvec4(2.580,-.950,1.416,.227))/1.0+f0_3;\n\tvec4 f2_0=sin(mat4(vec4(.288,.277,.179,.290),vec4(-.968,-1.492,.495,-.421),vec4(.153,-.177,.580,-.388),vec4(.971,-.335,.007,.032))*f1_0+\n\t    mat4(vec4(-.194,-.137,.202,.157),vec4(-.160,1.025,-.550,-.053),vec4(.485,.030,-.537,.065),vec4(.021,-.384,-.109,-.452))*f1_1+\n\t    mat4(vec4(-.748,.241,.386,-.441),vec4(-.620,-.869,.559,.681),vec4(.367,.256,-.459,-1.047),vec4(.260,.241,-.793,.494))*f1_2+\n\t    mat4(vec4(-.958,-.093,-.110,-.074),vec4(-.260,-.856,.521,.613),vec4(-.562,.079,.238,.056),vec4(-.413,-1.011,.118,-.104))*f1_3+\n\t    vec4(.980,1.564,-2.935,-.589))/1.4+f1_0;\n\tvec4 f2_1=sin(mat4(vec4(.181,.166,-.082,.469),vec4(.474,.703,.969,.559),vec4(.998,-.016,.193,-.363),vec4(.452,.152,.543,-.394))*f1_0+\n\t    mat4(vec4(-.711,-.586,.015,.459),vec4(.404,.538,.575,-.249),vec4(-.562,-.484,.549,.673),vec4(-1.160,.144,-.010,-.093))*f1_1+\n\t    mat4(vec4(.663,.424,.164,.089),vec4(1.168,.000,.636,-.309),vec4(.088,-.779,.352,-.722),vec4(-1.071,-.059,-.089,.310))*f1_2+\n\t    mat4(vec4(-.156,-.515,.176,-.125),vec4(.034,.431,.367,.228),vec4(.394,.263,.039,.195),vec4(1.077,.460,-.456,-.031))*f1_3+\n\t    vec4(.495,.756,-2.986,-1.239))/1.4+f1_1;\n\tvec4 f2_2=sin(mat4(vec4(-.586,-.569,-.492,-.407),vec4(-.224,-.624,.373,-.080),vec4(-.216,.279,.704,.072),vec4(-.780,-.607,.575,.568))*f1_0+\n\t    mat4(vec4(.070,-.760,.980,.566),vec4(-.124,-.326,.463,.559),vec4(-.297,.161,-.449,-.236),vec4(-.369,-.591,-.190,-.548))*f1_1+\n\t    mat4(vec4(.054,.276,-.894,-.120),vec4(.795,1.111,-.473,.031),vec4(.387,.292,.974,1.024),vec4(.150,.184,.253,-.287))*f1_2+\n\t    mat4(vec4(.435,1.658,.294,-.403),vec4(-.377,.175,-.493,.204),vec4(-.499,-.614,.119,-.557),vec4(-.799,-.168,-.481,-.192))*f1_3+\n\t    vec4(-2.130,-2.233,-.605,-3.251))/1.4+f1_2;\n\tvec4 f2_3=sin(mat4(vec4(.884,.369,.064,-.009),vec4(.434,.437,-.618,.117),vec4(.046,-.601,-.376,-.182),vec4(1.130,-.913,-.029,.602))*f1_0+\n\t    mat4(vec4(.314,-1.064,.861,-.572),vec4(-.633,.111,-.122,-.179),vec4(.277,-.615,-.069,.678),vec4(.109,.024,-1.124,-.553))*f1_1+\n\t    mat4(vec4(.243,.009,.461,.333),vec4(-.624,-.670,.328,.350),vec4(1.132,-.523,-.099,.402),vec4(.183,.245,-.232,.186))*f1_2+\n\t    mat4(vec4(-.057,.076,.660,-.139),vec4(.729,.450,.109,-.177),vec4(.088,-.111,.020,-.546),vec4(-.487,-1.286,.100,.117))*f1_3+\n\t    vec4(.529,-2.910,3.311,2.936))/1.4+f1_3;\n\treturn dot(f2_0,vec4(.021,-.057,.076,-.038))+\n\t    dot(f2_1,vec4(-.022,-.081,.064,-.063))+\n\t    dot(f2_2,vec4(-.049,-.057,.048,.076))+\n\t    dot(f2_3,vec4(.014,-.049,.060,.071))+\n\t    -0.010;\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao, Blackle\n\nGenerates a fox using a neural network using PauloFalcao code from https://www.shadertoy.com/view/3lyfzw\nModel trained by PauloFalcao\nMade using Blackle https://www.shadertoy.com/view/wtVyWK\nAnd this wonderful tutorial https://www.youtube.com/watch?v=8pwXpfi-0bU\nUsing Ida Faber model\nhttps://sketchfab.com/3d-models/stylized-fox-92c2a35e54664974b8564c674cc712da\n",
				"name": "Neural Fox",
				"outputs": [
					{
						"sdf3d": "paulofalcao_sdf3d_generator_neural_fox($uv)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [

				],
				"shortdesc": "Neural Fox"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/Neural Fox",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"RepX": 4,
				"RepY": 1,
				"RepZ": 4,
				"X": 1,
				"Y": 1,
				"Z": 1
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec3 opRepLim(vec3 p,vec3 c,vec3 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor(p/c+0.5),vec3(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - IQ\n\nRepeats its input shape",
				"name": "Repeat",
				"outputs": [
					{
						"sdf3d": "$in(opRepLim($uv,vec3($X,$Y,$Z)*2.0,vec3($RepX-1.0,$RepY-1.0,$RepZ-1.0)))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128,
						"min": 1,
						"name": "RepZ",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"Iterations": 2,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "//From https://www.shadertoy.com/view/wlyBWm by @paulofalcao\n\nvec3 smoothrepeat_$name(vec3 p,vec3 smooth_size,vec3 size){\n    size.$Axis/=2.0;\n    float w=pow(2.0,float($Iterations));\n\tfor(int i=0;i<$Iterations;i++){\n        p.$Axis=sqrt(p.$Axis*p.$Axis+smooth_size.$Axis);//smooth abs\n\t\tp.$Axis-=size.$Axis*w;//translate\n\t\tw=w/2.0;\n\t}\n\treturn p;\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "Smooth Repeat",
				"outputs": [
					{
						"sdf3d": "$in(smoothrepeat_$name($uv,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 3,
						"label": "Axis",
						"longdesc": "Repetition axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"default": 2,
						"label": "Repetitions",
						"longdesc": "Repetitions in the X axis",
						"name": "Iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "0"
							},
							{
								"name": "2",
								"value": "1"
							},
							{
								"name": "4",
								"value": "2"
							},
							{
								"name": "8",
								"value": "3"
							},
							{
								"name": "16",
								"value": "4"
							},
							{
								"name": "32",
								"value": "5"
							},
							{
								"name": "64",
								"value": "6"
							},
							{
								"name": "128",
								"value": "7"
							},
							{
								"name": "256",
								"value": "8"
							},
							{
								"name": "512",
								"value": "9"
							},
							{
								"name": "1024",
								"value": "10"
							},
							{
								"name": "2048",
								"value": "11"
							},
							{
								"name": "4096",
								"value": "12"
							},
							{
								"name": "8192",
								"value": "13"
							},
							{
								"name": "16384",
								"value": "14"
							},
							{
								"name": "32768",
								"value": "15"
							},
							{
								"name": "65536",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "float blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return $in(p);\n}",
				"longdesc": "Type - SDF3D Operator\nCode - Blackle\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "Smooth Repeat V2",
				"outputs": [
					{
						"sdf3d": "blakle_smoothrepeat_asin_sin_$name($uv,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)*0.635)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Repeat V2"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Repeat V2",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"RepX": 3,
				"RepY": 3,
				"RepZ": 3,
				"SmoothB": 0,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "//Uses shapes from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm by iq\n//And Smooth Repetition in https://www.shadertoy.com/view/wlyBWm by blakle\n\nfloat iq_sdRoundBox(in vec3 p,in vec3 b, float r ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0)-r;\n}\n\nfloat iq_opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\n\n",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "vec3 blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return p;\n}\n\nfloat Blackle_SDF3D_Smooth_Repeat_$name(vec3 p,vec3 size,vec3 rep,vec3 smooth_,float smoothb){\n  float b=iq_sdRoundBox(p,size*rep,smoothb);\n  p=blakle_smoothrepeat_asin_sin_$name(p,smooth_,size);\n  return iq_opSmoothIntersection($in(p),b,smoothb);\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - Blackle, PauloFalcao\n\nRepeats its input shape with smoothness using reflection symmetry with a smooth box limit",
				"name": "Smooth Repeat V2 Limited ",
				"outputs": [
					{
						"sdf3d": "Blackle_SDF3D_Smooth_Repeat_$name($uv,vec3($X,$Y,$Z)*0.635,vec3($RepX,$RepY,$RepZ)+1.5,vec3($SmoothX,$SmoothY,$SmoothZ),$SmoothB)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128,
						"min": 1,
						"name": "RepZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.01,
						"label": "SmoothB",
						"longdesc": "Smoothness on the boundary. Uses smooth intersection with a box",
						"max": 1,
						"min": 0,
						"name": "SmoothB",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Repeat V2 Limited"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Repeat V2 Limited",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"Pow": 64,
				"Shadow": 1,
				"SkyColor": {
					"interpolation": 3,
					"points": [
						{
							"a": 1,
							"b": 0.979167,
							"g": 0.864656,
							"pos": 0,
							"r": 0.793357
						},
						{
							"a": 1,
							"b": 1,
							"g": 0.6984,
							"pos": 0.118182,
							"r": 0.510612
						},
						{
							"a": 1,
							"b": 0.557292,
							"g": 0.329521,
							"pos": 0.411598,
							"r": 0.287342
						},
						{
							"a": 1,
							"b": 0.416667,
							"g": 0.209503,
							"pos": 0.945455,
							"r": 0.17114
						}
					],
					"type": "Gradient"
				},
				"Specular": 1,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D A",
						"name": "sdf_a",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.1,0.1)",
						"function": true,
						"label": "TEX3D A",
						"name": "tex3d_a",
						"shortdesc": "TEX3D A",
						"type": "tex3d"
					},
					{
						"default": "$uv.y+1.0",
						"function": true,
						"label": "SDF3D B",
						"name": "sdf_b",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "(vec3(mod(floor($uv.x)+floor($uv.z),2.0))*0.25+0.5)",
						"function": true,
						"label": "TEX3D B",
						"name": "tex3d_b",
						"shortdesc": "TEX3D B",
						"type": "tex3d"
					}
				],
				"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(out float d,out vec3 p,out vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tfloat fog=max(1.0-(d/50.0),0.0);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tfloat r=clamp(dot(reflect(rd,-n),light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t} else {\n\t    color=$SkyColor(rd.y).xyz;\n\t}\n    return color*(fog)+$SkyColor(rd.y).xyz*(1.0-fog);\n}\n\n\n\n",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects",
				"name": "Ray Marching 2 Objects",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image Output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024,
						"min": 0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": {
							"interpolation": 3,
							"points": [
								{
									"a": 1,
									"b": 1,
									"g": 0.6984,
									"pos": 0.009091,
									"r": 0.510612
								},
								{
									"a": 1,
									"b": 0.317708,
									"g": 0.187858,
									"pos": 1,
									"r": 0.163812
								}
							],
							"type": "Gradient"
						},
						"label": "SkyColor",
						"longdesc": "A gradient that tries to simulate a sky",
						"name": "SkyColor",
						"type": "gradient"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Ray Marching 2 Objects"
			},
			"tree_item": "PauloFalcao/SDF3D/Render/Ray Marching 2 Objects",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//by IQ\n//from https://www.shadertoy.com/view/3ltSW2\nvec3 iq_2dsdf_coloring( in float c )\n{\n    vec3 col = vec3(1.0) - sign(c)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(c));\n\tcol *= 0.8 + 0.2*cos(128.0*abs(c));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(c)) );\n\n\treturn col;\n}",
				"inputs": [
					{
						"default": "length($uv)-0.5",
						"label": "SDF2D",
						"name": "c",
						"shortdesc": "SDF2D input",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - Image Generator from SDF2D\nCode - IQ\n\nIQ SDF 2D distance coloring from https://www.shadertoy.com/view/3ltSW2",
				"name": "SDF2D Distance Coloring",
				"outputs": [
					{
						"rgb": "iq_2dsdf_coloring($c($uv*2.0-1.0))",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [

				],
				"shortdesc": "SDF2D Distance Coloring"
			},
			"tree_item": "PauloFalcao/SDF2D/Render/SDF2D Distance Coloring",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "buffer_2",
					"from_port": 0,
					"to": "gen_outputs",
					"to_port": 0
				},
				{
					"from": "4690",
					"from_port": 0,
					"to": "buffer_2",
					"to_port": 0
				}
			],
			"icon_data": "",
			"label": "pxflib",
			"longdesc": "Type - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
			"name": "graph_2",
			"nodes": [
				{
					"name": "buffer_2",
					"node_position": {
						"x": -126,
						"y": 347.5
					},
					"parameters": {
						"size": 11
					},
					"type": "buffer",
					"version": 1
				},
				{
					"name": "4690",
					"node_position": {
						"x": -461,
						"y": 424.5
					},
					"parameters": {
						"cloudtime": 575.5,
						"sunPosX": -1,
						"sunPosY": 1,
						"sunPosZ": -1
					},
					"shader_model": {
						"code": "",
						"global": "// Day at the Lake by nimitz, 2020 (twitter: @stormoid)\n// https://www.shadertoy.com/view/wl3czN\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n//\n// Simple floor by PauloFalcao\n//\n// Modified for Material Maker by (twitter: @PauloFalcao)\n//\n\nmat3 nz_cloudrot_y(float a){\n\tfloat sa = sin(a);\n\tfloat ca = cos(a);\n\treturn mat3(vec3(ca,.0,sa),vec3(.0,1.,.0),vec3(-sa,.0,ca));\n}\n\nvec3 nz_cloudsIntcPlane(vec3 ro, vec3 rd, float plH){\n    ro.y += plH;\n    float t = -ro.y/rd.y;\n    if (t < 0.)\n        return vec3(1e6);\n    float u =  ro.x + rd.x*t;\n    float v =  ro.z + rd.z*t;\n    return vec3(t,u,v);\n}\n\n// Clouds cyclic noise\nconst mat3 nz_cloudMapm3x=mat3(\n\t  vec3(0.33338, 0.56034, -0.71817),\n\t  vec3(-0.87887, 0.32651, -0.15323),\n\t  vec3(0.15162, 0.69596, 0.61339)\n\t)*2.01;\n\nvec4 nz_cloudMap(vec3 p, float time){\n    p.xz += vec2(-time*1.0, time*0.25);\n    time *= 0.25;\n    p.y -= 9.0;\n    p *= vec3(0.19,0.3,0.19)*0.45;\n    vec3 bp = p;\n    float rz = 0.;\n    vec3 drv = vec3(0);\n    \n    float z = 0.5;\n    float trk= 0.9;\n    float dspAmp = 0.2;\n    \n    float att = clamp(1.31-abs(p.y - 5.5)*0.095,0.,1.);\n    float off = dot(sin(p*.52)*0.7+0.3, cos(p.yzx*0.6)*0.7+0.3)*0.75 - 0.2; //large structures\n    float ofst = 12.1 - time*0.1;\n    \n    for (int i = 0; i<6; i++){\n        p += sin(p.yzx*trk - trk*2.0)*dspAmp;\n        \n        vec3 c = cos(p);\n        vec3 s = sin(p);\n        vec3 cs = cos(p.yzx + s.xyz + ofst);\n        vec3 ss = sin(p.yzx + s.xyz + ofst);\n        vec3 s2 = sin(p + s.zxy + ofst);\n        vec3 cdrv = (c*(cs - s*ss) - s*ss.yzx - s.zxy*s2)*z;\n        \n        rz += (dot(s, cs) + off - 0.1)*z; //cloud density\n        rz *= att;\n        drv += cdrv;\n        \n        p += cdrv*0.09;\n        p.xz += time*0.1;\n        \n        dspAmp *= 0.7;\n        z *= 0.57;\n        trk *= 2.1;\n        p *= nz_cloudMapm3x;\n    }\n    \n    return vec4(rz, drv);\n}\n\n//-----------------------------Sky rendering---------------------------\n// modified from an prototype public domain implementation by shadertoy user Jodie: https://www.shadertoy.com/view/ttSGzh\n// That version has some serious accuracy issues, I modified it to somewhat match the Hosek-Wilkie sky model visuals.\n\n\nvec3 nz_getThickness(vec3 rd){\n\n\tconst float earthRadius=6371000.;\n\tconst float atmoDepth=8228.;\n\tconst float mieDepth=1800.0;\n\tconst float ozoneHeight=30000.;\n\t\n    const vec4 cns = earthRadius + \n        \t\t\tvec4(atmoDepth, mieDepth, ozoneHeight, ozoneHeight + atmoDepth);\n    const float r2 = earthRadius * earthRadius;\n    float b = -rd.y*earthRadius;\n    vec4 z = sqrt( cns*cns + (b*b - r2) );\n    return vec3(b + z.xy, z.w - z.z);\n}\n\n\nvec3 nz_getSky(vec3 rd, vec3 lgt, float addDepth){\n\n\tconst vec3 rayleighCoefficient=vec3(5.6e-6  , 1.25e-5 , 2.9e-5 );\n\tconst float mieCoefficient=16e-6;// adjust for foggier look\n\tconst vec3 ozoneCoefficient=(vec3(3.426, 8.298,.356) * 6e-5 / 100.);\n\tconst vec3 sunColor=vec3(.95,.96,1.2 );\n\t\n    const vec3 addCol = vec3(1.,1.,1.);\n    const mat3 coeffs = mat3(rayleighCoefficient, vec3(mieCoefficient), ozoneCoefficient)/0.693147;\n    vec3 thickness = nz_getThickness(rd) + addDepth*addCol;\n    float rdl = max(dot(rd, lgt), 0.0);\n\n    vec3 rayleighScatter =(thickness.x * (0.4*rdl*rdl + 1.12))* rayleighCoefficient;\n    float g = 0.8 - lgt.y*0.15 - mieCoefficient*1500.;\n    float g2 = g*g;\n    float a = inversesqrt(g2 - (2.0*g*rdl - 1.0));\n    float phaseMie = (0.4 + lgt.y*0.1 + mieCoefficient*7000.)*(1.0 - g2)*a*a*a;\n    float mieScatter = thickness.y * phaseMie * mieCoefficient;\n\n    vec3 sunCoeff = coeffs*(nz_getThickness(lgt) + addDepth*addCol);\n    vec3 viewCoeff = coeffs*thickness;\n    vec3 absorption = (exp2(-viewCoeff) - exp2(-sunCoeff))/((sunCoeff - viewCoeff)*0.693147);\n\n    return vec3(clamp(sunColor*(rayleighScatter + mieScatter)*absorption*(0.6 + lgt.y*0.3), 0., 100.5));\n}\n\n\n\n//-------------------------End of sky rendering------------------------\n//---------------------------------------------------------------------\n\nvec3 nz_getSun(vec3 rd, float sunCoeff, vec3 lgt){\n    float rdl = max(dot(rd, lgt), 0.0);\n    float dcy = smoothstep(-0.05,0.2,lgt.y);\n    vec3 sun = 50.0*vec3(1.,1.,.4)*pow(rdl, 10000.)*clamp(1.0 - dcy*.7, 0.,1.);\n    sun += 60.0*vec3(1.,0.7,.5)*pow(rdl, 3500.);\n    sun *= clamp(1.0 - dcy*.6, 0.,1.);\n    sun *= exp2(-sunCoeff*0.45);\n    return sun;\n}\n\n\nvec4 nz_getClouds( in vec3 ro, in vec3 rd, float scnD, vec3 skyCol, float time, vec3 lgt){\n\tvec4 rez = vec4(0.);\n\tfloat t = min(nz_cloudsIntcPlane(ro, rd, -12.).x, 175.);\n    \n    float updl = dot(lgt, vec3(0, 1, 0));\n    float sunUp = max(updl, 0.);\n    float sunUp3 = clamp(sunUp*sunUp*sunUp*6., 0.0, 1.0);\n    float sunDw = 1.0 - sunUp;\n    sunDw = pow(sunDw, 6.0);\n    \n    float bsd = dot(lgt.xz, rd.xz);\n    float sd = max(bsd, 0.0);\n    float sd2 = max(bsd*0.55 + 0.53,0.);\n    \n    vec3 topSky = clamp(nz_getSky(vec3(0, 1, 0), lgt, 0.).xyz, 0.,1.);\n    vec3 baseCol = mix(topSky, vec3(0.05, 0.066, 0.09), clamp(sunUp3,0.0, 0.6))*0.2;\n    \n    float extraDepth = 14e4*((1.0-bsd)*0.2 + 0.9)*pow(1.0 - sunUp, 4.0);\n    vec3 hlitCol = clamp(nz_getSky(normalize((lgt-vec3(0,0.001,0))*nz_cloudrot_y(0.15)), lgt, extraDepth).xyz ,0.0, 1.0);\n    hlitCol = hlitCol*sd2*mix(sunDw, sunDw*sunDw, sd)*16.;\n    \n    vec3 bSkyCol = nz_getSky(rd, lgt, extraDepth*5.0*(sunUp*0.8 + 0.2)).xyz;\n    vec3 sunLCol = mix(vec3(1.0, 0.8, 0.75), vec3(.5), sunUp);\n    vec3 atmoCol = mix(bSkyCol*(sunUp*0.3+0.7), sunLCol*dot(bSkyCol, vec3(0.38)), sunUp3)*0.25;\n    \n\tfor(int i=0; i<85; i++){\n\t\tvec3 pos = ro + t*rd;\n        if(rez.a > 0.99 || t > 300.  || pos.y > 150.)break;\n        vec4 cld = nz_cloudMap(pos, time);\n\t\tfloat den = clamp(cld.x, 0., 1.)*1.02;\n\t\tfloat dn = clamp((cld.x + 1.9),0.0 , 3.0);\n        float fogT = 0.;\n        \n\t\tvec4 col = vec4(0);\n        \n        if (cld.x > 0.6){   \n            col = vec4(baseCol, 0.1);\n            float nl = max(dot(cld.yzw, -lgt), -1.2);\n            float dif = clamp((cld.x - nz_cloudMap(pos + lgt*8., time).x)*0.4 + 0.2, 0.11, 2.0 )*2.5;\n            dif += clamp((cld.x - nz_cloudMap(pos + lgt*15., time).x)*0.2 - 0.03, -0.02, 1. )*4.0;\n            \n            col.rgb += atmoCol*((nl*0.25 + 0.7)*dif*0.65); //atmosphere lighting\n            \n            float den2 = den*den;\n            float den4 = den2*den2;\n            col *= den4*den4;\n            col.rgb += col.a*clamp((nl*0.8 + 0.1)*dif,0.,1.)*hlitCol; //twi-lights\n            //col *= smoothstep(t-0.0, t+.1, scnD); //blend with scene\n        }\n        \n        float fogC = exp2(t*0.012/(rd.y + 0.35) - 11.7);\n        col.rgba += vec4(skyCol, 1.0)*clamp(fogC, 0.0, 1.0);\n\t\trez = rez + col*(1.0 - rez.a);\n        t += clamp(7. - dn*dn*.85, 1.2, 7.);\n\t}    \n\treturn clamp(rez, 0.0, 1.0);\n}\n\n\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat npxf_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat pxf_nz_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=npxf_hash12(v1);\n  float n01=npxf_hash12(v1+vec2(0,1));\n  float n10=npxf_hash12(v1+vec2(1,0));\n  float n11=npxf_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat pxf_nz_noiseOct(vec2 p){\n  return\n    pxf_nz_noise(p)*0.5+\n    pxf_nz_noise(p*2.0+13.0)*0.25+\n    pxf_nz_noise(p*4.0+23.0)*0.15+\n    pxf_nz_noise(p*8.0+33.0)*0.10+\n    pxf_nz_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 pxf_nz_floorColor(vec3 p){\n    vec3 v=(pxf_nz_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\n\n\nvec3 pxf_nz_renderHDR360( in vec3 rd, float time, vec3 lgt){\n\n    vec3 col;\n    if (rd.y>-0.35) {\n        //Sky\n        //Sky\n        float ldt = clamp(dot(lgt,rd),0.,1.);\n\n        vec3 skyCol = nz_getSky(rd, lgt, 0.);\n        col = skyCol.rgb;\n        vec3 bg= col;\n\n        float powerSun=1.0+pow(ldt,2.0);\n\n        col += (nz_getSun(rd,0.0,lgt)+0.05)*powerSun;\n\n        float powerCloud=1.0+pow(ldt,32.0)*3.5;\n\n        vec4 cld = nz_getClouds(vec3(0,0,0), rd, 10000., bg, time, lgt)*powerCloud;\n        col = col*(clamp(1.0-cld.w,0.0,1.0)) + cld.xyz;\n        //Floor\n        vec3 p=rd*(-10.0/rd.y);\n        if ((rd.y>-0.35)&&(rd.y<-0.0)){\n          col=mix(col,pxf_nz_floorColor(p),clamp(-rd.y*3.0,0.0,1.0));\n        }\n    } else{\n        vec3 p=rd*(-10.0/rd.y);\n        col=pxf_nz_floorColor(p);\n    }\n    return col;\n}\n\n\nvec3 pxf_nz_make360hdri(vec2 p,float t,vec3 sunPos){\n    float PI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(PI,PI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n\t\n    return max(pxf_nz_renderHDR360(rayDirection,t,sunPos),vec3(0.0));\n}",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Nimitz HDRI Sky\n\nType - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
						"name": "Nimitz HDRI Sky",
						"outputs": [
							{
								"rgb": "pxf_nz_make360hdri(vec2($uv.x,-$uv.y+1.0),$cloudtime,normalize(vec3(-$sunPosX,$sunPosY,-$sunPosZ)))",
								"shortdesc": "Color Output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 30,
								"label": "Cloud Time",
								"max": 200,
								"min": 0,
								"name": "cloudtime",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Sun Pos X",
								"max": 1,
								"min": 0,
								"name": "sunPosX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Sun Pos Y",
								"max": 1,
								"min": 0,
								"name": "sunPosY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Sun Pos Z",
								"max": 1,
								"min": 0,
								"name": "sunPosZ",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -454,
						"y": 300
					},
					"parameters": {

					},
					"ports": [

					],
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": 97,
						"y": 342
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0,
							"longdesc": "",
							"name": "port0",
							"shortdesc": "Image Output",
							"type": "rgba"
						}
					],
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -35,
						"y": 99.5
					},
					"parameters": {
						"par1": 11,
						"par2": -1,
						"par3": 1,
						"par4": -1,
						"param0": 575.5
					},
					"type": "remote",
					"widgets": [
						{
							"label": "Resolution",
							"linked_widgets": [
								{
									"node": "buffer_2",
									"widget": "size"
								}
							],
							"name": "par1",
							"type": "linked_control"
						},
						{
							"label": "Sun Pos X",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "sunPosX"
								}
							],
							"name": "par2",
							"type": "linked_control"
						},
						{
							"label": "Sun Pos Y",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "sunPosY"
								}
							],
							"name": "par3",
							"type": "linked_control"
						},
						{
							"label": "Sun Pos Z",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "sunPosZ"
								}
							],
							"name": "par4",
							"type": "linked_control"
						},
						{
							"label": "Cloud Time",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "cloudtime"
								}
							],
							"name": "param0",
							"type": "linked_control"
						}
					]
				},
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment",
					"node_position": {
						"x": -818.233337,
						"y": -69.649994
					},
					"parameters": {

					},
					"size": {
						"x": 681,
						"y": 323
					},
					"text": "Nimitz HDRI Sky\n\nType - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
					"title": "",
					"type": "comment"
				}
			],
			"parameters": {
				"par1": 11,
				"par2": -1,
				"par3": 1,
				"par4": -1,
				"param0": 575.5
			},
			"shortdesc": "Nimitz HDRI Sky",
			"tree_item": "PauloFalcao/Image/Generator/Nimitz HDRI Sky",
			"type": "graph"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"value": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "HDRI",
						"name": "hdri",
						"shortdesc": "Image Input",
						"type": "rgb"
					}
				],
				"instance": "",
				"longdesc": "Type - Image operation\nCode - PauloFalcao\n\nSubtract a fixed RGB value from the image",
				"name": "HDRI Subtract",
				"outputs": [
					{
						"rgb": "$hdri($uv)-$value",
						"shortdesc": "Image Output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Value",
						"longdesc": "Value to be added or subtracted",
						"max": 32,
						"min": 0,
						"name": "value",
						"step": 0.1,
						"type": "float"
					}
				],
				"shortdesc": "HDRI Subtract"
			},
			"tree_item": "PauloFalcao/Image/Util/HDRI Subtract",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"Pow": 64,
				"Reflection": 0.2,
				"Shadow": 1,
				"Specular": 0,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1
			},
			"shader_model": {
				"code": "",
				"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D A",
						"name": "sdf_a",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.1,0.1)",
						"function": true,
						"label": "TEX3D A",
						"name": "tex3d_a",
						"shortdesc": "TEX3D A",
						"type": "tex3d"
					},
					{
						"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
						"function": true,
						"label": "SDF3D B",
						"name": "sdf_b",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
						"function": true,
						"label": "TEX3D B",
						"name": "tex3d_b",
						"shortdesc": "TEX3D B",
						"type": "tex3d"
					},
					{
						"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
				"name": "Ray Marching 360 HDRI Image",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Reflection",
						"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
						"max": 1,
						"min": 0,
						"name": "Reflection",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024,
						"min": 0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Render/Ray Marching 360HDRI",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABAlJREFUeJztm01IVFEUx3/mEwIHoohACTc11KIwRIgYjBa5MGhlLaKCwYW0KHER2aJFC6GPRYS0aTO4EUsojCAiYmjXooWKBdYmmGrRpxU5JebU4mZY3Pvkf3vOE26/1cy95//ucJg599xz7tS8hx84uA3kF73fAjwAal0C4BQwuOj9SeBipUKpVIpRpUcEcFQUvQaOiJpisUhX10lRtfxECy/uiMIJr+U+eKmWk1Vpf4C0Cd4BkW2w3+NBhUJBVDR7rpQsVgcAnI4RvbOMZbNZcrmcuPxOICNqkiW6HTN5WXxYuVwmkzkrqqaAC6ImOaL8Egb6xjUO3Bc11+VVkiL4IBi8A6ItgvFeryXyHpo+r5V8iB6IgtEvX0TFNuC4qNkHtIoaP6JaTG7/N7atboGxsTF1GWBU1HwGRkSNTgTmYKPm9m1tbaJiCjgjaq4BD0WNRvBBMHgHOFPh5afRQ5N8YLQ6oFAokM1mxUdNivY7gAFRcxDoFDXxOL8BuVyOcrksPm69Y/ytY3wt8Mox51o7g0m3kyE6FTNpDjbqYntE+xfAAVFzD7gkauxEg0uaqAcbgKei/VePNZIh+F0geAdE2nk/j8ntFQZF+zpgWNR0AN2ixhBdrFREyXHcm4cr2qtb10agwTE36xjfDMyI60BUKpUoFouibBST2yuotaWP6MfiCdTcIgJ+dWzUpoV6sAG4Kto/Bl6KmieSdfBBMHgHOKJZs/iYRkxur5AX7QF6Rft64ESshcMB/ZimhcIAJrdXOBcz98YytgloF9doATY4Z2OOwxn0SP8Kk9sr3BLtvwNDouYNcNM6s0Q94AJ60+IAem5/TLR/BtwQNXcxW+ufBB8Eg3dAFUpidaJ9k8caLR6a3YDsgD5M00JhGJPbqxqFLNAVM//JMrYL2O7zDWjFNC1suMpYDdgCkH2rW2BaHF+NXpes+P4ERjBNC4U+TG6vsF+0fwmclxT/EAN8OjbqwQZirjEmQvC7QPAOSGgbbMU0LRR6Mbm9whXRvgnoibVIMA/oxH3jy1XGasfk9jZc0d7VsfrmGF8DzDvmykknQuOYpoXCECa3V1CrUdO4vj3LkAn6dGzUgw3AI9He3oILPggG74AqHIY6RPsW3IHOhfqPB4BDQFUc0I1pWih0YXJ7G65oH+do25WvdUBjtW6IzKBfw5pET53V8tpsNa/IDKA2LdSDjUEr4QUfBIN3QIq3xOo9NGq5bOuSFik64AR6La8Hk9srHI6Zm0vTAWA6NraymK2Gt8A89oNS3O3m586ZlB0ApmNzV9RcwX29zoX9T10rwAFgL5hWh/+7QNofIB1qfr9agQ7YjWlaKBzC5PYK5nbqCnQAwHbAdXvN1XxpxF56m4tZp4afE5e0ibv6TscAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {
				"NStairs": 5,
				"Size": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D A",
						"name": "in1",
						"shortdesc": "SDF2D A",
						"type": "sdf2d"
					},
					{
						"default": "$uv.y",
						"label": "SDF2D B",
						"name": "in2",
						"shortdesc": "SDF2D B",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - Mercury\n\nMakes SDF2D stairs with 2 objects using Mercury fOpUnionStairs from https://mercury.sexy/hg_sdf/",
				"name": "Union Stairs",
				"outputs": [
					{
						"longdesc": "SDF2D stairs generated by the boolean operation",
						"sdf2d": "fOpUnionStairs($in1($uv), $in2($uv), $Size, $NStairs)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5,
						"label": "Size",
						"longdesc": "The size of the stairs",
						"max": 10,
						"min": 0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "NStairs",
						"longdesc": "The number of the stairs",
						"max": 10,
						"min": 0,
						"name": "NStairs",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Union Stairs"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/Union Stairs",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"NStairs": 6,
				"Size": 1
			},
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF3D A",
						"name": "in1",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "$uv.y",
						"label": "SDF3D B",
						"name": "in2",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - Mercury\n\nMakes SDF3D stairs with 2 objects using Mercury fOpUnionStairs from https://mercury.sexy/hg_sdf/",
				"name": "Union Stairs",
				"outputs": [
					{
						"sdf3d": "fOpUnionStairs($in1($uv), $in2($uv), $Size, $NStairs)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5,
						"label": "Size",
						"longdesc": "The size of the stairs",
						"max": 10,
						"min": 0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "NStairs",
						"longdesc": "The number of the stairs",
						"max": 10,
						"min": 0,
						"name": "NStairs",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Union Stairs"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Union Stairs",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"scale": 16,
				"scale_x": 1,
				"scale_y": 1,
				"scale_z": 1
			},
			"shader_model": {
				"code": "",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_F3 =  0.3333333;\nconst float XsX3zB_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_random3(s), x);\n\t d.y = dot(XsX3zB_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise using nikat code from https://www.shadertoy.com/view/XsX3zB",
				"name": "Simplex Noise",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "vec3(XsX3zB_simplex3d($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale))*0.5+0.5",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16,
						"min": 0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16,
						"min": 0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16,
						"min": 0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Simplex Noise"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/Simplex Noise",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"brightness": 0,
				"clamp": 1,
				"contrast": 2,
				"iterations": 5,
				"persistence": 0.5,
				"scale": 4,
				"scale_x": 1,
				"scale_y": 1,
				"scale_z": 1,
				"transx": 0,
				"transy": 0,
				"transz": 0
			},
			"shader_model": {
				"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [

				],
				"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
				"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB",
				"name": "Simplex Noise Octaves",
				"outputs": [
					{
						"shortdesc": "TEX3D output",
						"tex3d": "$clamp",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16,
						"min": 0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16,
						"min": 0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16,
						"min": 0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate X",
						"longdesc": "Noise X translate",
						"max": 100,
						"min": 0,
						"name": "transx",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Y",
						"longdesc": "Noise Y translate",
						"max": 100,
						"min": 0,
						"name": "transy",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Z",
						"longdesc": "Noise Z translate",
						"max": 100,
						"min": 0,
						"name": "transz",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 12,
						"label": "Iterations",
						"longdesc": "Noise iterations / octaves",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Persistence",
						"longdesc": "How higher octaves affect the output",
						"max": 1,
						"min": 0,
						"name": "persistence",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Brightness",
						"longdesc": "Overall brightness",
						"max": 1,
						"min": 0,
						"name": "brightness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Contrast",
						"longdesc": "Overall Contrast",
						"max": 1,
						"min": 0,
						"name": "contrast",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "Clamp",
						"longdesc": "Makes the output restricted between 0 and 1",
						"name": "clamp",
						"type": "enum",
						"values": [
							{
								"name": "false",
								"value": "$(name_uv)_out"
							},
							{
								"name": "true",
								"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
							}
						]
					}
				],
				"shortdesc": "Simplex Noise Octaves"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/Simplex Noise Octaves",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"MatCapMode": 0,
				"MatCapRef": 1,
				"Pow": 64,
				"Shadow": 1,
				"SkyColor": {
					"interpolation": 3,
					"points": [
						{
							"a": 1,
							"b": 0.979167,
							"g": 0.864656,
							"pos": 0,
							"r": 0.793357
						},
						{
							"a": 1,
							"b": 1,
							"g": 0.6984,
							"pos": 0.118182,
							"r": 0.510612
						},
						{
							"a": 1,
							"b": 0.557292,
							"g": 0.329521,
							"pos": 0.411598,
							"r": 0.287342
						},
						{
							"a": 1,
							"b": 0.416667,
							"g": 0.209503,
							"pos": 0.945455,
							"r": 0.17114
						}
					],
					"type": "Gradient"
				},
				"Specular": 1,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D A",
						"name": "sdf_a",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.1,0.1)",
						"function": true,
						"label": "TEX3D A",
						"name": "tex3d_a",
						"shortdesc": "TEX3D A",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.0,0.0,1.0)",
						"function": true,
						"label": "MatCap A",
						"longdesc": "MapCap image for object A\nMatCap (Material Capture, also known as LitSphere) are complete materials, including lighting and reflections\nDownload MapCaps from https://github.com/nidorx/matcaps",
						"name": "matcap_a",
						"shortdesc": "Image MapCap",
						"type": "rgb"
					},
					{
						"default": "$uv.y+1.0",
						"function": true,
						"label": "SDF3D B",
						"name": "sdf_b",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "(vec3(mod(floor($uv.x)+floor($uv.z),2.0))*0.25+0.5)",
						"function": true,
						"label": "TEX3D B",
						"name": "tex3d_b",
						"shortdesc": "TEX3D B",
						"type": "tex3d"
					}
				],
				"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tfloat fog=max(1.0-(d/50.0),0.0);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tfloat r=clamp(dot(reflect(rd,-n),light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\tif (dS.y<0.5){\n\t    \tvec3 mc=$matcap_a((n*mat3(cX,cY,ray)).xy*0.5+0.5);\n\t\t\tfloat mcf=$MatCapRef;\n\t\t\t$MatCapMode\n\t\t}\n\t} else {\n\t    color=$SkyColor(rd.y).xyz;\n\t}\n    return color*(fog)+$SkyColor(rd.y).xyz*(1.0-fog);\n}\n\n\n\n",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a matcap image for reflections",
				"name": "Ray Marching MatCap",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024,
						"min": 0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "MatCapRef",
						"longdesc": "MatCap image reflection strength",
						"max": 1,
						"min": 0,
						"name": "MatCapRef",
						"shortdesc": "MatCapRef",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "MatCapMode",
						"longdesc": "Matcap Mode",
						"name": "MatCapMode",
						"type": "enum",
						"values": [
							{
								"name": "None",
								"value": ""
							},
							{
								"name": "Direct",
								"value": "color=mc;"
							},
							{
								"name": "Mix",
								"value": "color=mix(color,mc,mcf);"
							},
							{
								"name": "Add",
								"value": "color+=mc*mcf;"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": {
							"interpolation": 3,
							"points": [
								{
									"a": 1,
									"b": 1,
									"g": 0.6984,
									"pos": 0.009091,
									"r": 0.510612
								},
								{
									"a": 1,
									"b": 0.317708,
									"g": 0.187858,
									"pos": 1,
									"r": 0.163812
								}
							],
							"type": "Gradient"
						},
						"label": "SkyColor",
						"longdesc": "A gradient that tries to simulate a sky",
						"name": "SkyColor",
						"type": "gradient"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Ray Marching MatCap"
			},
			"tree_item": "PauloFalcao/SDF3D/Render/Ray Marching MapCap",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Correction": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D A",
						"name": "in1",
						"shortdesc": "SDF2D A",
						"type": "sdf2d"
					},
					{
						"default": "$uv.y",
						"label": "SDF2D B",
						"name": "in2",
						"shortdesc": "SDF2D B",
						"type": "sdf2d"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"label": "SDF2D Custom Union",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "joinSDF2D",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nThe union between SDF2D A and SDF2D B is defined by a custom SDF2D",
				"name": "Custom Union",
				"outputs": [
					{
						"sdf2d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Custom Union"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/Custom Union",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAQhJREFUeJztkKFNgwEUBi80BEFq8CV4LKKKAVgAVHcAA2ELdsAjMJWVHQLxLwH2w5K3wAm+S575nrkcy7IELgL8uc/AT+B+7M+B78Db2G8CX4H92Al8BI6B67G/BA6Bh7HfBt4Dj2NfB14DT4Gz8bsL7AKXY78KbAObsZ8GzgOrnPDPaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsGsAWsGkAW8CmAWwBmwawBWwawBawaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsGsAWsGkAW8CmAWwBmwawBWwawBawaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsfgH3UU+JzCgMYwAAAABJRU5ErkJggg==",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
				"name": "Axis",
				"outputs": [
					{
						"sdf2d": "$mode",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Mode",
						"longdesc": "SDF2D made using the distance to axis X / Y at 0",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "$uv.x"
							},
							{
								"name": "Y",
								"value": "$uv.y"
							}
						]
					}
				],
				"shortdesc": "Distance to Axis"
			},
			"tree_item": "PauloFalcao/SDF2D/Generator/Axis",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "paulofalcao_sdf2d_input_3",
					"from_port": 0,
					"to": "sdsmoothboolean",
					"to_port": 0
				},
				{
					"from": "paulofalcao_sdf2d_input_4",
					"from_port": 0,
					"to": "sdsmoothboolean",
					"to_port": 1
				},
				{
					"from": "sdsmoothboolean",
					"from_port": 0,
					"to": "sdboolean_3",
					"to_port": 0
				},
				{
					"from": "sdcircle_2",
					"from_port": 0,
					"to": "sdboolean_3",
					"to_port": 1
				},
				{
					"from": "sdboolean_3",
					"from_port": 0,
					"to": "paulofalcao_sdf2d_operator_custom_union_3",
					"to_port": 2
				},
				{
					"from": "sdbox",
					"from_port": 0,
					"to": "paulofalcao_sdf2d_operator_custom_union_3",
					"to_port": 0
				},
				{
					"from": "sdbox_2",
					"from_port": 0,
					"to": "paulofalcao_sdf2d_operator_custom_union_3",
					"to_port": 1
				}
			],
			"icon_data": "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",
			"nodes": [
				{
					"name": "sdcircle_2",
					"node_position": {
						"x": -222.004883,
						"y": 128.290039
					},
					"parameters": {
						"cx": -0.35,
						"cy": -0.35,
						"r": 0.06
					},
					"type": "sdcircle"
				},
				{
					"name": "sdsmoothboolean",
					"node_position": {
						"x": -50.192383,
						"y": 19.727539
					},
					"parameters": {
						"k": 0.15,
						"op": 0
					},
					"type": "sdsmoothboolean"
				},
				{
					"name": "sdboolean_3",
					"node_position": {
						"x": 157.995117,
						"y": 56.290039
					},
					"parameters": {
						"op": 0
					},
					"type": "sdboolean"
				},
				{
					"name": "paulofalcao_sdf2d_input_4",
					"node_position": {
						"x": -221.004883,
						"y": 69.790039
					},
					"parameters": {
						"mode": 1
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdbox_2",
					"node_position": {
						"x": -221.004883,
						"y": -147.709961
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"h": 0.5,
						"w": 0.1
					},
					"type": "sdbox"
				},
				{
					"name": "paulofalcao_sdf2d_input_3",
					"node_position": {
						"x": -221.004883,
						"y": 9.290039
					},
					"parameters": {
						"mode": 0
					},
					"seed_value": 34667,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdbox",
					"node_position": {
						"x": -223.004883,
						"y": -277.709961
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"h": 0.1,
						"w": 0.5
					},
					"type": "sdbox"
				},
				{
					"name": "paulofalcao_sdf2d_operator_custom_union_2",
					"node_position": {
						"x": 194.22168,
						"y": -194.967773
					},
					"parameters": {
						"Correction": 0
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "$uv.x",
								"label": "SDF2D A",
								"name": "in1",
								"shortdesc": "SDF2D A",
								"type": "sdf2d"
							},
							{
								"default": "$uv.y",
								"label": "SDF2D B",
								"name": "in2",
								"shortdesc": "SDF2D B",
								"type": "sdf2d"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"label": "SDF2D Custom Union",
								"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
								"name": "joinSDF2D",
								"shortdesc": "SDF2D Custom Union",
								"type": "sdf2d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nThe union between SDF2D A and SDF2D B is defined by a custom SDF2D",
						"name": "Custom Union",
						"outputs": [
							{
								"sdf2d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10,
								"min": 0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Custom Union"
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/SDF2D/Operator/Custom Union Example"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror symmetry using the chosen axis",
				"name": "Axis Symmetry",
				"outputs": [
					{
						"sdf3d": "$in(vec3($mode))",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "Axis Symmetry"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAhhJREFUeJztmrFKw0AYx38txaE49hW6OLSDL6CzgoM+gBQEFzdxc+omPoAghD6ADgV1tS/g0sGlbyBOIg5Scg5JIW01McnlPu19fzhoc7n8jj+5S5vvXwMMdIA+sA00gXfgE7taA9aBD+AROAfGcZ8cvwYdA9fAJvAMDIER8Gp5Ai1gC9gDNoAn4CjuE+UPDUwNPBhoG6Di1o5ZUxOxpfm8GRg7gicnMTYRW5Zfj9bcEJh8c9tUpUnMbCLNb0QbzmjhhB2CYN8qste7Be4TR0bASeKzGP/FQHfuFgmCwIRhaLUFQbBwG3ZNxJblN9JcO6vXrbh/EYaFxrngpxoAcFkSflpyfNV8Oxb/Y3lvQOYSSOrwl+cNck9Djp/LAICrjP7jvBcU5uc2AODuh+O7RS4mzC9kAMDBwvebohcS5nu/CaoB0hOQVuE9wPWar4pfyABXu70Lfm4Dqn7Ou+bnMmBgGZ5XVfC93wS9NyBzCZT9P19WVfNTDSj6JseWXPAbUcWkNXcweoFoV8vXbBGxZ5/F+FMDfYfv5GetHxcnpPmeF0aQL03J8r0vjtYA43N53PsfQt4vAaQ3IXm++GNI8wGifM0HSNfnpfmaD8garPmAFZf3Bmg+IO8kNB+A5gMAzQesjNQA6QlIS/MBRQZpPkBQmg+wLO83Qe8N0HxAWqfmAyxK8wFLTfMB5i8URpAvTWk+AM0HCPK/ANfkGNbiPqw8AAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D",
						"name": "in",
						"shortdesc": "SDF2D",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nTransforms a SDF2D making a mirror symmetry using the chosen axis",
				"name": "Axis Symmetry",
				"outputs": [
					{
						"sdf2d": "$in($mode)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XY",
								"value": "abs($uv.xy-vec2(0.5))+vec2(0.5)"
							},
							{
								"name": "X",
								"value": "vec2(abs($uv.x-0.5)+0.5,$uv.y)"
							},
							{
								"name": "Y",
								"value": "vec2($uv.x,abs($uv.y-0.5)+0.5)"
							}
						]
					}
				],
				"shortdesc": "Axis Symmetry"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAEctJREFUeJylm2uQHNV1gL/b3bOr3QVWvPRAErOSLIIs7UjiYUFsqISKY+xKICb8IH9SVKVcOIVjcDmpJNT0Ys+soFKRqxLjVDkFOAlVKadiI8qJfwRTJg4PI8BANHos6DkjIfQWj9Vrd6b75Me9t/t2T8/uyjmrefW999zzPueebqkHf+82UUrheYrA84jimFiEKI6JYiGKYlCgULSjCIUilphOpOcpwPc8lFIARHHMVLtDFMcAiEAsMaDwPT0HII4FpUAATymU3oSS71MKfHxPISJ4nofveSBCEPj0BT4i6LUCsQiIIIYO3/eI45jpdkQ7ihARlFLEIoiIoVGYmm4TA4HveYagmDPTbdpRTLsT0e5EdKKI6U6UEAkQRTGCJAyA0mOGN09pQSEgCL7yiBGiWEDA9xUeCtGbE4vgK0VsxhAQEQLfoy8I6C8FRkAQA+0oxkMz7gpdKUXU6UAnpcPzFCKKKI4RAU95KAW+Z/kRgpOTZxHRmp7uRInmPKMt3/OY7nRQRhN+yTc6VIkW2p1OsqkAgefheYpSEKDM9cD38TxlNIshKmVCHOHEIvi+R1/gJ+MohRLR1hXFer2hrxT4iMT4nocgmqY4wvc8As/D6AnMvhjhe0oRtDsRiBBr60gGlNKS60QxJd9HRIiNpDVYk/QY6As0gY6llALNsKc8QJuyZyWmFNOdDlGscVo3UUbDgtCOIqamO9o1fY/A91GGvsBPXQ6BSGKUscTImHng+wS+hwAlz8czbqAiZSwGIhGC81PTiEFkcd7zl08lvmpck3p9nLGxscTUjUD1W+IB+r1erxOGYRI77DUL6RjU6vXE7KthFcTOFYuaMBzLrLegZ6R72P3CsZDx+nhmbjgW8uJ3v2ZcB/qCgJKvCO75q6dQJgipxFZSqNfrhGMh3/rWoynDCLWaJjIMQxCFKBiv1/IUIkoYr9cTvEqBUop6vYZRFihtOY9t2qTjjYlLogOJps/EmYRZhGo4lijHCrQahgnD9Vo9Q8sdX/+eod8qqUqwaXxTgnhsLEx0myD1VCKgcUcLvjEvz/Op1+uOvswG43VHMyojVuunlkFEE24VYLWtgOpYCKIZUijq43osDMcy2k0E4cDY2JhWlsEn1s8VhGGVer2OWnXTXaKUIgzD1Mwckw6NRFMT1MRXq9Xke61eSyRrzduVvHUJy2AaRxzo4UZWSPbT0mHpygrc0GwEYvFYy7U4NPNGwc/85E1JqDdSdH3UrNWbj9cJqyEikmrPEY71YeudGRMEbWHGGrS2Uh9wNaxwTV5bR71WN3lcUtdBqIZhxsVcgYbJWEYfWhlWXM/85E0pCjCpD6UbatMVqtVqNig542E1LAxYoCXvmri7lxvIxuvjWKu0UdYWTa5F2T1d78sGxMwX6vU6Y9Z1TBRX1918d0J+teoi1czWaq52rTAkExAz/mxBGUKrYRKtM9ZRrycRXgc5vWh8vG6sRBM+FoYJE1ab7t7VauiMGTyZ9bkM4mSxMAxRn7rp90UHoWriJ6npuozqOfVaLcOwiBCLLmryAkhASGOMcodTIpMAaIOnmRdWnXRqrCMZC8PsnmYz7cbVhJBEKI5gEjL/+bmtktGq0Y4NFon5O37vMm/dIrUOi6OmU1JOKG60TkzfSW8zWYC1mryErXCLrDCpIxzBZtzkB1tek3zx4Zp68u74eV4IqWVk3SF05qcEqe7PHEwNDvC3Fy5of80TTJr3M9YxE5g5bp2TZKZ/2rJVskwV+XnKSK1W64r2qevUshE6HxsyjLtaFGeKNtW6m4ptZde13uGwSMAO9tDEN1tHmAHU8vVfkrxWbXqx35Ny1RGQrgNS4pOMYRB/7dg7zF+4voDMuWgLcKJ1Xmjj4zrgJbVAzkrS1Ke0GxuaLL01JyiqkXVfFNe/3QWJVhMEqYtYAWVcx2H0+0OXcPjsGXffAsivS4XjifBtT2UKnmIrUNk0Ct1p1gmILtTrddTIujulWu2uuBLypPdnHpneTBN87k/vTqYsWL68iHtarRblcjn5ffzAgcz45kU3ZASQDWSGIScjuAG2NjRI++y5FFneSswX9VTlTskyZEzayfFuMZT6f5Zxu9L6mv83D3Hs4MEMg3nmi8DOb7VaXP7dHyf0uO6jlKlYx0LWbN7MrgsXnNHsN5d5mw4dTKgnR7+Q02U2sGVM31x/bt/L7Fj5uaxr5Ob/Rd8pzh46VMjkTOAK7M/PDScWYAnOnlcUXz3yFld6Ht6iDdkYk7OSXtknsH0yZ10CChDzpoA28J/7XgJ0brVFk+QKKSuts3/2h4WM5SHvCi7kg5syrSwhoxbio++wrHwLh6em9BoxtCMoUYjSnyg9IEqvDRIM4n6kiK0Q/qfdZqq1NUNcegx2YoMDMzHtMu9+uuvGxsacRJme9YHCA9AhQ9/oyC3sujCdjWUOHneVbph1ZSblvOC5KC5kXtk/pRgfH09aacpTjG8ap9Vqdb2KmC8SiiY0pcOlSHd7tCnPK1i/vbmV6Ojbht1Us2LONyIxEgsSC4HK2H628hOEn+19maFCMs0yBSJOvS2pcHoxZzVcLpd7CuGciNP80OVw1ylTYLCot2AgOvoOy5d/ltb5NBsoAd3MFy3DJytfkIypGMZPtad5q/V6F9IpoC3Cjk/dZiK+Uz4boiycfPDLmbVzcQkLbxw4wLOLbyzoLdYyZ45Hjr7dE4fv7Ldhch67SwMc6z/N7mYzoSe4OZriqBdwCD+Z/PMoIipgHmAAHQwzci8scrIp7WLiAcBly5Yx9oht0RlQaSusV88Bsoxb+I8TuziRs5ZWq0XwypFG5mIEsGAB/sgIkZGUC0lrm1wnyOpIpdcfLxUHOchaQ5Eb/OrAAZbl3Shfbjq/3y/A68IxpfAKrqvvXXFFRn/LymX+9fz5zKRmq8Uyw7QCJkXYuer2TPGUpw+BBz74VSExLvSKA89euMAHSz/DXXfdRafT0a+owwsvvJC46VdO75wVv4UTcVwogGAkJ7EYzXAeDhnzGSmXGUZbgu3YusWTW6jMBK6m8lprtVosK5c5ONVhy5YtVCoVGo1tmRgjyEVVmSPlciFJ6qcbNuQVx7cnJpI7PEWIAD5ff6o7z2ZK5PQQVbWHkVywtSsfffRROu1cZFFQqVS61jW2NbCV52PznVo/B3khnIxj8soGtxBK92XY85gU6ZoMqXU8+cef5yv/8kKyBmzlZQnWR9GMhSTZR1dkIoqdO3bw6dWfBoRGYzuVymiKsYCESqWSCvDg1u4JBlzXWrpgHUsBpuCj/tPdAsib/Erf5387nUKJFc23nI07PXhIe4uJBeRg27ZtTLw7QaORBuJGo8Go1XwecgKZEuHowYPFc4FlC9aTr08vn7oSgM7QEDv2vaxdIM/QwLKNXTs/P9XMXHm9r5z06+0cu1EcxUTm3rybw7/xjYeJRRgcHERioVar4caPPLGVUVcQ6cg2KzBz6YGPJ7KM5xoxXZbkeporgIFrNxYvyDH4s6kmv1t/CoGMAAA6nQ7T7XYOT8pkpTJKY/t2FPohCfeoXRRLAOMW2jryAcvzPfpKfVQHBlAXzmfG5gLqpxs2yHFZ3MVkfqf89eRKNb111m5P0+lEyaSU6QpZTZOJ6l3Hbmdvy3yXAETfRB3v758bpxlwepA/WP8l6RqYK/O5uY9k6gfRvlxgBe4VN6q7uFPzz9UYogXx2MAAXWc71Z19exqCGUgE0G1+kpdD8fUec364alVB2stOdi1ACwJGK6PFCjDX7tuzp4AtlfuYpQhxeAiK2mFFxBZengH5fbv3JIz/26pVBbiFUqmPlStXsmXLs5RKAffffz9BqUTJvPqS733c9MQTvPXxRz1YN5aQfEhWCLmy2RWRenrdnZInbI7xw04nIyBjyy7SH+55Cb74JxkqRGDnzh2USiUydz7BufGZvsmD9xAAv7n6Dl768MMuMrr6gWoulgBB0U2Q3rpWheMiUvj96OTH/PfRbZk1IkKj0UApRRAEdlEGn9thzlPyy4kXCYBbV36Wl52ubxoNrN+ZNlgX7Vl2AjcCu8hyWLPIc4zmf4sIb0632Zcwr9du25YWPJ5S2Ef0eoG951Cthl3kv7bvVQLgxmU38kY7Llgt5p+9JebSm0ZLD/vQgSHc3ui01+13yb105M7+xtwpfvHAL9mXL1Mlre09z6NUKhU/KZJhoCh4ZuGtQ29ROvoOoyrqiSevLItU4XaFCxfOQJxLp/l6ePJj3jvZfURdsGIFx8zku+++i+effz7xz26nSrNR6gIzSyEGdh1psNjz6L9qNU2vrwfN3Q4RZCZ0CVxcenLIsrB1appzBcyDPjsMXCesXbOWtWvXsvEzG5mcnGTz5s3EEuMpD8/3kp596D6oYbabPZzB8TiG4zu54Td+m72nT/CJX8owmwUtkCCr6XTDIo0UIYnjmF8cfKMnUed83Wq7ZeNGRkaWA9A62GLvnr2sXn09jUaDCPAij3vvvZfBwSGOHTvK8PB85s3rn3NGOufEkw/aLQYvhUr/CK/ajCHojqh70lRCcG3fadZesoqtH57iVJRLgrOkxoOTn7Dv1K5CgnylmHSIGhkZAYT9+/eza2KCM5OTgI4L2xoN1qxdy8TEuwwNDTI4OMTw8GXMn385l18+n+H581myfDknnHuH5woCaHlkJPN771SThYOwylvCK2fOOELQwbEf4wI7zuzhkhKsUQEn5VJ2diThvrgmEl6darM7x/w1IvTZR2ULhLJ7zx4mJiY4f06nr/wxuDI6ytmzZzl79iwnThxnYGCAyy67jOHhYZYAV69YkcHXcnqWeeZd2BMfZuEgjHSu4PVpHSw/mtfPjqkm6r9uuCHh0SJc4PssX7yO19pOZDWMd6I2L7//NunWs8NIucyVdz/A7t276XQ6GcZT1KmoK04/wKrh4cPF7e9Wszkj83k43GqxdcGC5HdXRwjgeBRx/P238YDfWfk5Xpj8BAFa586wf/AMlMu4Wxb1EPOwa9euLsYtqJyLNRoNKpXRHmW5Blf7FyOEFeUyW51Dm/rHXFe4FyxZdTvPfPzunDax0Gy1kq7Se80mBxeuMyP5Iqpotb44ak6FD3+gLaBV0Kp3YTZBHGo2eWPhwuR3MNsiu+Hb7/0CFi2aEXkeRsrlxDpWlMscvNCdUbp5z17ZblpkszGep7cXTx860m61WgSzScyOXy3Cjtz9gtnAdY1DrRYq7i5Zi3J0vGhd5vctzd7Nz17Qyy2akY5rtmFaGAOKYOAiCcjHhbkUMgkYJSWl8ys/hlnODUWQt4ZWs0l7yZJMy3zOWGeu2+cGlV7d3hyMVkYZrYwi5m/D8uX/r33z7lMul5ObKhcl1rlE+9nmVSqVnoJIxpIDGUlVejGpzoXyyEiy9rocjnK5fHEC+HXajxaG1q7N/M4LIZ/77RlVEP7hmg08d+sfXLQQ8vPbBXPmHANazSa3rVjB3qjXsVNDkfYH16wpnNvTJXJ58aqrr6ZcLnNk4+OU/+6vE3p6QS9BnS4IwnMSgN3swqFDNNtZOfa6e2ShF/NuUZQXRHBiB+2rtcXMmzePlStWsGjRIgT44OHH+dFXv8xD119fKISZrGSv+e99LmRK4V5gNxq89lqeeO+9nvNcYTRbLfrv+CMWntjRVeUVgSuEU3FM+yotuPXr17Ny5UrdO8zBNX//yKx534VnC9K412o2sa8icK9fehGZoP+O+8D8r1ALvZi3Y3bcMr9q1SqWLl1ayLwAhx967NcOjhYyLtCVLnLIj80Q3V3tH1lxa6agm4nxPDQaDRb81moWX7OYkZERhi4ZKjyM953UJ9Gv798PwDdnOQ8cabXAOQRZmDUGdCGdmCicl2y04tbke6PR4GiPLtFMsH3Hdm6//TauuPKK7kGBvlO7up4R+k4c880Z3KHdo7/nyRP/Tm3BaNfAxZiW1f7zZ4YAyZjz8auKg2BPMO3yp59+umf1+MSmTYXXvxPHHIyiQnc+WZABDlx7c2oBVghjx7fPyHw/+lG5PPz8wjCeZ1PkXBtZ3RAEAYFpo6UPYeke4XhdP5a7AJjveXxUwNSPlAJjDS4f73Y6HDVPqx249ubk+v8BXJMFGOXxY6kAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 5
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from MaterialMaker\n\nvec3 circle_repeat_transform_X(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.y, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Y(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.z*s;\n\trv.y = p.y;\n\trv.z = -p.x*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Z(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.y);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c-distance;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - Paulo Falcao, RodZilla\n\nRepeats its input shape around a axis",
				"name": "Polar Repeat",
				"outputs": [
					{
						"sdf3d": "$in(circle_repeat_transform_$Axis($uv, $Repetitions, $Distance))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 4,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the circle",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Polar Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"RepX": 3,
				"RepY": 3,
				"X": 0.1,
				"Y": 0.1
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec2 opRepLim2D(vec2 p,vec2 c,vec2 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor(p/c+0.5),vec2(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - IQ\n\nRepeats its input shape",
				"name": "Repeat",
				"outputs": [
					{
						"sdf2d": "$in(opRepLim2D($uv-vec2(0.5),vec2($X,$Y)*2.0,vec2($RepX-1.0,$RepY-1.0))+vec2(0.5))",
						"shortdesc": "SDF2D Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Repeat"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Correction": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D A",
						"name": "in1",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "0.0",
						"label": "SDF3D B",
						"name": "in2",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"label": "SDF2D Custom Union",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "joinSDF2D",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThe union between SDF3D A and SDF3D B is defined by a custom SDF2D",
				"name": "Custom Union",
				"outputs": [
					{
						"sdf3d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Custom Union",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdcircle",
					"from_port": 0,
					"to": "sdboolean",
					"to_port": 1
				},
				{
					"from": "paulofalcao_sdf2d_input",
					"from_port": 0,
					"to": "sdboolean_2",
					"to_port": 0
				},
				{
					"from": "paulofalcao_sdf2d_input_2",
					"from_port": 0,
					"to": "sdboolean_2",
					"to_port": 1
				},
				{
					"from": "sdboolean_2",
					"from_port": 0,
					"to": "sdboolean",
					"to_port": 0
				},
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "sdf3d_smoothboolean_2",
					"to_port": 0
				},
				{
					"from": "sdf3d_box_2",
					"from_port": 0,
					"to": "sdf3d_smoothboolean_2",
					"to_port": 1
				},
				{
					"from": "sdboolean",
					"from_port": 0,
					"to": "sdf3d_smoothboolean_2",
					"to_port": 2
				},
				{
					"from": "sdf3d_smoothboolean_2",
					"from_port": 0,
					"to": "paulofalcao_raymarching_360HDRImage_4",
					"to_port": 0
				}
			],
			"icon_data": "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",
			"nodes": [
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -270.503448,
						"y": -252.542542
					},
					"parameters": {
						"r": 0.01,
						"sx": 2.5,
						"sy": 0.1,
						"sz": 2.5
					},
					"type": "sdf3d_box"
				},
				{
					"name": "paulofalcao_sdf2d_input_2",
					"node_position": {
						"x": -279.503448,
						"y": 64.957458
					},
					"parameters": {
						"mode": 1
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdboolean_2",
					"node_position": {
						"x": -119.503448,
						"y": 24.457458
					},
					"parameters": {
						"op": 0
					},
					"type": "sdboolean"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -277.503448,
						"y": -125.542542
					},
					"parameters": {
						"r": 0.01,
						"sx": 0.07,
						"sy": 1,
						"sz": 0.5
					},
					"type": "sdf3d_box"
				},
				{
					"name": "paulofalcao_sdf2d_input",
					"node_position": {
						"x": -278.503448,
						"y": 11.457458
					},
					"parameters": {
						"mode": 0
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdcircle",
					"node_position": {
						"x": -278.503448,
						"y": 124.457458
					},
					"parameters": {
						"cx": -0.3,
						"cy": -0.3,
						"r": 0.18
					},
					"type": "sdcircle"
				},
				{
					"name": "sdboolean",
					"node_position": {
						"x": 66.496552,
						"y": 45.457458
					},
					"parameters": {
						"op": 0
					},
					"type": "sdboolean"
				},
				{
					"name": "sdf3d_smoothboolean_2",
					"node_position": {
						"x": 23.527435,
						"y": -194.659851
					},
					"parameters": {
						"Correction": 0
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "SDF3D A",
								"name": "in1",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "0.0",
								"label": "SDF3D B",
								"name": "in2",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"label": "SDF2D Custom Union",
								"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
								"name": "joinSDF2D",
								"shortdesc": "SDF2D Custom Union",
								"type": "sdf2d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThe union between SDF3D A and SDF3D B is defined by a custom SDF2D",
						"name": "Custom Union",
						"outputs": [
							{
								"sdf3d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10,
								"min": 0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "paulofalcao_raymarching_360HDRImage_4",
					"node_position": {
						"x": 461.496552,
						"y": -239.542542
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1,
						"CamD": 2.095,
						"CamX": 2.5,
						"CamY": 2,
						"CamZ": 3,
						"CamZoom": 1,
						"LookAtX": 0,
						"LookAtY": 0.224,
						"LookAtZ": 0,
						"Pow": 64,
						"Reflection": 0.2,
						"Shadow": 1,
						"Specular": 0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1
					},
					"shader_model": {
						"code": "",
						"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D A",
								"name": "sdf_a",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.1,0.1)",
								"function": true,
								"label": "TEX3D A",
								"name": "tex3d_a",
								"shortdesc": "TEX3D A",
								"type": "tex3d"
							},
							{
								"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
								"function": true,
								"label": "SDF3D B",
								"name": "sdf_b",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
								"function": true,
								"label": "TEX3D B",
								"name": "tex3d_b",
								"shortdesc": "TEX3D B",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "Ray Marching 360 HDRI Image",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1,
								"min": 0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024,
								"min": 0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/SDF3D/Operator/Custom Union Example"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"mode": 0,
				"smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror smooth symmetry using the chosen axis",
				"name": "Smooth Axis Symmetry",
				"outputs": [
					{
						"sdf3d": "$in(vec3($mode))",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
							},
							{
								"name": "XY",
								"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
							},
							{
								"name": "XZ",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
							},
							{
								"name": "X",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"max": 1,
						"min": 0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Axis Symmetry"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Correction": 0,
				"Distort": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nfloat distort_$name(vec3 uv){\n\tvec3 s=$tex3d(vec4(uv,0.0));\n\treturn $sdf(uv+s*$Distort);\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nDisplace a 3DSDF based on a TEX3D",
				"name": "Displace",
				"outputs": [
					{
						"sdf3d": "distort_$name($uv)/(1.0+$Distort*$Correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.1,
						"label": "Displace",
						"longdesc": "Displace amount",
						"max": 1,
						"min": 0,
						"name": "Distort",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Displace",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Correction": 0,
				"Distort": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nfloat distortByNormal_$name(vec3 uv){\n\tvec3 n=normal_$name(uv);\n\tvec3 s=$tex3d(vec4(uv,0.0));\n\treturn $sdf(uv+(n*(s-0.5)*$Distort));\n}\n",
				"longdesc": "Displace a SDF3D based on a TEX3D in the SDF3D Normal direction",
				"name": "Displace by Normal",
				"outputs": [
					{
						"sdf3d": "distortByNormal_$name($uv)/(1.0+$Distort*$Correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.1,
						"label": "Displace",
						"longdesc": "Displace amount",
						"max": 1,
						"min": 0,
						"name": "Distort",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Displace by Normal"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Displace by Normal",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Correction": 0,
				"Distort": 0
			},
			"shader_model": {
				"code": "vec4 $(name_uv)_d = distortHeighByNormal_$name($uv.xyz);\n$(name_uv)_d.w = $(name_uv)_d.w/(1.0+$Distort*$Correction);",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D Displace",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.01,-0.01,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\n//By pauloFalcao\nvec4 distortHeighByNormal_$name(vec3 uv){\n    float d=$sdf(uv);\n\tvec3 n=normal_$name(uv);\n\tvec3 s=$tex3d(vec4(uv-d*n,0.0));\n    return vec4(s,$sdf(uv+n*(s-1.0)*$Distort));\n}",
				"longdesc": "Displace the height of a 3DSDF based on a TEX3D",
				"name": "Displace Height by Normal",
				"outputs": [
					{
						"sdf3d": "$(name_uv)_d.w",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					},
					{
						"longdesc": "TEX3D at the original SDF3D surface before the displace",
						"shortdesc": "TEX3D Output",
						"tex3d": "$(name_uv)_d.xyz",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.1,
						"label": "Displace",
						"max": 1,
						"min": 0,
						"name": "Distort",
						"shortdesc": "Displace amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 10,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 50,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Displace Height by Normal"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Displace Height by Normal",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 6,
				"Roundness": 0,
				"Smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "vec3 smoothRot_X(vec3 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p.yz);\n  float x=asin(sin(atan(p.y,p.z)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec3(p.x,x/s,y/s-distance);\n}\n\nvec3 smoothRot_Y(vec3 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p.xz);\n  float x=asin(sin(atan(p.x,p.z)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec3(x/s,p.y,y/s-distance);\n}\n\nvec3 smoothRot_Z(vec3 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p.xy);\n  float x=asin(sin(atan(p.x,p.y)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec3(x/s,y/s-distance,p.z);\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThis is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions.\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh",
				"name": "Smooth Polar Repeat",
				"outputs": [
					{
						"sdf3d": "$in(smoothRot_$Axis($uv,$Repetitions,$Smooth,1.0-$Roundness, $Distance))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Polar repetition axis, objects will be repeated around this axis.",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 6,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1,
						"min": 0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Roundness",
						"longdesc": "This is a correction to the smoothness.\n\n0 (default) - With correction, this way a flat object will no smoothess will be flat, the correction is not perfect with few repetions it's still possible to notice some distortion. \n\n1 - Without correction, using this setting a flat object will be rounded, even with smoothness at zero.",
						"max": 1,
						"min": 0,
						"name": "Roundness",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Polar Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nCoordinates as colors",
				"name": "Axis",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$uv.xyz",
						"type": "tex3d"
					}
				],
				"parameters": [

				],
				"shortdesc": "Axis"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/Axis",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABRNJREFUeJztWr9P8lwYPS2lFMTww93/wUEJMUbjYCIkxsDCYOLE5GRCwsbioonGCScX42BMjJMBJv1j2AiDYCiBlvYbvtx+pbRwW25t3u/lJE/qW25Pn3Puc2/vbV8OgI6/GHzQCQSNlQFBJxA0VgYEnUDQWBkQdAJBY2UAa8JsNou9vT3WtMjn8zg+PmbOK7AiymQyCIfDCIVC4Hn2hZVMJqGqKk5PTzEej9FoNJjwMsk0m81CFEUIgmAEayQSCSSTSWxsbCCdTqNQKDDh5eDTXiCXy4HjOIRCIYiiiHA4DEEQ8Pz8PPe6arUKjuPAcZxxTtd1XF9f+5EmuyFgBc/zEEUR7+/vrq67ubmZ+vfV1RXLtGbgWwX8KfDlMVgqlZhz1ut15pwA4yFQKBQgSRJEUWRJCwCQJAmPj4/QdR3lcpkZr6sKyGazjr8Vi0VEo1FEIhFIkrR0YlZIkmTE09OTY7tKpeKKl9qATCbj+HgrFouQJMkQH4lEXCVBA8JN4uXlxbZdKpXC5eUlNS+1AWSRYwUp+0gkMhWsYeYmJry9vc20i8fjSKfT1LxUBmSzWYRCIVsDyJgnyYmi6MscQLitRlgRi8Wwvr6OWq1GxUtlgCAI4Hl+ZolbKpWMpIhwvwyw3of83Wq1ptpFo1Gsra0hkUhQ8bpeB+RyOfA8j4+Pj7nt7u7uplaA5EiCVJQ5iMkcxxlHsiLc3d2de79mswlFUXBycuJGjvvHIMdxVD1MxJMwiycGkCPP81MGmMVbl8VOiEQinjZhrq8IhUJUy1uz+HlBqmNRLMLh4aGnoee6AmhvYhZGMwTMVWAdAjQV4Ca3qTzdXkDTG6QdEet1CJAjLX7FANq9vlUwMYIIN1eBnQFeKsDLewjfdoOvr69LTYJWAzY3N/1I07/3AXYVQPsY9DoEPOXpF7GdQLNwqwnW3vcyBLzAVwPsyn1e71sXQ6QK/ITvFUCELYr/pQFm8ebSXmSA13WAF/zKHGAn2jre502Cf6QB88TZVUJQk6DrAVatVumIbQQtEzTodDpu5XjbDdK2s5azUzj97rYCfmU36CYZ80xuZ4jT7162w17h2xxgFWAn2Ol36zk/4ekhS/O5yirGLpx629rzNCb0ej0vUtwboOv0eyc7IXaiFomnMUDXdVe5GfcGxW4wn88jmUwikUjg4eHBOF+v141X1Oa3taIo4uDgwHUy80DEEaG6rkPTNEwmE0SjUaNdu92GLMvo9/vY3t5eyEtVAZqmQVVVTCaTqfMXFxczznvpBVpY76Pr+pR4AFBVFYqiQJZlKk4qA5rNJkajEVRVtU3KHNZEWcGpAqxQVRWj0Qj7+/tUvNRzwHg8xmg0mjlfLpehaRo0TZsxgiWswjVNm+l9ABiNRvj5+aHmpTag0Wg4ltX5+bmRFDGCNczCNU1z/AAry7Kr+YfpK7G3tzfjU9nR0RErWgD/ViAxwa7nl4HOOlqtFnPO4XDInBOAvvovMn4RN5tNfH5+Ls3T6/Xw/f3NICN7+LYXUBQFPM/j6+vL+KIrCAK2trbmXtfpdKZ2dYqi+Lq2YDIEKpUKUqkU4vE4YrEYotEozs7OGKT3H9rtNlRVNZ7zsixjZ2dnaV4mQ+D29hbdbhf9fh+DwQDD4ZAF7RRkWcZgMEC/30e322UiHmA4BO7v7wEAtVptZsnMAv1+H7IsU6/waLF6CgSdQNBYGRB0AkFjZUDQCQSNlQFBJxA0/noD/gFzEtfh4gFJUgAAAABJRU5ErkJggg==",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "TEX3D",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nTransforms a TEX3D making a mirror symmetry using the chosen axis",
				"name": "Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "SDF3D output",
						"tex3d": "$in(vec3($mode))",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "Axis Symmetry"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Scale": 1
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec3(0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nScales the TEX3D texture",
				"name": "Scale",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$in($uv*$Scale)",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Scale",
						"longdesc": "Scale factor",
						"max": 10,
						"min": 0,
						"name": "Scale",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Scale"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/Scale",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"brightness": 0,
				"clamp": 0,
				"contrast": 1
			},
			"shader_model": {
				"code": "vec3 $(name_uv)_bc = vec3($in($uv)*$contrast+vec3($brightness)+0.5-$contrast*0.5);",
				"global": "",
				"inputs": [
					{
						"default": "vec3(0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nChanges TEX3D brightness and contrast",
				"name": "Brightness and Contrast",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$clamp",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Brightness",
						"longdesc": "Brightness amount",
						"max": 1,
						"min": -1,
						"name": "brightness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Contrast",
						"longdesc": "Contrast amount",
						"max": 2,
						"min": 0,
						"name": "contrast",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "Clamp",
						"longdesc": "Clamp values between 0 and 1",
						"name": "clamp",
						"type": "enum",
						"values": [
							{
								"name": "true",
								"value": "clamp($(name_uv)_bc,vec3(0),vec3(1))"
							},
							{
								"name": "false",
								"value": "$(name_uv)_bc"
							}
						]
					}
				]
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/Brightness and Contrast",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAA+BJREFUeJztWttuozAQHcDY/aAIRPrQVqpUqb/cx/5NqjwhIe7sw2roxNjGyTZmss2RLAgQ7HPmeDyQRAAwwS9GvPUAtsZdgK0HsDXuAmw9gK3x6wUQITrZ7/eQJAnEcQxRFM1bbCZ8fHyEGNr1BCiKApIkmYlT0rgPAE4RQuDHBSiKAoQQM2naaNSpGPr5kPgxAfI8hzRNTyJuIy+EACHEiUOSJFmdFtfAjwiAUdctT+d8HMeQpulMnl5vyg+h8E8C7HY7UEotiFDySZKAlHImjy4xCbDFNLhYgCzLZlI28lLKmTw2Gn3MFabvhsJFAmRZBlJKa+SFEDN5kwAuB7AXYLfbndhYj2CapqCUMpLXHXCTAiilZgI6eSklPDw8OKNvSoL6fdgKQIsbPXsrpWby6IA0TRcJ8GanQJ7n1oSH5JVSC/tLKU/I36wDcN7r5NH2SN42/89xQByHe0bzEsBU12PCo7an5F0JcC0JshPAVNsLIWbCOvH/ygFFURjrehNhnbwpAdocwDYHuCo8m9UpedcSaFtOWTlAjwzW9pSgS4g1AZA8SwH2+/3C/jaiaHPTZ58pQF3AZgro0cfMbyNv2rpqAPZTQH+R4Yq0jTxt9BnCVQixEUB/feUi59N08jfhAHSBaeC2Y/ScSwxXMRQKVgEeHx+N7/HWiJqKHGz0OPtCiL6awuXPNnhbcznEtQqwEgCzv2mwPs33WnYCIOhb3bWBu8hTe6/dJ2QdYJX68/Pz+yJDlqZkTOfXXGC7D+6HgpfXbL/k+DaXeFsnwbMEoBXhtVsoePdk+l1v7Xc+076pmc6HgrOncRwXx1zE9WM256ydDylABEz/Jte27cmKEEURTNPfoU7TBNM0wTiOMI4jDMMAwzBA13XQdR00TQNVVUFZlpDnubOfIH+QuAR6IUa3+jX0OBWn67rVflgLgFudIAUSpg0dUdf1aj+s/yPkWxBR8jgl2raF19fX1e+yFsAUbbpvIt73PXRdB1VVefXBdgpQ2IhjEqTJsO97aJoGnp6evO7NVgA9+vS4jTiuAGVZevdzUwKYIk/Jt20LVVXB8/Ozdz+sBZimabECUPJInJLPsuysftgKgFWoXgDRyOuFz+FwOLsftgIMwwAA3wLYsj2SPx6P8Pb2dnY/bAXo+362vz739Tl/PB7h5eXlon5YC4DQKzxK/nA4XBR5BFsBsI6n0e/7fl7nL0l4JrAVoGkaAIBF5HGdP2epc4GtAHVdn2R8tLxvhecLtgKUZTk/0tZ17fVgcwnYCvD19QXv7+9X74ftG6FQYP04HAJ3AbYewNa4C7D1ALbGrxfgD7hpBE5IUx6AAAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"x": 0,
				"y": 0,
				"z": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nTranslates the input TEX3D",
				"name": "Translate",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$in($uv-vec4($x, $y, $z,0.0))",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 0,
						"label": "X",
						"max": 1,
						"min": -1,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "P1.y",
						"default": 0,
						"label": "Y",
						"max": 1,
						"min": -1,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"max": 1,
						"min": -1,
						"name": "z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Translate"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/Translate",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"color": {
					"a": 1,
					"b": 0,
					"g": 0,
					"r": 1,
					"type": "Color"
				}
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
				"name": "Color",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$color.xyz",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1
						},
						"label": "Color",
						"name": "color",
						"type": "color"
					}
				],
				"shortdesc": "Color"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/Color",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"angle": 0,
				"axis": 1,
				"correction": 0
			},
			"shader_model": {
				"code": "",
				"global": "vec2 twist_rot(vec2 v, float a) {\n\ta=a*0.01745329251;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(vec2(c, -s),vec2(s, c));\n\treturn m * v;\n}\n\nvec3 twistX(vec3 v, float a){\n\tv.yz=twist_rot(v.yz,v.x*a);\n\treturn v;\n}\n\nvec3 twistY(vec3 v, float a){\n\tv.xz=twist_rot(v.xz,v.y*a);\n\treturn v;\n}\n\nvec3 twistZ(vec3 v, float a){\n\tv.xy=twist_rot(v.xy,v.z*a);\n\treturn v;\n}\n\n",
				"inputs": [
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTwist a SDF3D on the specified axis by an angle.",
				"name": "Twist",
				"outputs": [
					{
						"sdf3d": "$in(twist$axis($uv,$angle))/(1.0+$correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "Angle1.a",
						"default": 0,
						"label": "Angle",
						"max": 360,
						"min": -360,
						"name": "angle",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 5,
						"min": 0,
						"name": "correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Twist"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Twist",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"iterations": 3,
				"mode": 2
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "SDF3D",
						"longdesc": "The object that will be repeated",
						"name": "obj3d",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					},
					{
						"default": "vec4(0.0)",
						"function": true,
						"label": "V4->V4 3D Transformation",
						"longdesc": "The transformation that will be applied each iteration",
						"name": "trans3d",
						"shortdesc": "V4->V4 Transformation",
						"type": "v4v4"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"function": true,
						"label": "SDF2D Custom Boolean",
						"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
						"name": "custombool",
						"shortdesc": "SDF2D Join",
						"type": "sdf2d"
					}
				],
				"instance": "float for_fold_$name(vec4 p) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  return $obj3d(p.xyz);\n}\n\nfloat for_min_$name(vec4 p) {\n  float m=999999.0;\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\tfloat d=$obj3d(p.xyz);\n\tm=min(m,d);\n  }\n  return m;\n}\n\nfloat for_custom_$name(vec4 p) {\n  float m=999999.0;\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\tfloat d=$obj3d(p.xyz);\n\tm=$custombool(vec2(m,d));\n  }\n  return m;\n}",
				"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
				"name": "Fractal",
				"outputs": [
					{
						"sdf3d": "$mode",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 4,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							}
						]
					},
					{
						"default": 2,
						"label": "Mode",
						"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Fold",
								"value": "for_fold_$name(vec4($uv,0.0))"
							},
							{
								"name": "Min",
								"value": "for_min_$name(vec4($uv,0.0))"
							},
							{
								"name": "Custom",
								"value": "for_custom_$name(vec4($uv,0.0))"
							}
						]
					}
				],
				"shortdesc": "Fractal"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Fractal",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
				"name": "Axis",
				"outputs": [
					{
						"shortdesc": "V4->V4 Coordinates Output",
						"type": "v4v4",
						"v4v4": "$uv"
					}
				],
				"parameters": [

				],
				"shortdesc": "Axis"
			},
			"tree_item": "PauloFalcao/V4->V4/Generator/Axis",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"x": 0,
				"y": 0,
				"z": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTranslates the input V4->V4 Coordinates",
				"name": "Translate",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4($uv.xyz-vec3($x, $y, $z),$uv.w))"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 0,
						"label": "X",
						"max": 1,
						"min": -1,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "P1.y",
						"default": 0,
						"label": "Y",
						"max": 1,
						"min": -1,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"max": 1,
						"min": -1,
						"name": "z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Translate"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Translate",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "V4->V4",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror symmetry using the chosen axis",
				"name": "Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "V4->V4 output",
						"type": "v4v4",
						"v4v4": "$in(vec4(vec3($mode),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "Axis Symmetry"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"mode": 0,
				"smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "V4->V4",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror smooth symmetry using the chosen axis",
				"name": "Smooth Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "V4->V4 output",
						"type": "v4v4",
						"v4v4": "$in(vec4(vec3($mode),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
							},
							{
								"name": "XY",
								"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
							},
							{
								"name": "XZ",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
							},
							{
								"name": "X",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smooth amount",
						"max": 1,
						"min": 0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Axis Symmetry"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"ax": 0,
				"ay": 0,
				"az": 0
			},
			"shader_model": {
				"code": "",
				"global": "vec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nRotates a V4->V4\nAdapted from RodZilla TEX3D Rotate",
				"name": "Rotate",
				"outputs": [
					{
						"shortdesc": "V4->V4 Ouput",
						"type": "v4v4",
						"v4v4": "$in(vec4(v4v4_rotate($uv.xyz, -vec3($ax, $ay, $az)*0.01745329251), $uv.w))"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "X",
						"longdesc": "The rotation around the X axis",
						"max": 180,
						"min": -180,
						"name": "ax",
						"shortdesc": "Rotate.x",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Y",
						"longdesc": "The rotation around the Y axis",
						"max": 180,
						"min": -180,
						"name": "ay",
						"shortdesc": "Rotate.y",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"longdesc": "The rotation around the Z axis",
						"max": 180,
						"min": -180,
						"name": "az",
						"shortdesc": "Rotate.z",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "V4->V4 Rotate"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Rotate",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_sphere",
					"from_port": 0,
					"to": "PauloFalcao_Raymarching_3",
					"to_port": 0
				},
				{
					"from": "PauloFalcao_Raymarching_3",
					"from_port": 0,
					"to": "paulofalcao_raymarching_360HDRImage_2",
					"to_port": 0
				},
				{
					"from": "paulofalcao_sdf3d_operator_axis_symmetry_2",
					"from_port": 0,
					"to": "PauloFalcao_Raymarching_3",
					"to_port": 1
				},
				{
					"from": "paulofalcao_tex3d_input",
					"from_port": 0,
					"to": "tex3d_rotate",
					"to_port": 0
				},
				{
					"from": "tex3d_rotate",
					"from_port": 0,
					"to": "sdf3d_translate_3_2",
					"to_port": 0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0,
					"to": "paulofalcao_sdf3d_operator_axis_symmetry_2",
					"to_port": 0
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"name": "tex3d_rotate",
					"node_position": {
						"x": -234.285721,
						"y": -49.928574
					},
					"parameters": {
						"ax": "sin($time*4.0)*16.0",
						"ay": "sin($time*2.2)*16.0",
						"az": "sin($time*1.3)*16.0"
					},
					"shader_model": {
						"code": "",
						"global": "vec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nRotates a V4->V4\nAdapted from RodZilla TEX3D Rotate",
						"name": "Rotate",
						"outputs": [
							{
								"shortdesc": "V4->V4 Ouput",
								"type": "v4v4",
								"v4v4": "$in(vec4(v4v4_rotate($uv.xyz, -vec3($ax, $ay, $az)*0.01745329251), $uv.w))"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"longdesc": "The rotation around the X axis",
								"max": 180,
								"min": -180,
								"name": "ax",
								"shortdesc": "Rotate.x",
								"step": 1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"longdesc": "The rotation around the Y axis",
								"max": 180,
								"min": -180,
								"name": "ay",
								"shortdesc": "Rotate.y",
								"step": 1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"longdesc": "The rotation around the Z axis",
								"max": 180,
								"min": -180,
								"name": "az",
								"shortdesc": "Rotate.z",
								"step": 1,
								"type": "float"
							}
						],
						"shortdesc": "V4->V4 Rotate"
					},
					"type": "shader"
				},
				{
					"name": "paulofalcao_tex3d_input",
					"node_position": {
						"x": -227.285721,
						"y": -126.928574
					},
					"parameters": {

					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
						"name": "Axis",
						"outputs": [
							{
								"shortdesc": "V4->V4 Coordinates Output",
								"type": "v4v4",
								"v4v4": "$uv"
							}
						],
						"parameters": [

						],
						"shortdesc": "Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_translate_3_2",
					"node_position": {
						"x": -231.285721,
						"y": 80.071426
					},
					"parameters": {
						"x": 0.086,
						"y": 0.06,
						"z": 0.096
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "vec4(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTranslates the input V4->V4 Coordinates",
						"name": "Translate",
						"outputs": [
							{
								"shortdesc": "V4->V4 Output",
								"type": "v4v4",
								"v4v4": "$in(vec4($uv.xyz-vec3($x, $y, $z),$uv.w))"
							}
						],
						"parameters": [
							{
								"control": "P1.x",
								"default": 0,
								"label": "X",
								"max": 1,
								"min": -1,
								"name": "x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "P1.y",
								"default": 0,
								"label": "Y",
								"max": 1,
								"min": -1,
								"name": "y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 1,
								"min": -1,
								"name": "z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Translate"
					},
					"type": "shader"
				},
				{
					"name": "paulofalcao_sdf3d_operator_axis_symmetry_2",
					"node_position": {
						"x": -228.285721,
						"y": 185.071426
					},
					"parameters": {
						"mode": 0,
						"smooth": 0.00099
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "V4->V4",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror smooth symmetry using the chosen axis",
						"name": "Smooth Axis Symmetry",
						"outputs": [
							{
								"shortdesc": "V4->V4 output",
								"type": "v4v4",
								"v4v4": "$in(vec4(vec3($mode),$uv.w))"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Axis",
								"longdesc": "Axis",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "XYZ",
										"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
									},
									{
										"name": "XY",
										"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
									},
									{
										"name": "XZ",
										"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
									},
									{
										"name": "YZ",
										"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
									},
									{
										"name": "X",
										"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
									},
									{
										"name": "Y",
										"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
									},
									{
										"name": "Z",
										"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
									}
								]
							},
							{
								"control": "None",
								"default": 0,
								"label": "Smooth",
								"longdesc": "Smooth amount",
								"max": 1,
								"min": 0,
								"name": "smooth",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Smooth Axis Symmetry"
					},
					"type": "shader"
				},
				{
					"name": "PauloFalcao_Raymarching_3",
					"node_position": {
						"x": -22.285721,
						"y": -181.928574
					},
					"parameters": {
						"iterations": 5,
						"mode": 0
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "SDF3D",
								"longdesc": "The object that will be repeated",
								"name": "obj3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"default": "vec4(0.0)",
								"function": true,
								"label": "V4->V4 3D Transformation",
								"longdesc": "The transformation that will be applied each iteration",
								"name": "trans3d",
								"shortdesc": "V4->V4 Transformation",
								"type": "v4v4"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"function": true,
								"label": "SDF2D Custom Boolean",
								"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
								"name": "custombool",
								"shortdesc": "SDF2D Join",
								"type": "sdf2d"
							}
						],
						"instance": "float for_fold_$name(vec4 p) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  return $obj3d(p.xyz);\n}\n\nfloat for_min_$name(vec4 p) {\n  float m=999999.0;\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\tfloat d=$obj3d(p.xyz);\n\tm=min(m,d);\n  }\n  return m;\n}\n\nfloat for_custom_$name(vec4 p) {\n  float m=999999.0;\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\tfloat d=$obj3d(p.xyz);\n\tm=$custombool(vec2(m,d));\n  }\n  return m;\n}",
						"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "Fractal",
						"outputs": [
							{
								"sdf3d": "$mode",
								"shortdesc": "SDF3D Output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 4,
								"label": "Iterations",
								"longdesc": "Number of Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									}
								]
							},
							{
								"default": 2,
								"label": "Mode",
								"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Fold",
										"value": "for_fold_$name(vec4($uv,0.0))"
									},
									{
										"name": "Min",
										"value": "for_min_$name(vec4($uv,0.0))"
									},
									{
										"name": "Custom",
										"value": "for_custom_$name(vec4($uv,0.0))"
									}
								]
							}
						],
						"shortdesc": "Fractal"
					},
					"type": "shader"
				},
				{
					"name": "paulofalcao_raymarching_360HDRImage_2",
					"node_position": {
						"x": 359.714294,
						"y": -180.928574
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 0.391,
						"CamD": 1.5,
						"CamX": "sin($time*0.1)*4.0",
						"CamY": 1.45,
						"CamZ": "cos($time*0.13)*4.0",
						"CamZoom": 0.695,
						"LookAtX": 0,
						"LookAtY": 0,
						"LookAtZ": 0,
						"Pow": 275.43,
						"Reflection": 0.179,
						"Shadow": 0.921,
						"Specular": 1,
						"SunX": 0.44,
						"SunY": 1.48,
						"SunZ": -0.976
					},
					"shader_model": {
						"code": "",
						"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D A",
								"name": "sdf_a",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.1,0.1)",
								"function": true,
								"label": "TEX3D A",
								"name": "tex3d_a",
								"shortdesc": "TEX3D A",
								"type": "tex3d"
							},
							{
								"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
								"function": true,
								"label": "SDF3D B",
								"name": "sdf_b",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
								"function": true,
								"label": "TEX3D B",
								"name": "tex3d_b",
								"shortdesc": "TEX3D B",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "Ray Marching 360 HDRI Image",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1,
								"min": 0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024,
								"min": 0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_sphere",
					"node_position": {
						"x": -221.285721,
						"y": -200.928574
					},
					"parameters": {
						"r": 0.0699
					},
					"type": "sdf3d_sphere"
				}
			],
			"tree_item": "PauloFalcao/SDF3D/Operator/Fractal Example"
		}
	],
	"name": "PauloFalcaoRayMarching"
}