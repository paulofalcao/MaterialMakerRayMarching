{
	"lib": [
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//code from blackle https://www.shadertoy.com/view/wtVyWK\n\nfloat blackle_sdf3d_generator_neural_stanford_bunny(vec3 p) {\n   p.xyz=vec3(-p.x,-p.z,p.y);\n   //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n    //neural networks can be really compact... when they want to be\n    vec4 f00=sin(p.y*vec4(-3.02,1.95,-3.42,-.60)+p.z*vec4(3.08,.85,-2.25,-.24)-p.x*vec4(-.29,1.16,-3.74,2.89)+vec4(-.71,4.50,-3.24,-3.50));\n    vec4 f01=sin(p.y*vec4(-.40,-3.61,3.23,-.14)+p.z*vec4(-.36,3.64,-3.91,2.66)-p.x*vec4(2.90,-.54,-2.75,2.71)+vec4(7.02,-5.41,-1.12,-7.41));\n    vec4 f02=sin(p.y*vec4(-1.77,-1.28,-4.29,-3.20)+p.z*vec4(-3.49,-2.81,-.64,2.79)-p.x*vec4(3.15,2.14,-3.85,1.83)+vec4(-2.07,4.49,5.33,-2.17));\n    vec4 f03=sin(p.y*vec4(-.49,.68,3.05,.42)+p.z*vec4(-2.87,.78,3.78,-3.41)-p.x*vec4(-2.65,.33,.07,-.64)+vec4(-3.24,-5.90,1.14,-4.71));\n    vec4 f10=sin(mat4(vec4(-.34,.06,-.59,-.76),vec4(.10,-.19,-.12,.44),vec4(.64,-.02,-.26,.15),vec4(-.16,.21,.91,.15))*f00+\n        mat4(vec4(.01,.54,-.77,.11),vec4(.06,-.14,.43,.51),vec4(-.18,.08,.39,.20),vec4(.33,-.49,-.10,.19))*f01+\n        mat4(vec4(.27,.22,.43,.53),vec4(.18,-.17,.23,-.64),vec4(-.14,.02,-.10,.16),vec4(-.13,-.06,-.04,-.36))*f02+\n        mat4(vec4(-.13,.29,-.29,.08),vec4(1.13,.02,-.83,.32),vec4(-.32,.04,-.31,-.16),vec4(.14,-.03,-.20,.39))*f03+\n        vec4(.73,-4.28,-1.56,-1.80))/1.0+f00;\n    vec4 f11=sin(mat4(vec4(-1.11,.55,-.12,-1.00),vec4(.16,.15,-.30,.31),vec4(-.01,.01,.31,-.42),vec4(-.29,.38,-.04,.71))*f00+\n        mat4(vec4(.96,-.02,.86,.52),vec4(-.14,.60,.44,.43),vec4(.02,-.15,-.49,-.05),vec4(-.06,-.25,-.03,-.22))*f01+\n        mat4(vec4(.52,.44,-.05,-.11),vec4(-.56,-.10,-.61,-.40),vec4(-.04,.55,.32,-.07),vec4(-.02,.28,.26,-.49))*f02+\n        mat4(vec4(.02,-.32,.06,-.17),vec4(-.59,.00,-.24,.60),vec4(-.06,.13,-.21,-.27),vec4(-.12,-.14,.58,-.55))*f03+\n        vec4(-2.24,-3.48,-.80,1.41))/1.0+f01;\n    vec4 f12=sin(mat4(vec4(.44,-.06,-.79,-.46),vec4(.05,-.60,.30,.36),vec4(.35,.12,.02,.12),vec4(.40,-.26,.63,-.21))*f00+\n        mat4(vec4(-.48,.43,-.73,-.40),vec4(.11,-.01,.71,.05),vec4(-.25,.25,-.28,-.20),vec4(.32,-.02,-.84,.16))*f01+\n        mat4(vec4(.39,-.07,.90,.36),vec4(-.38,-.27,-1.86,-.39),vec4(.48,-.20,-.05,.10),vec4(-.00,-.21,.29,.63))*f02+\n        mat4(vec4(.46,-.32,.06,.09),vec4(.72,-.47,.81,.78),vec4(.90,.02,-.21,.08),vec4(-.16,.22,.32,-.13))*f03+\n        vec4(3.38,1.20,.84,1.41))/1.0+f02;\n    vec4 f13=sin(mat4(vec4(-.41,-.24,-.71,-.25),vec4(-.24,-.75,-.09,.02),vec4(-.27,-.42,.02,.03),vec4(-.01,.51,-.12,-1.24))*f00+\n        mat4(vec4(.64,.31,-1.36,.61),vec4(-.34,.11,.14,.79),vec4(.22,-.16,-.29,-.70),vec4(.02,-.37,.49,.39))*f01+\n        mat4(vec4(.79,.47,.54,-.47),vec4(-1.13,-.35,-1.03,-.22),vec4(-.67,-.26,.10,.21),vec4(-.07,-.73,-.11,.72))*f02+\n        mat4(vec4(.43,-.23,.13,.09),vec4(1.38,-.63,1.57,-.20),vec4(.39,-.14,.42,.13),vec4(-.57,-.08,-.21,.21))*f03+\n        vec4(-.34,-3.28,.43,-.52))/1.0+f03;\n    f00=sin(mat4(vec4(-.72,.23,-.89,.52),vec4(.38,.19,-.16,-.88),vec4(.26,-.37,.09,.63),vec4(.29,-.72,.30,-.95))*f10+\n        mat4(vec4(-.22,-.51,-.42,-.73),vec4(-.32,.00,-1.03,1.17),vec4(-.20,-.03,-.13,-.16),vec4(-.41,.09,.36,-.84))*f11+\n        mat4(vec4(-.21,.01,.33,.47),vec4(.05,.20,-.44,-1.04),vec4(.13,.12,-.13,.31),vec4(.01,-.34,.41,-.34))*f12+\n        mat4(vec4(-.13,-.06,-.39,-.22),vec4(.48,.25,.24,-.97),vec4(-.34,.14,.42,-.00),vec4(-.44,.05,.09,-.95))*f13+\n        vec4(.48,.87,-.87,-2.06))/1.4+f10;\n    f01=sin(mat4(vec4(-.27,.29,-.21,.15),vec4(.34,-.23,.85,-.09),vec4(-1.15,-.24,-.05,-.25),vec4(-.12,-.73,-.17,-.37))*f10+\n        mat4(vec4(-1.11,.35,-.93,-.06),vec4(-.79,-.03,-.46,-.37),vec4(.60,-.37,-.14,.45),vec4(-.03,-.21,.02,.59))*f11+\n        mat4(vec4(-.92,-.17,-.58,-.18),vec4(.58,.60,.83,-1.04),vec4(-.80,-.16,.23,-.11),vec4(.08,.16,.76,.61))*f12+\n        mat4(vec4(.29,.45,.30,.39),vec4(-.91,.66,-.35,-.35),vec4(.21,.16,-.54,-.63),vec4(1.10,-.38,.20,.15))*f13+\n        vec4(-1.72,-.14,1.92,2.08))/1.4+f11;\n    f02=sin(mat4(vec4(1.00,.66,1.30,-.51),vec4(.88,.25,-.67,.03),vec4(-.68,-.08,-.12,-.14),vec4(.46,1.15,.38,-.10))*f10+\n        mat4(vec4(.51,-.57,.41,-.09),vec4(.68,-.50,-.04,-1.01),vec4(.20,.44,-.60,.46),vec4(-.09,-.37,-1.30,.04))*f11+\n        mat4(vec4(.14,.29,-.45,-.06),vec4(-.65,.33,-.37,-.95),vec4(.71,-.07,1.00,-.60),vec4(-1.68,-.20,-.00,-.70))*f12+\n        mat4(vec4(-.31,.69,.56,.13),vec4(.95,.36,.56,.59),vec4(-.63,.52,-.30,.17),vec4(1.23,.72,.95,.75))*f13+\n        vec4(-.90,-3.26,-.44,-3.11))/1.4+f12;\n    f03=sin(mat4(vec4(.51,-.98,-.28,.16),vec4(-.22,-.17,-1.03,.22),vec4(.70,-.15,.12,.43),vec4(.78,.67,-.85,-.25))*f10+\n        mat4(vec4(.81,.60,-.89,.61),vec4(-1.03,-.33,.60,-.11),vec4(-.06,.01,-.02,-.44),vec4(.73,.69,1.02,.62))*f11+\n        mat4(vec4(-.10,.52,.80,-.65),vec4(.40,-.75,.47,1.56),vec4(.03,.05,.08,.31),vec4(-.03,.22,-1.63,.07))*f12+\n        mat4(vec4(-.18,-.07,-1.22,.48),vec4(-.01,.56,.07,.15),vec4(.24,.25,-.09,-.54),vec4(.23,-.08,.20,.36))*f13+\n        vec4(-1.11,-4.28,1.02,-.23))/1.4+f13;\n    return dot(f00,vec4(.09,.12,-.07,-.03))+dot(f01,vec4(-.04,.07,-.08,.05))+\n        dot(f02,vec4(-.01,.06,-.02,.07))+dot(f03,vec4(-.05,.07,.03,.04))-0.16;\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - Blackle\n\nGenerates a stanford bunny using a neural network using Blackle code from https://www.shadertoy.com/view/wtVyWK",
				"name": "Neural Stanford Bunny",
				"outputs": [
					{
						"sdf3d": "blackle_sdf3d_generator_neural_stanford_bunny($uv)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [

				],
				"shortdesc": "Neural Stanford Bunny"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/Neural Standford Bunny",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//code from https://www.shadertoy.com/view/3lyfzw\n//Made with this wonderful tutorial https://www.youtube.com/watch?v=8pwXpfi-0bU\n//Using Ida Faber model - CC Attribution\n//https://sketchfab.com/3d-models/stylized-fox-92c2a35e54664974b8564c674cc712da\n\nfloat paulofalcao_sdf3d_generator_neural_fox(vec3 p) {\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n\tp.xyz=vec3(-p.x,-p.z,p.y);\n    p.y=-sqrt(p.y*p.y+0.001)+0.01;\n    //neural networks can be really compact... when they want to be\n\tvec4 f0_0=sin(p.y*vec4(1.627,-3.273,.822,-1.929)+p.z*vec4(4.114,.716,-3.074,2.185)+p.x*vec4(2.235,.937,3.908,-1.072)+vec4(6.915,3.461,-1.359,1.899));\n\tvec4 f0_1=sin(p.y*vec4(-.001,-3.255,1.831,.966)+p.z*vec4(-3.328,.890,1.475,-.323)+p.x*vec4(.290,-1.169,-4.054,3.146)+vec4(-4.517,-2.674,6.099,.070));\n\tvec4 f0_2=sin(p.y*vec4(3.113,-1.089,2.397,-.459)+p.z*vec4(-4.309,1.202,1.134,2.052)+p.x*vec4(-1.018,.550,-3.955,4.027)+vec4(-7.136,2.863,-1.640,-5.590));\n\tvec4 f0_3=sin(p.y*vec4(.343,1.509,4.401,-1.962)+p.z*vec4(1.198,1.852,2.207,-4.658)+p.x*vec4(2.067,.056,-.156,-.631)+vec4(-4.943,.051,7.095,3.128));\n\tvec4 f1_0=sin(mat4(vec4(.234,.264,-.181,.015),vec4(1.018,-.023,.417,-.338),vec4(.527,-.030,.056,-.005),vec4(-.843,.446,-.139,-.079))*f0_0+\n    \tmat4(vec4(-.512,.346,-.264,.380),vec4(.135,.249,.118,-.188),vec4(-.110,.210,.101,-.157),vec4(.126,.259,.262,.446))*f0_1+\n    \tmat4(vec4(.595,.318,.262,-.279),vec4(.802,.891,-.050,-.347),vec4(.131,-.369,.420,-.025),vec4(-.217,-.197,.152,.931))*f0_2+\n    \tmat4(vec4(.522,.906,-.530,.246),vec4(.685,.684,-.106,.175),vec4(.437,.507,-.459,.127),vec4(.342,-.398,-.243,.008))*f0_3+\n    \tvec4(.376,-.814,1.500,-1.007))/1.0+f0_0;\n\tvec4 f1_1=sin(mat4(vec4(.124,.489,-.159,-.094),vec4(.099,.611,-.257,-.614),vec4(-.108,.309,-.121,-.389),vec4(.049,-.606,.030,-.723))*f0_0+\n    \tmat4(vec4(.511,.456,-.645,-1.008),vec4(.009,-.461,-.198,-.754),vec4(.978,.413,-.641,-.412),vec4(-1.068,-.308,.291,-.170))*f0_1+\n    \tmat4(vec4(.428,-.220,-.163,-.356),vec4(.744,.548,.221,.563),vec4(.242,-.214,-.224,-.567),vec4(.391,.045,-.061,-.186))*f0_2+\n    \tmat4(vec4(-.001,-.252,.747,-.435),vec4(.539,.003,-.305,-.643),vec4(-.261,.164,-.336,.295),vec4(.383,-.395,-.136,-.008))*f0_3+\n    \tvec4(-1.007,-1.304,1.076,1.194))/1.0+f0_1;\n\tvec4 f1_2=sin(mat4(vec4(-.502,.308,-.174,.023),vec4(-.560,-.534,.624,-.555),vec4(.309,.630,-.122,.310),vec4(.368,.878,-.206,-.350))*f0_0+\n    \tmat4(vec4(.684,.334,-.702,.420),vec4(-.698,.960,-.053,-.676),vec4(-.272,.365,-.074,.407),vec4(-.375,.202,.532,-.207))*f0_1+\n    \tmat4(vec4(-.116,-.269,.153,-.453),vec4(-.530,.488,-.724,.065),vec4(.405,.667,-.642,.043),vec4(-.103,.430,-.562,.346))*f0_2+\n    \tmat4(vec4(.472,-.026,-.433,.070),vec4(-.210,-.057,-.253,.310),vec4(-.344,.047,.386,.552),vec4(.246,-.111,.331,.350))*f0_3+\n    \tvec4(-.725,-1.197,.825,-3.455))/1.0+f0_2;\n\tvec4 f1_3=sin(mat4(vec4(.027,.173,.253,-.822),vec4(-.478,.458,.101,.045),vec4(.025,.248,.759,.184),vec4(-.317,-.014,-.077,-.353))*f0_0+\n    \tmat4(vec4(-.283,-.201,.219,-.248),vec4(-.571,-.458,.401,-.226),vec4(.432,.245,-.160,-.065),vec4(-.421,-1.315,-.569,-.520))*f0_1+\n    \tmat4(vec4(.313,-.258,.291,-.284),vec4(-.732,.295,-.087,-.441),vec4(.836,-.701,.566,.889),vec4(-.116,-.252,-.542,-.396))*f0_2+\n    \tmat4(vec4(-.381,-.907,.516,.431),vec4(-.273,.257,.027,-.179),vec4(-.214,.077,-.130,-.282),vec4(-.368,-.270,.618,-.041))*f0_3+\n    \tvec4(2.580,-.950,1.416,.227))/1.0+f0_3;\n\tvec4 f2_0=sin(mat4(vec4(.288,.277,.179,.290),vec4(-.968,-1.492,.495,-.421),vec4(.153,-.177,.580,-.388),vec4(.971,-.335,.007,.032))*f1_0+\n\t    mat4(vec4(-.194,-.137,.202,.157),vec4(-.160,1.025,-.550,-.053),vec4(.485,.030,-.537,.065),vec4(.021,-.384,-.109,-.452))*f1_1+\n\t    mat4(vec4(-.748,.241,.386,-.441),vec4(-.620,-.869,.559,.681),vec4(.367,.256,-.459,-1.047),vec4(.260,.241,-.793,.494))*f1_2+\n\t    mat4(vec4(-.958,-.093,-.110,-.074),vec4(-.260,-.856,.521,.613),vec4(-.562,.079,.238,.056),vec4(-.413,-1.011,.118,-.104))*f1_3+\n\t    vec4(.980,1.564,-2.935,-.589))/1.4+f1_0;\n\tvec4 f2_1=sin(mat4(vec4(.181,.166,-.082,.469),vec4(.474,.703,.969,.559),vec4(.998,-.016,.193,-.363),vec4(.452,.152,.543,-.394))*f1_0+\n\t    mat4(vec4(-.711,-.586,.015,.459),vec4(.404,.538,.575,-.249),vec4(-.562,-.484,.549,.673),vec4(-1.160,.144,-.010,-.093))*f1_1+\n\t    mat4(vec4(.663,.424,.164,.089),vec4(1.168,.000,.636,-.309),vec4(.088,-.779,.352,-.722),vec4(-1.071,-.059,-.089,.310))*f1_2+\n\t    mat4(vec4(-.156,-.515,.176,-.125),vec4(.034,.431,.367,.228),vec4(.394,.263,.039,.195),vec4(1.077,.460,-.456,-.031))*f1_3+\n\t    vec4(.495,.756,-2.986,-1.239))/1.4+f1_1;\n\tvec4 f2_2=sin(mat4(vec4(-.586,-.569,-.492,-.407),vec4(-.224,-.624,.373,-.080),vec4(-.216,.279,.704,.072),vec4(-.780,-.607,.575,.568))*f1_0+\n\t    mat4(vec4(.070,-.760,.980,.566),vec4(-.124,-.326,.463,.559),vec4(-.297,.161,-.449,-.236),vec4(-.369,-.591,-.190,-.548))*f1_1+\n\t    mat4(vec4(.054,.276,-.894,-.120),vec4(.795,1.111,-.473,.031),vec4(.387,.292,.974,1.024),vec4(.150,.184,.253,-.287))*f1_2+\n\t    mat4(vec4(.435,1.658,.294,-.403),vec4(-.377,.175,-.493,.204),vec4(-.499,-.614,.119,-.557),vec4(-.799,-.168,-.481,-.192))*f1_3+\n\t    vec4(-2.130,-2.233,-.605,-3.251))/1.4+f1_2;\n\tvec4 f2_3=sin(mat4(vec4(.884,.369,.064,-.009),vec4(.434,.437,-.618,.117),vec4(.046,-.601,-.376,-.182),vec4(1.130,-.913,-.029,.602))*f1_0+\n\t    mat4(vec4(.314,-1.064,.861,-.572),vec4(-.633,.111,-.122,-.179),vec4(.277,-.615,-.069,.678),vec4(.109,.024,-1.124,-.553))*f1_1+\n\t    mat4(vec4(.243,.009,.461,.333),vec4(-.624,-.670,.328,.350),vec4(1.132,-.523,-.099,.402),vec4(.183,.245,-.232,.186))*f1_2+\n\t    mat4(vec4(-.057,.076,.660,-.139),vec4(.729,.450,.109,-.177),vec4(.088,-.111,.020,-.546),vec4(-.487,-1.286,.100,.117))*f1_3+\n\t    vec4(.529,-2.910,3.311,2.936))/1.4+f1_3;\n\treturn dot(f2_0,vec4(.021,-.057,.076,-.038))+\n\t    dot(f2_1,vec4(-.022,-.081,.064,-.063))+\n\t    dot(f2_2,vec4(-.049,-.057,.048,.076))+\n\t    dot(f2_3,vec4(.014,-.049,.060,.071))+\n\t    -0.010;\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao, Blackle\n\nGenerates a fox using a neural network using PauloFalcao code from https://www.shadertoy.com/view/3lyfzw\nModel trained by PauloFalcao\nMade using Blackle https://www.shadertoy.com/view/wtVyWK\nAnd this wonderful tutorial https://www.youtube.com/watch?v=8pwXpfi-0bU\nUsing Ida Faber model\nhttps://sketchfab.com/3d-models/stylized-fox-92c2a35e54664974b8564c674cc712da\n",
				"name": "Neural Fox",
				"outputs": [
					{
						"sdf3d": "paulofalcao_sdf3d_generator_neural_fox($uv)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [

				],
				"shortdesc": "Neural Fox"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/Neural Fox",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"RepX": 4,
				"RepY": 1,
				"RepZ": 4,
				"X": 1,
				"Y": 1,
				"Z": 1
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec3 opRepLim(vec3 p,vec3 c,vec3 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor(p/c+0.5),vec3(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - IQ\n\nRepeats its input shape",
				"name": "Repeat",
				"outputs": [
					{
						"sdf3d": "$in(opRepLim($uv,vec3($X,$Y,$Z)*2.0,vec3($RepX-1.0,$RepY-1.0,$RepZ-1.0)))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128,
						"min": 1,
						"name": "RepZ",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"Iterations": 2,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "//From https://www.shadertoy.com/view/wlyBWm by @paulofalcao\n\nvec3 smoothrepeat_$name(vec3 p,vec3 smooth_size,vec3 size){\n    size.$Axis/=2.0;\n    float w=pow(2.0,float($Iterations));\n\tfor(int i=0;i<$Iterations;i++){\n        p.$Axis=sqrt(p.$Axis*p.$Axis+smooth_size.$Axis);//smooth abs\n\t\tp.$Axis-=size.$Axis*w;//translate\n\t\tw=w/2.0;\n\t}\n\treturn p;\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "Smooth Repeat",
				"outputs": [
					{
						"sdf3d": "$in(smoothrepeat_$name($uv,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 3,
						"label": "Axis",
						"longdesc": "Repetition axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"default": 2,
						"label": "Repetitions",
						"longdesc": "Repetitions in the X axis",
						"name": "Iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "0"
							},
							{
								"name": "2",
								"value": "1"
							},
							{
								"name": "4",
								"value": "2"
							},
							{
								"name": "8",
								"value": "3"
							},
							{
								"name": "16",
								"value": "4"
							},
							{
								"name": "32",
								"value": "5"
							},
							{
								"name": "64",
								"value": "6"
							},
							{
								"name": "128",
								"value": "7"
							},
							{
								"name": "256",
								"value": "8"
							},
							{
								"name": "512",
								"value": "9"
							},
							{
								"name": "1024",
								"value": "10"
							},
							{
								"name": "2048",
								"value": "11"
							},
							{
								"name": "4096",
								"value": "12"
							},
							{
								"name": "8192",
								"value": "13"
							},
							{
								"name": "16384",
								"value": "14"
							},
							{
								"name": "32768",
								"value": "15"
							},
							{
								"name": "65536",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "float blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return $in(p);\n}",
				"longdesc": "Type - SDF3D Operator\nCode - Blackle\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "Smooth Repeat V2",
				"outputs": [
					{
						"sdf3d": "blakle_smoothrepeat_asin_sin_$name($uv,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)*0.635)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Repeat V2"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Repeat V2",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"RepX": 3,
				"RepY": 3,
				"RepZ": 3,
				"SmoothB": 0,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "//Uses shapes from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm by iq\n//And Smooth Repetition in https://www.shadertoy.com/view/wlyBWm by blakle\n\nfloat iq_sdRoundBox(in vec3 p,in vec3 b, float r ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0)-r;\n}\n\nfloat iq_opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\n\n",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "vec3 blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return p;\n}\n\nfloat Blackle_SDF3D_Smooth_Repeat_$name(vec3 p,vec3 size,vec3 rep,vec3 smooth_,float smoothb){\n  float b=iq_sdRoundBox(p,size*rep,smoothb);\n  p=blakle_smoothrepeat_asin_sin_$name(p,smooth_,size);\n  return iq_opSmoothIntersection($in(p),b,smoothb);\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - Blackle, PauloFalcao\n\nRepeats its input shape with smoothness using reflection symmetry with a smooth box limit",
				"name": "Smooth Repeat V2 Limited ",
				"outputs": [
					{
						"sdf3d": "Blackle_SDF3D_Smooth_Repeat_$name($uv,vec3($X,$Y,$Z)*0.635,vec3($RepX,$RepY,$RepZ)+1.5,vec3($SmoothX,$SmoothY,$SmoothZ),$SmoothB)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128,
						"min": 1,
						"name": "RepZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.01,
						"label": "SmoothB",
						"longdesc": "Smoothness on the boundary. Uses smooth intersection with a box",
						"max": 1,
						"min": 0,
						"name": "SmoothB",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Repeat V2 Limited"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Repeat V2 Limited",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"Pow": 64,
				"Shadow": 1,
				"SkyColor": {
					"interpolation": 3,
					"points": [
						{
							"a": 1,
							"b": 0.979167,
							"g": 0.864656,
							"pos": 0,
							"r": 0.793357
						},
						{
							"a": 1,
							"b": 1,
							"g": 0.6984,
							"pos": 0.118182,
							"r": 0.510612
						},
						{
							"a": 1,
							"b": 0.557292,
							"g": 0.329521,
							"pos": 0.411598,
							"r": 0.287342
						},
						{
							"a": 1,
							"b": 0.416667,
							"g": 0.209503,
							"pos": 0.945455,
							"r": 0.17114
						}
					],
					"type": "Gradient"
				},
				"Specular": 1,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D A",
						"name": "sdf_a",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.1,0.1)",
						"function": true,
						"label": "TEX3D A",
						"name": "tex3d_a",
						"shortdesc": "TEX3D A",
						"type": "tex3d"
					},
					{
						"default": "$uv.y+1.0",
						"function": true,
						"label": "SDF3D B",
						"name": "sdf_b",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "(vec3(mod(floor($uv.x)+floor($uv.z),2.0))*0.25+0.5)",
						"function": true,
						"label": "TEX3D B",
						"name": "tex3d_b",
						"shortdesc": "TEX3D B",
						"type": "tex3d"
					}
				],
				"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(out float d,out vec3 p,out vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tfloat fog=max(1.0-(d/50.0),0.0);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tfloat r=clamp(dot(reflect(rd,-n),light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t} else {\n\t    color=$SkyColor(rd.y).xyz;\n\t}\n    return color*(fog)+$SkyColor(rd.y).xyz*(1.0-fog);\n}\n\n\n\n",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects",
				"name": "Ray Marching 2 Objects",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image Output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024,
						"min": 0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": {
							"interpolation": 3,
							"points": [
								{
									"a": 1,
									"b": 1,
									"g": 0.6984,
									"pos": 0.009091,
									"r": 0.510612
								},
								{
									"a": 1,
									"b": 0.317708,
									"g": 0.187858,
									"pos": 1,
									"r": 0.163812
								}
							],
							"type": "Gradient"
						},
						"label": "SkyColor",
						"longdesc": "A gradient that tries to simulate a sky",
						"name": "SkyColor",
						"type": "gradient"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Ray Marching 2 Objects"
			},
			"tree_item": "PauloFalcao/SDF3D/Render/Ray Marching 2 Objects",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//by IQ\n//from https://www.shadertoy.com/view/3ltSW2\nvec3 iq_2dsdf_coloring( in float c )\n{\n    vec3 col = vec3(1.0) - sign(c)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(c));\n\tcol *= 0.8 + 0.2*cos(128.0*abs(c));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(c)) );\n\n\treturn col;\n}",
				"inputs": [
					{
						"default": "length($uv)-0.5",
						"label": "SDF2D",
						"name": "c",
						"shortdesc": "SDF2D input",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - Image Generator from SDF2D\nCode - IQ\n\nIQ SDF 2D distance coloring from https://www.shadertoy.com/view/3ltSW2",
				"name": "SDF2D Distance Coloring",
				"outputs": [
					{
						"rgb": "iq_2dsdf_coloring($c($uv*2.0-1.0))",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [

				],
				"shortdesc": "SDF2D Distance Coloring"
			},
			"tree_item": "PauloFalcao/SDF2D/Render/SDF2D Distance Coloring",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "buffer_2",
					"from_port": 0,
					"to": "gen_outputs",
					"to_port": 0
				},
				{
					"from": "4690",
					"from_port": 0,
					"to": "buffer_2",
					"to_port": 0
				}
			],
			"icon_data": "",
			"label": "Nimitz HDRI Sky",
			"longdesc": "Type - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
			"name": "graph_2",
			"nodes": [
				{
					"name": "buffer_2",
					"node_position": {
						"x": -126,
						"y": 347.5
					},
					"parameters": {
						"size": 11
					},
					"seed": -20507,
					"seed_locked": false,
					"type": "buffer",
					"version": 1
				},
				{
					"name": "4690",
					"node_position": {
						"x": -461,
						"y": 424.5
					},
					"parameters": {
						"cloudtime": 575.5,
						"sunPosX": -1,
						"sunPosY": 1,
						"sunPosZ": -1
					},
					"seed": -2939,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "// Day at the Lake by nimitz, 2020 (twitter: @stormoid)\n// https://www.shadertoy.com/view/wl3czN\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n//\n// Simple floor by PauloFalcao\n//\n// Modified for Material Maker by (twitter: @PauloFalcao)\n//\n\nmat3 nz_cloudrot_y(float a){\n\tfloat sa = sin(a);\n\tfloat ca = cos(a);\n\treturn mat3(vec3(ca,.0,sa),vec3(.0,1.,.0),vec3(-sa,.0,ca));\n}\n\nvec3 nz_cloudsIntcPlane(vec3 ro, vec3 rd, float plH){\n    ro.y += plH;\n    float t = -ro.y/rd.y;\n    if (t < 0.)\n        return vec3(1e6);\n    float u =  ro.x + rd.x*t;\n    float v =  ro.z + rd.z*t;\n    return vec3(t,u,v);\n}\n\n// Clouds cyclic noise\nconst mat3 nz_cloudMapm3x=mat3(\n\t  vec3(0.33338, 0.56034, -0.71817),\n\t  vec3(-0.87887, 0.32651, -0.15323),\n\t  vec3(0.15162, 0.69596, 0.61339)\n\t)*2.01;\n\nvec4 nz_cloudMap(vec3 p, float time){\n    p.xz += vec2(-time*1.0, time*0.25);\n    time *= 0.25;\n    p.y -= 9.0;\n    p *= vec3(0.19,0.3,0.19)*0.45;\n    vec3 bp = p;\n    float rz = 0.;\n    vec3 drv = vec3(0);\n    \n    float z = 0.5;\n    float trk= 0.9;\n    float dspAmp = 0.2;\n    \n    float att = clamp(1.31-abs(p.y - 5.5)*0.095,0.,1.);\n    float off = dot(sin(p*.52)*0.7+0.3, cos(p.yzx*0.6)*0.7+0.3)*0.75 - 0.2; //large structures\n    float ofst = 12.1 - time*0.1;\n    \n    for (int i = 0; i<6; i++){\n        p += sin(p.yzx*trk - trk*2.0)*dspAmp;\n        \n        vec3 c = cos(p);\n        vec3 s = sin(p);\n        vec3 cs = cos(p.yzx + s.xyz + ofst);\n        vec3 ss = sin(p.yzx + s.xyz + ofst);\n        vec3 s2 = sin(p + s.zxy + ofst);\n        vec3 cdrv = (c*(cs - s*ss) - s*ss.yzx - s.zxy*s2)*z;\n        \n        rz += (dot(s, cs) + off - 0.1)*z; //cloud density\n        rz *= att;\n        drv += cdrv;\n        \n        p += cdrv*0.09;\n        p.xz += time*0.1;\n        \n        dspAmp *= 0.7;\n        z *= 0.57;\n        trk *= 2.1;\n        p *= nz_cloudMapm3x;\n    }\n    \n    return vec4(rz, drv);\n}\n\n//-----------------------------Sky rendering---------------------------\n// modified from an prototype public domain implementation by shadertoy user Jodie: https://www.shadertoy.com/view/ttSGzh\n// That version has some serious accuracy issues, I modified it to somewhat match the Hosek-Wilkie sky model visuals.\n\n\nvec3 nz_getThickness(vec3 rd){\n\n\tconst float earthRadius=6371000.;\n\tconst float atmoDepth=8228.;\n\tconst float mieDepth=1800.0;\n\tconst float ozoneHeight=30000.;\n\t\n    const vec4 cns = earthRadius + \n        \t\t\tvec4(atmoDepth, mieDepth, ozoneHeight, ozoneHeight + atmoDepth);\n    const float r2 = earthRadius * earthRadius;\n    float b = -rd.y*earthRadius;\n    vec4 z = sqrt( cns*cns + (b*b - r2) );\n    return vec3(b + z.xy, z.w - z.z);\n}\n\n\nvec3 nz_getSky(vec3 rd, vec3 lgt, float addDepth){\n\n\tconst vec3 rayleighCoefficient=vec3(5.6e-6  , 1.25e-5 , 2.9e-5 );\n\tconst float mieCoefficient=16e-6;// adjust for foggier look\n\tconst vec3 ozoneCoefficient=(vec3(3.426, 8.298,.356) * 6e-5 / 100.);\n\tconst vec3 sunColor=vec3(.95,.96,1.2 );\n\t\n    const vec3 addCol = vec3(1.,1.,1.);\n    const mat3 coeffs = mat3(rayleighCoefficient, vec3(mieCoefficient), ozoneCoefficient)/0.693147;\n    vec3 thickness = nz_getThickness(rd) + addDepth*addCol;\n    float rdl = max(dot(rd, lgt), 0.0);\n\n    vec3 rayleighScatter =(thickness.x * (0.4*rdl*rdl + 1.12))* rayleighCoefficient;\n    float g = 0.8 - lgt.y*0.15 - mieCoefficient*1500.;\n    float g2 = g*g;\n    float a = inversesqrt(g2 - (2.0*g*rdl - 1.0));\n    float phaseMie = (0.4 + lgt.y*0.1 + mieCoefficient*7000.)*(1.0 - g2)*a*a*a;\n    float mieScatter = thickness.y * phaseMie * mieCoefficient;\n\n    vec3 sunCoeff = coeffs*(nz_getThickness(lgt) + addDepth*addCol);\n    vec3 viewCoeff = coeffs*thickness;\n    vec3 absorption = (exp2(-viewCoeff) - exp2(-sunCoeff))/((sunCoeff - viewCoeff)*0.693147);\n\n    return vec3(clamp(sunColor*(rayleighScatter + mieScatter)*absorption*(0.6 + lgt.y*0.3), 0., 100.5));\n}\n\n\n\n//-------------------------End of sky rendering------------------------\n//---------------------------------------------------------------------\n\nvec3 nz_getSun(vec3 rd, float sunCoeff, vec3 lgt){\n    float rdl = max(dot(rd, lgt), 0.0);\n    float dcy = smoothstep(-0.05,0.2,lgt.y);\n    vec3 sun = 50.0*vec3(1.,1.,.4)*pow(rdl, 10000.)*clamp(1.0 - dcy*.7, 0.,1.);\n    sun += 60.0*vec3(1.,0.7,.5)*pow(rdl, 3500.);\n    sun *= clamp(1.0 - dcy*.6, 0.,1.);\n    sun *= exp2(-sunCoeff*0.45);\n    return sun;\n}\n\n\nvec4 nz_getClouds( in vec3 ro, in vec3 rd, float scnD, vec3 skyCol, float time, vec3 lgt){\n\tvec4 rez = vec4(0.);\n\tfloat t = min(nz_cloudsIntcPlane(ro, rd, -12.).x, 175.);\n    \n    float updl = dot(lgt, vec3(0, 1, 0));\n    float sunUp = max(updl, 0.);\n    float sunUp3 = clamp(sunUp*sunUp*sunUp*6., 0.0, 1.0);\n    float sunDw = 1.0 - sunUp;\n    sunDw = pow(sunDw, 6.0);\n    \n    float bsd = dot(lgt.xz, rd.xz);\n    float sd = max(bsd, 0.0);\n    float sd2 = max(bsd*0.55 + 0.53,0.);\n    \n    vec3 topSky = clamp(nz_getSky(vec3(0, 1, 0), lgt, 0.).xyz, 0.,1.);\n    vec3 baseCol = mix(topSky, vec3(0.05, 0.066, 0.09), clamp(sunUp3,0.0, 0.6))*0.2;\n    \n    float extraDepth = 14e4*((1.0-bsd)*0.2 + 0.9)*pow(1.0 - sunUp, 4.0);\n    vec3 hlitCol = clamp(nz_getSky(normalize((lgt-vec3(0,0.001,0))*nz_cloudrot_y(0.15)), lgt, extraDepth).xyz ,0.0, 1.0);\n    hlitCol = hlitCol*sd2*mix(sunDw, sunDw*sunDw, sd)*16.;\n    \n    vec3 bSkyCol = nz_getSky(rd, lgt, extraDepth*5.0*(sunUp*0.8 + 0.2)).xyz;\n    vec3 sunLCol = mix(vec3(1.0, 0.8, 0.75), vec3(.5), sunUp);\n    vec3 atmoCol = mix(bSkyCol*(sunUp*0.3+0.7), sunLCol*dot(bSkyCol, vec3(0.38)), sunUp3)*0.25;\n    \n\tfor(int i=0; i<85; i++){\n\t\tvec3 pos = ro + t*rd;\n        if(rez.a > 0.99 || t > 300.  || pos.y > 150.)break;\n        vec4 cld = nz_cloudMap(pos, time);\n\t\tfloat den = clamp(cld.x, 0., 1.)*1.02;\n\t\tfloat dn = clamp((cld.x + 1.9),0.0 , 3.0);\n        float fogT = 0.;\n        \n\t\tvec4 col = vec4(0);\n        \n        if (cld.x > 0.6){   \n            col = vec4(baseCol, 0.1);\n            float nl = max(dot(cld.yzw, -lgt), -1.2);\n            float dif = clamp((cld.x - nz_cloudMap(pos + lgt*8., time).x)*0.4 + 0.2, 0.11, 2.0 )*2.5;\n            dif += clamp((cld.x - nz_cloudMap(pos + lgt*15., time).x)*0.2 - 0.03, -0.02, 1. )*4.0;\n            \n            col.rgb += atmoCol*((nl*0.25 + 0.7)*dif*0.65); //atmosphere lighting\n            \n            float den2 = den*den;\n            float den4 = den2*den2;\n            col *= den4*den4;\n            col.rgb += col.a*clamp((nl*0.8 + 0.1)*dif,0.,1.)*hlitCol; //twi-lights\n            //col *= smoothstep(t-0.0, t+.1, scnD); //blend with scene\n        }\n        \n        float fogC = exp2(t*0.012/(rd.y + 0.35) - 11.7);\n        col.rgba += vec4(skyCol, 1.0)*clamp(fogC, 0.0, 1.0);\n\t\trez = rez + col*(1.0 - rez.a);\n        t += clamp(7. - dn*dn*.85, 1.2, 7.);\n\t}    \n\treturn clamp(rez, 0.0, 1.0);\n}\n\n\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat npxf_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat pxf_nz_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=npxf_hash12(v1);\n  float n01=npxf_hash12(v1+vec2(0,1));\n  float n10=npxf_hash12(v1+vec2(1,0));\n  float n11=npxf_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat pxf_nz_noiseOct(vec2 p){\n  return\n    pxf_nz_noise(p)*0.5+\n    pxf_nz_noise(p*2.0+13.0)*0.25+\n    pxf_nz_noise(p*4.0+23.0)*0.15+\n    pxf_nz_noise(p*8.0+33.0)*0.10+\n    pxf_nz_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 pxf_nz_floorColor(vec3 p){\n    vec3 v=(pxf_nz_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\n\n\nvec3 pxf_nz_renderHDR360( in vec3 rd, float time, vec3 lgt){\n\n    vec3 col;\n    if (rd.y>-0.35) {\n        //Sky\n        //Sky\n        float ldt = clamp(dot(lgt,rd),0.,1.);\n\n        vec3 skyCol = nz_getSky(rd, lgt, 0.);\n        col = skyCol.rgb;\n        vec3 bg= col;\n\n        float powerSun=1.0+pow(ldt,2.0);\n\n        col += (nz_getSun(rd,0.0,lgt)+0.05)*powerSun;\n\n        float powerCloud=1.0+pow(ldt,32.0)*3.5;\n\n        vec4 cld = nz_getClouds(vec3(0,0,0), rd, 10000., bg, time, lgt)*powerCloud;\n        col = col*(clamp(1.0-cld.w,0.0,1.0)) + cld.xyz;\n        //Floor\n        vec3 p=rd*(-10.0/rd.y);\n        if ((rd.y>-0.35)&&(rd.y<-0.0)){\n          col=mix(col,pxf_nz_floorColor(p),clamp(-rd.y*3.0,0.0,1.0));\n        }\n    } else{\n        vec3 p=rd*(-10.0/rd.y);\n        col=pxf_nz_floorColor(p);\n    }\n    return col;\n}\n\n\nvec3 pxf_nz_make360hdri(vec2 p,float t,vec3 sunPos){\n    float PI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(PI,PI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n\t\n    return max(pxf_nz_renderHDR360(rayDirection,t,sunPos),vec3(0.0));\n}",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Nimitz HDRI Sky\n\nType - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
						"name": "Nimitz HDRI Sky",
						"outputs": [
							{
								"rgb": "pxf_nz_make360hdri(vec2($uv.x,-$uv.y+1.0),$cloudtime,normalize(vec3(-$sunPosX,$sunPosY,-$sunPosZ)))",
								"shortdesc": "Color Output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 30,
								"label": "Cloud Time",
								"max": 200,
								"min": 0,
								"name": "cloudtime",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Sun Pos X",
								"max": 1,
								"min": 0,
								"name": "sunPosX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Sun Pos Y",
								"max": 1,
								"min": 0,
								"name": "sunPosY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Sun Pos Z",
								"max": 1,
								"min": 0,
								"name": "sunPosZ",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -454,
						"y": 300
					},
					"parameters": {

					},
					"ports": [

					],
					"seed": -12758,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": 97,
						"y": 342
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0,
							"longdesc": "",
							"name": "port0",
							"shortdesc": "Image Output",
							"type": "rgba"
						}
					],
					"seed": 52201,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -35,
						"y": 99.5
					},
					"parameters": {
						"par1": 11,
						"par2": -1,
						"par3": 1,
						"par4": -1,
						"param0": 575.5
					},
					"seed": -16736,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Resolution",
							"linked_widgets": [
								{
									"node": "buffer_2",
									"widget": "size"
								}
							],
							"name": "par1",
							"type": "linked_control"
						},
						{
							"label": "Sun Pos X",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "sunPosX"
								}
							],
							"name": "par2",
							"type": "linked_control"
						},
						{
							"label": "Sun Pos Y",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "sunPosY"
								}
							],
							"name": "par3",
							"type": "linked_control"
						},
						{
							"label": "Sun Pos Z",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "sunPosZ"
								}
							],
							"name": "par4",
							"type": "linked_control"
						},
						{
							"label": "Cloud Time",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "cloudtime"
								}
							],
							"name": "param0",
							"type": "linked_control"
						}
					]
				},
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment",
					"node_position": {
						"x": -818.233337,
						"y": -69.649994
					},
					"parameters": {

					},
					"seed": 29001,
					"seed_locked": false,
					"size": {
						"x": 681,
						"y": 323
					},
					"text": "Nimitz HDRI Sky\n\nType - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
					"title": "",
					"type": "comment"
				}
			],
			"parameters": {
				"par1": 11,
				"par2": -1,
				"par3": 1,
				"par4": -1,
				"param0": 575.5
			},
			"seed": 0,
			"seed_locked": false,
			"shortdesc": "Nimitz HDRI Sky",
			"tree_item": "PauloFalcao/Image/Generator/Nimitz HDRI Sky",
			"type": "graph"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABwJJREFUeJztmXtwVOUZxn+bbHY3m2yym2yyRHJdAhFCwBBAEJRQTChFuYxYJEW0g6MdGbRaZ1BaKENnhLFSKzpaQIp1mN7UAo6MLa1THHTAgMNNKAGREMCQNCEbcmFzffpHUsI1F8Lm4LjPzDfnfOec732f93cu+52zJkB8hxVitAGjFQRgtAGjFQRgtAGjFQQQqMApcZDgClT0mysFsnkTLZo6MS2gOXrTTAR4ItQ/Dszh4TgiI/ny8H8DmeqGFZgzn2TW6KFOJXlCFG7v2O6JDbu4Pm1Kjm5LjW/vmwV2YYoSJqcIjxdY5Er3CkIDeRUE7vKyWdqWbgeafk+i5t6fKUArn73/kuNChcUhLC7hTpZ5ULYKHn9Y9qHjVH16q55a9pywt8H41gGIsKAZExI1OiNcr/50ggCNH5XYtt+MNq5+TFgdShw+TMPyJyjrjlRZwtvGTv/ZLyTtU8HTj4v+g4UzKVBXQuAAuB3IHX39/dWFS6XGDzR2cp5mPTFfG/+0Qt5Uu2qPrNXmXR/r/4rMmShShwoivl0AhqdfbdgT07GelmTTE4/mSiqR9Fl7uT5J0q/+sVOXKirnHuFI0rp1z8qVnHBZTKfbfIsCSLNdd1+4Ff3yqR9IqpYkTV7wzMViN/v8ulILVyyR6jaJGPfFGO+9NU+jsmKU4EbZt8fdegDuGhZ9ze0uB3r7lfkCNDQzTpK0+I1f60jVl9pRXXNV8cv/+J4kKX9SpohsA5CQ4tFbq+ZoZt4gfX+C97L42YOvnbfPAVyvTRwZowiX9WI/f+4cvbDuNc14+U29vu+4atsLL2tfPvLaRhV++HPNmp6t3InDte+jRRfHrn/xh5fFtll75qXXU2FPRM/HDEhLp66qgbzcdNb95jHuzOjH2EEuQmRmwXAvRwEfsLm4FoAXx1UwaupYZs/MZ8DAFIbfm0lOZhQA8xf/9bLYIzM9JCd0v6xQYFnPS+hQXVP3j03uB9mDY6msa+DkqfPMmzsFv8XJnq98fH6yHrvTzawx2UT7tuGwDSDHaQHAkTCGguc3sOqd7ezaX8yQyBZMofD53jNX5WhtbeLU2eYe1dCnl//ShbnKHZ/R1g91KX3MOB06+K7WvL9GkgRIKtRLyx6WJP12+3ZJJRo87SFFZ90l6RM9cF/GZTHDzDfux9wjVDdBn+wuwpvuZfunRWA14XHaeXvLp8yZPBKTyQSAyTQaqwOOnznL79ZuY9OuTTisZmbl3c6MglVk3zGC6ho/Df5GTpf5cTps7D1YekN+Av4y1KnMTjxD0kjxpnB6/7/45kTbPb9yyUMsWr4cKGf31z6Wrf43NWdLMTfXsfuLo9RWVOBxmygrLu+9hV5HuEJp/U2cOCPCTNDUKVoztDaT6omiylfPn99cwo7iKg5X2vHe7QUGAgNJCdtASGsDUbYQCg+U0kATNLVQVny+W34yUkMpKm657v6b/kHkxJm2qjsvHqAVR6KLEMQri+/j1Q+PERsdz+rn8njw7h9hMpkwmUy8s70c/4Va6hoaOLVlIS6bDcymLn38eOYgXBHwdSfFQxe3gM0M/p49UDvVIzMy+cPmQ+29cLCFkzEiDazRPJiXhdMdQ2zLCXbtPMC9s2azZc83+Hx+Wv1+tq5ZwAtPPs+xilDe//ggNFyAulqg8wK7Uqc/g82tvYrdliAE1I643l/FOV8rMUluLjSZ6J8WR1ldC5F2B8VVzdT4m1i59Pfs2XeItR/8kyrfBRobG6mpqef4gd38bcdppmbZ+exINc3nygCRleGkvNJ/w/4C/lG05RKI9Q3NYLHiCjuPxRFGfekxvpcVR6Na2PATL9NSz7UfuYvaC37eXZHL1tcLCKWFgtwU1i8ay/q//wevqwKASWPiOFjkaxsSBi4XWO0d+ayWrv31eiLUXcU6oawCYj1WQiwRVJ2qxN8APrONRQ8MZt2OShrtbobdOZTIkFqOna7BU11E8rBnqCs9SmGphTf+UkjJ0RJyRgzhZHEZX5XUAxBiBjVDeBjU1nXkbOnG3dFnn8UrfZB+G1Bfj8feCEBCLJQfKGJQYgtRNj8Nfh858Y1s+2gnS6Y52fFFCXPzkygva2GSt55+OgvNcHjvfpqaIaz9bLe2P6eqam7MW5+/DAEakIAsYW3rLjfatnaKnl44Vk/Oy9L4cR6tfXmyvF6T+ieiR2emCFB6Qsf4KAfCilzOzvOkxnfpxRgA12qRSWalZlg1e0Y/YUGhEQgbIuwKeF0X1e1m7EzwFtAt+9dYfB/luWUBlAPJfeAueAsYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBoBQEYbcBofecB/A/FwUHM8J5pRwAAAABJRU5ErkJggg==",
			"name": "pxflib",
			"parameters": {
				"value": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "HDRI",
						"name": "hdri",
						"shortdesc": "Image Input",
						"type": "rgb"
					}
				],
				"instance": "",
				"longdesc": "Type - Image operation\nCode - PauloFalcao\n\nSubtract a fixed RGB value from the image",
				"name": "HDRI Subtract",
				"outputs": [
					{
						"rgb": "$hdri($uv)-$value",
						"shortdesc": "Image Output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Value",
						"longdesc": "Value to be added or subtracted",
						"max": 32,
						"min": 0,
						"name": "value",
						"step": 0.1,
						"type": "float"
					}
				],
				"shortdesc": "HDRI Subtract"
			},
			"tree_item": "PauloFalcao/Image/Util/HDRI Subtract",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"Pow": 64,
				"Reflection": 0.2,
				"Shadow": 1,
				"Specular": 0,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1
			},
			"shader_model": {
				"code": "",
				"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D A",
						"name": "sdf_a",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.1,0.1)",
						"function": true,
						"label": "TEX3D A",
						"name": "tex3d_a",
						"shortdesc": "TEX3D A",
						"type": "tex3d"
					},
					{
						"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
						"function": true,
						"label": "SDF3D B",
						"name": "sdf_b",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
						"function": true,
						"label": "TEX3D B",
						"name": "tex3d_b",
						"shortdesc": "TEX3D B",
						"type": "tex3d"
					},
					{
						"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
				"name": "Ray Marching 360 HDRI Image",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Reflection",
						"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
						"max": 1,
						"min": 0,
						"name": "Reflection",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024,
						"min": 0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Render/Ray Marching 360HDRI",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABAlJREFUeJztm01IVFEUx3/mEwIHoohACTc11KIwRIgYjBa5MGhlLaKCwYW0KHER2aJFC6GPRYS0aTO4EUsojCAiYmjXooWKBdYmmGrRpxU5JebU4mZY3Pvkf3vOE26/1cy95//ucJg599xz7tS8hx84uA3kF73fAjwAal0C4BQwuOj9SeBipUKpVIpRpUcEcFQUvQaOiJpisUhX10lRtfxECy/uiMIJr+U+eKmWk1Vpf4C0Cd4BkW2w3+NBhUJBVDR7rpQsVgcAnI4RvbOMZbNZcrmcuPxOICNqkiW6HTN5WXxYuVwmkzkrqqaAC6ImOaL8Egb6xjUO3Bc11+VVkiL4IBi8A6ItgvFeryXyHpo+r5V8iB6IgtEvX0TFNuC4qNkHtIoaP6JaTG7/N7atboGxsTF1GWBU1HwGRkSNTgTmYKPm9m1tbaJiCjgjaq4BD0WNRvBBMHgHOFPh5afRQ5N8YLQ6oFAokM1mxUdNivY7gAFRcxDoFDXxOL8BuVyOcrksPm69Y/ytY3wt8Mox51o7g0m3kyE6FTNpDjbqYntE+xfAAVFzD7gkauxEg0uaqAcbgKei/VePNZIh+F0geAdE2nk/j8ntFQZF+zpgWNR0AN2ixhBdrFREyXHcm4cr2qtb10agwTE36xjfDMyI60BUKpUoFouibBST2yuotaWP6MfiCdTcIgJ+dWzUpoV6sAG4Kto/Bl6KmieSdfBBMHgHOKJZs/iYRkxur5AX7QF6Rft64ESshcMB/ZimhcIAJrdXOBcz98YytgloF9doATY4Z2OOwxn0SP8Kk9sr3BLtvwNDouYNcNM6s0Q94AJ60+IAem5/TLR/BtwQNXcxW+ufBB8Eg3dAFUpidaJ9k8caLR6a3YDsgD5M00JhGJPbqxqFLNAVM//JMrYL2O7zDWjFNC1suMpYDdgCkH2rW2BaHF+NXpes+P4ERjBNC4U+TG6vsF+0fwmclxT/EAN8OjbqwQZirjEmQvC7QPAOSGgbbMU0LRR6Mbm9whXRvgnoibVIMA/oxH3jy1XGasfk9jZc0d7VsfrmGF8DzDvmykknQuOYpoXCECa3V1CrUdO4vj3LkAn6dGzUgw3AI9He3oILPggG74AqHIY6RPsW3IHOhfqPB4BDQFUc0I1pWih0YXJ7G65oH+do25WvdUBjtW6IzKBfw5pET53V8tpsNa/IDKA2LdSDjUEr4QUfBIN3QIq3xOo9NGq5bOuSFik64AR6La8Hk9srHI6Zm0vTAWA6NraymK2Gt8A89oNS3O3m586ZlB0ApmNzV9RcwX29zoX9T10rwAFgL5hWh/+7QNofIB1qfr9agQ7YjWlaKBzC5PYK5nbqCnQAwHbAdXvN1XxpxF56m4tZp4afE5e0ibv6TscAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {
				"NStairs": 5,
				"Size": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D A",
						"name": "in1",
						"shortdesc": "SDF2D A",
						"type": "sdf2d"
					},
					{
						"default": "$uv.y",
						"label": "SDF2D B",
						"name": "in2",
						"shortdesc": "SDF2D B",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - Mercury\n\nMakes SDF2D stairs with 2 objects using Mercury fOpUnionStairs from https://mercury.sexy/hg_sdf/",
				"name": "Union Stairs",
				"outputs": [
					{
						"longdesc": "SDF2D stairs generated by the boolean operation",
						"sdf2d": "fOpUnionStairs($in1($uv), $in2($uv), $Size, $NStairs)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5,
						"label": "Size",
						"longdesc": "The size of the stairs",
						"max": 10,
						"min": 0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "NStairs",
						"longdesc": "The number of the stairs",
						"max": 10,
						"min": 0,
						"name": "NStairs",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Union Stairs"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/Union Stairs",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"NStairs": 6,
				"Size": 1
			},
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF3D A",
						"name": "in1",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "$uv.y",
						"label": "SDF3D B",
						"name": "in2",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - Mercury\n\nMakes SDF3D stairs with 2 objects using Mercury fOpUnionStairs from https://mercury.sexy/hg_sdf/",
				"name": "Union Stairs",
				"outputs": [
					{
						"sdf3d": "fOpUnionStairs($in1($uv), $in2($uv), $Size, $NStairs)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5,
						"label": "Size",
						"longdesc": "The size of the stairs",
						"max": 10,
						"min": 0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "NStairs",
						"longdesc": "The number of the stairs",
						"max": 10,
						"min": 0,
						"name": "NStairs",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Union Stairs"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Union Stairs",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"scale": 16,
				"scale_x": 1,
				"scale_y": 1,
				"scale_z": 1
			},
			"shader_model": {
				"code": "",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_F3 =  0.3333333;\nconst float XsX3zB_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_random3(s), x);\n\t d.y = dot(XsX3zB_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise using nikat code from https://www.shadertoy.com/view/XsX3zB",
				"name": "Simplex Noise",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "vec3(XsX3zB_simplex3d($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale))*0.5+0.5",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16,
						"min": 0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16,
						"min": 0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16,
						"min": 0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Simplex Noise"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/Simplex Noise",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"brightness": 0,
				"clamp": 1,
				"contrast": 2,
				"iterations": 5,
				"persistence": 0.5,
				"scale": 4,
				"scale_x": 1,
				"scale_y": 1,
				"scale_z": 1,
				"transx": 0,
				"transy": 0,
				"transz": 0
			},
			"shader_model": {
				"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [

				],
				"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
				"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB",
				"name": "Simplex Noise Octaves",
				"outputs": [
					{
						"shortdesc": "TEX3D output",
						"tex3d": "$clamp",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16,
						"min": 0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16,
						"min": 0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16,
						"min": 0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate X",
						"longdesc": "Noise X translate",
						"max": 100,
						"min": 0,
						"name": "transx",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Y",
						"longdesc": "Noise Y translate",
						"max": 100,
						"min": 0,
						"name": "transy",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Z",
						"longdesc": "Noise Z translate",
						"max": 100,
						"min": 0,
						"name": "transz",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 12,
						"label": "Iterations",
						"longdesc": "Noise iterations / octaves",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Persistence",
						"longdesc": "How higher octaves affect the output",
						"max": 1,
						"min": 0,
						"name": "persistence",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Brightness",
						"longdesc": "Overall brightness",
						"max": 1,
						"min": 0,
						"name": "brightness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Contrast",
						"longdesc": "Overall Contrast",
						"max": 1,
						"min": 0,
						"name": "contrast",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "Clamp",
						"longdesc": "Makes the output restricted between 0 and 1",
						"name": "clamp",
						"type": "enum",
						"values": [
							{
								"name": "false",
								"value": "$(name_uv)_out"
							},
							{
								"name": "true",
								"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
							}
						]
					}
				],
				"shortdesc": "Simplex Noise Octaves"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/Simplex Noise Octaves",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"MatCapMode": 0,
				"MatCapRef": 1,
				"Pow": 64,
				"Shadow": 1,
				"SkyColor": {
					"interpolation": 3,
					"points": [
						{
							"a": 1,
							"b": 0.979167,
							"g": 0.864656,
							"pos": 0,
							"r": 0.793357
						},
						{
							"a": 1,
							"b": 1,
							"g": 0.6984,
							"pos": 0.118182,
							"r": 0.510612
						},
						{
							"a": 1,
							"b": 0.557292,
							"g": 0.329521,
							"pos": 0.411598,
							"r": 0.287342
						},
						{
							"a": 1,
							"b": 0.416667,
							"g": 0.209503,
							"pos": 0.945455,
							"r": 0.17114
						}
					],
					"type": "Gradient"
				},
				"Specular": 1,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D A",
						"name": "sdf_a",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.1,0.1)",
						"function": true,
						"label": "TEX3D A",
						"name": "tex3d_a",
						"shortdesc": "TEX3D A",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.0,0.0,1.0)",
						"function": true,
						"label": "MatCap A",
						"longdesc": "MapCap image for object A\nMatCap (Material Capture, also known as LitSphere) are complete materials, including lighting and reflections\nDownload MapCaps from https://github.com/nidorx/matcaps",
						"name": "matcap_a",
						"shortdesc": "Image MapCap",
						"type": "rgb"
					},
					{
						"default": "$uv.y+1.0",
						"function": true,
						"label": "SDF3D B",
						"name": "sdf_b",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "(vec3(mod(floor($uv.x)+floor($uv.z),2.0))*0.25+0.5)",
						"function": true,
						"label": "TEX3D B",
						"name": "tex3d_b",
						"shortdesc": "TEX3D B",
						"type": "tex3d"
					}
				],
				"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tfloat fog=max(1.0-(d/50.0),0.0);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tfloat r=clamp(dot(reflect(rd,-n),light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\tif (dS.y<0.5){\n\t    \tvec3 mc=$matcap_a((n*mat3(cX,cY,ray)).xy*0.5+0.5);\n\t\t\tfloat mcf=$MatCapRef;\n\t\t\t$MatCapMode\n\t\t}\n\t} else {\n\t    color=$SkyColor(rd.y).xyz;\n\t}\n    return color*(fog)+$SkyColor(rd.y).xyz*(1.0-fog);\n}\n\n\n\n",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a matcap image for reflections",
				"name": "Ray Marching MatCap",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024,
						"min": 0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "MatCapRef",
						"longdesc": "MatCap image reflection strength",
						"max": 1,
						"min": 0,
						"name": "MatCapRef",
						"shortdesc": "MatCapRef",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "MatCapMode",
						"longdesc": "Matcap Mode",
						"name": "MatCapMode",
						"type": "enum",
						"values": [
							{
								"name": "None",
								"value": ""
							},
							{
								"name": "Direct",
								"value": "color=mc;"
							},
							{
								"name": "Mix",
								"value": "color=mix(color,mc,mcf);"
							},
							{
								"name": "Add",
								"value": "color+=mc*mcf;"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": {
							"interpolation": 3,
							"points": [
								{
									"a": 1,
									"b": 1,
									"g": 0.6984,
									"pos": 0.009091,
									"r": 0.510612
								},
								{
									"a": 1,
									"b": 0.317708,
									"g": 0.187858,
									"pos": 1,
									"r": 0.163812
								}
							],
							"type": "Gradient"
						},
						"label": "SkyColor",
						"longdesc": "A gradient that tries to simulate a sky",
						"name": "SkyColor",
						"type": "gradient"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Ray Marching MatCap"
			},
			"tree_item": "PauloFalcao/SDF3D/Render/Ray Marching MapCap",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Correction": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D A",
						"name": "in1",
						"shortdesc": "SDF2D A",
						"type": "sdf2d"
					},
					{
						"default": "$uv.y",
						"label": "SDF2D B",
						"name": "in2",
						"shortdesc": "SDF2D B",
						"type": "sdf2d"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"label": "SDF2D Custom Union",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "joinSDF2D",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nThe union between SDF2D A and SDF2D B is defined by a custom SDF2D",
				"name": "Custom Union",
				"outputs": [
					{
						"sdf2d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Custom Union"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/Custom Union",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAQhJREFUeJztkKFNgwEUBi80BEFq8CV4LKKKAVgAVHcAA2ELdsAjMJWVHQLxLwH2w5K3wAm+S575nrkcy7IELgL8uc/AT+B+7M+B78Db2G8CX4H92Al8BI6B67G/BA6Bh7HfBt4Dj2NfB14DT4Gz8bsL7AKXY78KbAObsZ8GzgOrnPDPaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsGsAWsGkAW8CmAWwBmwawBWwawBawaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsGsAWsGkAW8CmAWwBmwawBWwawBawaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsfgH3UU+JzCgMYwAAAABJRU5ErkJggg==",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
				"name": "Axis",
				"outputs": [
					{
						"sdf2d": "$mode",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Mode",
						"longdesc": "SDF2D made using the distance to axis X / Y at 0",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "$uv.x"
							},
							{
								"name": "Y",
								"value": "$uv.y"
							}
						]
					}
				],
				"shortdesc": "Distance to Axis"
			},
			"tree_item": "PauloFalcao/SDF2D/Generator/Axis",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "paulofalcao_sdf2d_input_3",
					"from_port": 0,
					"to": "sdsmoothboolean",
					"to_port": 0
				},
				{
					"from": "paulofalcao_sdf2d_input_4",
					"from_port": 0,
					"to": "sdsmoothboolean",
					"to_port": 1
				},
				{
					"from": "sdsmoothboolean",
					"from_port": 0,
					"to": "sdboolean_3",
					"to_port": 0
				},
				{
					"from": "sdcircle_2",
					"from_port": 0,
					"to": "sdboolean_3",
					"to_port": 1
				},
				{
					"from": "sdboolean_3",
					"from_port": 0,
					"to": "paulofalcao_sdf2d_operator_custom_union_3",
					"to_port": 2
				},
				{
					"from": "sdbox",
					"from_port": 0,
					"to": "paulofalcao_sdf2d_operator_custom_union_3",
					"to_port": 0
				},
				{
					"from": "sdbox_2",
					"from_port": 0,
					"to": "paulofalcao_sdf2d_operator_custom_union_3",
					"to_port": 1
				}
			],
			"icon_data": "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",
			"nodes": [
				{
					"name": "sdcircle_2",
					"node_position": {
						"x": -222.004883,
						"y": 128.290039
					},
					"parameters": {
						"cx": -0.35,
						"cy": -0.35,
						"r": 0.06
					},
					"type": "sdcircle"
				},
				{
					"name": "sdsmoothboolean",
					"node_position": {
						"x": -50.192383,
						"y": 19.727539
					},
					"parameters": {
						"k": 0.15,
						"op": 0
					},
					"type": "sdsmoothboolean"
				},
				{
					"name": "sdboolean_3",
					"node_position": {
						"x": 157.995117,
						"y": 56.290039
					},
					"parameters": {
						"op": 0
					},
					"type": "sdboolean"
				},
				{
					"name": "paulofalcao_sdf2d_input_4",
					"node_position": {
						"x": -221.004883,
						"y": 69.790039
					},
					"parameters": {
						"mode": 1
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdbox_2",
					"node_position": {
						"x": -221.004883,
						"y": -147.709961
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"h": 0.5,
						"w": 0.1
					},
					"type": "sdbox"
				},
				{
					"name": "paulofalcao_sdf2d_input_3",
					"node_position": {
						"x": -221.004883,
						"y": 9.290039
					},
					"parameters": {
						"mode": 0
					},
					"seed_value": 34667,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdbox",
					"node_position": {
						"x": -223.004883,
						"y": -277.709961
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"h": 0.1,
						"w": 0.5
					},
					"type": "sdbox"
				},
				{
					"name": "paulofalcao_sdf2d_operator_custom_union_2",
					"node_position": {
						"x": 194.22168,
						"y": -194.967773
					},
					"parameters": {
						"Correction": 0
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "$uv.x",
								"label": "SDF2D A",
								"name": "in1",
								"shortdesc": "SDF2D A",
								"type": "sdf2d"
							},
							{
								"default": "$uv.y",
								"label": "SDF2D B",
								"name": "in2",
								"shortdesc": "SDF2D B",
								"type": "sdf2d"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"label": "SDF2D Custom Union",
								"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
								"name": "joinSDF2D",
								"shortdesc": "SDF2D Custom Union",
								"type": "sdf2d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nThe union between SDF2D A and SDF2D B is defined by a custom SDF2D",
						"name": "Custom Union",
						"outputs": [
							{
								"sdf2d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10,
								"min": 0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Custom Union"
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/SDF2D/Operator/Custom Union Example"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror symmetry using the chosen axis",
				"name": "Axis Symmetry",
				"outputs": [
					{
						"sdf3d": "$in(vec3($mode))",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "Axis Symmetry"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAhhJREFUeJztmrFKw0AYx38txaE49hW6OLSDL6CzgoM+gBQEFzdxc+omPoAghD6ADgV1tS/g0sGlbyBOIg5Scg5JIW01McnlPu19fzhoc7n8jj+5S5vvXwMMdIA+sA00gXfgE7taA9aBD+AROAfGcZ8cvwYdA9fAJvAMDIER8Gp5Ai1gC9gDNoAn4CjuE+UPDUwNPBhoG6Di1o5ZUxOxpfm8GRg7gicnMTYRW5Zfj9bcEJh8c9tUpUnMbCLNb0QbzmjhhB2CYN8qste7Be4TR0bASeKzGP/FQHfuFgmCwIRhaLUFQbBwG3ZNxJblN9JcO6vXrbh/EYaFxrngpxoAcFkSflpyfNV8Oxb/Y3lvQOYSSOrwl+cNck9Djp/LAICrjP7jvBcU5uc2AODuh+O7RS4mzC9kAMDBwvebohcS5nu/CaoB0hOQVuE9wPWar4pfyABXu70Lfm4Dqn7Ou+bnMmBgGZ5XVfC93wS9NyBzCZT9P19WVfNTDSj6JseWXPAbUcWkNXcweoFoV8vXbBGxZ5/F+FMDfYfv5GetHxcnpPmeF0aQL03J8r0vjtYA43N53PsfQt4vAaQ3IXm++GNI8wGifM0HSNfnpfmaD8garPmAFZf3Bmg+IO8kNB+A5gMAzQesjNQA6QlIS/MBRQZpPkBQmg+wLO83Qe8N0HxAWqfmAyxK8wFLTfMB5i8URpAvTWk+AM0HCPK/ANfkGNbiPqw8AAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D",
						"name": "in",
						"shortdesc": "SDF2D",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nTransforms a SDF2D making a mirror symmetry using the chosen axis",
				"name": "Axis Symmetry",
				"outputs": [
					{
						"sdf2d": "$in($mode)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XY",
								"value": "abs($uv.xy-vec2(0.5))+vec2(0.5)"
							},
							{
								"name": "X",
								"value": "vec2(abs($uv.x-0.5)+0.5,$uv.y)"
							},
							{
								"name": "Y",
								"value": "vec2($uv.x,abs($uv.y-0.5)+0.5)"
							}
						]
					}
				],
				"shortdesc": "Axis Symmetry"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 5
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from MaterialMaker\n\nvec3 circle_repeat_transform_X(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.y, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Y(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.z*s;\n\trv.y = p.y;\n\trv.z = -p.x*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Z(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.y);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c-distance;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - Paulo Falcao, RodZilla\n\nRepeats its input shape around a axis",
				"name": "Polar Repeat",
				"outputs": [
					{
						"sdf3d": "$in(circle_repeat_transform_$Axis($uv, $Repetitions, $Distance))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 4,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the circle",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Polar Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"RepX": 3,
				"RepY": 3,
				"X": 0.1,
				"Y": 0.1
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec2 opRepLim2D(vec2 p,vec2 c,vec2 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor(p/c+0.5),vec2(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - IQ\n\nRepeats its input shape",
				"name": "Repeat",
				"outputs": [
					{
						"sdf2d": "$in(opRepLim2D($uv-vec2(0.5),vec2($X,$Y)*2.0,vec2($RepX-1.0,$RepY-1.0))+vec2(0.5))",
						"shortdesc": "SDF2D Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Repeat"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Correction": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D A",
						"name": "in1",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "0.0",
						"label": "SDF3D B",
						"name": "in2",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"label": "SDF2D Custom Union",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "joinSDF2D",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThe union between SDF3D A and SDF3D B is defined by a custom SDF2D",
				"name": "Custom Union",
				"outputs": [
					{
						"sdf3d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Custom Union",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdcircle",
					"from_port": 0,
					"to": "sdboolean",
					"to_port": 1
				},
				{
					"from": "paulofalcao_sdf2d_input",
					"from_port": 0,
					"to": "sdboolean_2",
					"to_port": 0
				},
				{
					"from": "paulofalcao_sdf2d_input_2",
					"from_port": 0,
					"to": "sdboolean_2",
					"to_port": 1
				},
				{
					"from": "sdboolean_2",
					"from_port": 0,
					"to": "sdboolean",
					"to_port": 0
				},
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "sdf3d_smoothboolean_2",
					"to_port": 0
				},
				{
					"from": "sdf3d_box_2",
					"from_port": 0,
					"to": "sdf3d_smoothboolean_2",
					"to_port": 1
				},
				{
					"from": "sdboolean",
					"from_port": 0,
					"to": "sdf3d_smoothboolean_2",
					"to_port": 2
				},
				{
					"from": "sdf3d_smoothboolean_2",
					"from_port": 0,
					"to": "paulofalcao_raymarching_360HDRImage_4",
					"to_port": 0
				}
			],
			"icon_data": "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",
			"nodes": [
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -270.503448,
						"y": -252.542542
					},
					"parameters": {
						"r": 0.01,
						"sx": 2.5,
						"sy": 0.1,
						"sz": 2.5
					},
					"type": "sdf3d_box"
				},
				{
					"name": "paulofalcao_sdf2d_input_2",
					"node_position": {
						"x": -279.503448,
						"y": 64.957458
					},
					"parameters": {
						"mode": 1
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdboolean_2",
					"node_position": {
						"x": -119.503448,
						"y": 24.457458
					},
					"parameters": {
						"op": 0
					},
					"type": "sdboolean"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -277.503448,
						"y": -125.542542
					},
					"parameters": {
						"r": 0.01,
						"sx": 0.07,
						"sy": 1,
						"sz": 0.5
					},
					"type": "sdf3d_box"
				},
				{
					"name": "paulofalcao_sdf2d_input",
					"node_position": {
						"x": -278.503448,
						"y": 11.457458
					},
					"parameters": {
						"mode": 0
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdcircle",
					"node_position": {
						"x": -278.503448,
						"y": 124.457458
					},
					"parameters": {
						"cx": -0.3,
						"cy": -0.3,
						"r": 0.18
					},
					"type": "sdcircle"
				},
				{
					"name": "sdboolean",
					"node_position": {
						"x": 66.496552,
						"y": 45.457458
					},
					"parameters": {
						"op": 0
					},
					"type": "sdboolean"
				},
				{
					"name": "sdf3d_smoothboolean_2",
					"node_position": {
						"x": 23.527435,
						"y": -194.659851
					},
					"parameters": {
						"Correction": 0
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "SDF3D A",
								"name": "in1",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "0.0",
								"label": "SDF3D B",
								"name": "in2",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"label": "SDF2D Custom Union",
								"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
								"name": "joinSDF2D",
								"shortdesc": "SDF2D Custom Union",
								"type": "sdf2d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThe union between SDF3D A and SDF3D B is defined by a custom SDF2D",
						"name": "Custom Union",
						"outputs": [
							{
								"sdf3d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10,
								"min": 0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "paulofalcao_raymarching_360HDRImage_4",
					"node_position": {
						"x": 461.496552,
						"y": -239.542542
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1,
						"CamD": 2.095,
						"CamX": 2.5,
						"CamY": 2,
						"CamZ": 3,
						"CamZoom": 1,
						"LookAtX": 0,
						"LookAtY": 0.224,
						"LookAtZ": 0,
						"Pow": 64,
						"Reflection": 0.2,
						"Shadow": 1,
						"Specular": 0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1
					},
					"shader_model": {
						"code": "",
						"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D A",
								"name": "sdf_a",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.1,0.1)",
								"function": true,
								"label": "TEX3D A",
								"name": "tex3d_a",
								"shortdesc": "TEX3D A",
								"type": "tex3d"
							},
							{
								"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
								"function": true,
								"label": "SDF3D B",
								"name": "sdf_b",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
								"function": true,
								"label": "TEX3D B",
								"name": "tex3d_b",
								"shortdesc": "TEX3D B",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "Ray Marching 360 HDRI Image",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1,
								"min": 0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024,
								"min": 0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/SDF3D/Operator/Custom Union Example"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"mode": 0,
				"smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror smooth symmetry using the chosen axis",
				"name": "Smooth Axis Symmetry",
				"outputs": [
					{
						"sdf3d": "$in(vec3($mode))",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
							},
							{
								"name": "XY",
								"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
							},
							{
								"name": "XZ",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
							},
							{
								"name": "X",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"max": 1,
						"min": 0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Axis Symmetry"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Correction": 0,
				"DirX": 1,
				"DirY": 1,
				"DirZ": 1,
				"Distort": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nfloat distort_$name(vec3 uv){\n\tvec3 s=$tex3d(vec4(uv,0.0));\n\treturn $sdf(uv-s*vec3($DirX,$DirY,$DirZ)*$Distort);\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nDisplace a 3DSDF based on a TEX3D in a direction",
				"name": "Displace by Direction",
				"outputs": [
					{
						"sdf3d": "distort_$name($uv)/(1.0+$Distort*$Correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.1,
						"label": "Amount",
						"longdesc": "Displace amount",
						"max": 1,
						"min": 0,
						"name": "Distort",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Dir X",
						"longdesc": "Displace X",
						"max": 1,
						"min": 0,
						"name": "DirX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Dir Y",
						"longdesc": "Displace Y",
						"max": 1,
						"min": 0,
						"name": "DirY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Dir Z",
						"longdesc": "Displace Z",
						"max": 1,
						"min": 0,
						"name": "DirZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Displace by Direction",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Bound": 0,
				"Correction": 0,
				"Distort": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nfloat distortByNormal_$name(vec3 uv){\n    float d=$sdf(uv);\n\tif (d<=abs($Distort*($Bound+1.0))+0.01){\n\t\tvec3 n=normal_$name(uv);\n\t\tvec3 s=$tex3d(vec4(uv,0.0));\n\t\treturn $sdf(uv-(n*s*$Distort));\n\t} else return d;\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nDisplace a SDF3D based on a TEX3D in the SDF3D Normal direction",
				"name": "Displace by Normal",
				"outputs": [
					{
						"sdf3d": "distortByNormal_$name($uv)/(1.0+$Distort*$Correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Displace",
						"longdesc": "Displace amount",
						"max": 1,
						"min": 0,
						"name": "Distort",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Bound",
						"longdesc": "Keep this value as low as possible!\nOutside of the displacement the SDF is just the original SDF.\nThis value controls that bound.\nIncrease this correction value if the resulting SDF is not perfect on the edges.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 2,
						"min": 0,
						"name": "Bound",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Displace by Normal",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAIABJREFUeJyNm2lwZdld2H9nudvbpCe1Wi21nqReZvPsnhl7PItnvMTGBlJ2yklVygbyIUAVH4CkCBCwGjNqO1RIBXAoklSlQqgCqnCAIgFDgoPHNp7xjGef6XFPb5Ke1IvU2vXWe+9Z8uE9qaWetpNbpad73z3vnPPf1yNGb3/Kc9M1M3OK2dnZg18KEMDMzMzeV37v48BNbzAgxMEpbswpDswJglOnZpidPb3vu973Qhxcc//b3cfZ2VlO7Y0R+6e/CY6Dv52ZmUGM3v6033136sBCB1eZnZ3dtxH/LuDfhbB9v52ZmbnxXhz413t/amYPET2kvfv/fhj2g3HrdcUePO9+f+PXM6dmEEfueNrvUuDggBsU3Z3E7/vwfpcy/uD7m2aZ+T5I7f3mBwAvBKdnT+/d747Z2/zM55mdneVm9r2x7ql3cdPudfr0LjEFYuzOD/n9A2ZO7duw34/hXarfoP7MzOcPbOBmbN+Ko/aPP73HFQKxS4T+/enTswgh9p4PcoJnZmbmAEFurH8Djj2k7RM1xL51byDgJrniBuV6k/YW8LvUB2Y+P8O7ReHdyDiA0P7Y2dnZA5u6QeXe/alTp/aA3+OCA9SfOTjhfjyIg4g9tccJNxCxH1Fi7M4P+/1c/wMnPwDwrYC/WRfcArGnenL5g4BHCMQtKc9NuujgPnff7669f+5dJJw6NXMQAeN3fXgPjr2JbwWsv8EN+xX/fsX4zD7gD8he/+FmTb2LhNOnZ/eodRAhuwjojfv+itYfsFx7SDtA+V3FeOrA2uI//vE3/OzsM3tT7Zct3/vgmdlnDsjardh+Zubze/cHzN0B83mzebxB4dOnZw8839AHfeBPz+5D6s3Xu+VeCA6a1VuIA4AYv+sj+0C5Bcvfghv2w38rLS9u8bT8Gz9LVYzTFpKhX/qlfYi4AdyPrr7O+8bfx6KA/2LMTdYBPte5wh8WJt6t2cWtuOvdXDazy2H73u2JwP5rv4m7WeZnn7nBhjMzM5T+3W8SZSkt57gYxkz84i+CAPtbv0XebKGjiFa6jA4PkztPIgSRFLyRL/KQH2NFSSKtGU27jGQdrA4566BRKPAH1gFw6tQM0akZqgIu5Jar8SZ3/tp/3kPcfu66WePvUv/07OxBc7o7fGw/AvwuYJ+/8XiTktu9ZmdnmUkKHJKCnXaHVIASgrPA6vzzfLT2CAM4Gjrm0vZZjhx+gGWTs9VdYefyeaYGB/hk8RgviIAxrRhr71AKI+oy5FoY0XCWloeJXzvFSz/3j/ip8m1sqJBlL1lNYgZ/5Vf2KLsL+a7FuSFhoq/1b1iS/RyAB/F7f/Ss7wH0zB5VD4B6E3/0xvWWOB1FrMw/x5UkpHLkYb577hs8efvTXO1coXJtnvdOPsJ1HbKy+jp3H36QQ1Kw6DxNfxVRr/MP3/NhvvXONyiM3McjlQJKKV698DzXnMMDh44+xDcWXuCfTjzIUBSxlmZs6YBlqbnSvEhUvg0nBP91b3fv5oKZUzN9syjexf4A+mYodzX5zMzM9wEe/kOhwFGXYVvbTA3dwZqULFnHw7c/xdm8zng0wWbxOv9r4UUOK8XdRx9msrmFKFdRQrA1N09BSjId0PGeahhSHRpmq9UmAyIhSIC420ILwfHhYbI0hZ0dmsbSKVWgcjvXV16hOzTCZzY3uNBocvv0NP9dTYA/4AK+S0ROz87idxHxe3/07AErcCuO7/nyvTG/2r7Ie8ceoph1iaUklALvDIubW7wdFbmEYKX+He45/jhHOy0CZ4gQ3DNQYTsocHXu21y1FgE8dNdHePOdrzNx4gnePzrK9Z0Gr739Naz3jCnF36UpD97xIZ4oJ1y+dpU3ZMCGsYw6QxTFpEqTeU8AlJwl6WlsGgheXH+Tu3/vf+yj/A0O2f+sXv3e4he41XWTPvjQ88/zPr1KNTnJsLUUw4AwLhAmBZK4wNHhYdT2Jk2lUcNTLM8/z8DYnagspbJzAQojlEplVlfn2PaetveMbi2RA/FgjSOlEjtpyubqHEUpGazezrONZT4+eoI07fKSCkmd4972DlWtCQGJwOQG6xzCOiIhKOAoOMNoPMLy33+b+OkPvQvo/SKi97TBvuvTV1/hJ04+Qdhto770DMbkbHRTnh0Y454kJmztEMiQIAyxQCoEUgU8/t6H2Hr5ZToyoDT9GOt5xlaxQnPDwvKb1I78EA4w3tPxnpb3DElJUH+B9NCPYIVgUEoOS8nc5nmeDEOiIORi6tie+xYfPnIPydAQzSzHOY90DgGEcYzNMqy1aCwuz8g8tFEsnDpFWSmqzqEEDPz6r4MXPYt2+hnkAfnoX5+940OUvKccJ1QrAxwdHeO+6WP8VBISrF3jXGMHm6coHEppcudpZhlrWw3uODTCEaBgck7ajFpzC+c938gy5uYvEAuBBAJAAVetpXDH02RZTiAkR+98mp3ycV7MMk6ceJKus5w5/00enHyE2thRdBgjdYjwEDiPcBYjBDKKEYD2ji3nWIwKdLRiMMuY6LQ42t7huHf406f7BPfgfU8J7vfiln7m04TFJ9FKEWiNDgKkVugg4PD73s/U6GEufuVP+GrX8JHNdY4cGQehya0lNZbq4BAjq2u0nGdIS44kEcvl49S3LvDttXe4c/wBhlbeIvaeopQUvScSgvUzf8uRB3+Y1toGK5vn+WAYUisWudBuc9U5bq9W8UGMi0AJRawDTLtNSUjWOx3aOmBQCTaaHeaLgwRXX8Eee5zAWjaCmHUBVUBYy799ZnbPedI32/ZnCjHCWozL8TLu00n1BuzswG/+Aicff4LP/Otf4uzSIle3t7hrokYYxAgBQkomq1Wube3Qto7xsSMcHRklvBzxlytnmFp5iyNHH8Rce4MTD/4wrVf+Eg8M3fdDYA3n6i+TCMGJE4+RxBEX3vgbHgkCiuUBNtsd1t55FgFY76lMfwB2dlBCcNlZLgcRSWOeCxs5yfHHOdnYYshkRG1HqDQyjMiCmF92OcHsaWDPDN7w38XIA2zkKbq5Q6UbUowTwiBASsnG+ir2oR8CAVIqjo0cJktT/mJ9m5ONeU4cHmX8iSdZ3Vgj0goRJpggwRjDAyfuoLF5nlXnCFoNBice4sjwIG8Jweo7zzL80I+w8MpfMWcMn7rzScqHjtDsdKhby6fu/Rid3LB85m9R/U13AF9/gSNTj7C6uc5OVGZiZ5NyaZp/rDXFtEkYBcgkBATGOToOtnPDWLHA/M9+mvKX/xxd+OJprMk5JSTbCM7lhvml7wJwl9aMK0UiBBvO8fUs48kwhCP3odIum9bxretn+Omph1mIYv7iwvPcs7bGcLkCzrO68B02yx+j+c6zWO+5755/wDff+luKhRKHi0VW1jZJvacoBInWnLeW+4OA63MvcnWupyzPG8Nhpbn62lcByLzHCkEoBCvFaUa3NxmOYj4hDL6QoGSRQCuEVOA9Ao91HpvnODxOKXIh2GmnXPu1n0JPdJqk1pICRec4JCT50J14IWgKwZLWDOiA4SjinziL8h7hHEYKhhGMHn4Pr3hJ4hwDRx/iDxZe4IfDhzi6cZZFIVg5+3USIegCa2e/TsM5dsKE4OJz5N6Te48Ugma7zbwx3KM1l61FAinwiSiiWimz1VeckRBsjz/EeKXCWKAJcXTbLbppSjfPyPKcrjFIIfB4hPd0spyOs6RRwrqz2LXXOTw5yab36ILWSN8zKc45lPAoKQFBwTqq3jIoQFtFjsAqTe4yulmOlgItFYdNxvMEXF14gduUYn3lTa4BTee4X2tyQAKdvvkziy+yDBT6xtkB1858DQdcspZ151DAqnN8+q4P4YDxBz+Jz9q8+tbX0Zdf4rIQHLrjaWJv6TQaXGu1WJOKNEqQQkDaRTqHATqFEoUrL3PVOdacoyMldw0McbVeR9sgpJtlOEAJiKUkkAKLQEhJ7j1dY9CJJNMhqfdkgAkCsjTFYvGR4ogQLAPb3rNiDPcFAeedY85apvtiZLynIARvGsOJ48fJFxcJhehR1TnGlOKytew4h+1TO597HjP0ozS21zlz4XmyvkoOvEdbx7axfHXhJSaVIjvxJP7it1h2jkO3P8Vku8VQ3qW6s4EfuYdzy28wMvUBJiQkacrY0UPot9DIMCbMumh6m9FSEQhBABTwOA+ZCugoTddYMg+5VDTCiJ2wwHUlsfPPM6UUsRCU+8BOKoXsUz8AAiHoAFespXPpEkNScq/WKCAHQmC5HwgFQvCxKKLlPas7DV44920C0XNgVF8JLp39O+rWcnjiEaLl17h6/hsM3vZBHrOGI3mXIpbBYpFEK3JjGZ94L/PW8JW5F/jMyScZdQb1noGjX2hKRSeM6HgHUiGERAtBLCUVrdFhRFos0zAGLSC2hiDLSATEzjLoPKXKOKI6yerWElUp6XjPMaX4yzTl/WGI6AO1ZC2LznFEKVad454gIPOedt89aXrPYaU4oRRKCDrec/H6JWz/vQMs8GyWccU5ut4z2FqmM/4Qdw1PcRuOYWepSMFQUqBaKjNQrgCCbpqjpWR67Dbq888TlMbQY3mXlg5xUZF2GJFmGYPOMOAsER4lBGkYE138e+Tk+yk4izQ5ucmxUqK1ILYZhTwnF4Khow9xTQVUr7xEUQju0pq29wRC4LzHAKn3PHryJF89f57Ue1ado+09bSk53OecQAha3pN6z592OhzTmsMnn6QmFZHJ+ESWkjtH7myPWN4QW0fiBIkQJFJRiCIGBwbxzhHkFh3mlKOQrnNMHD/O9ZXvIYfyjHKeorKUDMEKsBRELMuAbevo5jnJlVfpeo9WCm0yMDl/uPo9/qw4wF9ffYMdIWlJRQtBLqAShaw4hxaCB4KAi9bS9p4d77ldawTQXlhAA2vOccYYNmo1lBAclpK77/sYufe8nee8ked8PI65+8QTTHpP7B2B7jlGaRDx1vKbrEdFKFWgr8/qrRbeZGig9MXTGOuwSHQU4hDo5jxudZnB0THEn9Xe6zeBNRWwGiVw+SWa3lOWkoHpD3BXp0G4eZ6Gc+jxBzmvQ27fXscD7TBmU2que4+++grb3hMee4yi8xSDAGctmfew+AL3ao0DqlLyn1otPhnHXDKGota82O3SlpIPhCEfVYr/k2UsWksIvEdrPDAqJVIIQmDl6MP8/aVvc/zow9xZKlEElHOEQOQtBW9pt5r8ycrbfOGhTyCDiFaWs5PnbDjH1rWXCUdGaXqP+syhqS90gpAdFXB45fWeaZp6FF88QicIWLv8CheMwQpBcOg4721sMlIsYFCk1iOBAoJg4Ci2OkWy+CJieJpSu0lHCOTSd3ktz1nznkEhyLznHWNoS0nqHOedY8l7RqXke2lKfvxxpoqHGY+HSDtrJEIwJCUA5489BtEwUdphqjDCpLdU8YRAKBWB0gRKEwcBY5UyNT2ItxYdRGTWYhA0nCMqOBbrdWTaQfzBvR/zmTGUnCHptCgpiZIKi2c7y9hyns1CmXzlDT4y+TCHkpht67jSbNOwDidVLwTttukUSuRhTKG5Tao088Zz/frraKDlPV3g/ijiW50OUim6wFCthgCSxUWOn3ySiTxj2GSobpvtQokFFREFmnJzm0NKUdIK0e0inAXvScKQICnidISXikBJIiEZDBWhNfzPdsbjQhAnCR1nWTaG+txzjJYLhCMPopNOk8EsZVBrqtVB4ihG6wCHJ+t22dzZ5mKpzJHykwwJR6FUYbvVQQeGwOd4ZzikJR0hUGGEzFOyrIssDSJMzrCUbDmHEgJXq1G/epXxMOTtPGdqepry4iJHJt9P9fgkxcYWA33LUgxDIpMTSEWWGaKsS1lpYhERJwmhAJsbtJIEWpMpgRE9TpFSInXI+E/+JNOnv0QjSSgGGtE1BEIQxyHhyIMk1iLLJqMaR5TLZVQY4ZVGBBHFYoW77noPxeIA3bnnGBKSgUoFJxVOCLQOiJTkUBxRUZKgPIDSAcJkeCExQBSGZFOPUpWSS8b0Yorxcd42hunpaUqLi9w39SjTnSbVToOyc4R5RkEpCmFIJQgYMjkD1lDSAUWlKAeaJAgpRDGDpSLFKKYYBERCEAiB9CClwCPo/NmfU9UBnTAiNwZpLa7RQFZrmDwnb7eRhShC9W1xKze0jCV1DicEaytrFK+9RltKYgGHRg6TeUBKQq0oBZqhKKCTZSQrb5IJQeY8HSnJ8ESFBNP3DseUIq/XiYVgemqK8uIi75l8lCOtbap4BqWgKAWRUgRSEeqeLFeCgAEBBa2JtCYUkkgpwiAg6UeqSgpirQiVJOxbGSEExlgGSkVe7c6hpKIURQwrAXmRFSmxUqCV0hgPuXV458FacucIlUR4OJPnHD/+OLEE7r4b8+w3AYikRIcakXapbF/knLWsdLpo78mlIheSDee5cunbKCEIB6sE21uUl5YwU48yVRtlvNsgsRYdRT3zpBSRlygl8UIgRE+eY60x1iDxKCnQUvZMsu4pPessSiqc8z0x8B7ZT3KFWtNdWkJU7qAQanwhZmxjg9dNhHEeLaTEWodxlrxf+8+tQXuLzg0v5DlPWUugFCvf/AZZniOsIXQG8pRr1nG1b14a1pLIXoqhax0jC8/jbvsgYbtNSUpENcCHIYH3RO0G2lqiMEQohUcQSkUIICSZ6/l9gdJESlEMA4w1vRDXOySCQAcMDw2xublJN8+RzqKkQOmg54JLgRSCo4WYQhSB8rSNIZaC480t5tbPIqXoJUWNs2Qmp51nbLRb1NdWua5DjilF0Vqsd2y3WnQ7LTApabtBvdPlrSuvccYYVscfJrY52uQkJuOQkqhjjzGtFLdHAUdNl8HWDsVuG5GmBHGCj2KsUngkUkhCqYiCACUlqXV0jMU4h1aKQhQT6QApJN57vHOUSkX47OeonjiBFAIlQDiHsAZvDcVHH0UBlcIAYai4sr7OdpaROU/BWWpH7kcHSpEZg7cWa00vN2AtOoxZuvQcheNPEHR2aImIXAi6eU6n06HcmONv2m2qUjIw9hDlToMYiLwjco5ISXIdUNSKMO9irCFE0DI5LRXQRRDoEOUskYfAg5K9OqF1DmNzug6Usb24fjdvK8B5j/OObqdL9KkPwFf+BCEVnhxnDc4ZNI785RfJsy66fIJziws0coPp5zSUFCSdFjqUghSP9I48y0gR5HEBu36WHe+5V/f88m6e08oztrIM0Vzgd9ptngpD4pG7ibsNojAkQBBbQ1FKpFJ08ER5Tuw9MgwJnQdrsFLRVAEb3pMKRUVA0RoAAqXQUqFzQ+odwlkqeY70jtTkZHmOlBIhJc12i4F//qs0dhpk1pEbS5pnCAHOGOpLS+S5wXQN880dvBDofnE2BKQAHSAQzuGdQwQBhAnR6hneMoaPRxFxp4mxlpYxrDtHe2eOv0lT3nvH04y1tgnSFBH2nRCgGgYMSEmjn3lW1lIMQgpRSJh2MZ0OnbQLsaSlNJudLiNKIpDkHqSQBIEiyTKkc+xIiWo2CLyj6xx2VyQyQ9VagosXCeKYTp7RNnlPFwj2kjzee6SXfH3zPI8O3UECKOfRUhBJhVZCIBF4D2EYExfL5Ktwu9aoE08QtBu0rKWhAzqrb/NilnH/7U9xT6dJyXvyQoEd47EOAjylKGY4SchTg9K91HrkHcVAIoSgk2Zsp20CrXE6YGT9LSpSsj58D4O544iQxEFIOcpRrSabYcyK0EQ27ef5BNILih467Q6BUhSsoZWmdKzDSgnW9jxFk+M9eBlyUim6YUzQbRMrSSAkoZRIZz1xGDJcLDGSJBzSAcNSclQpEut68XehxOWkzAVjmKgO8ojw1AJFuVgicwKkJgiCnnMURBQKBZIoQiPQqseuSEUUhiRRRFFrwrRL5D05cN05qutnaEiFAcbuuYcoDImlQKYdtpICausCy0HCmg5oJEWS9e8Rr5/laqPBVnOHTp6SeYfxYBEgJEJIlJSESlGRErP2NjKMEM4RSkUxCtFhlBCSUOgnF3JrSAE5NdVLTErNdRUg5p9jWikmxh9mPOswODzC5UabMFYEYQBCEFpHFCdIqcF1kYAxliQM8FKR2gyjNGGcUOq06VizlwRZcY5KGNHKDJw4SffV1xBJiSFnSVsNlo88iOyzr/CervcsOYeQATQaiCDEyF42WEuB8JI4ihCuZ87DfhaJQpm4A7FWlKIYqcOQIIqJk0JPxW6dpeM93fVVjJJ0opiNxhxlIageu59R5xg7dBgRJqgwIi4kCNljb611D+s6JAw03jsQgm6Wk1pHVyg6IkBECRGCosmJ+4mSTeeILn+XbWNoffNbbM99h+za6wSFMhPFAkc7DartBoM2o5x1WRl9gAwoXH+TbWNJsxS8Q3iH6Df+hUHQc5XxnPWeMSlRaUYYhAQ97YdMnSNtXaa1+gaJuEYwNETXe5zzbHe6bKQpOxsrFKanGdKDDEQx6ADrQQe618nle90hSu4WWj0KsZeaRkmMEL2sjxAQFXqursl6CAC6fVEoXX8D53tjW97TmXsOLUPGw5AJ7xiRkkPASD/3mHpPFkZ45xHWogGJJ1CKIAgoxAkFrTk5PU0wPc1IEKC8wDp64fzlC99CyhRdKnFhYYFmPyOLFBgpSMKQe6en2Vlaorj9DhZodrpkJu/53M6hBWAtabuNsznloSqBFGjR4wzrYavdpukcqZS0jSGJE4rA1dEH8PQKHpvOsep6fUFZn81T77FLLzJQHuTkoUOMFQoMhSHFPGN79AEKQvQCONErjMZKkihFEgREOmDiox8l1AFL9TqHpOTowADlMMILhYgLyHZfEXlgemoKU68jAYcg0QElKakIwZ3T06xubdJZfgkLvcSDUpSCEGUtWauFNzntTpvm5jqFMCTWGrzHOotTirS9xPDiC1ghkFJRCQIi38s75v2cwYpzZN0Wvp/8NEDuPTqMOTp6hHJcINQhRamoCsHqyH1IejmMQhCQaE0p7rm+URhBNyWKC+TAztISkVYcGhqiPDBAR4BMajXa/Rhgrl7nmrXkk5NUikMU8VTNJkm/2Sj1nnD4MOnyywjnKOqA0DtElhIJj8DRzlKurq1i8y7S9/IAxlgsnm7zOgYQ3SuoIKIaR8TOkwC+X29YdY4zl5eQ/TV3HUAvBNYLCoUSQRj1gPSeAQTae5TSJGFIMQwpJwmFKCaOYrbfPINQisFajYlKGefBOY/1noW555B/cfEi35mb4+zCAuvOccU51peWKJWmKQiBaFzj2uIi9XqdDDi3sEA0UCXUinIYkOCIZA/43Braec5Wp81Ws4HNuoRS9sxNep3RdkrqPVEsUEHIUKlMWQoGZC8N77yn6Rzd1bd7tX4h0P06gBAgRC8vKIQg0kGvj8g7VN+LlEJSiCLGfuKfkcQFlNT9oqhle2GBqHQYBBjv6Cy/TLlW63HAG3mOnJigbi0AD05PUxRQCCOq1SqyLx7jk5N0ved8vU5uDCbt4EwGzmGtxTpP5hztLKedZUg8EVAOQ2R7Hejl9YN6HZOtUiyUKTlHUYhe44QQmH6meKs41cv19d1XnMPkGXiHMb1gJ5KSyDm093ghyZ3HWkfzK3+KQJDmGa1uF2kv8/DJkz3z3L5CtvIK8cgRrjqHnvzFf0cNWATUb/4rxpRiZ2mJiRHD6voK41NTTE9N0e43IHW8J3COzW6XjsnIbY5zDrlLpb4+6UVxkkohoZMZqtVBrm9uYLzHC0GsujS6GaOFIkuVMsXNLaz3e1UiaQwDfd0QCYHJc6wzmDwly1JCJdESQi0xxpMbRzPNqRQ8mbV4b8mMpXv9NV5eXSfznnxoiKRaJa8e4rpz/O+LF5H7G5y/t7BAZ2mJu6enKZZisr427tUNexQamZxky3u2ckPHWpx3BEr2zE7/T0mJDgJ0EKCCEC8lsg9Y23t2nKPhPc3NdxgdqDAYJAwKQaFfJ1SAVAo3eDsJkEAvGMoyjDUIAblzWO/2dIUVgq6DRprT6HTYarfJm+fplCqc76fjrm1v8/bCAq/Mz/O1S5eo9vfF7DPPgPfce+wYw1JyZXGR8/U6He9JgUv1+h6S8oUFqrUamZR4IYmCkCSMiIKASGlCpQm1xgtJ10vW222am+eYq9dhaooMaPSLJFkhQglBVQdUpaQkelWdqC/jsQA1dj9u4mG8sxhre5GgAOvdHhI84JXCKIUJNDu54dKFb7LmHM9eukTL99L3O94T12qkR4+S1Gr8afUONP7G6YvtxUU+ftttJEJwfmGB0clJ3llYYHpqiov95x3vkd5TbC0hk6MU4xBtLbkDhMV734vs0HSEoptlrFxb4uTUFGcWFgiABrAyN0crCPjocUk5b/MaMCwlgl7ZPNQBlaDXzCBFr8DaTwegpcC4XpuM7Wv03HuiYoEt51ib/zaVWq1Xj8hzjgUBbe85VKvx1xcvUqrVGPr5LzEDiN/9b3/td/u/13/+s9wfBCi44YT0FWC9Xu89W0siBKMDJY6PvY/RSomOydnppnSNIXce4z0EIXm6xpWl7+HoVX4LQnDRWnS/VGaV4i6tOTE1xXlrac7PY4FJpdCj9zJWLNDILV5ptIBKGCC8Y6fTpZ3nZNaSOU/belwUQxyxsvAd4lqNpveEfbFSfdGrW8s1a7nzX/7GHkfLveZ3D4cnJ2k5x/DkJC3vOTw5yejk5B43jE1NYfustN7sYJ0FqQjCXiwRRjE6DHE6YGflVaxo0vKezPcOpdw5Pc1jx45R6pu3oclJNl2vSrO5uMhAXwxWpx4l1hEnn/wglWKJMAiJwgilNMNDQyRB0FeCPU9TKIUINM2VV1C1GsUrV6hcuUJNShLg7YUFXs9zvrwTHQAe6HeJ9RvFzL/4N5S+/Hlen58n9571hQUcPfZ7e2Gh560JQcE5ikC+foZG/DBoTWp6bXLt9bdZ3FjrVYK2d5icmmJ1cbHniwvB5tISlWPH2DCGtN8xct/UFAPes2wt8eIiRa4xWD5B89zHOlnFAAAD2klEQVQltAoIRa+1VgUhpWKFUtLCOofzGR1j8R5EEBCOHOGlLONnjh3j3MICa4uLhLUav1s5Ac1dkPc3hQrkzc3Bf3fpEo1+Gcvsk7va1BTbfXPXcr1mRFmtMvfOs1w88zVc5xLkdRY21th2jsE+G55bWGBiagqAS319srO4yJCUe6zZ9J6Fep0ri4ukk5NowDfrrG9vYfBkxmCso5vlbDeaDA4MUimWSMIILRVJkpBtXeTNhQV+tlhksa+0u8BPr6tbHurahVfeuO2Nuu23/5iN8XGOTE72QkroVXQWF0mEYMs5mlKyZC0rzlGo1Vh3jlfn59noPxdrNdaco1SrUanV2HCOl/vvO95z5/Q0raUl1hcXsX2zODw5uWdyLVC/tkD9/Depv/Msy3PPYXcuYPBsNhrk1hNFCZVimUKUEIYhhXLMmrUYYHxykpHJSc4bsx/WW55uUZ/81Ge/sIei/r/KYx+l++iHKZx9mdFqlcb2NgKYmprCVCp0d3bY8R5fqXBuYYHK5CQXNjZ4Z2ODsxsbtMplFp3jlYsXiQcH8cD1Uol4YIDLi4u0trc5PjXF1vY2Flje3ERWKlze3GRze5t0exvV58CMnv+w02rS2qhTUhm5KKGVRkqBFZBla2yR8fHDh5mr1wkHBrhqLafc8L4mYMFTH3xqP/cD/UbJmzlk9zn7uS9yDXC//SsEQrBoLa/Nz7NkLT9+2220ved1Yzh//jyD09OUhOCoEKwsLhILwV1RxLhSbCwuUhSCV63l+NQUo1qTwR71S7Ua54zhqnO8/9gxRpVie3GRsakpPFDvR6gZMLdylTuTkNaOgYHb8I05lpYvszU+zlHvaXjP4vw8X7IWyifwYj9U/gbkfSDFl3//rw6egtp3TijaPAeAFILfmJ0l9QdR9WFruWN6mvn+BkMhiOgFMeN9j7HlPRUhaC8tcWJ6mjfn50lqNQ71xSi8coWqEES1GlesxV++zJhSVKUk7G9rtz9IAbdPT3O9XicRguPT05xdWGDeGI5NT++V4Tc/97m9Pf7yb/8RtzxOs9sw/+Xf/6uDBwF3P/chYHZ2lkAIcv99tcn3vVTfVY2AH5+YoLO0RCIER6emmKvXCWBv44VardeCt7TE+48fZ21xEYBDfbOc9s1pKATL9ToCKE5OYn/sx37gHlrl4/0Dl6f2YL9xZOb7AA+9IGSX6v+/wO/G8LsMZ73ni6dOEQnBtdIxmr/zebIrV3pZp4kJ/v1WAMAvDOZ7IfG697y9sMCwEBybnmbVOV7KMu7QGnn5MlaIXgRZq9H+fwC/C45n/7moU3ui8X8B3okcrpzvDpYAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {
				"Bound": 0,
				"Correction": 0,
				"Distort": 0
			},
			"shader_model": {
				"code": "vec4 $(name_uv)_d = distortHeighByNormal_$name($uv.xyz);\n$(name_uv)_d.w = $(name_uv)_d.w/(1.0+$Distort*$Correction);",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D Displace",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.01,-0.01,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\n//By pauloFalcao\nvec4 distortHeighByNormal_$name(vec3 uv){\n    float d=$sdf(uv);\n\tif (d<=abs($Distort*($Bound+1.0))+0.01){\n\t\tvec3 n=normal_$name(uv);\n\t\tvec3 s=$tex3d(vec4(uv-d*n,0.0));\n\t    return vec4(s,$sdf(uv-n*s*$Distort));\n\t} else {\n\t\treturn vec4(vec3(0.0),d);\n\t}\n\n}",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nDisplace the height of a 3DSDF based on a TEX3D",
				"name": "Displace Height by Normal",
				"outputs": [
					{
						"sdf3d": "$(name_uv)_d.w",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					},
					{
						"longdesc": "TEX3D at the original SDF3D surface before the displace",
						"shortdesc": "TEX3D Output",
						"tex3d": "$(name_uv)_d.xyz",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Displace",
						"max": 1,
						"min": 0,
						"name": "Distort",
						"shortdesc": "Displace amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 50,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Bound",
						"longdesc": "Keep this value as low as possible!\nOutside of the displacement the SDF is just the original SDF.\nThis value controls that bound.\nIncrease this correction value if the resulting SDF is not perfect on the edges.\nA higher value will increase ray marching loop iterations and will result in higher render times",
						"max": 1,
						"min": 0,
						"name": "Bound",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Displace Height by Normal"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Displace Height by Normal",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 6,
				"Roundness": 0,
				"Smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "vec3 smoothRot_X(vec3 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p.yz);\n  float x=asin(sin(atan(p.y,p.z)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec3(p.x,x/s,y/s-distance);\n}\n\nvec3 smoothRot_Y(vec3 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p.xz);\n  float x=asin(sin(atan(p.x,p.z)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec3(x/s,p.y,y/s-distance);\n}\n\nvec3 smoothRot_Z(vec3 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p.xy);\n  float x=asin(sin(atan(p.x,p.y)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec3(x/s,y/s-distance,p.z);\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThis is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions.\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh",
				"name": "Smooth Polar Repeat",
				"outputs": [
					{
						"sdf3d": "$in(smoothRot_$Axis($uv,$Repetitions,$Smooth,1.0-$Roundness, $Distance))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Polar repetition axis, objects will be repeated around this axis.",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 6,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1,
						"min": 0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Roundness",
						"longdesc": "This is a correction to the smoothness.\n\n0 (default) - With correction, this way a flat object will no smoothess will be flat, the correction is not perfect with few repetions it's still possible to notice some distortion. \n\n1 - Without correction, using this setting a flat object will be rounded, even with smoothness at zero.",
						"max": 1,
						"min": 0,
						"name": "Roundness",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Polar Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"mode": 5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror symmetry using the chosen axis",
				"name": "Axis",
				"outputs": [
					{
						"shortdesc": "V4->V4 output",
						"tex3d": "vec3($mode)",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": 1,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "$uv.xyz"
							},
							{
								"name": "XY",
								"value": "$uv.xy,0.0"
							},
							{
								"name": "XZ",
								"value": "$uv.x,0.0,$uv.z"
							},
							{
								"name": "YZ",
								"value": "0.0,$uv.yz"
							},
							{
								"name": "X",
								"value": "$uv.x"
							},
							{
								"name": "Y",
								"value": "$uv.y"
							},
							{
								"name": "Z",
								"value": "$uv.z"
							}
						]
					}
				],
				"shortdesc": "Axis Symmetry"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/Axis",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABRNJREFUeJztWr9P8lwYPS2lFMTww93/wUEJMUbjYCIkxsDCYOLE5GRCwsbioonGCScX42BMjJMBJv1j2AiDYCiBlvYbvtx+pbRwW25t3u/lJE/qW25Pn3Puc2/vbV8OgI6/GHzQCQSNlQFBJxA0VgYEnUDQWBkQdAJBY2UAa8JsNou9vT3WtMjn8zg+PmbOK7AiymQyCIfDCIVC4Hn2hZVMJqGqKk5PTzEej9FoNJjwMsk0m81CFEUIgmAEayQSCSSTSWxsbCCdTqNQKDDh5eDTXiCXy4HjOIRCIYiiiHA4DEEQ8Pz8PPe6arUKjuPAcZxxTtd1XF9f+5EmuyFgBc/zEEUR7+/vrq67ubmZ+vfV1RXLtGbgWwX8KfDlMVgqlZhz1ut15pwA4yFQKBQgSRJEUWRJCwCQJAmPj4/QdR3lcpkZr6sKyGazjr8Vi0VEo1FEIhFIkrR0YlZIkmTE09OTY7tKpeKKl9qATCbj+HgrFouQJMkQH4lEXCVBA8JN4uXlxbZdKpXC5eUlNS+1AWSRYwUp+0gkMhWsYeYmJry9vc20i8fjSKfT1LxUBmSzWYRCIVsDyJgnyYmi6MscQLitRlgRi8Wwvr6OWq1GxUtlgCAI4Hl+ZolbKpWMpIhwvwyw3of83Wq1ptpFo1Gsra0hkUhQ8bpeB+RyOfA8j4+Pj7nt7u7uplaA5EiCVJQ5iMkcxxlHsiLc3d2de79mswlFUXBycuJGjvvHIMdxVD1MxJMwiycGkCPP81MGmMVbl8VOiEQinjZhrq8IhUJUy1uz+HlBqmNRLMLh4aGnoee6AmhvYhZGMwTMVWAdAjQV4Ca3qTzdXkDTG6QdEet1CJAjLX7FANq9vlUwMYIIN1eBnQFeKsDLewjfdoOvr69LTYJWAzY3N/1I07/3AXYVQPsY9DoEPOXpF7GdQLNwqwnW3vcyBLzAVwPsyn1e71sXQ6QK/ITvFUCELYr/pQFm8ebSXmSA13WAF/zKHGAn2jre502Cf6QB88TZVUJQk6DrAVatVumIbQQtEzTodDpu5XjbDdK2s5azUzj97rYCfmU36CYZ80xuZ4jT7162w17h2xxgFWAn2Ol36zk/4ekhS/O5yirGLpx629rzNCb0ej0vUtwboOv0eyc7IXaiFomnMUDXdVe5GfcGxW4wn88jmUwikUjg4eHBOF+v141X1Oa3taIo4uDgwHUy80DEEaG6rkPTNEwmE0SjUaNdu92GLMvo9/vY3t5eyEtVAZqmQVVVTCaTqfMXFxczznvpBVpY76Pr+pR4AFBVFYqiQJZlKk4qA5rNJkajEVRVtU3KHNZEWcGpAqxQVRWj0Qj7+/tUvNRzwHg8xmg0mjlfLpehaRo0TZsxgiWswjVNm+l9ABiNRvj5+aHmpTag0Wg4ltX5+bmRFDGCNczCNU1z/AAry7Kr+YfpK7G3tzfjU9nR0RErWgD/ViAxwa7nl4HOOlqtFnPO4XDInBOAvvovMn4RN5tNfH5+Ls3T6/Xw/f3NICN7+LYXUBQFPM/j6+vL+KIrCAK2trbmXtfpdKZ2dYqi+Lq2YDIEKpUKUqkU4vE4YrEYotEozs7OGKT3H9rtNlRVNZ7zsixjZ2dnaV4mQ+D29hbdbhf9fh+DwQDD4ZAF7RRkWcZgMEC/30e322UiHmA4BO7v7wEAtVptZsnMAv1+H7IsU6/waLF6CgSdQNBYGRB0AkFjZUDQCQSNlQFBJxA0/noD/gFzEtfh4gFJUgAAAABJRU5ErkJggg==",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "TEX3D",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nTransforms a TEX3D making a mirror symmetry using the chosen axis",
				"name": "Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "SDF3D output",
						"tex3d": "$in(vec3($mode))",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "Axis Symmetry"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Scale": 1
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec3(0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nScales the TEX3D texture",
				"name": "Scale",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$in($uv*$Scale)",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Scale",
						"longdesc": "Scale factor",
						"max": 10,
						"min": 0,
						"name": "Scale",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Scale"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/Scale",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAC4FJREFUeJztW3tMVEcX/+2du+wTcFctNW1arDVRUdQYJfioUJpWwJZmpWmMNsUY22gqDUI0GiGx9EGjrQW0JhAb0zXBiJC0vqKIm9ZXlFBTY2iJz6amqQUiWWXBfdzbP/xmvnv33rt3L0K3Sf0lE5adMzPnnDkz58yZWRMAEf9hcIlmINF4ooBEM5BoPFFAohlINPhEDbxgwQKYTCaYTCYAwJkzZxLChwn/Ajc4YcIETJ8+XfadIAhob28f9bFHTQHZ2dm4cOECACA3Nxccx7EZb2tr02xXUFDAPouiCFEUEQwGcfr06dFgc+QVkJ2dDZ7nwXGcolAFmEwmHDt2TLV9cXEx+yyKIlpaWgAAhYWFEAQBx48fH0l2R04BWVlZMJvNIIToCs/zPHieByGE0RNCEIlE0NXVhVmzZgH4vwXs27ePjfPmm28iGAxqKtAoRkwBixYtkgkkFZx+NpvNTHipAggh6O3txaFDh2R9lpaWMiUIgoCvv/4aALBy5UoEAgG0trY+Nt8jooCXXnqJCXLq1Ck8++yzyMzMhMlkAiEESUlJTHhqJVQBu3btitn35s2bmRIikQh27NgBAHjvvfcwODgIr9f7WLw/tgIWL14MQohskyosLITJZEJSUhITnhY6+7W1tXGPUV1dDUEQmBKqq6uRkpKCVatWIRAIoLGxcdj8P1YgpCU8z/Ow2WyaxWq1GhrHZrPB4XDAbrfD4XAAAPx+P2pra+FyufDBBx8MW4ZhW8DixYvB83xcvrq0tFRhAYQQXLhwQXcz2717N/tM94LS0lIZzdatWzEwMICdO3calmNYFkBnPt5Apa6uDlarFRaLhRWr1YpXXnklZru9e/fCarXKis1mwxtvvCGjczqdSE1NRUVFhWFZhqUAuuHFi6KiIiZ0tCKoy4vG/v37ZW2kZdmyZTJah8OB5ORk7Nixw7ASDC+B3Nxc8DwfM5pTQ1paGjZu3KjqBletWsXoqqqqkJGRAY57NDf0rEBBl4EgCFi+fDn7fs+ePRgaGkJZWRnKysriXg6GD0PUzxvF3bt3UV5eDgBobGyUKeDAgQP45ZdfMGPGDNXASQppXCCFzWYDIQS1tbXw+/1x82VIkry8PHAchxMnThhppsCaNWtw584d5iaTkpLQ19cn+19a6HKRfrZYLDhy5Ajrk3oYu92OyspKVFVVxcWLIQugs1NYWIijR49q0i1ZsgQ5OTno6urCt99+q0pDAyRCCIqKigBAFhQVFRXhu+++U7Tz+XyywIji7bffRnNzM0wmExobG+O2Al0LyM7OBvBoo2lra2PmqYWPPvoIOTk5MJvNmDt3Ljwej4KmpaUF06ZNg9lsxo0bN1T7URMeeBQBUsuI3ojfeust5ikcDgc+/vhjPfH0FUAIwcyZMzEwMAAALMJTw7Zt25i/pxFgYWEhFi1aBAAYM2YMWltbZTQbNmzQZVKKa9euMQXcuXNHUV9cXAyr1Qq73Y6UlBTd/nSXACEEP//8s+z/6EPI5s2bYbFYZCEvLZ999hmuX78OAOjv72fBED0PDAdmsxmiKCIjI0O1vri4GAcPHoTdbtftK6YFzJ8/X7bju91uxexv3LhRdtChZevWrVi9ejUTnuL111/H3bt3YTab8ccff+gyqAbpOJcvX1alsVgssNlsuu4wpgIIIfD5fOz/hQsXwmw2K5ihwkv/9vb2avZbUlICjuPi2qm7u7tlEaPL5VJY2ZUrVxTtqMegZwctxFRAtL///vvvZWbLcZyq8NFKUuvXYrFgy5YtmjRdXV24fv06eJ5HQ0MDbt68iZs3b6Kzs5MFUtLzRTSoAmw2W0xeYkaCCxcuxNmzZ2N2AADbt29nA9INauXKlaq048aNw5EjR9geMHv2bAXN7t27UVBQoBsMSaPCSCSCKVOmMBq73Y5AIKDL+4hlhJxOJ3bu3Mk2Q+oFpAeXs2fPKsLgzMxMRV8dHR1IS0uTuVz69/Dhw1i6dKmqAl588UXWx/nz5zF//nxdvjWXwIIFC+KXHsCDBw9kuzsV8OTJk/D5fDhz5ozse57nkZeXp9rX3LlzFbSEEHi9Xrz//vs4cOCA6pmC4sqVK3F7GE0FxAp2tCDN8VHGo5UiZbinp0e3L2m7TZs2AQDKy8tVx7l16xauXbsmc7F6WeRRVQA9OHk8HtW6WAgEAjLa6upq3bHU+tcbx3Ak4vF4MHXqVPz0008K7aoJn5OTAwCYN28e6uvrkZubC0IIy/drYcyYMWwDTE1NldX5/X62B9CJEkURhBAIgsDGvnTpku6ZQNMCpHd1Ho8H7777LtatW4cXXngBHMex8FbWmSQdTgjByy+/LKtfv349U84333yjyVR/fz84jkNzc7NC+ObmZsWdAyEETz/9NOrq6lTvJIalAAB45plnFO5I2vFXX32lqQCtgWldfn5+TOG3b9+ONWvWKOqXLl2quH9wu90AgM8//xzPPfccJk2ahIyMjLiWcUwFTJs2DcCj/WDfvn2Ki45oIU+fPh23Aurr6zWFnzhxouZJTpos4ThO98AjirG9vKGESH19vcwa6Nmb4tVXX5VldOjlqBSTJ0/GxIkT1Zn5n0B9fX2q9a2trYpbJy38+uuvAKDpailiboLRaScAqKmpQXV1tUwJNIEZvVRMJhM6OzthNptVA55oxJrNcDis+E4vzFXjPxoxLaC9vZ3ttmqIDlOjrUMrlDWKSCSiyBNq9fnpp5/i9u3bLELUg+4SUEtAVlZWxi344yggEokgEonIwmFpCQaDGBoawsDAALZt24be3l6UlJQwnrOysnTH0I0DBEFQNb/y8nJs2rQJe/fuZUff9PR0NDQ0qDJsFHTM6PbR1kgt9MMPP0QoFGK5Qmm+UA+iXnG5XKrfjx07NmY7t9stZmVliXa7XXeM6LJkyRJREARREARRCkEQxEgkIobDYTEYDIqDg4Pi/fv3xXv37ol//fWX+Pvvv4vd3d1iR0dHvGPpE+Xn5xsWwGhJT0+PWU+FpwoIhULiw4cPxUAgIPr9frGvr0/0er0iAPHq1atGxjbGaFlZ2YgL393dLQ4MDOjSqc3+gwcPxP7+frGnp4fRdXZ2xj123HEAfbwUDodjZnKkyMrKwuXLlzFp0iRNmszMTEyYMAGiKGJwcFCTrqamRpEDkOYCxo8fz2jv378fp1QGEyIejwfjxo1DamoqkpOTdXN6Fy9eVH0cUVVVhY6ODvz444+Kd0I0hrBYLLK+wuGwahIkHA7D5XIxukuXLmHevHmjowAAeOedd+B2u5GSkgKn08nO6NH44YcfFK9DYr0RUntXBAC3b9/G/v37UVlZqZj9cDiMUCiEp556yogIMhi+5fR6vQgEAnj48CGCwSC+/PJLVTrqiqLN1Wh5/vnnce7cOZSUlLA+6cxHCz+cO8th5QSXLVvGzvM1NTX4888/FSfDtrY2RX5QmjmWZnuo+Utnn/p+p9PJ+vT7/TLTT0tLY3U+nw+5ubn/jAIAYPny5WhqagIAfPHFF7Db7Vi7di2rP378OMsSUyVQBVRUVMhuduPBvXv3mFVINzxg+MIDj/FIqqmpiT1QCAQCGBoaQkNDA0tg5OfnIxQKIRQKIRwOy0pXV5ehsXp6ehAKhRAMBhXCz5kzZ9jCAyOUFq+oqIDL5YLT6YTdbofNZmP3AidPnpQ9l5NuglOnTlXtb8WKFRg/frxiWY0GRuxeoKysDG63G8nJyXA4HIpsjs/nky0DNS8QfXZIT0+X9fHJJ5+gqakJV69eHQmWAYzCY+mCggLk5eXht99+Q11dnayuvb1d1RWqJTl27dql+4p0JPCP/l7g8OHDqu8Fo4WfM2eOrF1LS4viZdhI4R9VgNfrle0H1Pzb29vx2muvAQALdkKhkOy3A6OFhP1iJCUlxdBrrtHCv+InM4nEf/5XY08UkGgGEo0nCkg0A4nG31PqaQfp4ecSAAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"brightness": 0,
				"clamp": 0,
				"contrast": 1
			},
			"shader_model": {
				"code": "vec3 $(name_uv)_bc = vec3($in($uv)*$contrast+vec3($brightness)+0.5-$contrast*0.5);",
				"global": "",
				"inputs": [
					{
						"default": "vec3(0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nChanges TEX3D brightness and contrast",
				"name": "Brightness and Contrast",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$clamp",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Brightness",
						"longdesc": "Brightness amount",
						"max": 1,
						"min": -1,
						"name": "brightness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Contrast",
						"longdesc": "Contrast amount",
						"max": 2,
						"min": 0,
						"name": "contrast",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "Clamp",
						"longdesc": "Clamp values between 0 and 1",
						"name": "clamp",
						"type": "enum",
						"values": [
							{
								"name": "true",
								"value": "clamp($(name_uv)_bc,vec3(0),vec3(1))"
							},
							{
								"name": "false",
								"value": "$(name_uv)_bc"
							}
						]
					}
				]
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/Brightness and Contrast",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAA+BJREFUeJztWttuozAQHcDY/aAIRPrQVqpUqb/cx/5NqjwhIe7sw2roxNjGyTZmss2RLAgQ7HPmeDyQRAAwwS9GvPUAtsZdgK0HsDXuAmw9gK3x6wUQITrZ7/eQJAnEcQxRFM1bbCZ8fHyEGNr1BCiKApIkmYlT0rgPAE4RQuDHBSiKAoQQM2naaNSpGPr5kPgxAfI8hzRNTyJuIy+EACHEiUOSJFmdFtfAjwiAUdctT+d8HMeQpulMnl5vyg+h8E8C7HY7UEotiFDySZKAlHImjy4xCbDFNLhYgCzLZlI28lLKmTw2Gn3MFabvhsJFAmRZBlJKa+SFEDN5kwAuB7AXYLfbndhYj2CapqCUMpLXHXCTAiilZgI6eSklPDw8OKNvSoL6fdgKQIsbPXsrpWby6IA0TRcJ8GanQJ7n1oSH5JVSC/tLKU/I36wDcN7r5NH2SN42/89xQByHe0bzEsBU12PCo7an5F0JcC0JshPAVNsLIWbCOvH/ygFFURjrehNhnbwpAdocwDYHuCo8m9UpedcSaFtOWTlAjwzW9pSgS4g1AZA8SwH2+/3C/jaiaHPTZ58pQF3AZgro0cfMbyNv2rpqAPZTQH+R4Yq0jTxt9BnCVQixEUB/feUi59N08jfhAHSBaeC2Y/ScSwxXMRQKVgEeHx+N7/HWiJqKHGz0OPtCiL6awuXPNnhbcznEtQqwEgCzv2mwPs33WnYCIOhb3bWBu8hTe6/dJ2QdYJX68/Pz+yJDlqZkTOfXXGC7D+6HgpfXbL/k+DaXeFsnwbMEoBXhtVsoePdk+l1v7Xc+076pmc6HgrOncRwXx1zE9WM256ydDylABEz/Jte27cmKEEURTNPfoU7TBNM0wTiOMI4jDMMAwzBA13XQdR00TQNVVUFZlpDnubOfIH+QuAR6IUa3+jX0OBWn67rVflgLgFudIAUSpg0dUdf1aj+s/yPkWxBR8jgl2raF19fX1e+yFsAUbbpvIt73PXRdB1VVefXBdgpQ2IhjEqTJsO97aJoGnp6evO7NVgA9+vS4jTiuAGVZevdzUwKYIk/Jt20LVVXB8/Ozdz+sBZimabECUPJInJLPsuysftgKgFWoXgDRyOuFz+FwOLsftgIMwwAA3wLYsj2SPx6P8Pb2dnY/bAXo+362vz739Tl/PB7h5eXlon5YC4DQKzxK/nA4XBR5BFsBsI6n0e/7fl7nL0l4JrAVoGkaAIBF5HGdP2epc4GtAHVdn2R8tLxvhecLtgKUZTk/0tZ17fVgcwnYCvD19QXv7+9X74ftG6FQYP04HAJ3AbYewNa4C7D1ALbGrxfgD7hpBE5IUx6AAAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"x": 0,
				"y": 0,
				"z": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nTranslates the input TEX3D",
				"name": "Translate",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$in($uv-vec4($x, $y, $z,0.0))",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 0,
						"label": "X",
						"max": 1,
						"min": -1,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "P1.y",
						"default": 0,
						"label": "Y",
						"max": 1,
						"min": -1,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"max": 1,
						"min": -1,
						"name": "z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Translate"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/Translate",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABgRJREFUeJztmstuHFUQhr+5ebARIPEskSOHBSAhIfEGWfIIkbJELCKWSNnlFVjBDiJFyiovgyxsCYU4xmO3WZwudXV1nVvPjBuBSzrqmb7W/5+/6tQ53TPglv+xzad2YGq7J2BqB6a2ewKmdmBqW0714M+AWdsA3kzkx4w7GAYfAQuC3GZqqwmw1gCv9+0YeyTghABagGvQ8hvSJNy2rQFe7cNJ9kDACSGu5k6bOc07Libgr9ttA7zcpbPskICHwIp+j8fAL9umFbJgGBZaATcEIv4GroDfduE0OyJAet1KXsf8nEDQkiEBXn4Qi5FwAfyyreNsScADYM0QiAa/AA7owItKPAJiyVFIuKFPwnvgHPh1LAC2IOCYDlQM/AEd+BV9BQgJ88i1NjE29EnYEELhgkDCz2NAMJKAYwKwWM8v6cB7BKQUYAnQDkoi1CRIOJwBP9UCYQQBInvpSduDq/a4B94qIEeAVYHkAp0PrggkvAN+p56E6kpQwOvsLY4fAB+Q7n0vCdr7pAjQCfGGobJqrUoBJ/hxPyMAF/CigBXDBFgaAjJJiY0IWgU6H/wJ/FgKiAoCHrZgPOmvW/BrhvKXa2oV4BEAfQKkSJJQuCSQ8AfwvJCA4hCQ4cv2lsh+jU+AlmipAmrCYNkSoO/TlIKiUAEndD2pH3QAHNJXQCz+U0VQjgBdGcrWhoFWwTvC0PisgIAiBXi1/VIBtsB3rQAvD0hN0LT32qjraI+VWFYBuvd19j9smyS/WPxb8DEFeDkgVg94o4FOhpfAX4Rc8F2GgKwCUhVeTOorZ7+XAGPDaUoBHgGNul7ObYCPc+BqCdC1vQaYIiJHgIAfS8CiJcEqpgGOCghIhsAj+lXfgiB3K387/o8JAa2C3KqRrQf0cCjlsYTBKfAkQUBSAV5cxno3tk3VALkQsCtHAl62mgB9nRxbAx+mAOYIsL2gwZWC101PhVOFUGktoPNAbCXpcBsCbBymwJU0Cz6lgBoC9Pm0+3R+Gk2AvrHneGyfPpYiIzcj9ELAI6ChHyJSI5QQMI8d0Ov2moAcUK/IWTj7c4TYc3PPjJG+Al4kCIgqwBYhMedSLaWQ1Cig5Z+aFd4yDBNRhX52SgVZAsQJz9mSVnrutgTo/d79qwnQRIhTOcdT4OcV94nVAV45rMEv6FeF0lIWPf7GnORlaQs+BjJGjnefEkK9a2P+zYFvEwQUzQZtONS2FHkp52PDIHSxrv/HRpCUVRGgb34XLVUHQCdfnQvmDPPC1gRgnIk1bxwvIS12vGQuINfeMgQP+dWhJAHexSngdl9MObnj9l4xKWsFxPzfpACqe7j2mv6QY806l1OH9zu3LzYqWFLsf6kQv0kBpCAERGqWhFLgJSGTOgdn6z1X+ys+53ofCgjQ7+c1CTHZWce9/9B3OgfeAsT8t02WyS5z4MjXCbyiv/Rkh5+YpSQaA5e7R8y86fEV8FXBtVkCoFOBMGvDQvdKTiFiHiHWvN7Wvz3gsip0kXm+WBEBLwnLTJoESTLWEc9xb59HWszsvb0lMfsBxeeZe4oV1wHyFtYjIUaGR4z3n8g+z1LAZT3wbSkoChUA4Zuci/YBGzoSaonYptnnxF6QfrEPAiB8k/O+fdCGoRrstpaYxtl6gO3LEA3+uAYQFSEgdk7/PaCsvV23N9Mk3NBNUb1WUtTM6IeHJkLAy1cip7VgqFQAhA+SzunCQatBmqeK2t83DHtbr/1f0X8lfgZ8XQuGEQqA8EHSY+IvPeVFpUxzr/GnqXbGJrO6W+e47n0b82fAl2OAMJIACN/iPCa/+qPLXvBndgv6szkrS1vhafCnjOt5sdEEQPdB0lPK63rwk58lzZ6rX39JzNcmPM+04rayJ8CnwEeE11Hy7tB+O2BDRqsmRpb9LO4tdUNdynZGgNj3wCcEEo4YkuC9JI31vk6MIvnSCq/Udk6A2A+E9/NHdJ/RrPG/F0yB3xAyfcnEZoztjQBtz+nCQivBJk3oz+Vzixm7sDshwLMXdJ/bQnrpep82GQH/FquuBP9rdk/A1A5MbfcETO3A1PYPXh8951vojcwAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {
				"color": {
					"a": 1,
					"b": 0,
					"g": 0,
					"r": 1,
					"type": "Color"
				}
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
				"name": "Color",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$color.xyz",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1
						},
						"label": "Color",
						"name": "color",
						"type": "color"
					}
				],
				"shortdesc": "Color"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/Color",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"angle": 0,
				"axis": 1,
				"correction": 0
			},
			"shader_model": {
				"code": "",
				"global": "vec2 twist_rot(vec2 v, float a) {\n\ta=a*0.01745329251;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(vec2(c, -s),vec2(s, c));\n\treturn m * v;\n}\n\nvec3 twistX(vec3 v, float a){\n\tv.yz=twist_rot(v.yz,v.x*a);\n\treturn v;\n}\n\nvec3 twistY(vec3 v, float a){\n\tv.xz=twist_rot(v.xz,v.y*a);\n\treturn v;\n}\n\nvec3 twistZ(vec3 v, float a){\n\tv.xy=twist_rot(v.xy,v.z*a);\n\treturn v;\n}\n\n",
				"inputs": [
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTwist a SDF3D on the specified axis by an angle.",
				"name": "Twist",
				"outputs": [
					{
						"sdf3d": "$in(twist$axis($uv,$angle))/(1.0+$correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "Angle1.a",
						"default": 0,
						"label": "Angle",
						"max": 360,
						"min": -360,
						"name": "angle",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 5,
						"min": 0,
						"name": "correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Twist"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Twist",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"iterations": 4,
				"mode": 1
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "SDF3D",
						"longdesc": "The object that will be repeated",
						"name": "obj3d",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					},
					{
						"default": "vec4(0.0)",
						"function": true,
						"label": "V4->V4 3D Transformation",
						"longdesc": "The transformation that will be applied each iteration",
						"name": "trans3d",
						"shortdesc": "V4->V4 Transformation",
						"type": "v4v4"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"function": true,
						"label": "SDF2D Custom Boolean",
						"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
						"name": "custombool",
						"shortdesc": "SDF2D Join",
						"type": "sdf2d"
					}
				],
				"instance": "float for_fold_$name(vec4 p) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  return $obj3d(p.xyz)/p.w;\n}\n\nfloat for_min_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=min(999999.0,d);\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=min(m,d/p.w);\n  }\n  return m;\n}\n\nfloat for_custom_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=$custombool(vec2(999999.0,d));\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=$custombool(vec2(m,d/p.w));\n  }\n  return m;\n}",
				"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
				"name": "Fractal",
				"outputs": [
					{
						"sdf3d": "$mode",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 24,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "17",
								"value": "17"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "19",
								"value": "19"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "22",
								"value": "22"
							},
							{
								"name": "23",
								"value": "23"
							},
							{
								"name": "24",
								"value": "24"
							}
						]
					},
					{
						"default": 0,
						"label": "Mode",
						"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Fold",
								"value": "for_fold_$name(vec4($uv,1.0))"
							},
							{
								"name": "Min",
								"value": "for_min_$name(vec4($uv,1.0))"
							},
							{
								"name": "Custom",
								"value": "for_custom_$name(vec4($uv,1.0))"
							}
						]
					}
				],
				"shortdesc": "Fractal"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/Fractal",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
				"name": "Axis",
				"outputs": [
					{
						"shortdesc": "V4->V4 Coordinates Output",
						"type": "v4v4",
						"v4v4": "$uv"
					}
				],
				"parameters": [

				],
				"shortdesc": "Axis"
			},
			"tree_item": "PauloFalcao/V4->V4/Generator/Axis",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"x": 0,
				"y": 0,
				"z": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTranslates the input V4->V4 Coordinates",
				"name": "Translate",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4($uv.xyz-vec3($x, $y, $z),$uv.w))"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 0,
						"label": "X",
						"max": 1,
						"min": -1,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "P1.y",
						"default": 0,
						"label": "Y",
						"max": 1,
						"min": -1,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"max": 1,
						"min": -1,
						"name": "z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Translate"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Translate",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib_4",
			"parameters": {
				"mode": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror symmetry using the chosen axis",
				"name": "Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "SDF3D output",
						"type": "v4v4",
						"v4v4": "$in(vec4(vec3($mode),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "Axis Symmetry"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"mode": 0,
				"smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "V4->V4",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror smooth symmetry using the chosen axis",
				"name": "Smooth Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "V4->V4 output",
						"type": "v4v4",
						"v4v4": "$in(vec4(vec3($mode),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
							},
							{
								"name": "XY",
								"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
							},
							{
								"name": "XZ",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
							},
							{
								"name": "X",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smooth amount",
						"max": 1,
						"min": 0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Axis Symmetry"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"ax": 0,
				"ay": 0,
				"az": 0
			},
			"shader_model": {
				"code": "",
				"global": "vec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nRotates a V4->V4\nAdapted from RodZilla TEX3D Rotate",
				"name": "Rotate",
				"outputs": [
					{
						"shortdesc": "V4->V4 Ouput",
						"type": "v4v4",
						"v4v4": "$in(vec4(v4v4_rotate($uv.xyz, -vec3($ax, $ay, $az)*0.01745329251), $uv.w))"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "X",
						"longdesc": "The rotation around the X axis",
						"max": 180,
						"min": -180,
						"name": "ax",
						"shortdesc": "Rotate.x",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Y",
						"longdesc": "The rotation around the Y axis",
						"max": 180,
						"min": -180,
						"name": "ay",
						"shortdesc": "Rotate.y",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"longdesc": "The rotation around the Z axis",
						"max": 180,
						"min": -180,
						"name": "az",
						"shortdesc": "Rotate.z",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "V4->V4 Rotate"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Rotate",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_sphere",
					"from_port": 0,
					"to": "pxflib_18",
					"to_port": 0
				},
				{
					"from": "pxflib_8",
					"from_port": 0,
					"to": "pxflib_3",
					"to_port": 0
				},
				{
					"from": "pxflib_3",
					"from_port": 0,
					"to": "pxflib_5",
					"to_port": 0
				},
				{
					"from": "pxflib_5",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 0
				},
				{
					"from": "sdsmoothboolean",
					"from_port": 0,
					"to": "pxflib_18",
					"to_port": 2
				},
				{
					"from": "pxflib_4",
					"from_port": 0,
					"to": "pxflib_18",
					"to_port": 1
				},
				{
					"from": "pxflib_18",
					"from_port": 0,
					"to": "sdf3d_rotate_2",
					"to_port": 0
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "pxflib_8",
					"to_port": 0
				},
				{
					"from": "sdf3d_rotate_2",
					"from_port": 0,
					"to": "pxflib",
					"to_port": 0
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"name": "sdf3d_sphere",
					"node_position": {
						"x": -333.484985,
						"y": -293.11499
					},
					"parameters": {
						"r": 0.45
					},
					"type": "sdf3d_sphere"
				},
				{
					"name": "sdsmoothboolean",
					"node_position": {
						"x": 16.514984,
						"y": 43.88501
					},
					"parameters": {
						"k": 0.01
					},
					"shader_model": {
						"code": "",
						"global": "float sdSmoothXYUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Operator\nCode - IQ, RodZilla\n\nReturns a 2D SDF of a smooth boolean operation (union, intersection and difference) between the X axis and the Y axis\n\nBased of the original sdSmoothBoolean with X axis and Y axis for input",
						"name": "Smooth Union XY",
						"outputs": [
							{
								"longdesc": "The shape generated by the boolean operation",
								"sdf2d": "sdSmoothXYUnion($uv.x, $uv.y, $k)",
								"shortdesc": "Output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "The smoothness of the boolean operation",
								"max": 1,
								"min": 0,
								"name": "k",
								"shortdesc": "Smoothness",
								"step": 0.0001,
								"type": "float"
							}
						],
						"shortdesc": "Smooth Union XY"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_rotate_2",
					"node_position": {
						"x": 441.514954,
						"y": -148.115005
					},
					"parameters": {
						"ax": "$time*13.0",
						"ay": "$time*23.0",
						"az": "$time*17.0"
					},
					"type": "sdf3d_rotate"
				},
				{
					"name": "pxflib_4",
					"node_position": {
						"x": -332.484985,
						"y": 216.88501
					},
					"parameters": {
						"mode": 0,
						"smooth": "sin($time*0.2)*0.1+0.1"
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "V4->V4",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror smooth symmetry using the chosen axis",
						"name": "Smooth Axis Symmetry",
						"outputs": [
							{
								"shortdesc": "V4->V4 output",
								"type": "v4v4",
								"v4v4": "$in(vec4(vec3($mode),$uv.w))"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Axis",
								"longdesc": "Axis",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "XYZ",
										"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
									},
									{
										"name": "XY",
										"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
									},
									{
										"name": "XZ",
										"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
									},
									{
										"name": "YZ",
										"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
									},
									{
										"name": "X",
										"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
									},
									{
										"name": "Y",
										"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
									},
									{
										"name": "Z",
										"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
									}
								]
							},
							{
								"control": "None",
								"default": 0,
								"label": "Smooth",
								"longdesc": "Smooth amount",
								"max": 1,
								"min": 0,
								"name": "smooth",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Smooth Axis Symmetry"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -336.484985,
						"y": 114.88501
					},
					"parameters": {
						"ax": -20,
						"ay": 30,
						"az": -20
					},
					"shader_model": {
						"code": "",
						"global": "vec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nRotates a V4->V4\nAdapted from RodZilla TEX3D Rotate",
						"name": "Rotate",
						"outputs": [
							{
								"shortdesc": "V4->V4 Ouput",
								"type": "v4v4",
								"v4v4": "$in(vec4(v4v4_rotate($uv.xyz, -vec3($ax, $ay, $az)*0.01745329251), $uv.w))"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"longdesc": "The rotation around the X axis",
								"max": 180,
								"min": -180,
								"name": "ax",
								"shortdesc": "Rotate.x",
								"step": 1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"longdesc": "The rotation around the Y axis",
								"max": 180,
								"min": -180,
								"name": "ay",
								"shortdesc": "Rotate.y",
								"step": 1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"longdesc": "The rotation around the Z axis",
								"max": 180,
								"min": -180,
								"name": "az",
								"shortdesc": "Rotate.z",
								"step": 1,
								"type": "float"
							}
						],
						"shortdesc": "V4->V4 Rotate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -335.484985,
						"y": 13.88501
					},
					"parameters": {
						"x": 0.5,
						"y": 0.5,
						"z": 0.5
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "vec4(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTranslates the input V4->V4 Coordinates",
						"name": "Translate",
						"outputs": [
							{
								"shortdesc": "V4->V4 Output",
								"type": "v4v4",
								"v4v4": "$in(vec4($uv.xyz-vec3($x, $y, $z),$uv.w))"
							}
						],
						"parameters": [
							{
								"control": "P1.x",
								"default": 0,
								"label": "X",
								"max": 1,
								"min": -1,
								"name": "x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "P1.y",
								"default": 0,
								"label": "Y",
								"max": 1,
								"min": -1,
								"name": "y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 1,
								"min": -1,
								"name": "z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Translate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_8",
					"node_position": {
						"x": -335.484985,
						"y": -135.115005
					},
					"parameters": {
						"mode": 1,
						"x": 1,
						"xyz": 0.327,
						"y": 1,
						"z": 1
					},
					"shader_model": {
						"code": "vec4 o_$name_uv=$in(vec4($uv.xyz/vec3($x, $y, $z)/$xyz,$uv.w));",
						"global": "",
						"inputs": [
							{
								"default": "vec4(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nScales the input V4->V4 Coordinates",
						"name": "Scale",
						"outputs": [
							{
								"shortdesc": "V4->V4 Output",
								"type": "v4v4",
								"v4v4": "$mode"
							}
						],
						"parameters": [
							{
								"control": "P1.x",
								"default": 1,
								"label": "XYZ",
								"longdesc": "Scales all axis",
								"max": 1,
								"min": -1,
								"name": "xyz",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "X",
								"longdesc": "Scale X axis",
								"max": 1,
								"min": -1,
								"name": "x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Y",
								"longdesc": "Scale Y axis",
								"max": 1,
								"min": -1,
								"name": "y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Z",
								"longdesc": "Scale Z axis",
								"max": 1,
								"min": -1,
								"name": "z",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1,
								"label": "Mode",
								"longdesc": "- Multi-Field SDF mode is the default mode used for scaling Multi-Field SDF objecta.\n- Coordinates Transformation is the mode that should be used for coordinates transformations operations, like in the fractal node input V4->V4 3D Transformation",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Multi-Field SDF (def. mode)",
										"value": "vec4(o_$name_uv.xyz,o_$name_uv.w*min(min($x, $y), $z)*$xyz)"
									},
									{
										"name": "Coordinates Transformation",
										"value": "vec4(o_$name_uv.xyz,$uv.w/min(min($x, $y), $z)/$xyz)"
									}
								]
							}
						],
						"shortdesc": "Translate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -334.484985,
						"y": -183.115005
					},
					"parameters": {

					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
						"name": "Axis",
						"outputs": [
							{
								"shortdesc": "V4->V4 Coordinates Output",
								"type": "v4v4",
								"v4v4": "$uv"
							}
						],
						"parameters": [

						],
						"shortdesc": "Axis"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_18",
					"node_position": {
						"x": 41.86496,
						"y": -179.465012
					},
					"parameters": {
						"iterations": 6,
						"mode": 2
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "SDF3D",
								"longdesc": "The object that will be repeated",
								"name": "obj3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"default": "vec4(0.0)",
								"function": true,
								"label": "V4->V4 3D Transformation",
								"longdesc": "The transformation that will be applied each iteration",
								"name": "trans3d",
								"shortdesc": "V4->V4 Transformation",
								"type": "v4v4"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"function": true,
								"label": "SDF2D Custom Boolean",
								"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
								"name": "custombool",
								"shortdesc": "SDF2D Join",
								"type": "sdf2d"
							}
						],
						"instance": "float for_fold_$name(vec4 p) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  return $obj3d(p.xyz)/p.w;\n}\n\nfloat for_min_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=min(999999.0,d);\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=min(m,d/p.w);\n  }\n  return m;\n}\n\nfloat for_custom_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=$custombool(vec2(999999.0,d));\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=$custombool(vec2(m,d/p.w));\n  }\n  return m;\n}",
						"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "Fractal",
						"outputs": [
							{
								"sdf3d": "$mode",
								"shortdesc": "SDF3D Output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 24,
								"label": "Iterations",
								"longdesc": "Number of Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "0",
										"value": "0"
									},
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "17",
										"value": "17"
									},
									{
										"name": "18",
										"value": "18"
									},
									{
										"name": "19",
										"value": "19"
									},
									{
										"name": "20",
										"value": "20"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "22",
										"value": "22"
									},
									{
										"name": "23",
										"value": "23"
									},
									{
										"name": "24",
										"value": "24"
									}
								]
							},
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Fold",
										"value": "for_fold_$name(vec4($uv,1.0))"
									},
									{
										"name": "Min",
										"value": "for_min_$name(vec4($uv,1.0))"
									},
									{
										"name": "Custom",
										"value": "for_custom_$name(vec4($uv,1.0))"
									}
								]
							}
						],
						"shortdesc": "Fractal"
					},
					"type": "shader"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": 395.515015,
						"y": -34.114998
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 0.199,
						"CamD": 1.5,
						"CamX": "sin(sin($time*0.3)*0.5+0.5)*4.0",
						"CamY": 1.974,
						"CamZ": "cos(cos($time*0.2)*0.5+0.5)*4.0",
						"CamZoom": 1.003,
						"LookAtX": 0,
						"LookAtY": 0,
						"LookAtZ": 0,
						"Pow": 64,
						"Reflection": 0.2,
						"Shadow": 1,
						"Specular": 0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1
					},
					"shader_model": {
						"code": "",
						"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D A",
								"name": "sdf_a",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.1,0.1)",
								"function": true,
								"label": "TEX3D A",
								"name": "tex3d_a",
								"shortdesc": "TEX3D A",
								"type": "tex3d"
							},
							{
								"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
								"function": true,
								"label": "SDF3D B",
								"name": "sdf_b",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
								"function": true,
								"label": "TEX3D B",
								"name": "tex3d_b",
								"shortdesc": "TEX3D B",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "Ray Marching 360 HDRI Image",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1,
								"min": 0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024,
								"min": 0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/SDF3D/Operator/Fractal Example"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"mode": 1,
				"x": 1,
				"xyz": 1,
				"y": 1,
				"z": 1
			},
			"shader_model": {
				"code": "vec4 o_$name_uv=$in(vec4($uv.xyz/vec3($x, $y, $z)/$xyz,$uv.w));",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nScales the input V4->V4 Coordinates",
				"name": "Scale",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$mode"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 1,
						"label": "XYZ",
						"longdesc": "Scales all axis",
						"max": 1,
						"min": -1,
						"name": "xyz",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "X",
						"longdesc": "Scale X axis",
						"max": 1,
						"min": -1,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Y",
						"longdesc": "Scale Y axis",
						"max": 1,
						"min": -1,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Z",
						"longdesc": "Scale Z axis",
						"max": 1,
						"min": -1,
						"name": "z",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "Mode",
						"longdesc": "- Multi-Field SDF mode is the default mode used for scaling Multi-Field SDF objects.\n- Coordinates Transformation is the mode that should be used for coordinates transformations operations, like in the fractal node input V4->V4 3D Transformation",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Multi-Field SDF (def. mode)",
								"value": "vec4(o_$name_uv.xyz,o_$name_uv.w*min(min($x, $y), $z)*$xyz)"
							},
							{
								"name": "Coordinates Transformation",
								"value": "vec4(o_$name_uv.xyz,$uv.w/min(min($x, $y), $z)/$xyz)"
							}
						]
					}
				],
				"shortdesc": "Translate"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Scale",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"k": 0
			},
			"shader_model": {
				"code": "",
				"global": "float sdSmoothXYUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - IQ, RodZilla\n\nReturns a 2D SDF of a smooth boolean operation (union, intersection and difference) between the X axis and the Y axis\n\nBased of the original sdSmoothBoolean with X axis and Y axis for input",
				"name": "Smooth Union XY",
				"outputs": [
					{
						"longdesc": "The shape generated by the boolean operation",
						"sdf2d": "sdSmoothXYUnion($uv.x, $uv.y, $k)",
						"shortdesc": "Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "The smoothness of the boolean operation",
						"max": 1,
						"min": 0,
						"name": "k",
						"shortdesc": "Smoothness",
						"step": 0.0001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Union XY"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/Smooth Union XY",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAEuZJREFUeJy1m22sZVdZx3/PWmufczttBminEhg6nUpTQZzbaUwqhOInEUtiFBNLSAkxmIAmIFLQKrlnpPdchSoSUz5YbKGYmJBIW1SIBsObgQ5i4gdnvvCqpUqrFNrOtHPvPXuvtR4/rLX3Xnufc25pxZWZOWfvs16e5//8n5e19h5566dUxQAKIiAGjEBUiCF9qoKQmubPGNNFCICAMbmfpPuaO4sBjek3Ja+RJ2v7GpP+Wpv7FeMhr0E/HtKcMUJdJxnL+chrtHMK/T2R/lojOGPSTSUNEEkLhpCEh14gI2lCNH1XhapKk7UARu0VDrEAtkWQfq5WqKgQPSzqXoEWvBbs1ijt7zaDNp1m5U03DI35WnpDtdOWAGDA7e33i8XQCxtjtqyAsb3grTAtMN4nQTrlNPWRPFbLBUfjURALjqScddmyraL5w7n03bVWddloGVyNBaitXCHdb2VoRdTYXxsBN51m5BSiSyC0dNJCSRGIAhJ6thgZsqR1n1a4FkDo77d0jTGtFXzPGjJQxvRKtdiJSV9ihNj0MrfrdOwv2NNRPssTQh5fuLUrBxoSLcpJhd4ibaxorYzpxxjT97FZUC2sGOKQkmRmtfOXVjSmZ11rjNZ6SBEn4urYZAqjlLJLlteafg4Xs790SmdFjPSTm8IURZzpFYw91aX1/aK1flf6cMkIkeQKZSCOozlaJrSKoeAsXTArg6Zky7VUb8FCkvuUk7mWwq1ybWBq+3TBo7V+VrKlatunM0EpaXGp0rtM2dW2NCtAVi3iRGli6f26d+oiwMrS0r0bFqwoO7kjj36LkB0zasQag7OGuglYazAiLBqPzRI5a1FVoupANlXF2bRK7QNGBGsMAoQYMUbyGOnWs0YwRnLG6E0uQB0ClbVD/UWIMSaAjKCqiAhSpJgYkxxRe5hVNQVTk+6340KMuP0f/HvXceIcjQ/shsDGpCKo0qiyManY3a8xImheOKpijUFVubComTpHtIa9usEaw8UbExof2FvUaa4Y2W88F02qJHxU9kPk8KENzl/YI0RlUllMVsaHSBShcpbKWRofaHwgoqmPQsig102gcgYjyWC1kD59IKpSOUvdeATB2mTgRe0xRnD+qUdzYFN2Q2DiHJUzxEa6Rc/lSuTQpMJaQ+MD1hgC0IRA03hqoMrIBxEW5zOo1hIbQ4iRS5zD70a8KovG44zh3G5i2LSy+H24eGOSGNE0TCpHrJVoLSH3F4FF4zuQ6hgxYtDKUkfl4umEJgR8VCaVQ1VZ7Pocg5K/RBFCiOz5gKuf+gETZ4kxYhXqRWQvaKdM7T3OWnwI7C8stfcdvRGwImw4y0blCFETRTPtrDFUxqKNsuEsi32PZqpr7VFjaEJAgKYWJs6y8IL3kRAj3gjTyrHIbD63t+gsujGpmEJihSqhMSwaz/nHPM4arDFcAIwxOGNwzmCBxkemleOSytKYgLvELCCCDwEfIqHx1N4TjCGEiAjUJEpFYzhUOYyA95FF49nPffx00vmb5GTcIOzGSBMCIUQqZzuf9yFCZdGcBkSEZpF8W0SYGEMMSvQpsjU+sCEpfmgNIRhidpvKWhS4ZGqobcSHJs0PGDVsGIevc4zxgUUNUlVEVdzjj30Pl+tbzZXPBMViCBrZX3jagn0yqdAouMpxkTUcdoI1lv3a4+MuQgp0IbtM7VMgdapYVaRJPh2jMrVChQWT+u0tmuRO2RBGpLPkxNku2EVVKmtZZHaej0qdXcJZy6SyCCm4VtYSEJ7cjTQ+UlVp7RAj55pAjBH35LnHMJICyiRT6+LphA3nCDFyEZGFT1kgLPbBGPYXygVVzl/Yx8fARlVhs+VijPgQ8ZnqRgQRcNYQQpuoU7R+z7ceBuDPT74YEyJT4HmHKiZuStQU7IyRFHwVmuBz+RvYrz0WxROZusQcSGWiNYbgI3Wt+BDZrxtCzkCKYsWkgIvgLt2gs5YPDYsLuzx5zudqLxJzxHcmWcNaIUbFGsGJ4VBlERY0TUhWUmUiAsETVXPUT8nfa6AJkRgj73nofJfAv3X6axy+5nkYMSwmjmnlsjvBxNmkkEYWte/KhYlzGCNsWIMCdbaoAsZaDk0q6ug5vOHYOHwIVeXJvQV7dcP53V0WPlV/8tbXv15TDk9u4EPs4sFG5UDA+0DQRJ0QYl8hZn9WUtCsrMXa5JvJcrBoAqpKE0IuP5Xff7hh3N51YcELXvIcfEwB0OaIL5JSppjk/yFEFMVIyiwT51CUQ9MJxhimlSNk/2/BCjHVLKGoAVRTHSI3v/Y12uZ1VaXxgUPTSbe4yQFIMh29D2xMXFcDgBA1EqNm/08uU1ZkvQ/Dex5xBNFBNdi2d+82XPSCFMBaRWNUrDVMqyrPA5VzbFSOSd4mBo3JvSTXDwVjgypWJO1ks7wTZ5lUDhHBXewS4q11L55aRJKFvE+U9SHgY+wqs70moWeLNKYZ8xCVDWu6oKUpqXdpMxgHyLBkzVWbqrL3iOPQ5U+x4VLAs5XBGUA8oh6DYaKRWNfs1XQFmRGhCSFXghYN0ED6LbuJaI4JDfg6uZa72EUaHzBOUBVC8IQYE1VQpk6wEwOkCmriXLJQV7qarhSNUdmrGxbNgtqHFHCyJTDC7z1x2UrLt7Hgg5dMedeFGvULPFA5S6gjjWqmfeq3m7NNjLHbO8SoXdU4rRxNPqqqrGFP6WqXjunkGuH7586zUVU4a7riZZpLUmtMp2ws6mdrhKgp8NQh4NuSM58/ubyHcM6mel+Edzz6nOXNSo4fw1vK3hNHuPrFKS3u1w2LJuBD6Kgd8hFVE2Kq+2Oif8wujGrex+S6BPJeJuKMIJLGNMEjb/75l6vJG53KWqIq3gcW3uND5PRjRwBhNtvKTE31wnw+59SpWSpiCieYz3eYzWYDxW74k/cVTF/JgQEY77qQzsa+Pt1gdmrGznynAwelm19Icigw25oVc/cw/+Mdb8PHiCDdXqP2gbrxKVYdfdnPaRoihYX6/bAgzGYztre3OwEgCdF2m2/PAWVrNitGS8fuGz7w/gMVHrdbnlp0W+RfnW8zn+8UZ4opmM5mM+YZmG7CbCiA7fm8k2I2mxWgKPP5TjIegtz58X/SnZ05I3IyOzVjnicpMU3op/XS70mJrdkMycK1Qs7nO3zmItfNsZYBK8B451P7mHwI8Y2LLip1THJszdieby+dQ8yyEVqjtD/PZrOBYVqd5UUve3U3xWy2BSKJcoOjHwoXyIpntmxtzTqmtMq3Y171p+/vxowVXwdGe/93LywIWeCvd0e/S/ljoHwLTMvU+Xy7+7FlrBQD5jtz5K6//pKWt1vlZtmiwyMfGbhBITaaxyYghM8cqpaOip4pGLc8tcD6x1G/4GvPPd7ZM/l7lndnPpgyUXuIzHxnngAYnZsJgtx97wOagknyp0ShgmsCOznQlP7fWrtzk8IwgvAPU9sBs3xmthqMVUD8zuPfRX0N6rnpz/4qj1DIpzwdrWU0tGDLfGe+MnYJIMc2X6N9ABROnZox39kZUKVsJZVa0FowWv97xe1/uFL5VWCsvFeA8+4fPISGJj050chNH/p4liorV8SpDhzg1OxU4aoyAGSgx0fuPa2rfKsthcmU7vy7SHctPj0llVfc/ke9IKXyI4uvV3yFK/z3N9AYiMEjRG6+8/5u6DiAb822hqzIrQWqdB8A+dgnv6oDPxqlQhFJGWH7adAEXn77TqdUqeCS8s/w+rcf+RpGI2hEY+ANd97fK0A2RqFsK0//+7yoEIROQgX5y7/5lwLyHoFBPZBbGf1ns1PFqDTZKz/wviWlh0FzCMbQ4OvjBcA7/vMsGgNGFI2Bm+/6FCjLqZCczQoGtErvZENrC5KCXP3Tv6itrq3SXS4d+VeJSZluAH72g388uG6/l64wYMVY+bUuktot300A+OAxGrn57k933ZOFh2uXLEjZaaBkp4p87JNf1R6pjJf0hUypDICqsrW1VeTaOZ8/fKibdKXiT+MW64EZXrz9wX9NLADe8OG/7RXKOb8dWyo/ZsHQjcGVDxV6dJTbtvu4sLW1NRBO8+4MhS8+95LeZpomV1FE02d6ZpY/C+v2nij5SVP5naKvdHLc+pwf5/bHv4mSzh1b3x+6q3Lb9m2juiDVAoPYJQUDuiA4An1gTXq/aSn3+cpQHT7cRa0EUBvI+s8xK5ZZss5Vxk15+7e/ijXwujvuG1SeO8W+oGdAUWDnL2VqFAG55/5/7voMfT7RtC2MWuVU+xLz9POP9LNrD0Dfd/z96YAoXWOkQKHEb337NL/yoZwJSuULV25BWAlmBmC+M0c+ct9phX6SljIDyifeD3z5rje9upvvZceP85Yfu5bjU4eSrd8qnRXXvIcfALEClG6FJQb0YLz9mw/wujvuLXaJZZ1SKpm+DIL6OAgeP3mjDnyojPKFgKDdFrO9fnnzEA9+5ztjSQft+JVXPm2fg9ovX301v/T8k0x2n8xLJxg+97Z3Dnx6Z6fYGo9TdUH5vnzPpfRVJ2/UgfKaqqmS7sMoXjAhm+Tofzzw/6L8uvZrd//9QLHyc2c+X1L8oJZiQB9AB7RtqTnfnvcELJRXlNlW2ibf8+s3DiY+fuWV3fcfJQhvuuvTg+udcj8i0tF+vD8ZtNINPnrfVwpv0+7s/qDiZF2Rc8+bEwil8m37UYDwnSuuT6dOKyL6qhS35Naz8SGP5M0QY1rrKCP0WXtYAS5XdJ+/7TfWKvB/AeGNH/67tb+V+4Gloz1Z3hu0cUAE5Pi1v6BbW7NBObkUhQsXab+UlmiB6I6hFG7Q764U9tmA8MY7R8qvsTD0ZW+5V1nLDiEdiKAcDMDKlkCYz+c9G8r4oMqreHjlyGcCwoMvuh5g2ZeXdV/auwyD4ai3rHCBNuC1CpYYDPfRw/q93G6OY8Sr9NmD8OAV15fyMgxqvZvqQLWxpcfjhi0HwWHw257PlxUeFSmrWFJaoIwTNzwLEFrlx5Yb7/JWazVkxrj1hdEO3Zl1VxzocPDabS0svf/bHpx0D0aKcV+c/+YBIg3bg1dcP1B8dmo2kgnqRc2tt97Khd0L3HHHHYPKMr0gYWgf+JRtqzjWVzQVQsuHF0nJ9mlLSfdO+UIYGAZA0HRczjJTxkCMWfCmv/g0T5x7gkcefhjvA7u7F6ibBt949hf76e2y/X2892NLcebMmU4iMQZrLNZaTp06NdKjb3L85I26mtJ97p+tiviDsng9U4ZjU/vC9jBVtiA8dOxn8CHQ1A2Ksrm5OYzY40J+XctgbG6e4IVHj3LVVVdx9OjRlfp1AAyKneV+gxvj3D9gyIriaQyConxhVC98iRcCStN4Gt8MXGBzc3PJr9clqcSCXp4TJzY5cvkRTl57kssuu2xJz+QCKxTunw8UNJ/Plyw+bKvdpZ9zK22o8vUr438B8GU5Sgte3dQEH4pg3kf1zRObS4Jqq/RBsgi89S1v4dixY0vd5KqTr9VWuEL2pUXaVub95SWHY/s40l+3aXa4t0jXMUaauu7e9VlX7Gye2OwtXSg6NEohu4JzDpffPSoznHz0/q8MEv54klUusTr99H3LR9VDeXph20OV8ncffPL/jpPDDA+9O/RBbzn+rIpn1jqcc4P3imezGXLP/V/RdUIWN1f6XF805YenSx2HbrAqlZZu1TQN3jdL82xunijmHEc/5d+yC6w+WUpfjDE45zDlf0RAUx0gg/Xy23TdzaUisustwmBPMBy31H2ghLQuMpv1bpFfYhKUE9durmHigK5AGxsyEK20ooX82r3gbRge8/UMWBEJx0Fsmfqr/Xyl4CuzRn/9vf/5HmfOnuH7j35/1GfVHMs3yj6r4gPATTfdxEt/8qVMqkk3LsWAlZOnm+M6f7x4u8DTusCa31rrh+Cpm4YTP3ViIPg4WK6abB1ALRCbmydQ4NixY7zkJ17CpZde2g2Qq657rY7z9FJNf5Bia6P+wf3Lczk0AeB9IMT0v7JObJ5YE5OeAQBnMwA5fV5++RGuueYarrjiiq6raweuo/faYLgGkO5lhEGf5NdlDTCe31qHMYYQLCEEzp45i6Kdfw8D1QrS5oue/nSB6+zZM2xublLXOcC2R2c6OBIr6H6gD69YdcXPw3d1hqlpbb4uvsQY8d7jvee6667DGME6R+VcB5YYwUh6T/Gzn/vsAVvidEZorOW9f/DegZzy0ftOD4Jg+YxtpYA/RGvdYEzzPj0N48cSkGWfYuFVxVr5otZyGx+A9PdaA+UDEQaCLgv+w7VWwF5I7YQcpxodFuArX45YdW82m3XvKR7EQFl1teIoTT5y7wM6sFD+fjCyQ4GGQhdjiijend4sKb5iDdWVK3ePu7R8A6xbKv1z4IYxqy/9tdz9iQd0aO3Cau1qawRZ14ZKaftn5bPHcb9egoPXUx0C+8xaf3Isd3/iyzrwyxEIQyF0IN16fvSajEk63FEWv62YdzXQOu7+LEEAEeF/Ad2XGGhelS4XAAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"r": 0.5,
				"x": 0
			},
			"shader_model": {
				"code": "",
				"global": "float iq_sdOctahedron( vec3 p, float s){\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - IQ\n\nGenerates a Octahedron as a signed distance function\nCode from www.iquilezles.org/www/articles/distfunctions/distfunctions.htm",
				"name": "Octahedron",
				"outputs": [
					{
						"sdf3d": "iq_sdOctahedron($uv,$r)-$x",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "Radius1.r",
						"default": 0.5,
						"label": "Size",
						"longdesc": "The size of the Octahedron",
						"max": 1,
						"min": 0,
						"name": "r",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Rounding",
						"longdesc": "Roundness of the object",
						"max": 1,
						"min": 0,
						"name": "x",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Octahedron"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/Octahedron",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Correction": 2,
				"Distance": 0,
				"scale": 1,
				"scale_x": 1,
				"scale_y": 1,
				"scale_z": 1,
				"translate_x": 0,
				"translate_y": 0,
				"translate_z": 0
			},
			"shader_model": {
				"code": "",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_F3 =  0.3333333;\nconst float XsX3zB_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_random3(s), x);\n\t d.y = dot(XsX3zB_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - Nikat\n\nMakes a non periodic noise using nikat code from https://www.shadertoy.com/view/XsX3zB",
				"name": "Simplex Noise",
				"outputs": [
					{
						"sdf3d": "(XsX3zB_simplex3d(($uv.xyz+vec3($translate_x,$translate_y,$translate_z))*vec3($scale_x,$scale_y,$scale_z)*$scale))/(1.0+$Correction*$scale)-$Distance",
						"shortdesc": "TEX3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16,
						"min": 0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16,
						"min": 0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16,
						"min": 0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate X",
						"longdesc": "Noise X Translation",
						"max": 100,
						"min": 0,
						"name": "translate_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Y",
						"longdesc": "Noise Y Translation",
						"max": 100,
						"min": 0,
						"name": "translate_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Z",
						"longdesc": "Noise Z Translation",
						"max": 100,
						"min": 0,
						"name": "translate_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Distance",
						"longdesc": "Distance to surface",
						"max": 0.5,
						"min": -0.5,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Simplex Noise"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/Simplex Noise",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "float o_$name_uv=$in($uv.xyz);",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D to TEX3D\nCode - PauloFalcao\n\nConverts a SDF3D to a grayscale TEX3D",
				"name": "SDF3D to TEX3D",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "vec3(o_$name_uv,o_$name_uv,o_$name_uv)",
						"type": "tex3d"
					}
				],
				"parameters": [

				]
			},
			"tree_item": "PauloFalcao/TEX3D/Util/SDF3D to TEX3D",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"blend_type": 0,
				"iterations": 8,
				"mode": 2,
				"opacity": 1
			},
			"shader_model": {
				"code": "",
				"global": "vec3 blendf_normal(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_multiply(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_screen( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blendf_overlay(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_overlay_f(c1.x, c2.x), blendf_overlay_f(c1.y, c2.y), blendf_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_hard_light(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blendf_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blendf_soft_light( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_soft_light_f(c1.x, c2.x), blendf_soft_light_f(c1.y, c2.y), blendf_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blendf_burn(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_burn_f(c1.x, c2.x), blendf_burn_f(c1.y, c2.y), blendf_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blendf_dodge(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_dodge_f(c1.x, c2.x), blendf_dodge_f(c1.y, c2.y), blendf_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_lighten(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_darken(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_difference(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Image",
						"longdesc": "The image that will be repeated",
						"name": "img",
						"shortdesc": "RGBA Image",
						"type": "rgba"
					},
					{
						"default": "vec4($uv,0.0,0.0)",
						"function": true,
						"label": "2D Transformation",
						"longdesc": "The transformation that will be applied each iteration, only transformations nodes can be used, like translate, scale, etc",
						"name": "trans2d",
						"shortdesc": "Image Transformaton",
						"type": "rgba"
					}
				],
				"instance": "vec4 for_blend_$name(vec2 p) {\n  vec2 t=p;\n  vec4 o=$img(t);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tvec4 no=$img(t);\n\to=vec4(blendf_$blend_type(o.xyz,no.xyz,$opacity),mix(o.w,no.w,$opacity));\n  }\n  return o;\n}\n\nvec4 for_avg_$name(vec2 p) {\n  vec2 t=p;\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tno=$img(t);\n\to+=vec4(no.xyz*$opacity,no.w);\n  }\n  return vec4(o/($iterations.0+1.0));\n}\n\nvec4 for_fold_$name(vec2 p) {\n  vec2 t=p;\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n  }\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  return o;\n}\n",
				"longdesc": "Type - RGBA Generator\nCode - PauloFalcao, RodZilla  (Bending modes)\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 2D Transformation Node.\n\n2D Transformation nodes should start with the Image \"Axis\" node, operations should not use buffer, only coordinates transformations should be used, nodes that transform colors here will transform space.\n\nThere are 3 modes available:\n - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
				"name": "Fractal",
				"outputs": [
					{
						"rgba": "$mode",
						"shortdesc": "SDF3D Output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"default": 24,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "17",
								"value": "17"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "19",
								"value": "19"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "22",
								"value": "22"
							},
							{
								"name": "23",
								"value": "23"
							},
							{
								"name": "24",
								"value": "24"
							}
						]
					},
					{
						"default": 2,
						"label": "Mode",
						"longdesc": " - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Average",
								"value": "for_avg_$name($uv)"
							},
							{
								"name": "Blend",
								"value": "for_blend_$name($uv)"
							},
							{
								"name": "Fold",
								"value": "for_fold_$name($uv)"
							}
						]
					},
					{
						"default": 0,
						"label": "Blend Mode",
						"longdesc": "The algorithm used to blend the result of each iteration",
						"name": "blend_type",
						"shortdesc": "Blend mode",
						"type": "enum",
						"values": [
							{
								"name": "Normal",
								"value": "normal"
							},
							{
								"name": "Multiply",
								"value": "multiply"
							},
							{
								"name": "Screen",
								"value": "screen"
							},
							{
								"name": "Overlay",
								"value": "overlay"
							},
							{
								"name": "Hard Light",
								"value": "hard_light"
							},
							{
								"name": "Soft Light",
								"value": "soft_light"
							},
							{
								"name": "Burn",
								"value": "burn"
							},
							{
								"name": "Dodge",
								"value": "dodge"
							},
							{
								"name": "Lighten",
								"value": "lighten"
							},
							{
								"name": "Darken",
								"value": "darken"
							},
							{
								"name": "Difference",
								"value": "difference"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Opacity",
						"longdesc": "The opacity of the blend operation",
						"max": 1,
						"min": 0,
						"name": "opacity",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Fractal"
			},
			"tree_item": "PauloFalcao/Image/Operator/Fractal",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAI5JREFUeJzt0rENwCAQBME30H/LduAiNmBW+pjTiGetec/MVLfDt/87c3UAAACoJ7QBAACgntAGAACAekIbAAAA6gltAAAAqCe0AQAAoJ7QBgAAgHpCGwAAu57Q5gcAAFBPaAMAAEA9oQ0AAAD1hDYAAADUE9oAAABQT2gDAABAPaENAAAA9YQ2AAAuB/gAJZ4D97ubRUQAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
				"name": "Axis",
				"outputs": [
					{
						"rgba": "vec4($uv,0.0,1.0)",
						"shortdesc": "RGBA Output",
						"type": "rgba"
					}
				],
				"parameters": [

				],
				"shortdesc": "Axis"
			},
			"tree_item": "PauloFalcao/Image/Generator/Axis",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAmlJREFUeJztmcFqo1AUQE8mKvoklhRDBLPpWmg+wh/oJ80n9Qf8iC5cZxUwm0AMPlOVzixKpJnp1ncLeQck4OYdDhe9khnwhzvml7SANDaAtIA0NoC0gDQ2gLSANDaAtIA0NoC0gDQ2gLSANDaAtIA0NoC0gDQ2gLSANDaAtIA0NoC0gDSOxKF5npMkCUopALTWVFVFURTGXWYY/GMkz3OyLCNJEqIowvM8ALquo65rqqqiLEujIYxNwMvLC9vtljRNeXx8JAxDXNcFoO97mqYhjmOWyyWLxYLX11cjXkYC5HnOdrvl6emJ9XrNw8MDSikc5/P4YRjQWhOG4TgV5/PZyCQYCZBlGWmasl6vieOYKIoIguAmQBAE40R0XUeWZUYCzIHfUx6Q5znPz89sNhtWq9U44kopfN/H8zwcx2E+nzObzfj4+GAYBt7f3wHY7XZT6k0/AdcHXhiGKKUIggDf9/F9/2YCrr9KKcIwJIoikiSZWm/6AEopPM/DdV0cx/nvGkW+3HNdF8/zxtfklNhFaOoDtNZ0XUff9wzDcHNd+fd+3/d0XYfWemq96QNUVUVd1zRNg9b65un/9RlwuVxo2xatNU3TjIvR1EweoCgKsiwjjuOb5WcYhpsAbdtS1zWn04nj8WhsNTayB5RlyXK5HJecvu+/XYROpxOHw4H9fk9ZlibUzAQoioLFYgF8LjlN03y7Ch+PR/b7PW9vb8a+B+7+Y8hogCt3+zn8E7n7RcgGkBaQxgaQFpDGBpAWkMYGkBaQxgaQFpDGBpAWkMYGkBaQxgaQFpDGBpAWkMYGkBaQxgaQFpDmL8T/AAT8pgt4AAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"scale": 1
			},
			"shader_model": {
				"code": "",
				"global": "vec2 scale(vec2 uv, vec2 center, vec2 scale) {\n\tuv -= center;\n\tuv /= scale;\n\tuv += center;\n    return uv;\n}",
				"inputs": [
					{
						"default": "vec4($uv, 0.0, 1.0)",
						"label": "",
						"longdesc": "The input image",
						"name": "i",
						"shortdesc": "Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Scales its input",
				"name": "Simple Scale",
				"outputs": [
					{
						"longdesc": "Shows the scaled image",
						"rgba": "$i((($uv-vec2(0.5))*$scale)+vec2(0.5))",
						"shortdesc": "Output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"control": "Scale1.x",
						"default": 1,
						"label": "Scale",
						"longdesc": "The scale amount",
						"max": 1,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Simple Scale"
			},
			"tree_item": "PauloFalcao/Image/Operator/Simple Scale",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sphere",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 0
				},
				{
					"from": "pxflib",
					"from_port": 0,
					"to": "translate",
					"to_port": 0
				},
				{
					"from": "translate",
					"from_port": 0,
					"to": "mirror_2",
					"to_port": 0
				},
				{
					"from": "mirror_2",
					"from_port": 0,
					"to": "mirror",
					"to_port": 0
				},
				{
					"from": "mirror",
					"from_port": 0,
					"to": "rotate",
					"to_port": 0
				},
				{
					"from": "rotate",
					"from_port": 0,
					"to": "scale_2",
					"to_port": 0
				},
				{
					"from": "scale_2",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 1
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "scale",
					"to_port": 0
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment",
					"node_position": {
						"x": 73.115967,
						"y": 164.396667
					},
					"parameters": {

					},
					"size": {
						"x": 396,
						"y": 128
					},
					"text": "Remake of Basic Fractal Shader\nhttps://www.shadertoy.com/view/tltSWs\nUsing the Fractal node",
					"title": "Comment",
					"type": "comment"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -206.884033,
						"y": -221.603333
					},
					"parameters": {

					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
						"name": "Axis",
						"outputs": [
							{
								"rgba": "vec4($uv,0.0,1.0)",
								"shortdesc": "RGBA Output",
								"type": "rgba"
							}
						],
						"parameters": [

						],
						"shortdesc": "Axis"
					},
					"type": "shader"
				},
				{
					"name": "translate",
					"node_position": {
						"x": -210.884033,
						"y": -151.603394
					},
					"parameters": {
						"translate_x": 0.5,
						"translate_y": 0.5
					},
					"type": "translate"
				},
				{
					"name": "mirror_2",
					"node_position": {
						"x": -211.884033,
						"y": -72.603333
					},
					"parameters": {
						"direction": 1,
						"offset": 0
					},
					"type": "mirror"
				},
				{
					"name": "mirror",
					"node_position": {
						"x": -214.884033,
						"y": 5.396667
					},
					"parameters": {
						"direction": 0,
						"offset": 0
					},
					"type": "mirror"
				},
				{
					"name": "scale_2",
					"node_position": {
						"x": -220.884033,
						"y": 185.396667
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"scale_x": 0.51,
						"scale_y": 0.51
					},
					"type": "scale"
				},
				{
					"name": "rotate",
					"node_position": {
						"x": -223.884033,
						"y": 86.396667
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"rotate": "$time*45.0"
					},
					"type": "rotate"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": 123.457153,
						"y": -156.570435
					},
					"parameters": {
						"blend_type": 0,
						"iterations": 6,
						"mode": 2,
						"opacity": 1
					},
					"shader_model": {
						"code": "",
						"global": "vec3 blendf_normal(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_multiply(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_screen( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blendf_overlay(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_overlay_f(c1.x, c2.x), blendf_overlay_f(c1.y, c2.y), blendf_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_hard_light(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blendf_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blendf_soft_light( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_soft_light_f(c1.x, c2.x), blendf_soft_light_f(c1.y, c2.y), blendf_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blendf_burn(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_burn_f(c1.x, c2.x), blendf_burn_f(c1.y, c2.y), blendf_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blendf_dodge(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_dodge_f(c1.x, c2.x), blendf_dodge_f(c1.y, c2.y), blendf_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_lighten(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_darken(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_difference(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Image",
								"longdesc": "The image that will be repeated",
								"name": "img",
								"shortdesc": "RGBA Image",
								"type": "rgba"
							},
							{
								"default": "vec4($uv,0.0,0.0)",
								"function": true,
								"label": "2D Transformation",
								"longdesc": "The transformation that will be applied each iteration, only transformations nodes can be used, like translate, scale, etc",
								"name": "trans2d",
								"shortdesc": "Image Transformaton",
								"type": "rgba"
							}
						],
						"instance": "vec4 for_blend_$name(vec2 p) {\n  vec2 t=p;\n  vec4 o=$img(t);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tvec4 no=$img(t);\n\to=vec4(blendf_$blend_type(o.xyz,no.xyz,$opacity),mix(o.w,no.w,$opacity));\n  }\n  return o;\n}\n\nvec4 for_avg_$name(vec2 p) {\n  vec2 t=p;\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tno=$img(t);\n\to+=vec4(no.xyz*$opacity,no.w);\n  }\n  return vec4(o/($iterations.0+1.0));\n}\n\nvec4 for_fold_$name(vec2 p) {\n  vec2 t=p;\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n  }\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  return o;\n}\n",
						"longdesc": "Type - RGBA Generator\nCode - PauloFalcao, RodZilla  (Bending modes)\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 2D Transformation Node.\n\n2D Transformation nodes should start with the Image \"Axis\" node, operations should not use buffer, only coordinates transformations should be used, nodes that transform colors here will transform space.\n\nThere are 3 modes available:\n - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
						"name": "Fractal",
						"outputs": [
							{
								"rgba": "$mode",
								"shortdesc": "SDF3D Output",
								"type": "rgba"
							}
						],
						"parameters": [
							{
								"default": 24,
								"label": "Iterations",
								"longdesc": "Number of Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "0",
										"value": "0"
									},
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "17",
										"value": "17"
									},
									{
										"name": "18",
										"value": "18"
									},
									{
										"name": "19",
										"value": "19"
									},
									{
										"name": "20",
										"value": "20"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "22",
										"value": "22"
									},
									{
										"name": "23",
										"value": "23"
									},
									{
										"name": "24",
										"value": "24"
									}
								]
							},
							{
								"default": 2,
								"label": "Mode",
								"longdesc": " - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Average",
										"value": "for_avg_$name($uv)"
									},
									{
										"name": "Blend",
										"value": "for_blend_$name($uv)"
									},
									{
										"name": "Fold",
										"value": "for_fold_$name($uv)"
									}
								]
							},
							{
								"default": 0,
								"label": "Blend Mode",
								"longdesc": "The algorithm used to blend the result of each iteration",
								"name": "blend_type",
								"shortdesc": "Blend mode",
								"type": "enum",
								"values": [
									{
										"name": "Normal",
										"value": "normal"
									},
									{
										"name": "Multiply",
										"value": "multiply"
									},
									{
										"name": "Screen",
										"value": "screen"
									},
									{
										"name": "Overlay",
										"value": "overlay"
									},
									{
										"name": "Hard Light",
										"value": "hard_light"
									},
									{
										"name": "Soft Light",
										"value": "soft_light"
									},
									{
										"name": "Burn",
										"value": "burn"
									},
									{
										"name": "Dodge",
										"value": "dodge"
									},
									{
										"name": "Lighten",
										"value": "lighten"
									},
									{
										"name": "Darken",
										"value": "darken"
									},
									{
										"name": "Difference",
										"value": "difference"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Opacity",
								"longdesc": "The opacity of the blend operation",
								"max": 1,
								"min": 0,
								"name": "opacity",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Fractal"
					},
					"type": "shader"
				},
				{
					"name": "scale",
					"node_position": {
						"x": 157.115967,
						"y": 14.396667
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"scale_x": "sin($time)*0.5+1.5",
						"scale_y": "sin($time)*0.5+1.5"
					},
					"shader_model": {
						"code": "",
						"global": "vec2 scale(vec2 uv, vec2 center, vec2 scale) {\n\tuv -= center;\n\tuv /= scale;\n\tuv += center;\n    return uv;\n}",
						"inputs": [
							{
								"default": "vec4($uv, 0.0, 1.0)",
								"label": "",
								"longdesc": "The input image",
								"name": "i",
								"shortdesc": "Input",
								"type": "rgba"
							}
						],
						"instance": "",
						"longdesc": "Scales its input",
						"name": "Scale",
						"outputs": [
							{
								"longdesc": "Shows the scaled image",
								"rgba": "$i(scale($uv, vec2(0.5+$cx, 0.5+$cy), vec2($scale_x, $scale_y)))",
								"shortdesc": "Output",
								"type": "rgba"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "Center X:",
								"longdesc": "The position of the scale center",
								"max": 1,
								"min": -1,
								"name": "cx",
								"shortdesc": "Center.x",
								"step": 0.005,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Center Y:",
								"longdesc": "The poisition of the scale center",
								"max": 1,
								"min": -1,
								"name": "cy",
								"shortdesc": "Center.y",
								"step": 0.005,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale X:",
								"longdesc": "The scale amount along the X axis",
								"max": 50,
								"min": 0,
								"name": "scale_x",
								"shortdesc": "Scale.x",
								"step": 0.005,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Y:",
								"longdesc": "The scale amount along the Y axis",
								"max": 50,
								"min": 0,
								"name": "scale_y",
								"shortdesc": "Scale.y",
								"step": 0.005,
								"type": "float"
							}
						],
						"shortdesc": "Scale"
					},
					"type": "shader"
				},
				{
					"name": "sphere",
					"node_position": {
						"x": -209.884033,
						"y": -363.603333
					},
					"parameters": {
						"cx": 0.5,
						"cy": 0.5,
						"r": 0.49
					},
					"type": "sphere"
				}
			],
			"tree_item": "PauloFalcao/Image/Operator/Fractal Example"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "vec3 texx_$name_uv=$texx($uv.yz+0.5);\nvec3 texy_$name_uv=$texy($uv.xz+0.5);\nvec3 texz_$name_uv=$texz($uv.xy+0.5);",
				"global": "",
				"inputs": [
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "TexX",
						"name": "texx",
						"type": "rgb"
					},
					{
						"default": "vec3(0.0,1.0,0.0)",
						"function": true,
						"label": "TexY",
						"name": "texy",
						"type": "rgb"
					},
					{
						"default": "vec3(0.0,0.0,1.0)",
						"function": true,
						"label": "TexZ",
						"name": "texz",
						"type": "rgb"
					},
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"type": "sdf3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}",
				"name": "Triplanar to TEX3D by SDF",
				"outputs": [
					{
						"tex3d": "abs(normal_$name($uv.xyz))*mat3(vec3(texx_$name_uv.x,texy_$name_uv.x,texz_$name_uv.x),vec3(texx_$name_uv.y,texy_$name_uv.y,texz_$name_uv.y),vec3(texx_$name_uv.z,texy_$name_uv.z,texz_$name_uv.z))",
						"type": "tex3d"
					}
				],
				"parameters": [

				]
			},
			"tree_item": "PauloFalcao/TEX3D/Util/Triplanar to TEX3D by SDF",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"mode": 0,
				"smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,1.0)",
						"label": "",
						"name": "in",
						"shortdesc": "RGBA Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Type - RGBA Operator\nCode - PauloFalcao\n\nTransforms a RGBA making a mirror smooth symmetry using the chosen axis",
				"name": "Smooth Axis Symmetry",
				"outputs": [
					{
						"rgba": "$in($mode)",
						"shortdesc": "RGBA output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XY",
								"value": "vec2(sqrt(($uv.xy-0.5)*($uv.xy-0.5)+$smooth))+0.5"
							},
							{
								"name": "X",
								"value": "vec2(sqrt($uv.x*$uv.x+$smooth),$uv.y)+0.5"
							},
							{
								"name": "Y",
								"value": "vec2($uv.x,sqrt($uv.y*$uv.y+$smooth))+0.5"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"max": 0.02,
						"min": 0,
						"name": "smooth",
						"step": 0.00001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Axis Symmetry"
			},
			"tree_item": "PauloFalcao/Image/Operator/Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAA+5JREFUeJztWc9LMlsYfr5Li1q1iNq2aRsEbYKggqAWbQL/hujHwk1Q0TIx2kXUwiLox6JyESQVUjSZSjGVYtkvbSzRCLNVSZhU8N7NvVI5o97Uef3uNw88ML7vOed9znPOmRn1FwDCH4y/uAVwQzOAWwA3NAO4BXBDM4BbADfYDRgbG2Ot/wvai9CfDVYD7HY7Z/kkiINnZ2csdb+TbQdUVlYCAO7u7gAAJpMJMzMzLFrYVwEA9ff3EwDq6elRuzbPhAVBUMxNTk7+/w2Q4/j4OEfdzI3sdvuPCwQCAXZji34HzM3NsdUu6Jvg8/MzysvLCzV8XqC9CislBEEAABgMhpRcLBbD8fHxl9jT05PsOPf397noUwW0u7srez7W19fp5uaG3G43XV9fEwCKxWLs94y88r9OyO/30+XlpWxuZWUlbd+1tTUCQB8fH2Qymfgn/8/x/xLQ6/XcgngNkGNfX59ibnt7OyU2ODhI8/PztLCwQN3d3VmLMRqNxWFAIpEgAFRRUSHbaWJiggCQJEnJmNlsplAoRDabjQRBoNvbWwqHw2SxWNIKWF1dLf4dIMfq6urktSRJZLPZSKfTkSiKZDabKRaL0fv7u+wOyYUejydjm4GBAQJAj4+PPzegtrY2J6Fut5ucTueX2N7eXtb9r66u0uanpqYUc4uLi4XfAZkYCoVSYktLS7JtHx4ecq63vLz8076FMcBgMGTVLh/3gEgk8uVzPB6n09NTdQw4PDxMXgeDQXI4HIqrI4oiuVyutOO1t7fLxre2ttLG/r1xA6DOzk51d8Db21ted0+2X78lSaLZ2dlc6+UmNhqN5nXyAKilpSWrdhaLhZqamngNkCSJHA4Heb3evBvxnZ9X2+v1Ujwep52dHV4DsuHm5qZiTulZ3dDQoNjHaDRSOBym19dX8vv9JAgCRSIRcrlcVFNTk2zndrszalPlZ/GOjg7FXFVVlWxcFEUAwMjISErO6/Xi/PwcFxcXCAaD8Pl8mJ6eRllZGQKBAADA4/Ggvr4+K30F3wHZ8uXlJeu2bW1t1NvbS62trSm5rq4uslqtxXMEcmFzc3Oha/BPUm2Ojo6S2WwmgPGvsXzD6XQq5jY2NgAAVqsVQ0NDiEaj0Ol0yTz7inDw01d5fjFqMxgMfv7MLyhbiqKYsc3JyUnavMzvCfwTy8Sjo6O8jufz+ZLX2h8j3AJ+ikQikZdxflsDSktLAQAHBwc5j8V+xuWo1+uprq6u4HWK8h5gt9tRUlKCxsZGVeqxr3Y6Dg8PF7oG/yS/c39/X7VaRXkE1MRv+xTIFzQDuAVwQzOAWwA3NAO4BXBDM4BbADc0A7gFcONvLg3QpK6FekEAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "RGBA Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Type - RGBA Operator\nCode - PauloFalcao\n\nTransforms a RGBA making  the Juliaset fold Z^2 transformation",
				"name": "Juliaset Fold Z2",
				"outputs": [
					{
						"rgba": "$in(vec2($uv.x*$uv.x-$uv.y*$uv.y,2.0*$uv.x*$uv.y))",
						"shortdesc": "SDF3D output",
						"type": "rgba"
					}
				],
				"parameters": [

				],
				"shortdesc": "Smooth Axis Symmetry"
			},
			"tree_item": "PauloFalcao/Image/Operator/Juliaset Fold Z2",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Distance": 0,
				"Repetitions": 6,
				"Roundness": 0,
				"Smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "vec2 smoothRot_XY(vec2 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p);\n  float x=asin(sin(atan(p.x,p.y)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec2(x/s,y/s-distance);\n}",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "RGBA Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Type - RGBA Operator\nCode - PauloFalcao\n\nThis is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions.\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh",
				"name": "Smooth Polar Repeat",
				"outputs": [
					{
						"rgba": "$in(smoothRot_XY($uv-0.5,$Repetitions,$Smooth,1.0-$Roundness, $Distance))",
						"shortdesc": "RGBA Output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 6,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1,
						"min": 0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Roundness",
						"longdesc": "This is a correction to the smoothness.\n\n0 (default) - With correction, this way a flat object will no smoothess will be flat, the correction is not perfect with few repetions it's still possible to notice some distortion. \n\n1 - Without correction, using this setting a flat object will be rounded, even with smoothness at zero.",
						"max": 1,
						"min": 0,
						"name": "Roundness",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Polar Repeat"
			},
			"tree_item": "PauloFalcao/Image/Operator/Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib_8",
			"parameters": {
				"op": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec4 sdf3dc_union(vec4 a, vec4 b) {\n\treturn vec4((a.w<b.w)?vec4(a):vec4(b));\n}\nvec4 sdf3dc_sub(vec4 a, vec4 b) {\n\treturn vec4((-a.w>b.w)?vec4(a.xyz,-a.w):vec4(b));\n}\nvec4 sdf3dc_inter(vec4 a, vec4 b) {\n\treturn vec4((a.w>b.w)?vec4(a):vec4(b));\n}",
				"inputs": [
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF A",
						"type": "v4v4"
					},
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF B",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean operation (union, intersection or difference) between two shapes",
				"name": "Boolean",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$op($in1($uv), $in2($uv))"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "",
						"name": "op",
						"type": "enum",
						"values": [
							{
								"name": "Union",
								"value": "sdf3dc_union"
							},
							{
								"name": "Subtraction",
								"value": "sdf3dc_sub"
							},
							{
								"name": "Intersection",
								"value": "sdf3dc_inter"
							}
						]
					}
				],
				"shortdesc": "Boolean"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/Boolean",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib_5",
			"parameters": {
				"k": 0.2,
				"op": 0
			},
			"seed": 53575,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "vec4 mfsdf3d_smooth_union(vec4 a, vec4 b, float k) {\n    k=max(k,0.01);\n    float h = max( k-abs(a.w-b.w), 0.0 )/k;\n\th=h*h*k*0.25;\n    return vec4(mix(a.xyz,b.xyz,clamp(a.w/k,0.0,1.0)),min( a.w, b.w ) - h);\n}\n\nvec4 mfsdf3d_smooth_subtraction(vec4 a, vec4 b, float k) {\n    k=max(k,0.01);\n    float h = max( k-abs(-a.w-b.w), 0.0 )/k;\n\th=h*h*k*0.25;\n    return vec4(mix(a.xyz,b.xyz,clamp(a.w/k,0.0,1.0)),max( -a.w, b.w ) + h);\n}\n\nvec4 mfsdf3d_smooth_intersection(vec4 a, vec4 b, float k) {\n    k=max(k,0.01);\n    float h = max( k-abs(a.w-b.w), 0.0 )/k;\n\th=h*h*k*0.25;\n    return vec4(mix(a.xyz,b.xyz,clamp(a.w/k+1.0,0.0,1.0)),max( a.w, b.w ) + h);\n}",
				"inputs": [
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF A",
						"type": "v4v4"
					},
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF B",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a smooth boolean operation (union, intersection or difference) between two shapes",
				"name": "Smooth Boolean",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$op($in1($uv), $in2($uv),$k)"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "",
						"name": "op",
						"type": "enum",
						"values": [
							{
								"name": "Union",
								"value": "mfsdf3d_smooth_union"
							},
							{
								"name": "Subtraction",
								"value": "mfsdf3d_smooth_subtraction"
							},
							{
								"name": "Intersection",
								"value": "mfsdf3d_smooth_intersection"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "The smoothness of the boolean operation",
						"max": 1,
						"min": 0,
						"name": "k",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Boolean"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/Smooth Boolean",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib_12",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"Gamma": 1.3,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"Shadow": 1,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 2.5
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
				"inputs": [
					{
						"default": "vec4(1.0,0.0,0.0,length($uv)-0.4)",
						"function": true,
						"label": "MFSDF",
						"name": "mfsdf",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					},
					{
						"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = $mfsdf(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = $mfsdf(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = $mfsdf(vec4( ro + rd*t ,0.0)).w;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=$mfsdf(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1) \n\tfloat objSpecular=$mfsdf(vec4(p,4.0)).x*0.2;  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=$mfsdf(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+4.0*pow(r,pow(256.0,(1.0-objRoughness)))*objSpecular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=$mfsdf(vec4(p,1.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
				"name": "Ray Marching Multi-Field SDF",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2.2,
						"label": "Gamma",
						"longdesc": "Gamma Correction",
						"max": 3,
						"min": 0,
						"name": "Gamma",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/MFSDF/Render/Ray Marching Multi-Field SDF",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABv9JREFUeJztW81qFEsU/nq6+m8G4jOID+BGJkyyUMGVb+EjCC6DXMSlkF1ewZXZmUAgK8EnEFz4AhrioGg6M93T1Xchp+/pmvrr+UlfMAeKyUz/ne+r75w6XVUJANT4i23QtwN92y0BfTvQt90S0LcDfZvo68H7+/sIggBBEAAAPnz40IsfAW5gGNzb20MYhhgMBgiCoPnkBKgmpcT5+fm2XdseAZPJBGEYNsA5aPobgJWEuq5R1zWklDg7O9uGm5snYDKZQAjRgOaN9zonQz1ORuAXiwWklJBS4vT0dJPubo6A3d1dRFHU6nETeCEEhBAthYRhuBQWXAFVVWGxWGA+n6MoCpycnGzC7c0QQL2uSp7H/GAwQBRFDXh+vi4/kJlIyPMcx8fH67q+HgEPHjxAkiRLQDj4MAwRx3EDnlSiI8CUHImEqqpaJFxfX2M6neL9+/c3T8B4PG5AmcDHcdyAp8Z7n3KF7lo1MUopWySUZYmiKJDnOabTKd69e3dzBIzHY8RxbOx5IUQDXkeATQEqAUEQoK7rhgQKBSKBwuH79+94+/bt9gkg2VNPqj0YRRGSJNGCVxXgIkBVAeUCng+KosB8PsfV1RW+fv3amYTOlSCB59mbHI/jGGmaWntflwTV+9gI4AmxqqolZXW1TgqYTCbauA+CAGmaNuBJAVEULSVA3xAYDP68pphGBK4Cng9+/vyJN2/ebJ6A3d1dxHGslX6SJEjTFEmSLMmfrumqAB0BRAIRQEUShcJsNkOe57i8vMTh4aEXAd4hQMOX2lskewJviv8uCugSBkIILBaL1n2klL6w/BQwmUyanuQPiuMYWZa1FGCKf1sR5CKAV4b0qYYBV8HV1RWm0ylevXrlJMBLAbraXgjRAFaBb1oBujxANYGUEkIIlGXZqiKrqvKB5lYA732e/bMsQ5ZlTfIzxb8K3qQAXQ4w1QO60YAnw9lsht+/f+Py8hIHBwf2znUxZKvwTFLn4G1DoGk4tSlAR4CUsjUiAX+Kpp2dHRe8bgTw2p4DtBHhIoDAr0pAGIaoqmpJMVJKDIdDJwHWENjb22tVfWEYIk3TJfmr4/8qIcBV4Jo1UusBPhxSeUxhcHFxgefPnxsJsCpAF5em3jV92moAVwioM0cEnj45Afw6OpYkCUajkVUBVgLUXuDgfMHzxl+FbYWQby3A84BpJinLstUJUOPQBs6nqeBtCuhCAD8f+BP/PD+tTAC/sc5x02/8mI0M1xuhLgR0BEgpl6bR6EXJRYBxYYTP23MCXEB1RQ41/ruLEPVc1zNNpEdRhKOjo+4KUIsQk3O2ZlOIbRTg8re9FdZ1rS2XqTqkZ9lU4CSAnNA569N8z12XAP677v6dCeBEkFMux23geXy77mOqA3TlMAcfhmGrKqRmM+NRvlZnytIqeBNIEzm6+/gQqrvW5N9gMMCzZ89WVwAxr1vJ8W028mzOm4ZB6nH+3l/XtXEEsVknAvjNb6LZ6gAAjbx5LuDX8XPXIoCTYGu6cdyHNNNxn3cBupYUoJ7vmh2yEqC72AZc/c2kHNdx9V4mKXMFmPwvy9JKgDVFnp+ft4YcExk2cmyEmI7riHWRon6nCvHp06dWApwhQFJTSfAF7hMytnP4s3SgVTJ4eLh634sAvj7PSTDJTnVc992XQPUa3XO5QtVF1Nls5iTAuUnq7OysNfWkDj8ms0nUBM51D5PpXo+LosCTJ0+c13rtEiMVELNqWPBecSmETEeIDpjpu9rr6kpRnuc+0PwIOD09xXw+b5FASUZ1ROe4DxibqffWTYmpGygePnzoA82/DqBVWB0JJjJ0xOi+cxJMIw4nwwSc5gN//frlC8t/o+TJyQnyPMd8PkdZlg0JXYlYp6nPMS2QPnr0aPMEAMDx8TGur69RFAXKslxSg/rZlRieZG2A1cUQDn48HneB1H1/wHQ6ba0D0tzbYrGAEKJFQlVVzSuqrvkUNUHQfgXmRBB42iVycXHRFQ5CAP90ueDLly+4e/cu0jRtrRibXmdNFR2BU+sCV7JTe55vkfEZ9tYmAAA+f/6Me/fuLW2V0YE2lbIcNDciQBcG6gYpDv7x48edwa9MAAB8+vSpUYJtSsu3rLUlPN0CKO0L+vbt20o9T7bWbnHakPTixQvvut4EVlWMei5f/qKe75rwdLayArh9/PgR9+/f93qN9anm1ExfFEVrC8yPHz+wv7+/rtsAtrBZ+uXLl7hz5w5GoxGGw+HSzhHdIqmp93kI0DDnW+H52ta2y79+/Ro7OzsYDofNNpokSbT7BW3gy7LEbDZbK85tdiP/MHF4eIjRaIQsy1pKUIdP4L+xvixL52TGJuxGCNDZ0dFRs90WgHXqepvWGwH/F/vr/2vsloC+Hejbbgno24G+7V+BjHN9QLLyIQAAAABJRU5ErkJggg==",
			"name": "pxflib_11",
			"parameters": {
				"Alpha": 0,
				"AmbientOcclusion": 1,
				"Anisotropic": 0,
				"BaseColor": {
					"a": 1,
					"b": 1,
					"g": 1,
					"r": 1,
					"type": "Color"
				},
				"Clearcoat": 0,
				"ClearcoatGloss": 0,
				"ClearcoatNormal": 0,
				"Emission": 0,
				"IOR": 0,
				"Metallic": 0,
				"Normal": 0,
				"Roughness": 0,
				"Sheen": 0,
				"SheenTint": 0,
				"Specular": 0.5,
				"SpecularTint": 0,
				"Subsurface": 0,
				"Transmission": 0,
				"TransmissionRoughness": 0,
				"scale": 1
			},
			"seed": -5947,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"function": true,
						"label": "BaseColor",
						"name": "BaseColor_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Metallic",
						"name": "Metallic_tex3d",
						"shortdesc": "Grayscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Subsurface",
						"name": "Subsurface_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Specular",
						"name": "Specular_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Roughness",
						"name": "Roughness_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "SpecularTint",
						"name": "SpecularTint_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Anisotropic",
						"name": "Anisotropic_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Sheen",
						"name": "Sheen_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "SheenTint",
						"name": "SheenTint_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Clearcoat",
						"name": "Clearcoat_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Clearcoat Gloss",
						"name": "ClearcoatGloss_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "vec3(0.0,1.0,0.0)",
						"function": true,
						"label": "Clearcoat Normal",
						"name": "ClearcoatNormal_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "vec3(1.0,1.0,1.0)",
						"function": true,
						"label": "Emission",
						"name": "Emission_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.0,1.0,0.0)",
						"function": true,
						"label": "Normal",
						"name": "Normal_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Alpha",
						"name": "Alpha_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "IOR",
						"name": "IOR_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Transmission",
						"name": "Transmission_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Transmission Roughness",
						"name": "TransmissionRoughness_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Ambient Occlusion",
						"longdesc": "Fake Ambient Occlusion",
						"name": "AmbientOcclusion_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "length($uv)-0.4 ",
						"function": true,
						"label": "Object",
						"name": "sdf3d",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					}
				],
				"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 3 - Subsurface             (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n// 6 - SpecularTint           (v,0,0,sdf)\n// 7 - Anisotropic            (v,0,0,sdf)\n// 8 - Sheen                  (v,0,0,sdf)\n// 9 - SheenTint              (v,0,0,sdf)\n//10 - Clearcoat              (v,0,0,sdf)\n//11 - Clearcoat Gloss        (v,0,0,sdf)\n//12 - Clearcoat Normal\t      (x,y,z,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//16 - IOR                    (v,0,0,sdf)\n//17 - Transmission\t          (v,0,0,sdf)\n//18 - Transmission Roughness (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf)\n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz/$scale)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//18 - Transmission Roughness\n\tif (uv.w>17.5) {\n\t\treturn vec4($TransmissionRoughness*$TransmissionRoughness_tex3d(vec4(uv.xyz,18.0)),0.0,0.0,sdf);\n\t} else\n\t//17 - Transmission\n\tif (uv.w>16.5) {\n\t\treturn vec4($Transmission*$Transmission_tex3d(vec4(uv.xyz,17.0)),0.0,0.0,sdf);\n\t} else\n\t//16 - IOR\n\tif (uv.w>15.5) {\n\t\treturn vec4($IOR*$IOR_tex3d(vec4(uv.xyz,16.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//12 - Clearcoat Normal\n\tif (uv.w>11.5) {\n\t\treturn vec4($ClearcoatNormal*$ClearcoatNormal_tex3d(vec4(uv.xyz,12.0)),sdf);\n\t} else\n\t//11 - Clearcoat Gloss\n\tif (uv.w>10.5) {\n\t\treturn vec4($ClearcoatGloss*$ClearcoatGloss_tex3d(vec4(uv.xyz,11.0)),0.0,0.0,sdf);\n\t} else\n\t//10 - Clearcoat\n\tif (uv.w>9.5) {\n\t\treturn vec4($Clearcoat*$Clearcoat_tex3d(vec4(uv.xyz,10.0)),0.0,0.0,sdf);\n\t} else\n\t//9 - SheenTint\n\tif (uv.w>8.5) {\n\t\treturn vec4($SheenTint*$SheenTint_tex3d(vec4(uv.xyz,9.0)),0.0,0.0,sdf);\n\t} else\n\t//8 - Sheen\n\tif (uv.w>7.5) {\n\t\treturn vec4($Sheen*$Sheen_tex3d(vec4(uv.xyz,8.0)),0.0,0.0,sdf);\n\t} else\n\t//7 - Anisotropic\n\tif (uv.w>6.5) {\n\t\treturn vec4($Anisotropic*$Anisotropic_tex3d(vec4(uv.xyz,7.0)),0.0,0.0,sdf);\n\t} else\n\t//6 - SpecularTint\n\tif (uv.w>5.5) {\n\t\treturn vec4($SpecularTint*$SpecularTint_tex3d(vec4(uv.xyz,6.0)),0.0,0.0,sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//3 - Subsurface\n\tif (uv.w>2.5) {\n\t\treturn vec4($Subsurface*$Subsurface_tex3d(vec4(uv.xyz,3.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
				"name": "MFSDF Object Maker Advanced",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF ",
						"type": "v4v4",
						"v4v4": "PBRObjectMaker_$name($uv)"
					}
				],
				"parameters": [
					{
						"default": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1
						},
						"label": "",
						"name": "BaseColor",
						"type": "color"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Metallic",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Subsurface",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Roughness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "SpecularTint",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Anisotropic",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Sheen",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "SheenTint",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Clearcoat",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "ClearcoatGloss",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "Clearcoat Normal Scale",
						"max": 1,
						"min": 0,
						"name": "ClearcoatNormal",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "Emission Scale",
						"max": 500,
						"min": 0,
						"name": "Emission",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "Clearcoat Normal Scale",
						"max": 1,
						"min": 0,
						"name": "Normal",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Alpha",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 2.5,
						"min": 0,
						"name": "IOR",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Transmission",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "TransmissionRoughness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "AmbientOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "",
						"longdesc": "Object scale",
						"max": 4,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Object Maker Advanced"
			},
			"tree_item": "PauloFalcao/MFSDF/Generator/MFSDF Object Maker Advanced",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib_7",
			"parameters": {
				"Alpha": 0,
				"AmbientOcclusion": 1,
				"BaseColor": {
					"a": 1,
					"b": 1,
					"g": 1,
					"r": 1,
					"type": "Color"
				},
				"Emission": 0,
				"Metallic": 0,
				"Normal": 0,
				"Roughness": 0,
				"Specular": 0.5,
				"scale": 1
			},
			"seed": -5947,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"function": true,
						"label": "BaseColor",
						"name": "BaseColor_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Metallic",
						"name": "Metallic_tex3d",
						"shortdesc": "Grayscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Specular",
						"name": "Specular_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Roughness",
						"name": "Roughness_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "vec3(1.0,1.0,1.0)",
						"function": true,
						"label": "Emission",
						"name": "Emission_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.0,1.0,0.0)",
						"function": true,
						"label": "Normal",
						"name": "Normal_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Alpha",
						"name": "Alpha_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Ambient Occlusion",
						"longdesc": "Fake Ambient Occlusion",
						"name": "AmbientOcclusion_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "length($uv)-0.4 ",
						"function": true,
						"label": "Object",
						"name": "sdf3d",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					}
				],
				"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz/$scale)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
				"name": "MFSDF Object Maker",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF ",
						"type": "v4v4",
						"v4v4": "PBRObjectMaker_$name($uv)"
					}
				],
				"parameters": [
					{
						"default": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1
						},
						"label": "",
						"name": "BaseColor",
						"type": "color"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Metallic",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Roughness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "Emission Scale",
						"max": 500,
						"min": 0,
						"name": "Emission",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "Clearcoat Normal Scale",
						"max": 1,
						"min": 0,
						"name": "Normal",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Alpha",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "AmbientOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "",
						"longdesc": "Object scale",
						"max": 4,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Object Maker"
			},
			"tree_item": "PauloFalcao/MFSDF/Generator/MFSDF Object Maker",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib_11",
			"parameters": {
				"colorContrast": 0,
				"colorSmooth": 1,
				"k": 0.2,
				"op": 0,
				"shift": 0
			},
			"seed": 53575,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "vec4 mfsdf3d_smooth_complex_union(vec4 a, vec4 b, float k, float shift,float colorContrast,float colorSmooth) {\n\t\n    k=clamp(k,0.01,1.0);\n    float h = max( k-abs(a.w-b.w), 0.0 )/k;\n\th=h*h*k*0.25;\n\t\n\tfloat invs=(1.0/colorContrast)/k; \n\tcolorSmooth=1.0/colorSmooth;\n\tvec3 c=mix(a.xyz,b.xyz,clamp((a.w*colorSmooth+shift+0.5-colorSmooth*0.5)*invs,0.0,1.0));\n\t\n\treturn vec4(c,min( a.w, b.w ) - h);\n}\n\nvec4 mfsdf3d_smooth_complex_subtraction(vec4 a, vec4 b, float k, float shift,float colorSmooth,float colorContrast) {\n\n    k=clamp(k,0.01,1.0);\n    float h = max( k-abs(-a.w-b.w), 0.0 )/k;\n\th=h*h*k*0.25;\n\t\n\tfloat invs=(1.0/colorContrast)/k; \n\tcolorSmooth=1.0/colorSmooth;\n\tvec3 c=mix(a.xyz,b.xyz,clamp((a.w*colorSmooth+shift+0.5-colorSmooth*0.5)*invs,0.0,1.0));\n\t\n\treturn vec4(c,max( -a.w, b.w ) + h);\n}\n\nvec4 mfsdf3d_smooth_complex_intersection(vec4 a, vec4 b, float k, float shift,float colorSmooth,float colorContrast) {\n\n    k=clamp(k,0.01,1.0);\n    float h = max( k-abs(a.w-b.w), 0.0 )/k;\n\th=h*h*k*0.25;\n\n\tfloat invs=(1.0/colorContrast)/k; \n\tcolorSmooth=1.0/colorSmooth;\n\tvec3 c=mix(a.xyz,b.xyz,clamp((a.w*colorSmooth+shift+0.5-colorSmooth*0.5)*invs+1.0,0.0,1.0));\n\t\n\treturn vec4(c,max( a.w, b.w ) + h);\n    //return vec4(mix(a.xyz,b.xyz,clamp(a.w*invs/k+1.0-shift*invs/k,0.0,1.0)),max( a.w, b.w ) + h);\n}",
				"inputs": [
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF A",
						"type": "v4v4"
					},
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF B",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"label": "",
						"name": "shift_tex3d",
						"type": "tex3d_gs"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a smooth boolean operation (union, intersection or difference) between two shapes with more color options",
				"name": "Smooth Boolean Advanced",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$op($in1($uv), $in2($uv),$k,-$shift-($shift_tex3d($uv)*0.5),max((1.0-$colorContrast),0.001),max($colorSmooth,0.001))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "",
						"name": "op",
						"type": "enum",
						"values": [
							{
								"name": "Union",
								"value": "mfsdf3d_smooth_complex_union"
							},
							{
								"name": "Subtraction",
								"value": "mfsdf3d_smooth_complex_subtraction"
							},
							{
								"name": "Intersection",
								"value": "mfsdf3d_smooth_complex_intersection"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smoothness",
						"longdesc": "The smoothness of the boolean operation",
						"max": 1,
						"min": 0,
						"name": "k",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Shift",
						"max": 1,
						"min": -1,
						"name": "shift",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"max": 1,
						"min": 0,
						"name": "colorSmooth",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Contrast",
						"max": 1,
						"min": 0,
						"name": "colorContrast",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Boolean Advanced"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/Smooth Boolean Advanced",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib_11",
			"parameters": {

			},
			"seed": -5947,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "MFSDF",
						"name": "MFSDF",
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nDecompose the MFSDF into the most used attributes",
				"name": "MFSDF Object Attributes",
				"outputs": [
					{
						"shortdesc": "BaseColor",
						"tex3d": "$MFSDF(vec4($uv.xyz,1.0)).xyz",
						"type": "tex3d"
					},
					{
						"shortdesc": "Metallic",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,2.0)).x",
						"type": "tex3d_gs"
					},
					{
						"shortdesc": "Specular",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,4.0)).x",
						"type": "tex3d_gs"
					},
					{
						"shortdesc": "Roughness",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,5.0)).x",
						"type": "tex3d_gs"
					},
					{
						"shortdesc": "Emission",
						"tex3d": "$MFSDF(vec4($uv.xyz,13.0)).xyz",
						"type": "tex3d"
					},
					{
						"shortdesc": "Normal",
						"tex3d": "$MFSDF(vec4($uv.xyz,14.0)).xyz",
						"type": "tex3d"
					},
					{
						"shortdesc": "Alpha",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,15.0)).x",
						"type": "tex3d_gs"
					},
					{
						"shortdesc": "Ambient",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,19.0)).x",
						"type": "tex3d_gs"
					},
					{
						"sdf3d": "$MFSDF(vec4($uv.xyz,0.0)).w",
						"shortdesc": "Object",
						"type": "sdf3d"
					}
				],
				"parameters": [

				],
				"shortdesc": "MFSDF Object Attributes"
			},
			"tree_item": "PauloFalcao/MFSDF/Generator/MFSDF Object Attributes",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "sdf3d_translate_3_2",
					"to_port": 0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0,
					"to": "pxflib_7",
					"to_port": 8
				},
				{
					"from": "pxflib_7",
					"from_port": 0,
					"to": "gen_outputs",
					"to_port": 0
				},
				{
					"from": "tex3d_pattern_2",
					"from_port": 0,
					"to": "pxflib_7",
					"to_port": 0
				}
			],
			"icon_data": "",
			"label": "Checkerboard",
			"longdesc": "",
			"name": "graph_2",
			"nodes": [
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -1041.340088,
						"y": -203.449951
					},
					"parameters": {
						"r": 0,
						"sx": 8,
						"sy": 0.5,
						"sz": 8
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_translate_3_2",
					"node_position": {
						"x": -835.340027,
						"y": -203.449951
					},
					"parameters": {
						"x": 0,
						"y": -1.5,
						"z": 0
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "pxflib_7",
					"node_position": {
						"x": -646.340027,
						"y": -351.449982
					},
					"parameters": {
						"Alpha": 0,
						"AmbientOcclusion": 1,
						"BaseColor": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"Normal": 0,
						"Roughness": 0,
						"Specular": 0.5,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0,1.0,1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.0,1.0,0.0)",
								"function": true,
								"label": "Normal",
								"name": "Normal_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Alpha",
								"name": "Alpha_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Ambient Occlusion",
								"longdesc": "Fake Ambient Occlusion",
								"name": "AmbientOcclusion_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz/$scale)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
						"name": "MFSDF Object Maker",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Clearcoat Normal Scale",
								"max": 1,
								"min": 0,
								"name": "Normal",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Alpha",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "AmbientOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Maker"
					},
					"type": "shader"
				},
				{
					"name": "tex3d_pattern_2",
					"node_position": {
						"x": -899.340027,
						"y": -353.449951
					},
					"parameters": {
						"mix": 4,
						"x_scale": 1,
						"x_wave": 2,
						"y_scale": 0,
						"y_wave": 2,
						"z_scale": 1,
						"z_wave": 2
					},
					"seed": 0,
					"seed_locked": false,
					"type": "tex3d_pattern"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -1341.340088,
						"y": -277.949951
					},
					"parameters": {

					},
					"ports": [

					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": -346.340027,
						"y": -277.949951
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0,
							"name": "port0",
							"type": "v4v4"
						}
					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -1055.590088,
						"y": -653.449951
					},
					"parameters": {
						"param0": 8,
						"param1": -1.5
					},
					"seed": 0,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Size",
							"linked_widgets": [
								{
									"node": "sdf3d_box",
									"widget": "sx"
								},
								{
									"node": "sdf3d_box",
									"widget": "sz"
								}
							],
							"name": "param0",
							"type": "linked_control"
						},
						{
							"label": "Position",
							"linked_widgets": [
								{
									"node": "sdf3d_translate_3_2",
									"widget": "y"
								}
							],
							"name": "param1",
							"type": "linked_control"
						}
					]
				}
			],
			"parameters": {
				"param0": 8,
				"param1": -1.5
			},
			"seed": 0,
			"seed_locked": false,
			"shortdesc": "",
			"tree_item": "PauloFalcao/MFSDF/Objects/MFSDF Checkerboard",
			"type": "graph"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAYlJREFUeJztWkFygzAMlPoo5x/9TG4w5B/5Qg88I49COWRoTIspjiOvK7QzusTOsFqvZJSWiUjowPhAE0DDBUATQMMFQBNAwwVAE0DDBUATQMMFQBNAwwVAE0DjkAKIPAdgJh+Hjw0XoPYDJYTv+Pk5CqIVEsLmetd1u/cqBuShyYRrC6FyC0gIxLdbco2I6Ot8ps/rlS6nE03TRMMwLMog9X0NqJzsXyccr/d9X+SawsCUQE7imtH0i9BcEtrloKZubNlWmt5K1E+6sdB9wD8QAU4ALVz9BBpzBZxAuaCPAf+laPoarIG3TIO5k1z8i0wLgFsYGV4CaAJouABoAmgsBGitO9eAN8GczbFD1twyjmM5o8oocoCIEDO/kU59eAmgCaBhUoCc28yUAHPiOX3JewCaABouwJ5Nv/6UbeiV2XvA3o2WTt3/SSqCySaY41Z3QGrBUs1vISkAM6+KYE2YRQlYmO9zsXCAheRzHWruFlg7xC1RzAkQY894bFqAOfEtB/h7AJoAGndaMEn7OXig+AAAAABJRU5ErkJggg==",
			"name": "pxflib_9",
			"parameters": {
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"Gamma": 2.2,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"MaxDistance": 200,
				"MaxRayLoop": 5,
				"MaxRefIte": 7,
				"Precision": 2,
				"Samples": 3,
				"Size": 9
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "\n//MATH\nconst float PI=3.14159265359;\nconst float TAU=6.28318530718;\n\nvoid Onb(in vec3 N, inout vec3 T, inout vec3 B){\n    vec3 UpVector=abs(N.z)<0.999?vec3(0,0,1):vec3(1,0,0);\n    T=normalize(cross(UpVector,N));\n    B=cross(N,T);\n}\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat RandomFloat01(inout uint state){\n    uint r=rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n// SAMPLING START\n\nvec3 uniformSampleSphere(float r1,float r2){\n    float z=1.0-2.0*r1;\n    float r=sqrt(max(0.0,1.0-z*z));\n    float phi=TAU*r2;\n    return vec3(r*cos(phi),r*sin(phi),z);\n}\n\nvec3 cosineSampleHemissphere(inout uint state,vec3 n){\n    float u1=RandomFloat01(state);\n    float u2=RandomFloat01(state);\n    return normalize(n+uniformSampleSphere(u1,u2)); \n}\n\n// Adapted from \"Sampling the GGX Distribution of Visible Normals\",\n// http://jcgt.org/published/0007/04/01/\nvec3 SampleGGXVNDF(inout uint state,vec3 Ve,float alpha_x,float alpha_y){\n    float U1=RandomFloat01(state);\n    float U2=RandomFloat01(state);\n    \n    //transforming the view direction to the hemisphere configuration\n    vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));\n\n    //orthonormal basis\n    vec3 T1;vec3 T2;\n    Onb(Vh,T1,T2);\n\n    //parameterization of the projected area\n    float r = sqrt(U1); \n    float phi = 2.0 * PI * U2;    \n    float t1 = r * cos(phi);\n    float t2 = r * sin(phi);\n    float s = 0.5 * (1.0 + Vh.z);\n    t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;\n\n    //reprojection onto hemisphere\n    vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2))*Vh;\n\n    //transforming the normal back to the ellipsoid configuration\n    vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0f, Nh.z))); \n\n    return Ne;\n}\n\nfloat schlickWeight(float cosTheta) {\n    float m=clamp(1.-cosTheta,0.,1.);\n    float m2=m*m;\n    return m2*m2*m;\n}\n\n// SAMPLING END\n\n",
				"inputs": [
					{
						"default": "vec4(1.0,0.0,0.0,length($uv)-0.4)",
						"function": true,
						"label": "MFSDF",
						"name": "mfsdf",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					},
					{
						"default": "vec3(0.0)",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "\n//tetrahedron normal by PauloFalcao\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.$Precision,-0.$Precision,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid raymarch_$name(in vec3 o,in vec3 v,out vec3 p,inout float d){\n  float s;\n  for(int i=0;i<$MaxRayLoop;i++){\n    p=o+v*d;\n    s=$mfsdf(vec4(p,0.0)).w;\n    if (abs(s)<0.0$Precision) break;\n    d+=s;\n    if (d>$MaxDistance) break;\n  } \n}\n\nvec3 pathtracing_$name(vec2 uv) {\n\n\t// Init random\n\tvec2 rndgen=vec2(\n\t\t\t\tfract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453),\n\t\t\t\tfract(sin(dot(uv, vec2(37.1235, 67.734))) * 73748.3423))*17243.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint($time*1000.0) * uint(26699)) | uint(1);\n\n\tvec3 o=vec3($CamX,$CamY,$CamZ)*$CamZoom; \n    vec3 t=vec3($LookAtX,$LookAtY,$LookAtZ);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 c=normalize(t-o);\n    vec3 cx=normalize(cross(u,c));\n    vec3 cy=normalize(cross(cx,c));\n   \n\tvec3 sumrgb=vec3(0.0);\n    for(int aa=0;aa<$Samples;aa++){\n    \n        vec2 xy=((uv.xy+vec2(RandomFloat01(rngState),RandomFloat01(rngState))/$Size))-0.5;\n\n        vec3 v=normalize(c*$CamD+cx*xy.x+cy*xy.y);\n\n        vec3 p;\n        float d=0.01;\n        vec3 rgb=vec3(1.0);\n        vec3 io=o;\n        int i;\n        for(i=0;i<$MaxRefIte;i++){\n        \n          raymarch_$name(io,v,p,d);\n          \n          vec3 n=normal_$name(p);\n          \n          //View direction to tangent space\n          vec3 ot;vec3 ob;Onb(n,ot,ob);\n          vec3 vt=vec3(dot(-v,ot),dot(-v,ob),dot(-v,n));\n\t\t\n          if (d<$MaxDistance){\t\n          //if (length(p-o)<$MaxDistance){\n            vec3 obj_Emission=$mfsdf(vec4(p,13.0)).rgb;\n            \n            if ((obj_Emission.x+obj_Emission.y+obj_Emission.z)>0.001){\n                rgb=obj_Emission*rgb;\n                break;\n            } else {\n                float s=RandomFloat01(rngState);\n\n                vec3 obj_BaseColor=$mfsdf(vec4(p,1.0)).rgb; // 1 - BaseColor  (r,g,b,sdf)\n                float obj_Metallic=$mfsdf(vec4(p,2.0)).x;   // 2 - Metallic   (v,0,0,sdf)\n                float obj_Specular=$mfsdf(vec4(p,4.0)).x;   // 4 - Specular   (v,0,0,sdf)\n                float obj_Roughness=$mfsdf(vec4(p,5.0)).x;  // 5 - Roughness  (v,0,0,sdf)\n\n                if (s>obj_Specular*obj_Specular){\n                    rgb=(obj_BaseColor-obj_BaseColor*obj_Metallic)*rgb;\n                    v=cosineSampleHemissphere(rngState,n);\n                } else {\n  \n                    float r2=obj_Roughness*obj_Roughness;\n                    vec3 vndf=SampleGGXVNDF(rngState,vt,r2,r2);\n                    vec3 nv=reflect(-vt,vndf);\n\n                    //Sample direction back to camera space\n                    nv=nv.x*ot+nv.y*ob+nv.z*n;\n \n                    float FH=schlickWeight(dot(n,nv));\n                    vec3 Cspec0=mix(vec3(obj_Specular*.08),obj_BaseColor,obj_Metallic);\n                    vec3 Fs=mix(Cspec0,vec3(1.0),FH);\n                    rgb=Fs*rgb;\n                    \n                    v=nv;\n                }\n                io=p;\n                d=0.01;\n            }\n          } else {\n           rgb*=$hdri(equirectangularMap(v.xzy)).xyz;\n           break;\n          }\n        }//for(int i\n        if (i==$MaxRefIte) rgb=vec3(0.0);//did not hit any light source\n        sumrgb+=rgb;\n    }//for(int aa\n    \n    // average the frames together\n    sumrgb=sumrgb/float($Samples);\n\n\treturn pow(sumrgb,vec3(1.0/$Gamma));\n\t\n}\n\n",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao\n\nPath tracing ray marching node for MFSDF objects using a environment 360 HDRI image\n\n",
				"name": "Ray Marching Multi-Field SDF Path Tracing",
				"outputs": [
					{
						"rgb": "pathtracing_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 50,
						"label": "MaxDistance",
						"longdesc": "Maximum render distance",
						"max": 500,
						"min": 1,
						"name": "MaxDistance",
						"step": 0.01,
						"type": "float"
					},
					{
						"default": 2,
						"label": "MaxRefIte",
						"longdesc": "Maximum reflection iterations",
						"name": "MaxRefIte",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "25",
								"value": "25"
							},
							{
								"name": "30",
								"value": "30"
							},
							{
								"name": "40",
								"value": "40"
							},
							{
								"name": "50",
								"value": "50"
							}
						]
					},
					{
						"default": 2,
						"label": "MaxRayLoop",
						"name": "MaxRayLoop",
						"type": "enum",
						"values": [
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "32",
								"value": "32"
							},
							{
								"name": "64",
								"value": "64"
							},
							{
								"name": "128",
								"value": "128"
							},
							{
								"name": "256",
								"value": "256"
							},
							{
								"name": "512",
								"value": "512"
							},
							{
								"name": "1024",
								"value": "1024"
							},
							{
								"name": "2048",
								"value": "2048"
							},
							{
								"name": "4096",
								"value": "4096"
							}
						]
					},
					{
						"default": 6,
						"label": "Precision",
						"name": "Precision",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "01"
							},
							{
								"name": "2",
								"value": "005"
							},
							{
								"name": "3",
								"value": "001"
							},
							{
								"name": "4",
								"value": "0005"
							},
							{
								"name": "5",
								"value": "0001"
							},
							{
								"name": "6",
								"value": "00005"
							},
							{
								"name": "7",
								"value": "00001"
							}
						]
					},
					{
						"default": 0,
						"label": "Samples",
						"name": "Samples",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "24",
								"value": "24"
							},
							{
								"name": "32",
								"value": "32"
							},
							{
								"name": "48",
								"value": "48"
							},
							{
								"name": "64",
								"value": "64"
							},
							{
								"name": "96",
								"value": "96"
							},
							{
								"name": "128",
								"value": "128"
							},
							{
								"name": "192",
								"value": "192"
							},
							{
								"name": "256",
								"value": "256"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Gamma",
						"longdesc": "Gamma Correction",
						"max": 3,
						"min": 0,
						"name": "Gamma",
						"step": 0.01,
						"type": "float"
					},
					{
						"default": 9,
						"first": 0,
						"label": "",
						"last": 13,
						"name": "Size",
						"type": "size"
					}
				],
				"shortdesc": "Ray Marching Multi-Field SDF Path Tracing"
			},
			"tree_item": "PauloFalcao/MFSDF/Render/Ray Marching Multi-Field SDF Path Tracing",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"RepX": 4,
				"RepY": 1,
				"RepZ": 4,
				"X": 1,
				"Y": 1,
				"Z": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec3 opRepLim(vec3 p,vec3 c,vec3 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor(p/c+0.5),vec3(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - IQ\n\nRepeats its input shape",
				"name": "Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(opRepLim($uv.xyz,vec3($X,$Y,$Z)*2.0,vec3($RepX-1.0,$RepY-1.0,$RepZ-1.0)),$uv.w))"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128,
						"min": 1,
						"name": "RepZ",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Repeat"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"Iterations": 2,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "//From https://www.shadertoy.com/view/wlyBWm by @paulofalcao\n\nvec3 smoothrepeat_$name(vec3 p,vec3 smooth_size,vec3 size){\n    size.$Axis/=2.0;\n    float w=pow(2.0,float($Iterations));\n\tfor(int i=0;i<$Iterations;i++){\n        p.$Axis=sqrt(p.$Axis*p.$Axis+smooth_size.$Axis);//smooth abs\n\t\tp.$Axis-=size.$Axis*w;//translate\n\t\tw=w/2.0;\n\t}\n\treturn p;\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "Smooth Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$in(vec4(smoothrepeat_$name($uv.xyz,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 3,
						"label": "Axis",
						"longdesc": "Repetition axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"default": 2,
						"label": "Repetitions",
						"longdesc": "Repetitions in the X axis",
						"name": "Iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "0"
							},
							{
								"name": "2",
								"value": "1"
							},
							{
								"name": "4",
								"value": "2"
							},
							{
								"name": "8",
								"value": "3"
							},
							{
								"name": "16",
								"value": "4"
							},
							{
								"name": "32",
								"value": "5"
							},
							{
								"name": "64",
								"value": "6"
							},
							{
								"name": "128",
								"value": "7"
							},
							{
								"name": "256",
								"value": "8"
							},
							{
								"name": "512",
								"value": "9"
							},
							{
								"name": "1024",
								"value": "10"
							},
							{
								"name": "2048",
								"value": "11"
							},
							{
								"name": "4096",
								"value": "12"
							},
							{
								"name": "8192",
								"value": "13"
							},
							{
								"name": "16384",
								"value": "14"
							},
							{
								"name": "32768",
								"value": "15"
							},
							{
								"name": "65536",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Repeat"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Smooth Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "vec3 blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p.xyz;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return p;\n}",
				"longdesc": "Type - SDF3D Operator\nCode - Blackle\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "Smooth Repeat V2",
				"outputs": [
					{
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4",
						"v4v4": "$in(vec4(blakle_smoothrepeat_asin_sin_$name($uv.xyz,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)*0.635),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Repeat V2"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Smooth Repeat V2",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "iterate_buffer",
					"from_port": 1,
					"to": "blend",
					"to_port": 0
				},
				{
					"from": "blend",
					"from_port": 0,
					"to": "iterate_buffer",
					"to_port": 1
				},
				{
					"from": "gen_inputs",
					"from_port": 0,
					"to": "iterate_buffer",
					"to_port": 0
				},
				{
					"from": "gen_inputs",
					"from_port": 0,
					"to": "blend",
					"to_port": 1
				},
				{
					"from": "iterate_buffer",
					"from_port": 0,
					"to": "@@1774",
					"to_port": 0
				},
				{
					"from": "iterate_buffer",
					"from_port": 0,
					"to": "1774",
					"to_port": 0
				},
				{
					"from": "1774",
					"from_port": 0,
					"to": "gen_outputs",
					"to_port": 0
				}
			],
			"icon_data": "",
			"label": "Path Tracing Acumulator",
			"longdesc": "",
			"name": "graph",
			"nodes": [
				{
					"name": "blend",
					"node_position": {
						"x": 1083.322632,
						"y": 122.133789
					},
					"parameters": {
						"amount": "1.0-(1.0/(1.0+$s1.iteration))",
						"blend_type": 0
					},
					"seed": 0,
					"seed_locked": false,
					"type": "blend"
				},
				{
					"name": "iterate_buffer",
					"node_position": {
						"x": 1083.322632,
						"y": -42.866211
					},
					"parameters": {
						"filter": true,
						"iterations": 128,
						"mipmap": true,
						"size": 9
					},
					"seed": 29168,
					"seed_locked": true,
					"type": "iterate_buffer"
				},
				{
					"name": "1774",
					"node_position": {
						"x": 1405.572754,
						"y": -11.866211
					},
					"parameters": {
						"Gamma": 2.2
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"type": "rgb"
							}
						],
						"instance": "",
						"name": "Gamma Correction",
						"outputs": [
							{
								"rgb": "pow($in($uv).xyz,vec3(1.0/$Gamma))",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 2.2,
								"label": "",
								"max": 3,
								"min": 0,
								"name": "Gamma",
								"step": 0.01,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": 539.322632,
						"y": 29.800455
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0,
							"name": "port0",
							"type": "rgb"
						}
					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": 1705.572754,
						"y": 21.800455
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0,
							"name": "unnamed",
							"type": "rgb"
						}
					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": 992.406006,
						"y": -344.866211
					},
					"parameters": {
						"param0": 2.2,
						"param1": 9,
						"param2": 128
					},
					"seed": 0,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Gamma Correction",
							"linked_widgets": [
								{
									"node": "1774",
									"widget": "Gamma"
								}
							],
							"name": "param0",
							"type": "linked_control"
						},
						{
							"label": "Size",
							"linked_widgets": [
								{
									"node": "iterate_buffer",
									"widget": "size"
								}
							],
							"name": "param1",
							"type": "linked_control"
						},
						{
							"label": "MaxIterations",
							"linked_widgets": [
								{
									"node": "iterate_buffer",
									"widget": "iterations"
								}
							],
							"name": "param2",
							"type": "linked_control"
						}
					]
				}
			],
			"parameters": {
				"param0": 2.2,
				"param1": 9,
				"param2": 128
			},
			"seed": 0,
			"seed_locked": false,
			"shortdesc": "",
			"tree_item": "PauloFalcao/MFSDF/Render/Path Tracing Acumulator",
			"type": "graph"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"angle": 0,
				"axis": 1,
				"correction": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "vec4 $(name_uv)_o=$in(vec4(twist$axis($uv.xyz,$angle),$uv.w));",
				"global": "vec2 twist_rot(vec2 v, float a) {\n\ta=a*0.01745329251;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(vec2(c, -s),vec2(s, c));\n\treturn m * v;\n}\n\nvec3 twistX(vec3 v, float a){\n\tv.yz=twist_rot(v.yz,v.x*a);\n\treturn v;\n}\n\nvec3 twistY(vec3 v, float a){\n\tv.xz=twist_rot(v.xz,v.y*a);\n\treturn v;\n}\n\nvec3 twistZ(vec3 v, float a){\n\tv.xy=twist_rot(v.xy,v.z*a);\n\treturn v;\n}\n\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTwist a SDF3D on the specified axis by an angle.",
				"name": "Twist",
				"outputs": [
					{
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4",
						"v4v4": "vec4($(name_uv)_o.xyz,$(name_uv)_o.w/(1.0+$correction))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "Angle1.a",
						"default": 0,
						"label": "Angle",
						"max": 360,
						"min": -360,
						"name": "angle",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 5,
						"min": 0,
						"name": "correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Twist"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Twist",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 5
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "//Adapted from MaterialMaker\n\nvec3 circle_repeat_transform_X(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.y, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Y(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.z*s;\n\trv.y = p.y;\n\trv.z = -p.x*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Z(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.y);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c-distance;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - Paulo Falcao, RodZilla\n\nRepeats its input shape around a axis",
				"name": "Polar Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(circle_repeat_transform_$Axis($uv.xyz, $Repetitions, $Distance),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 4,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the circle",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Polar Repeat"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 6,
				"Roundness": 0,
				"Smooth": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec3 smoothRot_X(vec3 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p.yz);\n  float x=asin(sin(atan(p.y,p.z)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec3(p.x,x/s,y/s-distance);\n}\n\nvec3 smoothRot_Y(vec3 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p.xz);\n  float x=asin(sin(atan(p.x,p.z)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec3(x/s,p.y,y/s-distance);\n}\n\nvec3 smoothRot_Z(vec3 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p.xy);\n  float x=asin(sin(atan(p.x,p.y)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec3(x/s,y/s-distance,p.z);\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThis is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions.\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh",
				"name": "Smooth Polar Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(smoothRot_$Axis($uv.xyz,$Repetitions,$Smooth,1.0-$Roundness, $Distance),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Polar repetition axis, objects will be repeated around this axis.",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 6,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1,
						"min": 0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Roundness",
						"longdesc": "This is a correction to the smoothness.\n\n0 (default) - With correction, this way a flat object will no smoothess will be flat, the correction is not perfect with few repetions it's still possible to notice some distortion. \n\n1 - Without correction, using this setting a flat object will be rounded, even with smoothness at zero.",
						"max": 1,
						"min": 0,
						"name": "Roundness",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Smooth Polar Repeat"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"iterations": 4,
				"mode": 2
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "SDF3D",
						"longdesc": "The object that will be repeated",
						"name": "obj3d",
						"shortdesc": "V4->V4",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0)",
						"function": true,
						"label": "V4->V4 3D Transformation",
						"longdesc": "The transformation that will be applied each iteration",
						"name": "trans3d",
						"shortdesc": "V4->V4 Transformation",
						"type": "v4v4"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"function": true,
						"label": "SDF2D Custom Boolean",
						"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
						"name": "custombool",
						"shortdesc": "SDF2D Join",
						"type": "sdf2d"
					}
				],
				"instance": "vec4 for_fold_$name(vec4 p,float mfsdftype) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  vec4 o=$obj3d(vec4(p.xyz,mfsdftype));\n  return vec4(o.xyz,o.w/p.w);\n}\n\nvec4 for_min_$name(vec4 p,float mfsdftype) {\n  vec4 d=$obj3d(vec4(p.xyz,mfsdftype));\n  float m=min(999999.0,d.w);\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(vec4(p.xyz,mfsdftype));\n\tm=min(m,d.w/p.w);\n  }\n  return vec4(d.xyz,m);\n}\n\nvec4 for_custom_$name(vec4 p,float mfsdftype) {\n  vec4 d=$obj3d(vec4(p.xyz,mfsdftype));\n  float m=$custombool(vec2(999999.0,d.w));\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(vec4(p.xyz,mfsdftype));\n\tm=$custombool(vec2(m,d.w/p.w));\n  }\n  return vec4(d.xyz,m);\n}\n",
				"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
				"name": "Fractal",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$mode"
					}
				],
				"parameters": [
					{
						"default": 24,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "17",
								"value": "17"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "19",
								"value": "19"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "22",
								"value": "22"
							},
							{
								"name": "23",
								"value": "23"
							},
							{
								"name": "24",
								"value": "24"
							}
						]
					},
					{
						"default": 1,
						"label": "Mode",
						"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Fold",
								"value": "for_fold_$name(vec4($uv.xyz,1.0),$uv.w)"
							},
							{
								"name": "Min",
								"value": "for_min_$name(vec4($uv.xyz,1.0),$uv.w)"
							},
							{
								"name": "Custom",
								"value": "for_custom_$name(vec4($uv.xyz,1.0),$uv.w)"
							}
						]
					}
				],
				"shortdesc": "Fractal"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/Fractal",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "pxflib_9",
					"from_port": 0,
					"to": "graph",
					"to_port": 0
				},
				{
					"from": "pxflib_7",
					"from_port": 0,
					"to": "pxflib",
					"to_port": 0
				},
				{
					"from": "sdf3d_sphere",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 8
				},
				{
					"from": "pxflib",
					"from_port": 0,
					"to": "pxflib_8",
					"to_port": 0
				},
				{
					"from": "graph_3",
					"from_port": 0,
					"to": "pxflib_3",
					"to_port": 1
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "pxflib_3",
					"to_port": 0
				},
				{
					"from": "pxflib_3",
					"from_port": 0,
					"to": "pxflib_8",
					"to_port": 1
				},
				{
					"from": "pxflib_8",
					"from_port": 0,
					"to": "pxflib_9",
					"to_port": 0
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment_5",
					"node_position": {
						"x": 665.20282,
						"y": -164.384247
					},
					"parameters": {

					},
					"seed": 0,
					"seed_locked": false,
					"size": {
						"x": 357,
						"y": 175
					},
					"text": "",
					"title": "View the output of this node",
					"type": "comment"
				},
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment_2",
					"node_position": {
						"x": -514.38269,
						"y": 304.695312
					},
					"parameters": {

					},
					"seed": 0,
					"seed_locked": false,
					"size": {
						"x": 489,
						"y": 38
					},
					"text": "",
					"title": "Floor",
					"type": "comment"
				},
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment_4",
					"node_position": {
						"x": -590.211182,
						"y": 40.829296
					},
					"parameters": {

					},
					"seed": 0,
					"seed_locked": false,
					"size": {
						"x": 224,
						"y": 154
					},
					"text": "",
					"title": "Start changing here",
					"type": "comment"
				},
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment_3",
					"node_position": {
						"x": -485.21109,
						"y": -68.170708
					},
					"parameters": {

					},
					"seed": 0,
					"seed_locked": false,
					"size": {
						"x": 489,
						"y": 38
					},
					"text": "",
					"title": "Object",
					"type": "comment"
				},
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment",
					"node_position": {
						"x": -482.271484,
						"y": -464.167145
					},
					"parameters": {

					},
					"seed": 0,
					"seed_locked": false,
					"size": {
						"x": 489,
						"y": 14.999939
					},
					"text": "",
					"title": "Light",
					"type": "comment"
				},
				{
					"name": "pxflib_7",
					"node_position": {
						"x": -451.663818,
						"y": -406.238922
					},
					"parameters": {
						"Alpha": 0,
						"AmbientOcclusion": 1,
						"BaseColor": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"Emission": 25,
						"Metallic": 0,
						"Normal": 0,
						"Roughness": 0,
						"Specular": 0.5,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0,1.0,1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.0,1.0,0.0)",
								"function": true,
								"label": "Normal",
								"name": "Normal_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Alpha",
								"name": "Alpha_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Ambient Occlusion",
								"longdesc": "Fake Ambient Occlusion",
								"name": "AmbientOcclusion_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz/$scale)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
						"name": "MFSDF Object Maker",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Clearcoat Normal Scale",
								"max": 1,
								"min": 0,
								"name": "Normal",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Alpha",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "AmbientOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Maker"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_sphere",
					"node_position": {
						"x": -546.391479,
						"y": 89.984863
					},
					"parameters": {
						"r": 0.4
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_sphere"
				},
				{
					"connections": [
						{
							"from": "sdf3d_box",
							"from_port": 0,
							"to": "sdf3d_translate_3_2",
							"to_port": 0
						},
						{
							"from": "sdf3d_translate_3_2",
							"from_port": 0,
							"to": "pxflib_7",
							"to_port": 8
						},
						{
							"from": "pxflib_7",
							"from_port": 0,
							"to": "gen_outputs",
							"to_port": 0
						},
						{
							"from": "tex3d_pattern_2",
							"from_port": 0,
							"to": "pxflib_7",
							"to_port": 0
						}
					],
					"label": "Checkerboard",
					"longdesc": "",
					"name": "graph_3",
					"node_position": {
						"x": -234.543121,
						"y": 382.925293
					},
					"nodes": [
						{
							"name": "sdf3d_box",
							"node_position": {
								"x": -1041.340088,
								"y": -203.449951
							},
							"parameters": {
								"r": 0,
								"sx": 8,
								"sy": 0.5,
								"sz": 8
							},
							"seed": 0,
							"seed_locked": false,
							"type": "sdf3d_box"
						},
						{
							"name": "sdf3d_translate_3_2",
							"node_position": {
								"x": -835.340027,
								"y": -203.449951
							},
							"parameters": {
								"x": 0,
								"y": -1.15,
								"z": 0
							},
							"seed": 0,
							"seed_locked": false,
							"type": "sdf3d_translate"
						},
						{
							"name": "pxflib_7",
							"node_position": {
								"x": -646.340027,
								"y": -351.449982
							},
							"parameters": {
								"Alpha": 0,
								"AmbientOcclusion": 1,
								"BaseColor": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1,
									"type": "Color"
								},
								"Emission": 0,
								"Metallic": 0,
								"Normal": 0,
								"Roughness": 0,
								"Specular": 0.5,
								"scale": 1
							},
							"seed": -5947,
							"seed_locked": true,
							"shader_model": {
								"code": "",
								"global": "",
								"inputs": [
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "BaseColor",
										"name": "BaseColor_tex3d",
										"shortdesc": "TEX3D",
										"type": "tex3d"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Metallic",
										"name": "Metallic_tex3d",
										"shortdesc": "Grayscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Specular",
										"name": "Specular_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Roughness",
										"name": "Roughness_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "vec3(1.0,1.0,1.0)",
										"function": true,
										"label": "Emission",
										"name": "Emission_tex3d",
										"shortdesc": "TEX3D",
										"type": "tex3d"
									},
									{
										"default": "vec3(0.0,1.0,0.0)",
										"function": true,
										"label": "Normal",
										"name": "Normal_tex3d",
										"shortdesc": "TEX3D",
										"type": "tex3d"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Alpha",
										"name": "Alpha_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Ambient Occlusion",
										"longdesc": "Fake Ambient Occlusion",
										"name": "AmbientOcclusion_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "length($uv)-0.4 ",
										"function": true,
										"label": "Object",
										"name": "sdf3d",
										"shortdesc": "SDF3D",
										"type": "sdf3d"
									}
								],
								"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz/$scale)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
								"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
								"name": "MFSDF Object Maker",
								"outputs": [
									{
										"shortdesc": "V4->V4 MFSDF ",
										"type": "v4v4",
										"v4v4": "PBRObjectMaker_$name($uv)"
									}
								],
								"parameters": [
									{
										"default": {
											"a": 1,
											"b": 1,
											"g": 1,
											"r": 1
										},
										"label": "",
										"name": "BaseColor",
										"type": "color"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Metallic",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.5,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Specular",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Roughness",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"longdesc": "Emission Scale",
										"max": 500,
										"min": 0,
										"name": "Emission",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"longdesc": "Clearcoat Normal Scale",
										"max": 1,
										"min": 0,
										"name": "Normal",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Alpha",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "AmbientOcclusion",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "",
										"longdesc": "Object scale",
										"max": 4,
										"min": 0,
										"name": "scale",
										"step": 0.001,
										"type": "float"
									}
								],
								"shortdesc": "MFSDF Object Maker"
							},
							"type": "shader"
						},
						{
							"name": "tex3d_pattern_2",
							"node_position": {
								"x": -899.340027,
								"y": -353.449951
							},
							"parameters": {
								"mix": 4,
								"x_scale": 1,
								"x_wave": 2,
								"y_scale": 0,
								"y_wave": 2,
								"z_scale": 1,
								"z_wave": 2
							},
							"seed": 0,
							"seed_locked": false,
							"type": "tex3d_pattern"
						},
						{
							"name": "gen_inputs",
							"node_position": {
								"x": -1341.340088,
								"y": -277.949951
							},
							"parameters": {

							},
							"ports": [

							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_outputs",
							"node_position": {
								"x": -346.340027,
								"y": -277.949951
							},
							"parameters": {

							},
							"ports": [
								{
									"group_size": 0,
									"name": "port0",
									"type": "v4v4"
								}
							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_parameters",
							"node_position": {
								"x": -1055.590088,
								"y": -653.449951
							},
							"parameters": {
								"param0": 8,
								"param1": -1.15
							},
							"seed": 0,
							"seed_locked": false,
							"type": "remote",
							"widgets": [
								{
									"label": "Size",
									"linked_widgets": [
										{
											"node": "sdf3d_box",
											"widget": "sx"
										},
										{
											"node": "sdf3d_box",
											"widget": "sz"
										}
									],
									"name": "param0",
									"type": "linked_control"
								},
								{
									"label": "Position",
									"linked_widgets": [
										{
											"node": "sdf3d_translate_3_2",
											"widget": "y"
										}
									],
									"name": "param1",
									"type": "linked_control"
								}
							]
						}
					],
					"parameters": {
						"param0": 8,
						"param1": -1.15
					},
					"seed": 0,
					"seed_locked": false,
					"shortdesc": "",
					"type": "graph"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": 0.764893,
						"y": 155.921295
					},
					"parameters": {
						"op": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "vec4 sdf3dc_union(vec4 a, vec4 b) {\n\treturn vec4((a.w<b.w)?vec4(a):vec4(b));\n}\nvec4 sdf3dc_sub(vec4 a, vec4 b) {\n\treturn vec4((-a.w>b.w)?vec4(a.xyz,-a.w):vec4(b));\n}\nvec4 sdf3dc_inter(vec4 a, vec4 b) {\n\treturn vec4((a.w>b.w)?vec4(a):vec4(b));\n}",
						"inputs": [
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in1",
								"shortdesc": "V4->V4 MFSDF A",
								"type": "v4v4"
							},
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in2",
								"shortdesc": "V4->V4 MFSDF B",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean operation (union, intersection or difference) between two shapes",
						"name": "Boolean",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF",
								"type": "v4v4",
								"v4v4": "$op($in1($uv), $in2($uv))"
							}
						],
						"parameters": [
							{
								"default": 2,
								"label": "",
								"name": "op",
								"type": "enum",
								"values": [
									{
										"name": "Union",
										"value": "sdf3dc_union"
									},
									{
										"name": "Subtraction",
										"value": "sdf3dc_sub"
									},
									{
										"name": "Intersection",
										"value": "sdf3dc_inter"
									}
								]
							}
						],
						"shortdesc": "Boolean"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_8",
					"node_position": {
						"x": 113.000885,
						"y": -159.610703
					},
					"parameters": {
						"op": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "vec4 sdf3dc_union(vec4 a, vec4 b) {\n\treturn vec4((a.w<b.w)?vec4(a):vec4(b));\n}\nvec4 sdf3dc_sub(vec4 a, vec4 b) {\n\treturn vec4((-a.w>b.w)?vec4(a.xyz,-a.w):vec4(b));\n}\nvec4 sdf3dc_inter(vec4 a, vec4 b) {\n\treturn vec4((a.w>b.w)?vec4(a):vec4(b));\n}",
						"inputs": [
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in1",
								"shortdesc": "V4->V4 MFSDF A",
								"type": "v4v4"
							},
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in2",
								"shortdesc": "V4->V4 MFSDF B",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean operation (union, intersection or difference) between two shapes",
						"name": "Boolean",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF",
								"type": "v4v4",
								"v4v4": "$op($in1($uv), $in2($uv))"
							}
						],
						"parameters": [
							{
								"default": 2,
								"label": "",
								"name": "op",
								"type": "enum",
								"values": [
									{
										"name": "Union",
										"value": "sdf3dc_union"
									},
									{
										"name": "Subtraction",
										"value": "sdf3dc_sub"
									},
									{
										"name": "Intersection",
										"value": "sdf3dc_inter"
									}
								]
							}
						],
						"shortdesc": "Boolean"
					},
					"type": "shader"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -149.271484,
						"y": -378.167145
					},
					"parameters": {
						"x": -1,
						"y": 2,
						"z": 1.252
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "vec4(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTranslates the input V4->V4 Coordinates",
						"name": "Translate",
						"outputs": [
							{
								"shortdesc": "V4->V4 Output",
								"type": "v4v4",
								"v4v4": "$in(vec4($uv.xyz-vec3($x, $y, $z),$uv.w))"
							}
						],
						"parameters": [
							{
								"control": "P1.x",
								"default": 0,
								"label": "X",
								"max": 1,
								"min": -1,
								"name": "x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "P1.y",
								"default": 0,
								"label": "Y",
								"max": 1,
								"min": -1,
								"name": "y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 1,
								"min": -1,
								"name": "z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Translate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -331.391479,
						"y": -2.015125
					},
					"parameters": {
						"Alpha": 0,
						"AmbientOcclusion": 1,
						"BaseColor": {
							"a": 1,
							"b": 0,
							"g": 0,
							"r": 1,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"Normal": 0,
						"Roughness": 0,
						"Specular": 0.5,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0,1.0,1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.0,1.0,0.0)",
								"function": true,
								"label": "Normal",
								"name": "Normal_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Alpha",
								"name": "Alpha_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Ambient Occlusion",
								"longdesc": "Fake Ambient Occlusion",
								"name": "AmbientOcclusion_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz/$scale)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
						"name": "MFSDF Object Maker",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Clearcoat Normal Scale",
								"max": 1,
								"min": 0,
								"name": "Normal",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Alpha",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "AmbientOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Maker"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_9",
					"node_position": {
						"x": 295.864532,
						"y": -164.647125
					},
					"parameters": {
						"CamD": 1.5,
						"CamX": 2,
						"CamY": 1.5,
						"CamZ": 2.3,
						"CamZoom": 1,
						"Gamma": 1,
						"LookAtX": 0,
						"LookAtY": 0,
						"LookAtZ": 0,
						"MaxDistance": 200,
						"MaxRayLoop": 5,
						"MaxRefIte": 7,
						"Precision": 2,
						"Samples": 7,
						"Size": 9
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "\n//MATH\nconst float PI=3.14159265359;\nconst float TAU=6.28318530718;\n\nvoid Onb(in vec3 N, inout vec3 T, inout vec3 B){\n    vec3 UpVector=abs(N.z)<0.999?vec3(0,0,1):vec3(1,0,0);\n    T=normalize(cross(UpVector,N));\n    B=cross(N,T);\n}\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat RandomFloat01(inout uint state){\n    uint r=rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n// SAMPLING START\n\nvec3 uniformSampleSphere(float r1,float r2){\n    float z=1.0-2.0*r1;\n    float r=sqrt(max(0.0,1.0-z*z));\n    float phi=TAU*r2;\n    return vec3(r*cos(phi),r*sin(phi),z);\n}\n\nvec3 cosineSampleHemissphere(inout uint state,vec3 n){\n    float u1=RandomFloat01(state);\n    float u2=RandomFloat01(state);\n    return normalize(n+uniformSampleSphere(u1,u2)); \n}\n\n// Adapted from \"Sampling the GGX Distribution of Visible Normals\",\n// http://jcgt.org/published/0007/04/01/\nvec3 SampleGGXVNDF(inout uint state,vec3 Ve,float alpha_x,float alpha_y){\n    float U1=RandomFloat01(state);\n    float U2=RandomFloat01(state);\n    \n    //transforming the view direction to the hemisphere configuration\n    vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));\n\n    //orthonormal basis\n    vec3 T1;vec3 T2;\n    Onb(Vh,T1,T2);\n\n    //parameterization of the projected area\n    float r = sqrt(U1); \n    float phi = 2.0 * PI * U2;    \n    float t1 = r * cos(phi);\n    float t2 = r * sin(phi);\n    float s = 0.5 * (1.0 + Vh.z);\n    t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;\n\n    //reprojection onto hemisphere\n    vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2))*Vh;\n\n    //transforming the normal back to the ellipsoid configuration\n    vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0f, Nh.z))); \n\n    return Ne;\n}\n\nfloat schlickWeight(float cosTheta) {\n    float m=clamp(1.-cosTheta,0.,1.);\n    float m2=m*m;\n    return m2*m2*m;\n}\n\n// SAMPLING END\n\n",
						"inputs": [
							{
								"default": "vec4(1.0,0.0,0.0,length($uv)-0.4)",
								"function": true,
								"label": "MFSDF",
								"name": "mfsdf",
								"shortdesc": "V4->V4 Multi-Field SDF",
								"type": "v4v4"
							},
							{
								"default": "vec3(0.0)",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "\n//tetrahedron normal by PauloFalcao\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.$Precision,-0.$Precision,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid raymarch_$name(in vec3 o,in vec3 v,out vec3 p,inout float d){\n  float s;\n  for(int i=0;i<$MaxRayLoop;i++){\n    p=o+v*d;\n    s=$mfsdf(vec4(p,0.0)).w;\n    if (abs(s)<0.0$Precision) break;\n    d+=s;\n    if (d>$MaxDistance) break;\n  } \n}\n\nvec3 pathtracing_$name(vec2 uv) {\n\n\t// Init random\n\tvec2 rndgen=vec2(\n\t\t\t\tfract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453),\n\t\t\t\tfract(sin(dot(uv, vec2(37.1235, 67.734))) * 73748.3423))*17243.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint($time*1000.0) * uint(26699)) | uint(1);\n\n\tvec3 o=vec3($CamX,$CamY,$CamZ)*$CamZoom; \n    vec3 t=vec3($LookAtX,$LookAtY,$LookAtZ);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 c=normalize(t-o);\n    vec3 cx=normalize(cross(u,c));\n    vec3 cy=normalize(cross(cx,c));\n   \n\tvec3 sumrgb=vec3(0.0);\n    for(int aa=0;aa<$Samples;aa++){\n    \n        vec2 xy=((uv.xy+vec2(RandomFloat01(rngState),RandomFloat01(rngState))/$Size))-0.5;\n\n        vec3 v=normalize(c*$CamD+cx*xy.x+cy*xy.y);\n\n        vec3 p;\n        float d=0.01;\n        vec3 rgb=vec3(1.0);\n        vec3 io=o;\n        int i;\n        for(i=0;i<$MaxRefIte;i++){\n        \n          raymarch_$name(io,v,p,d);\n          \n          vec3 n=normal_$name(p);\n          \n          //View direction to tangent space\n          vec3 ot;vec3 ob;Onb(n,ot,ob);\n          vec3 vt=vec3(dot(-v,ot),dot(-v,ob),dot(-v,n));\n\t\t\n          if (d<$MaxDistance){\t\n          //if (length(p-o)<$MaxDistance){\n            vec3 obj_Emission=$mfsdf(vec4(p,13.0)).rgb;\n            \n            if ((obj_Emission.x+obj_Emission.y+obj_Emission.z)>0.001){\n                rgb=obj_Emission*rgb;\n                break;\n            } else {\n                float s=RandomFloat01(rngState);\n\n                vec3 obj_BaseColor=$mfsdf(vec4(p,1.0)).rgb; // 1 - BaseColor  (r,g,b,sdf)\n                float obj_Metallic=$mfsdf(vec4(p,2.0)).x;   // 2 - Metallic   (v,0,0,sdf)\n                float obj_Specular=$mfsdf(vec4(p,4.0)).x;   // 4 - Specular   (v,0,0,sdf)\n                float obj_Roughness=$mfsdf(vec4(p,5.0)).x;  // 5 - Roughness  (v,0,0,sdf)\n\n                if (s>obj_Specular*obj_Specular){\n                    rgb=(obj_BaseColor-obj_BaseColor*obj_Metallic)*rgb;\n                    v=cosineSampleHemissphere(rngState,n);\n                } else {\n  \n                    float r2=obj_Roughness*obj_Roughness;\n                    vec3 vndf=SampleGGXVNDF(rngState,vt,r2,r2);\n                    vec3 nv=reflect(-vt,vndf);\n\n                    //Sample direction back to camera space\n                    nv=nv.x*ot+nv.y*ob+nv.z*n;\n \n                    float FH=schlickWeight(dot(n,nv));\n                    vec3 Cspec0=mix(vec3(obj_Specular*.08),obj_BaseColor,obj_Metallic);\n                    vec3 Fs=mix(Cspec0,vec3(1.0),FH);\n                    rgb=Fs*rgb;\n                    \n                    v=nv;\n                }\n                io=p;\n                d=0.01;\n            }\n          } else {\n           rgb*=$hdri(equirectangularMap(v.xzy)).xyz;\n           break;\n          }\n        }//for(int i\n        if (i==$MaxRefIte) rgb=vec3(0.0);//did not hit any light source\n        sumrgb+=rgb;\n    }//for(int aa\n    \n    // average the frames together\n    sumrgb=sumrgb/float($Samples);\n\n\treturn pow(sumrgb,vec3(1.0/$Gamma));\n\t\n}\n\n",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao\n\nPath tracing ray marching node for MFSDF objects using a environment 360 HDRI image\n\n",
						"name": "Ray Marching Multi-Field SDF Path Tracing",
						"outputs": [
							{
								"rgb": "pathtracing_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 50,
								"label": "MaxDistance",
								"longdesc": "Maximum render distance",
								"max": 500,
								"min": 1,
								"name": "MaxDistance",
								"step": 0.01,
								"type": "float"
							},
							{
								"default": 2,
								"label": "MaxRefIte",
								"longdesc": "Maximum reflection iterations",
								"name": "MaxRefIte",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "18",
										"value": "18"
									},
									{
										"name": "20",
										"value": "20"
									},
									{
										"name": "25",
										"value": "25"
									},
									{
										"name": "30",
										"value": "30"
									},
									{
										"name": "40",
										"value": "40"
									},
									{
										"name": "50",
										"value": "50"
									}
								]
							},
							{
								"default": 2,
								"label": "MaxRayLoop",
								"name": "MaxRayLoop",
								"type": "enum",
								"values": [
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "32",
										"value": "32"
									},
									{
										"name": "64",
										"value": "64"
									},
									{
										"name": "128",
										"value": "128"
									},
									{
										"name": "256",
										"value": "256"
									},
									{
										"name": "512",
										"value": "512"
									},
									{
										"name": "1024",
										"value": "1024"
									},
									{
										"name": "2048",
										"value": "2048"
									},
									{
										"name": "4096",
										"value": "4096"
									}
								]
							},
							{
								"default": 6,
								"label": "Precision",
								"name": "Precision",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "01"
									},
									{
										"name": "2",
										"value": "005"
									},
									{
										"name": "3",
										"value": "001"
									},
									{
										"name": "4",
										"value": "0005"
									},
									{
										"name": "5",
										"value": "0001"
									},
									{
										"name": "6",
										"value": "00005"
									},
									{
										"name": "7",
										"value": "00001"
									}
								]
							},
							{
								"default": 0,
								"label": "Samples",
								"name": "Samples",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "24",
										"value": "24"
									},
									{
										"name": "32",
										"value": "32"
									},
									{
										"name": "48",
										"value": "48"
									},
									{
										"name": "64",
										"value": "64"
									},
									{
										"name": "96",
										"value": "96"
									},
									{
										"name": "128",
										"value": "128"
									},
									{
										"name": "192",
										"value": "192"
									},
									{
										"name": "256",
										"value": "256"
									}
								]
							},
							{
								"control": "None",
								"default": 1,
								"label": "Gamma",
								"longdesc": "Gamma Correction",
								"max": 3,
								"min": 0,
								"name": "Gamma",
								"step": 0.01,
								"type": "float"
							},
							{
								"default": 9,
								"first": 0,
								"label": "",
								"last": 13,
								"name": "Size",
								"type": "size"
							}
						],
						"shortdesc": "Ray Marching Multi-Field SDF Path Tracing"
					},
					"type": "shader"
				},
				{
					"connections": [
						{
							"from": "iterate_buffer",
							"from_port": 1,
							"to": "blend",
							"to_port": 0
						},
						{
							"from": "blend",
							"from_port": 0,
							"to": "iterate_buffer",
							"to_port": 1
						},
						{
							"from": "gen_inputs",
							"from_port": 0,
							"to": "iterate_buffer",
							"to_port": 0
						},
						{
							"from": "gen_inputs",
							"from_port": 0,
							"to": "blend",
							"to_port": 1
						},
						{
							"from": "iterate_buffer",
							"from_port": 0,
							"to": "1774",
							"to_port": 0
						},
						{
							"from": "1774",
							"from_port": 0,
							"to": "gen_outputs",
							"to_port": 0
						}
					],
					"label": "Path Tracing Acumulator",
					"longdesc": "",
					"name": "graph",
					"node_position": {
						"x": 704.504517,
						"y": -123.455124
					},
					"nodes": [
						{
							"name": "blend",
							"node_position": {
								"x": 1083.322632,
								"y": 122.133789
							},
							"parameters": {
								"amount": "1.0-(1.0/(1.0+$s1.iteration))",
								"blend_type": 0
							},
							"seed": 0,
							"seed_locked": false,
							"type": "blend"
						},
						{
							"name": "iterate_buffer",
							"node_position": {
								"x": 1083.322632,
								"y": -42.866211
							},
							"parameters": {
								"filter": true,
								"iterations": 512,
								"mipmap": true,
								"size": 9
							},
							"seed": 29168,
							"seed_locked": true,
							"type": "iterate_buffer"
						},
						{
							"name": "1774",
							"node_position": {
								"x": 1405.572754,
								"y": -11.866211
							},
							"parameters": {
								"Gamma": 2.2
							},
							"seed": 0,
							"seed_locked": false,
							"shader_model": {
								"code": "",
								"global": "",
								"inputs": [
									{
										"default": "0.0",
										"label": "",
										"name": "in",
										"type": "rgb"
									}
								],
								"instance": "",
								"name": "Gamma Correction",
								"outputs": [
									{
										"rgb": "pow($in($uv).xyz,vec3(1.0/$Gamma))",
										"type": "rgb"
									}
								],
								"parameters": [
									{
										"control": "None",
										"default": 2.2,
										"label": "",
										"max": 3,
										"min": 0,
										"name": "Gamma",
										"step": 0.01,
										"type": "float"
									}
								]
							},
							"type": "shader"
						},
						{
							"name": "gen_inputs",
							"node_position": {
								"x": 539.322632,
								"y": 29.800455
							},
							"parameters": {

							},
							"ports": [
								{
									"group_size": 0,
									"name": "port0",
									"type": "rgb"
								}
							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_outputs",
							"node_position": {
								"x": 1705.572754,
								"y": 21.800455
							},
							"parameters": {

							},
							"ports": [
								{
									"group_size": 0,
									"name": "unnamed",
									"type": "rgb"
								}
							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_parameters",
							"node_position": {
								"x": 992.406006,
								"y": -344.866211
							},
							"parameters": {
								"param0": 2.2,
								"param1": 9,
								"param2": 512
							},
							"seed": 0,
							"seed_locked": false,
							"type": "remote",
							"widgets": [
								{
									"label": "Gamma Correction",
									"linked_widgets": [
										{
											"node": "1774",
											"widget": "Gamma"
										}
									],
									"name": "param0",
									"type": "linked_control"
								},
								{
									"label": "Size",
									"linked_widgets": [
										{
											"node": "iterate_buffer",
											"widget": "size"
										}
									],
									"name": "param1",
									"type": "linked_control"
								},
								{
									"label": "MaxIterations",
									"linked_widgets": [
										{
											"node": "iterate_buffer",
											"widget": "iterations"
										}
									],
									"name": "param2",
									"type": "linked_control"
								}
							]
						}
					],
					"parameters": {
						"param0": 2.2,
						"param1": 9,
						"param2": 512
					},
					"seed": 0,
					"seed_locked": false,
					"shortdesc": "",
					"type": "graph"
				}
			],
			"tree_item": "PauloFalcao/MFSDF/Templates/Path Tracing Setup"
		}
	],
	"name": "PauloFalcaoRayMarching"
}