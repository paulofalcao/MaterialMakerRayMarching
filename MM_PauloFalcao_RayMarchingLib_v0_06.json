{
	"lib": [
		{
			"display_name": "Object",
			"icon_data": "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",
			"name": "MFSDF_Object",
			"parameters": {
				"BaseColor": {
					"a": 1.0,
					"b": 1.0,
					"g": 1.0,
					"r": 1.0,
					"type": "Color"
				},
				"Metallic": 0.0,
				"Roughness": 0.0,
				"Specular": 0.5
			},
			"seed": -5947.0,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "\n",
				"inputs": [
					{
						"default": "length($uv)-0.4 ",
						"function": true,
						"label": "Object",
						"name": "sdf3d",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0)",
						"function": true,
						"label": "BaseColor",
						"name": "BaseColor_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Metallic",
						"name": "Metallic_tex3d",
						"shortdesc": "Grayscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Specular",
						"name": "Specular_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Roughness",
						"name": "Roughness_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					}
				],
				"instance": "vec4 PBRObjectMaker_simple_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz);\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4(0.0,0.0,0.0,sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
				"name": "MFSDF Object",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF ",
						"type": "v4v4",
						"v4v4": "PBRObjectMaker_simple_$name($uv)"
					}
				],
				"parameters": [
					{
						"default": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0
						},
						"label": "2:",
						"name": "BaseColor",
						"type": "color"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "3:",
						"max": 1.0,
						"min": 0.0,
						"name": "Metallic",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "4:",
						"max": 1.0,
						"min": 0.0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "5:",
						"max": 1.0,
						"min": 0.0,
						"name": "Roughness",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Object Simple"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Gen/Object",
			"type": "shader"
		},
		{
			"display_name": "Object And Transform",
			"icon_data": "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",
			"name": "MFSDF_Object_And_Transform",
			"parameters": {
				"BaseColor": {
					"a": 1.0,
					"b": 1.0,
					"g": 1.0,
					"r": 1.0,
					"type": "Color"
				},
				"Emission": 0.0,
				"Metallic": 0.0,
				"RotateX": 0.0,
				"RotateY": 0.0,
				"RotateZ": 0.0,
				"Roughness": 0.0,
				"Specular": 0.5,
				"TranlateX": 0.0,
				"TranlateY": 0.0,
				"TranlateZ": 0.0,
				"scale": 1.0
			},
			"seed": -5947.0,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"function": true,
						"label": "BaseColor",
						"name": "BaseColor_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Metallic",
						"name": "Metallic_tex3d",
						"shortdesc": "Grayscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Specular",
						"name": "Specular_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Roughness",
						"name": "Roughness_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "vec3(1.0)",
						"function": true,
						"label": "Emission",
						"name": "Emission_tex3d",
						"type": "tex3d"
					},
					{
						"default": "length($uv)-0.4 ",
						"function": true,
						"label": "Object",
						"name": "sdf3d",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					}
				],
				"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
				"name": "MFSDF Object And Transform",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF ",
						"type": "v4v4",
						"v4v4": "PBRObjectMaker_$name($uv)"
					}
				],
				"parameters": [
					{
						"default": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0
						},
						"label": "",
						"name": "BaseColor",
						"type": "color"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "",
						"max": 1.0,
						"min": 0.0,
						"name": "Metallic",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "",
						"max": 1.0,
						"min": 0.0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "",
						"max": 1.0,
						"min": 0.0,
						"name": "Roughness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "",
						"longdesc": "Emission Scale",
						"max": 500.0,
						"min": 0.0,
						"name": "Emission",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "S",
						"longdesc": "Object scale",
						"max": 4.0,
						"min": 0.0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "X",
						"max": 10.0,
						"min": -10.0,
						"name": "TranlateX",
						"shortdesc": "Translate X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Y",
						"max": 10.0,
						"min": -10.0,
						"name": "TranlateY",
						"shortdesc": "Translate Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Z",
						"max": 10.0,
						"min": -10.0,
						"name": "TranlateZ",
						"shortdesc": "Translate Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Rx",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Ry",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Rz",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Object"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Gen/Object And Transform",
			"type": "shader"
		},
		{
			"display_name": "Object Attributes",
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"seed": -5947.0,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "MFSDF",
						"name": "MFSDF",
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nDecompose the MFSDF into the most used attributes",
				"name": "MFSDF Object Attributes",
				"outputs": [
					{
						"sdf3d": "$MFSDF(vec4($uv.xyz,0.0)).w",
						"shortdesc": "Object",
						"type": "sdf3d"
					},
					{
						"shortdesc": "Albedo",
						"tex3d": "$MFSDF(vec4($uv.xyz,1.0)).xyz",
						"type": "tex3d"
					},
					{
						"shortdesc": "Metallic",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,2.0)).x",
						"type": "tex3d_gs"
					},
					{
						"shortdesc": "Roughness",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,5.0)).x",
						"type": "tex3d_gs"
					},
					{
						"shortdesc": "Emission",
						"tex3d": "$MFSDF(vec4($uv.xyz,13.0)).xyz",
						"type": "tex3d"
					},
					{
						"shortdesc": "Specular",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,4.0)).x",
						"type": "tex3d_gs"
					}
				],
				"parameters": [],
				"shortdesc": "MFSDF Object Attributes"
			},
			"tree_item": "PF/MFSDF/Gen/Object Attributes",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "tex3d_pattern_2",
					"from_port": 0.0,
					"to": "tex3d_colorize_3",
					"to_port": 0.0
				},
				{
					"from": "tex3d_colorize_3",
					"from_port": 0.0,
					"to": "pxflib_4",
					"to_port": 0.0
				},
				{
					"from": "pxflib_4",
					"from_port": 0.0,
					"to": "gen_outputs",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_box",
					"from_port": 0.0,
					"to": "pxflib_4",
					"to_port": 5.0
				}
			],
			"display_name": "Checkerboard",
			"icon_data": "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",
			"label": "Checkerboard",
			"longdesc": "",
			"name": "graph_2",
			"nodes": [
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -1041.340088,
						"y": -203.449951
					},
					"parameters": {
						"r": 0.0,
						"sx": 6.0,
						"sy": 0.5,
						"sz": 6.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "tex3d_pattern_2",
					"node_position": {
						"x": -1106.340088,
						"y": -381.449951
					},
					"parameters": {
						"mix": 4.0,
						"x_scale": "$checkersize",
						"x_wave": 2.0,
						"y_scale": 0.0,
						"y_wave": 2.0,
						"z_scale": "$checkersize",
						"z_wave": 2.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "tex3d_pattern"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -1341.340088,
						"y": -277.949951
					},
					"parameters": {

					},
					"ports": [],
					"seed": 0.0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": -171.340027,
						"y": -302.949951
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0.0,
							"name": "port0",
							"type": "v4v4"
						}
					],
					"seed": 0.0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -1055.590088,
						"y": -653.449951
					},
					"parameters": {
						"checkersize": 2.0,
						"param0": 6.0,
						"param1": -1.0,
						"param2": {
							"interpolation": 1.0,
							"points": [
								{
									"a": 1.0,
									"b": 0.808594,
									"g": 0.808594,
									"pos": 0.0,
									"r": 0.808594
								},
								{
									"a": 1.0,
									"b": 0.53125,
									"g": 0.53125,
									"pos": 1.0,
									"r": 0.53125
								}
							],
							"type": "Gradient"
						},
						"param3": 0.0,
						"param4": 0.5,
						"param5": 0.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Board Size",
							"linked_widgets": [
								{
									"node": "sdf3d_box",
									"widget": "sx"
								},
								{
									"node": "sdf3d_box",
									"widget": "sz"
								}
							],
							"name": "param0",
							"type": "linked_control"
						},
						{
							"default": 1.0,
							"label": "Checker Size",
							"max": 20.0,
							"min": 0.0,
							"name": "checkersize",
							"step": 0.001,
							"type": "named_parameter"
						},
						{
							"label": "Position",
							"linked_widgets": [
								{
									"node": "pxflib_4",
									"widget": "TranlateY"
								}
							],
							"name": "param1",
							"type": "linked_control"
						},
						{
							"label": "Color",
							"linked_widgets": [
								{
									"node": "tex3d_colorize_3",
									"widget": "g"
								}
							],
							"name": "param2",
							"type": "linked_control"
						},
						{
							"label": "Metallic",
							"linked_widgets": [
								{
									"node": "pxflib_4",
									"widget": "Metallic"
								}
							],
							"name": "param3",
							"type": "linked_control"
						},
						{
							"label": "Specular",
							"linked_widgets": [
								{
									"node": "pxflib_4",
									"widget": "Specular"
								}
							],
							"name": "param4",
							"type": "linked_control"
						},
						{
							"label": "Roughness",
							"linked_widgets": [
								{
									"node": "pxflib_4",
									"widget": "Roughness"
								}
							],
							"name": "param5",
							"type": "linked_control"
						}
					]
				},
				{
					"name": "tex3d_colorize_3",
					"node_position": {
						"x": -850.0,
						"y": -377.021362
					},
					"parameters": {
						"g": {
							"interpolation": 1.0,
							"points": [
								{
									"a": 1.0,
									"b": 0.808594,
									"g": 0.808594,
									"pos": 0.0,
									"r": 0.808594
								},
								{
									"a": 1.0,
									"b": 0.53125,
									"g": 0.53125,
									"pos": 1.0,
									"r": 0.53125
								}
							],
							"type": "Gradient"
						}
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "tex3d_colorize"
				},
				{
					"name": "pxflib_4",
					"node_position": {
						"x": -591.953735,
						"y": -359.458862
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 0.0,
						"Metallic": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 0.5,
						"TranlateX": 0.0,
						"TranlateY": -1.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				}
			],
			"parameters": {
				"checkersize": 2.0,
				"param0": 6.0,
				"param1": -1.0,
				"param2": {
					"interpolation": 1.0,
					"points": [
						{
							"a": 1.0,
							"b": 0.808594,
							"g": 0.808594,
							"pos": 0.0,
							"r": 0.808594
						},
						{
							"a": 1.0,
							"b": 0.53125,
							"g": 0.53125,
							"pos": 1.0,
							"r": 0.53125
						}
					],
					"type": "Gradient"
				},
				"param3": 0.0,
				"param4": 0.5,
				"param5": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"global": "",
				"instance": "",
				"longdesc": "",
				"name": ""
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Objs/Checkerboard",
			"type": "graph"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box",
					"from_port": 0.0,
					"to": "sdf3d_translate_3_2",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0.0,
					"to": "sdf3d_rotate_2",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0.0,
					"to": "sdf3d_boolean",
					"to_port": 0.0
				},
				{
					"from": "pxflib",
					"from_port": 0.0,
					"to": "sdf3d_boolean",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_rotate_2",
					"from_port": 0.0,
					"to": "sdf3d_translate_3_3",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_translate_3_3",
					"from_port": 0.0,
					"to": "pxflib",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_boolean",
					"from_port": 0.0,
					"to": "pxflib_2",
					"to_port": 8.0
				},
				{
					"from": "pxflib_5",
					"from_port": 0.0,
					"to": "pxflib_3",
					"to_port": 0.0
				},
				{
					"from": "pxflib_2",
					"from_port": 0.0,
					"to": "pxflib_3",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_box_2",
					"from_port": 0.0,
					"to": "sdf3d_smoothboolean",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_translate_3_4",
					"from_port": 0.0,
					"to": "sdf3d_smoothboolean",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_smoothboolean",
					"from_port": 0.0,
					"to": "pxflib_5",
					"to_port": 8.0
				},
				{
					"from": "sdf3d_box_3",
					"from_port": 0.0,
					"to": "sdf3d_translate_3_4",
					"to_port": 0.0
				},
				{
					"from": "pxflib_3",
					"from_port": 0.0,
					"to": "gen_outputs",
					"to_port": 0.0
				}
			],
			"display_name": "Stage grey with lights",
			"icon_data": "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",
			"label": "Stage",
			"longdesc": "",
			"name": "graph",
			"nodes": [
				{
					"name": "sdf3d_translate_3_4",
					"node_position": {
						"x": -726.0,
						"y": 1007.5
					},
					"parameters": {
						"x": 0.0,
						"y": 0.0,
						"z": -3.77
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_smoothboolean",
					"node_position": {
						"x": -709.0,
						"y": 881.5
					},
					"parameters": {
						"k": 2.35,
						"op": 0.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_smoothboolean"
				},
				{
					"name": "sdf3d_box_3",
					"node_position": {
						"x": -975.0,
						"y": 966.5
					},
					"parameters": {
						"r": 0.01,
						"sx": 6.22,
						"sy": 5.59,
						"sz": 0.37
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -974.0,
						"y": 794.5
					},
					"parameters": {
						"r": 0.01,
						"sx": 6.1,
						"sy": 0.47,
						"sz": 6.76
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -519.164001,
						"y": 641.947998
					},
					"parameters": {
						"Alpha": 0.0,
						"AmbientOcclusion": 0.0,
						"BaseColor": {
							"a": 1.0,
							"b": 0.378906,
							"g": 0.378906,
							"r": 0.378906,
							"type": "Color"
						},
						"Emission": 0.0,
						"Metallic": 0.0,
						"Normal": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 1.0,
						"Specular": 0.0,
						"TranlateX": 0.0,
						"TranlateY": -1.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0,1.0,1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.0,1.0,0.0)",
								"function": true,
								"label": "Normal",
								"name": "Normal_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Alpha",
								"name": "Alpha_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "AO",
								"longdesc": "Fake Ambient Occlusion",
								"name": "AmbientOcclusion_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*6.28318530718)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object Maker",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Clearcoat Normal Scale",
								"max": 1.0,
								"min": 0.0,
								"name": "Normal",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Alpha",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbientOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 1.0,
								"min": 0.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 1.0,
								"min": 0.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 1.0,
								"min": 0.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Maker with Rot Scale Trans"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -135.480026,
						"y": 649.5
					},
					"parameters": {
						"op": 0.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "vec4 sdf3dc1_union(vec4 a, vec4 b) {\n\treturn vec4((a.w<b.w)?vec4(a):vec4(b));\n}\n",
						"inputs": [
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in1",
								"shortdesc": "V4->V4 MFSDF A",
								"type": "v4v4"
							},
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in2",
								"shortdesc": "V4->V4 MFSDF B",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean operation (union, intersection or difference) between two shapes",
						"name": "Boolean",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF",
								"type": "v4v4",
								"v4v4": "$op($in1($uv), $in2($uv))"
							}
						],
						"parameters": [
							{
								"default": 0.0,
								"label": "",
								"name": "op",
								"type": "enum",
								"values": [
									{
										"name": "Union",
										"value": "sdf3dc1_union"
									}
								]
							}
						],
						"shortdesc": "Boolean"
					},
					"type": "shader"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -893.0,
						"y": 634.5
					},
					"parameters": {
						"mode": 4.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "SDF3D",
								"name": "in",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror symmetry using the chosen axis",
						"name": "Axis Symmetry",
						"outputs": [
							{
								"sdf3d": "$in(vec3($mode))",
								"shortdesc": "SDF3D output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 6.0,
								"label": "Axis",
								"longdesc": "Axis",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "XYZ",
										"value": "abs($uv.xyz)"
									},
									{
										"name": "XY",
										"value": "abs($uv.xy),$uv.z"
									},
									{
										"name": "XZ",
										"value": "abs($uv.x),$uv.y,abs($uv.z)"
									},
									{
										"name": "YZ",
										"value": "$uv.x,abs($uv.yz)"
									},
									{
										"name": "X",
										"value": "abs($uv.x),$uv.yz"
									},
									{
										"name": "Y",
										"value": "$uv.x,abs($uv.y),$uv.z"
									},
									{
										"name": "Z",
										"value": "$uv.x,$uv.y,abs($uv.z)"
									}
								]
							}
						],
						"shortdesc": "Axis Symmetry"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_translate_3_3",
					"node_position": {
						"x": -847.0,
						"y": 491.5
					},
					"parameters": {
						"x": 2.95,
						"y": 1.36,
						"z": 1.36
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": -536.0,
						"y": 227.5
					},
					"parameters": {
						"op": 0.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_boolean"
				},
				{
					"name": "sdf3d_rotate_2",
					"node_position": {
						"x": -830.0,
						"y": 283.5
					},
					"parameters": {
						"ax": 0.0,
						"ay": -39.0,
						"az": 65.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_rotate"
				},
				{
					"name": "sdf3d_translate_3_2",
					"node_position": {
						"x": -1031.0,
						"y": 220.5
					},
					"parameters": {
						"x": 0.0,
						"y": 3.23,
						"z": 0.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -1269.0,
						"y": 253.5
					},
					"parameters": {
						"r": 1.0,
						"sx": 0.89,
						"sy": 0.05,
						"sz": 0.81
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -351.0,
						"y": 218.0
					},
					"parameters": {
						"Alpha": 0.0,
						"AmbientOcclusion": 0.0,
						"BaseColor": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 3.0,
						"Metallic": 0.0,
						"Normal": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 0.5,
						"TranlateX": 0.0,
						"TranlateY": 0.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0,1.0,1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.0,1.0,0.0)",
								"function": true,
								"label": "Normal",
								"name": "Normal_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Alpha",
								"name": "Alpha_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "AO",
								"longdesc": "Fake Ambient Occlusion",
								"name": "AmbientOcclusion_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*6.28318530718)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object Maker",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Clearcoat Normal Scale",
								"max": 1.0,
								"min": 0.0,
								"name": "Normal",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Alpha",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbientOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 1.0,
								"min": 0.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 1.0,
								"min": 0.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 1.0,
								"min": 0.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Maker with Rot Scale Trans"
					},
					"type": "shader"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -1769.0,
						"y": 559.265259
					},
					"parameters": {

					},
					"ports": [],
					"seed": 0.0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": 164.519974,
						"y": 559.265259
					},
					"parameters": {

					},
					"ports": [
						{
							"name": "unnamed",
							"type": "v4v4"
						}
					],
					"seed": 0.0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -953.511108,
						"y": -82.0
					},
					"parameters": {
						"param0": 3.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Emission",
							"linked_widgets": [
								{
									"node": "pxflib_2",
									"widget": "Emission"
								}
							],
							"name": "param0",
							"type": "linked_control"
						}
					]
				}
			],
			"parameters": {
				"param0": 3.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"global": "",
				"instance": "",
				"longdesc": "",
				"name": ""
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Objs/Stage grey with lights",
			"type": "graph"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box",
					"from_port": 0.0,
					"to": "sdf3d_translate_3_2",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0.0,
					"to": "sdf3d_rotate_2",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0.0,
					"to": "sdf3d_boolean",
					"to_port": 0.0
				},
				{
					"from": "pxflib",
					"from_port": 0.0,
					"to": "sdf3d_boolean",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_rotate_2",
					"from_port": 0.0,
					"to": "sdf3d_translate_3_3",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_translate_3_3",
					"from_port": 0.0,
					"to": "pxflib",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_boolean",
					"from_port": 0.0,
					"to": "pxflib_2",
					"to_port": 8.0
				},
				{
					"from": "pxflib_2",
					"from_port": 0.0,
					"to": "gen_outputs",
					"to_port": 0.0
				}
			],
			"display_name": "Stage Lights",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAAAT5JREFUaIHtmksOwyAMRKHqPen9L+EuiEgXqeJvGITfHuyxx0CrlJIkSZLgQ0RBO9eITXu6tdbLvGv1DOqzl6LAXjJelsU9b509vExlKoM9CXsfJgs4ktDKICK9heIOFlECphnwwlILvQDf01CtYWELdSAsVOT9HOVDsZA6uqkDczV0UCwkZVjIoYSz7uMe931KAfCDAp8Xr7oJxqoR0bUARQCmhv4jwavb9wJGVOZ2luU6WAJEeTgWmBVLZF/AQZfdAyDvn1/EFxmaBs1NLNIQLVcjgD8JrbVPa6EaZEN8LoOZ5tjH3APjEivggTat+pwexA7xA4Qfo9Fs2QEo9hMA5Z+y42Nu+Q6gkQJmIxOANgBluw4AspMAwAEofAGY2RemgH+fbSBwnxls7TtHclP+WPaHiCwfoCRJkiTr8QX8x4xuMcVQtAAAAABJRU5ErkJggg==",
			"label": "Stage Lights",
			"longdesc": "",
			"name": "graph",
			"nodes": [
				{
					"name": "pxflib",
					"node_position": {
						"x": -893.0,
						"y": 634.5
					},
					"parameters": {
						"mode": 4.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "SDF3D",
								"name": "in",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror symmetry using the chosen axis",
						"name": "Axis Symmetry",
						"outputs": [
							{
								"sdf3d": "$in(vec3($mode))",
								"shortdesc": "SDF3D output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 6.0,
								"label": "Axis",
								"longdesc": "Axis",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "XYZ",
										"value": "abs($uv.xyz)"
									},
									{
										"name": "XY",
										"value": "abs($uv.xy),$uv.z"
									},
									{
										"name": "XZ",
										"value": "abs($uv.x),$uv.y,abs($uv.z)"
									},
									{
										"name": "YZ",
										"value": "$uv.x,abs($uv.yz)"
									},
									{
										"name": "X",
										"value": "abs($uv.x),$uv.yz"
									},
									{
										"name": "Y",
										"value": "$uv.x,abs($uv.y),$uv.z"
									},
									{
										"name": "Z",
										"value": "$uv.x,$uv.y,abs($uv.z)"
									}
								]
							}
						],
						"shortdesc": "Axis Symmetry"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_translate_3_3",
					"node_position": {
						"x": -847.0,
						"y": 491.5
					},
					"parameters": {
						"x": 2.95,
						"y": 1.36,
						"z": 1.36
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": -536.0,
						"y": 227.5
					},
					"parameters": {
						"op": 0.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_boolean"
				},
				{
					"name": "sdf3d_rotate_2",
					"node_position": {
						"x": -830.0,
						"y": 283.5
					},
					"parameters": {
						"ax": 0.0,
						"ay": -39.0,
						"az": 65.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_rotate"
				},
				{
					"name": "sdf3d_translate_3_2",
					"node_position": {
						"x": -1031.0,
						"y": 220.5
					},
					"parameters": {
						"x": 0.0,
						"y": 3.23,
						"z": 0.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -1269.0,
						"y": 253.5
					},
					"parameters": {
						"r": 1.0,
						"sx": 0.89,
						"sy": 0.05,
						"sz": 0.81
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -351.0,
						"y": 218.0
					},
					"parameters": {
						"Alpha": 0.0,
						"AmbientOcclusion": 0.0,
						"BaseColor": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 3.0,
						"Metallic": 0.0,
						"Normal": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 0.5,
						"TranlateX": 0.0,
						"TranlateY": 0.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0,1.0,1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.0,1.0,0.0)",
								"function": true,
								"label": "Normal",
								"name": "Normal_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Alpha",
								"name": "Alpha_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "AO",
								"longdesc": "Fake Ambient Occlusion",
								"name": "AmbientOcclusion_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*6.28318530718)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object Maker",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Clearcoat Normal Scale",
								"max": 1.0,
								"min": 0.0,
								"name": "Normal",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Alpha",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbientOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 1.0,
								"min": 0.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 1.0,
								"min": 0.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 1.0,
								"min": 0.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Maker with Rot Scale Trans"
					},
					"type": "shader"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -1769.0,
						"y": 559.265259
					},
					"parameters": {

					},
					"ports": [],
					"seed": 0.0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": -1.480026,
						"y": 275.265259
					},
					"parameters": {

					},
					"ports": [
						{
							"name": "unnamed",
							"type": "v4v4"
						}
					],
					"seed": 0.0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -953.511108,
						"y": -82.0
					},
					"parameters": {
						"param0": 3.0
					},
					"seed": 0.0,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Emission",
							"linked_widgets": [
								{
									"node": "pxflib_2",
									"widget": "Emission"
								}
							],
							"name": "param0",
							"type": "linked_control"
						}
					]
				}
			],
			"parameters": {
				"param0": 3.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"global": "",
				"instance": "",
				"longdesc": "",
				"name": ""
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Objs/Stage Lights",
			"type": "graph"
		},
		{
			"display_name": "Boolean",
			"generic_size": 1.0,
			"icon_data": "",
			"name": "MFSDF_Boolean",
			"parameters": {
				"op1": 0.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "vec4 $(name_uv)_sout=$in($uv);\n#for\n$(name_uv)_sout=$op#($(name_uv)_sout, $in#($uv));\n#end",
				"global": "vec4 mfsdf_boolean_union(vec4 a, vec4 b) {\n\treturn vec4((a.w<b.w)?vec4(a):vec4(b));\n}\nvec4 mfsdf_boolean_sub(vec4 a, vec4 b) {\n\treturn vec4((-a.w>b.w)?vec4(a.xyz,-a.w):vec4(b));\n}\nvec4 mfsdf_boolean_inter(vec4 a, vec4 b) {\n\treturn vec4((a.w>b.w)?vec4(a):vec4(b));\n}",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 MFSDF Base",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in#",
						"shortdesc": "V4->V4 MFSDF #",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Performs a boolean operation (union, intersection or difference) between two shapes\n\nCode - PauloFalcao",
				"name": "MFSDF Boolean",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$(name_uv)_sout"
					}
				],
				"parameters": [
					{
						"default": 2.0,
						"label": "2:",
						"name": "op#",
						"type": "enum",
						"values": [
							{
								"name": "Union",
								"value": "mfsdf_boolean_union"
							},
							{
								"name": "Subtraction",
								"value": "mfsdf_boolean_sub"
							},
							{
								"name": "Intersection",
								"value": "mfsdf_boolean_inter"
							}
						]
					}
				],
				"shortdesc": "MFSDF Boolean"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Boolean",
			"type": "shader"
		},
		{
			"display_name": "Advanced Boolean",
			"icon_data": "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",
			"name": "MFSDF_Advanced_Boolean",
			"parameters": {
				"Correction": 0.0,
				"boolmode": 0.0,
				"colormode": 0.0,
				"mixshift": 0.0,
				"mixspread": 1.0,
				"smooth": 0.25
			},
			"seed": 53575.0,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "float Custom_Bool_sdSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat Custom_Bool_sdSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat Custom_Bool_sdSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,999999.0)",
						"label": "MFSDF A",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF A",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,999999.0)",
						"label": "MFSDF B",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF B",
						"type": "v4v4"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"function": true,
						"label": "Custom Boolean",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "sdf2d",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					},
					{
						"default": "vec4(1.0,0.0,0.0,0.0)",
						"function": true,
						"label": "MFSDF Union Tex",
						"longdesc": "MFSDF material used in the transition beetween MFSDF A and MFSDF B",
						"name": "in3",
						"shortdesc": "V4->V4 MFSDF Mix",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "TEX3D Color Shift",
						"longdesc": "Color transition deformation between MFSDF A and MFSDF B, using a Grayscale TEX3D",
						"name": "shift_tex3d",
						"shortdesc": "Grayscale TEX3D",
						"type": "tex3d_gs"
					}
				],
				"instance": "\nfloat normal_$name(float a, float b) {\n  return $boolmode;\n}\n\nvec4 mfsdf3d_custom_boolean_$name(vec4 a, vec4 b, vec4 uv) {\n    float e=0.001;\n\tfloat h=normal_$name(a.w,b.w);\n\tfloat d=h/(1.0+$Correction);\n\t$colormode\n    return vec4(o);\n}",
				"longdesc": "Performs a custom boolean operation between two shapes.\nThe union is defined by a custom SDF2D\n\nCode - PauloFalcao",
				"name": "MFSDF Advanced Boolean",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "mfsdf3d_custom_boolean_$name($in1($uv), $in2($uv),$uv)"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"max": 1.0,
						"min": 0.0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 5.0,
						"label": "Color Mode",
						"name": "colormode",
						"type": "enum",
						"values": [
							{
								"name": "Mix Color",
								"value": "vec4 o=vec4(mix(a.xyz,b.xyz,clamp((abs(a.w)-abs(b.w)+$shift_tex3d(uv)+$mixshift+$mixspread/2.0)*(1.0/$mixspread),0.0,1.0)),d);"
							},
							{
								"name": "A Color",
								"value": "vec4 o=a;if (abs(b.w)<abs(o.w)) o=b;if (abs(d+0.00001)<abs(o.w))o.xyz=a.xyz;o.w=d;"
							},
							{
								"name": "B Color",
								"value": "vec4 o=b;if (abs(a.w)<abs(o.w)) o=a;if (abs(d+0.00001)<abs(o.w))o.xyz=b.xyz;o.w=d;"
							},
							{
								"name": "Normal",
								"value": "vec2 n=normalize(vec2(normal_$name(a.w+e,b.w)-normal_$name(a.w-e,b.w),normal_$name(a.w,b.w+e)-normal_$name(a.w,b.w-e)));vec4 o=vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),d);"
							},
							{
								"name": "Tex",
								"value": "vec4 o=b;if (abs(a.w)<abs(o.w)) o=a;if (abs(d+0.00001)<abs(o.w)) o.xyz=$in3(vec4(uv)).xyz;o.w=d;"
							},
							{
								"name": "Tex Mix",
								"value": "vec4 o;o.xyz=mix($in3(vec4(uv)).xyz,a.xyz,clamp((abs(b.w)-abs(a.w)+($shift_tex3d(uv)+$mixshift-0.5)+$mixspread/2.0)*(1.0/$mixspread),0.0,1.0));o.xyz=mix(o.xyz,b.xyz,clamp((abs(a.w)-abs(b.w)+($shift_tex3d(uv)+$mixshift-0.5)+$mixspread/2.0)*(1.0/$mixspread),0.0,1.0));o.w=d;"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Mix Color Shift",
						"max": 5.0,
						"min": -5.0,
						"name": "mixshift",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Mix Color Spread",
						"max": 5.0,
						"min": 0.0,
						"name": "mixspread",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 0.0,
						"label": "Boolean Mode",
						"name": "boolmode",
						"type": "enum",
						"values": [
							{
								"name": "Union",
								"value": "Custom_Bool_sdSmoothUnion(a,b,$smooth)"
							},
							{
								"name": "Subtraction",
								"value": "Custom_Bool_sdSmoothSubtraction(a,b,$smooth)"
							},
							{
								"name": "Intersection",
								"value": "Custom_Bool_sdSmoothIntersection(a,b,$smooth)"
							},
							{
								"name": "Custom",
								"value": "$sdf2d(vec2(a,b))"
							}
						]
					},
					{
						"control": "None",
						"default": 0.1,
						"label": "Smooth",
						"max": 1.0,
						"min": 0.0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Advanced Boolean"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Advanced Boolean",
			"type": "shader"
		},
		{
			"display_name": "Smooth Boolean",
			"generic_size": 1.0,
			"icon_data": "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",
			"name": "MFSDF_Smooth_Boolean",
			"parameters": {
				"k1": 0.0,
				"op1": 0.0
			},
			"seed": 53575.0,
			"seed_locked": true,
			"shader_model": {
				"code": "vec4 $(name_uv)_sout=$in($uv);\n#for\n$(name_uv)_sout=$op#($(name_uv)_sout, $in#($uv),$k#);\n#end",
				"global": "float mfsdf3d_smooth_union_f(float a,float b,float k){\n\tfloat h = max( k-abs(a-b), 0.0 )/k;\n\treturn min(a,b)-h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_union(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n    float h=mfsdf3d_smooth_union_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_union_f(a.w+e,b.w,k)-mfsdf3d_smooth_union_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_union_f(a.w,b.w+e,k)-mfsdf3d_smooth_union_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),h);\n}\n\nfloat mfsdf3d_smooth_subtraction_f(float a,float b,float k){\n\tfloat h = max( k-abs(-a-b), 0.0 )/k;\n\treturn max(-a,b)+h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_subtraction(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n\tfloat h=mfsdf3d_smooth_subtraction_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_subtraction_f(a.w+e,b.w,k)-mfsdf3d_smooth_subtraction_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_subtraction_f(a.w,b.w+e,k)-mfsdf3d_smooth_subtraction_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),h);\n}\n\nfloat mfsdf3d_smooth_intersection_f(float a,float b,float k){\n\tfloat h = max( k-abs(a-b), 0.0 )/k;\n\treturn max(a,b)+h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_intersection(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n\tfloat h=mfsdf3d_smooth_intersection_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_intersection_f(a.w+e,b.w,k)-mfsdf3d_smooth_intersection_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_intersection_f(a.w,b.w+e,k)-mfsdf3d_smooth_intersection_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),h);\n}",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,999999.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 MFSDF Base",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,999999.0)",
						"label": "",
						"name": "in#",
						"shortdesc": "V4->V4 MFSDF #",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Performs a smooth boolean operation (union, intersection or difference) between shapes\n\nCode - PauloFalcao",
				"name": "MFSDF Smooth Boolean",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$(name_uv)_sout"
					}
				],
				"parameters": [
					{
						"default": 2.0,
						"label": "2:",
						"name": "op#",
						"type": "enum",
						"values": [
							{
								"name": "Union",
								"value": "mfsdf3d_smooth_union"
							},
							{
								"name": "Subtraction",
								"value": "mfsdf3d_smooth_subtraction"
							},
							{
								"name": "Intersection",
								"value": "mfsdf3d_smooth_intersection"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "2:",
						"longdesc": "The smoothness of the boolean operation",
						"max": 1.0,
						"min": 0.0,
						"name": "k#",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Boolean"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Smooth Boolean",
			"type": "shader"
		},
		{
			"display_name": "Translate",
			"icon_data": "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",
			"name": "MFSDF_Translate",
			"parameters": {
				"x": 0.0,
				"y": 0.0,
				"z": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Translates the input V4->V4 Coordinates\n\nCode - PauloFalcao",
				"name": "MFSDF Translate",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4($uv.xyz-vec3($x, $y, $z),$uv.w))"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 0.0,
						"label": "X",
						"max": 1.0,
						"min": -1.0,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "P1.y",
						"default": 0.0,
						"label": "Y",
						"max": 1.0,
						"min": -1.0,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Z",
						"max": 1.0,
						"min": -1.0,
						"name": "z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Translate"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Translate",
			"type": "shader"
		},
		{
			"display_name": "Rotate",
			"icon_data": "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",
			"name": "MFSDF_Rotate",
			"parameters": {
				"ax": 0.0,
				"ay": 0.0,
				"az": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Rotates a V4->V4\nAdapted from RodZilla TEX3D Rotate\n\nCode - RodZilla, PauloFalcao\n",
				"name": "MFSDF Rotate",
				"outputs": [
					{
						"shortdesc": "V4->V4 Ouput",
						"type": "v4v4",
						"v4v4": "$in(vec4(v4v4_rotate($uv.xyz, -vec3($ax, $ay, $az)*0.01745329251), $uv.w))"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "X",
						"longdesc": "The rotation around the X axis",
						"max": 180.0,
						"min": -180.0,
						"name": "ax",
						"shortdesc": "Rotate.x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Y",
						"longdesc": "The rotation around the Y axis",
						"max": 180.0,
						"min": -180.0,
						"name": "ay",
						"shortdesc": "Rotate.y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Z",
						"longdesc": "The rotation around the Z axis",
						"max": 180.0,
						"min": -180.0,
						"name": "az",
						"shortdesc": "Rotate.z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Rotate"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Rotate",
			"type": "shader"
		},
		{
			"display_name": "Scale",
			"icon_data": "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",
			"name": "MFSDF_Scale",
			"parameters": {
				"mode": 0.0,
				"x": 1.0,
				"xyz": 1.0,
				"y": 1.0,
				"z": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "vec4 o_$name_uv=$in(vec4($uv.xyz/vec3($x, $y, $z)/$xyz,$uv.w));",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Scales the input V4->V4 Coordinates\n\nCode - PauloFalcao",
				"name": "MFSDF Scale",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$mode"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 1.0,
						"label": "XYZ",
						"longdesc": "Scales all axis",
						"max": 1.0,
						"min": -1.0,
						"name": "xyz",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "X",
						"longdesc": "Scale X axis",
						"max": 1.0,
						"min": -1.0,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Y",
						"longdesc": "Scale Y axis",
						"max": 1.0,
						"min": -1.0,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Z",
						"longdesc": "Scale Z axis",
						"max": 1.0,
						"min": -1.0,
						"name": "z",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1.0,
						"label": "Mode",
						"longdesc": "- Multi-Field SDF mode is the default mode used for scaling Multi-Field SDF objects.\n- Coordinates Transformation is the mode that should be used for coordinates transformations operations, like in the fractal node input V4->V4 3D Transformation",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "MFSDF",
								"value": "vec4(o_$name_uv.xyz,o_$name_uv.w*min(min($x, $y), $z)*$xyz)"
							},
							{
								"name": "Transformation",
								"value": "vec4(o_$name_uv.xyz,$uv.w/min(min($x, $y), $z)/$xyz)"
							}
						]
					}
				],
				"shortdesc": "MFSDF Scale"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Scale",
			"type": "shader"
		},
		{
			"display_name": "Transform",
			"icon_data": "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",
			"name": "MFSDF_Transform",
			"parameters": {
				"RotateX": 0.0,
				"RotateY": 0.0,
				"RotateZ": 0.0,
				"TranslateX": 0.0,
				"TranslateY": 0.0,
				"TranslateZ": 0.0,
				"scale": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "vec4 o_$name_uv=$in(vec4(V4V4_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale, $uv.w));\n\n",
				"global": "vec3 V4V4_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Translates, Rotates, Scale a V4->V4\nAdapted from RodZilla Rotate\n\nCode - RodZilla, PauloFalcao",
				"name": "MFSDF Transform",
				"outputs": [
					{
						"shortdesc": "V4->V4 Ouput",
						"type": "v4v4",
						"v4v4": "vec4(o_$name_uv.xyz,o_$name_uv.w*$scale)"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "S",
						"max": 4.0,
						"min": 0.0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "X",
						"max": 10.0,
						"min": -10.0,
						"name": "TranslateX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Y",
						"max": 10.0,
						"min": -10.0,
						"name": "TranslateY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Z",
						"max": 10.0,
						"min": -10.0,
						"name": "TranslateZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Rx",
						"longdesc": "The rotation around the X axis",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateX",
						"shortdesc": "Rotate.x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Ry",
						"longdesc": "The rotation around the Y axis",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateY",
						"shortdesc": "Rotate.y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Rz",
						"longdesc": "The rotation around the Z axis",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateZ",
						"shortdesc": "Rotate.z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Transform"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Transform",
			"type": "shader"
		},
		{
			"display_name": "Repeat",
			"icon_data": "",
			"name": "MFSDF_Repeat",
			"parameters": {
				"RepX": 4.0,
				"RepY": 1.0,
				"RepZ": 4.0,
				"X": 1.0,
				"Y": 1.0,
				"Z": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec3 opRepLim(vec3 p,vec3 c,vec3 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor((p+0.0001)/c+0.5),vec3(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Repeats its input shape\n\nCode - IQ",
				"name": "MFSDF Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(opRepLim($uv.xyz,vec3($X,$Y,$Z)*2.0,vec3($RepX-1.0,$RepY-1.0,$RepZ-1.0)),$uv.w))"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4.0,
						"min": 0.0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepX",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepY",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepZ",
						"step": 1.0,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Repeat",
			"type": "shader"
		},
		{
			"display_name": "Smooth Repeat Fold",
			"icon_data": "",
			"name": "MFSDF_Smooth_Repeat_Fold",
			"parameters": {
				"Axis": 4.0,
				"Iterations": 2.0,
				"SmoothX": 0.0,
				"SmoothY": 0.0,
				"SmoothZ": 0.0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "//From https://www.shadertoy.com/view/wlyBWm by @paulofalcao\n\nvec3 smoothrepeat_$name(vec3 p,vec3 smooth_size,vec3 size){\n    size.$Axis/=2.0;\n    float w=pow(2.0,float($Iterations));\n\tfor(int i=0;i<$Iterations;i++){\n        p.$Axis=sqrt(p.$Axis*p.$Axis+smooth_size.$Axis);//smooth abs\n\t\tp.$Axis-=size.$Axis*w;//translate\n\t\tw=w/2.0;\n\t}\n\treturn p;\n}\n",
				"longdesc": "Repeats its input shape with smoothness using reflection symmetry\n\nCode - PauloFalcao",
				"name": "MFSDF Smooth Repeat Fold",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$in(vec4(smoothrepeat_$name($uv.xyz,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 3.0,
						"label": "Axis",
						"longdesc": "Repetition axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"default": 2.0,
						"label": "Repetitions",
						"longdesc": "Repetitions in the X axis",
						"name": "Iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "0"
							},
							{
								"name": "2",
								"value": "1"
							},
							{
								"name": "4",
								"value": "2"
							},
							{
								"name": "8",
								"value": "3"
							},
							{
								"name": "16",
								"value": "4"
							},
							{
								"name": "32",
								"value": "5"
							},
							{
								"name": "64",
								"value": "6"
							},
							{
								"name": "128",
								"value": "7"
							},
							{
								"name": "256",
								"value": "8"
							},
							{
								"name": "512",
								"value": "9"
							},
							{
								"name": "1024",
								"value": "10"
							},
							{
								"name": "2048",
								"value": "11"
							},
							{
								"name": "4096",
								"value": "12"
							},
							{
								"name": "8192",
								"value": "13"
							},
							{
								"name": "16384",
								"value": "14"
							},
							{
								"name": "32768",
								"value": "15"
							},
							{
								"name": "65536",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4.0,
						"min": 0.0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 0.1,
						"min": 0.0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 0.1,
						"min": 0.0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 0.1,
						"min": 0.0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Smooth Repeat Fold",
			"type": "shader"
		},
		{
			"display_name": "Smooth Repeat Infinite",
			"icon_data": "",
			"name": "MFSDF_Smooth_Repeat_Infinite",
			"parameters": {
				"Axis": 4.0,
				"SmoothX": 0.0,
				"SmoothY": 0.0,
				"SmoothZ": 0.0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "vec3 blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p.xyz;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return p;\n}",
				"longdesc": "Repeats its input shape with smoothness using reflection symmetry\n\nCode - Blackle",
				"name": "MFSDF Smooth Repeat Infinite",
				"outputs": [
					{
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4",
						"v4v4": "$in(vec4(blakle_smoothrepeat_asin_sin_$name($uv.xyz,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)*0.635),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 6.0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4.0,
						"min": 0.0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Repeat V2"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Smooth Repeat Infinite",
			"type": "shader"
		},
		{
			"display_name": "Smooth Polar Repeat",
			"icon_data": "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",
			"name": "MFSDF_Smooth_Polar_Repeat",
			"parameters": {
				"Axis": 1.0,
				"Distance": 1.0,
				"Repetitions": 6.0,
				"Smooth": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec3 MFSDF_smoothRot_X(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.y,p.z)*s)/(m+1.0))/s;\n  return vec3(p.x,sin(x)*length(p.yz),cos(x)*length(p.yz)-distance);\n}\n\nvec3 MFSDF_smoothRot_Y(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.x,p.z)*s)/(m+1.0))/s;\n  return vec3(sin(x)*length(p.xz),p.y,cos(x)*length(p.xz)-distance);\n}\n\nvec3 MFSDF_smoothRot_Z(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.x,p.y)*s)/(m+1.0))/s;\n  return vec3(sin(x)*length(p.xy),cos(x)*length(p.xy)-distance,p.z);\n}",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "This is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions. The technique was later improved by gaz.\n\nCode - PauloFalcao, Gaz\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh\nGaz improvement https://www.shadertoy.com/view/7sKGzR",
				"name": "MFSDF Smooth Polar Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(MFSDF_smoothRot_$Axis($uv.xyz,$Repetitions,$Smooth,$Distance),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Axis",
						"longdesc": "Polar repetition axis, objects will be repeated around this axis.",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 6.0,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32.0,
						"min": 1.0,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5.0,
						"min": 0.0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1.0,
						"min": 0.0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Polar Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"display_name": "Smooth Axis Symmetry",
			"icon_data": "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",
			"name": "MFSDF_Smooth_Axis_Symmetry",
			"parameters": {
				"mode": 0.0,
				"smooth": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "V4->V4",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Transforms a V4->V4 making a mirror smooth symmetry using the chosen axis\n\nCode - PauloFalcao",
				"name": "MFSDF Smooth Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "V4->V4 output",
						"type": "v4v4",
						"v4v4": "$in(vec4(vec3($mode),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
							},
							{
								"name": "XY",
								"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
							},
							{
								"name": "XZ",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
							},
							{
								"name": "X",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Smooth",
						"longdesc": "Smooth amount",
						"max": 1.0,
						"min": 0.0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Axis Symmetry"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"display_name": "Axis Symmetry",
			"icon_data": "",
			"name": "MFSDF_Axis_Symmetry",
			"parameters": {
				"mode": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Transforms a SDF3D making a mirror symmetry using the chosen axis\n\nCode - PauloFalcao",
				"name": "MFSDF Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "SDF3D output",
						"type": "v4v4",
						"v4v4": "$in(vec4(vec3($mode),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 6.0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "MFSDF Axis Symmetry"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Axis Symmetry",
			"type": "shader"
		},
		{
			"display_name": "Twist",
			"icon_data": "",
			"name": "MFSDF_Twist",
			"parameters": {
				"angle": 0.0,
				"axis": 1.0,
				"correction": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "vec4 $(name_uv)_o=$in(vec4(twist$axis($uv.xyz,$angle),$uv.w));",
				"global": "vec2 twist_rot(vec2 v, float a) {\n\ta=a*0.01745329251;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(vec2(c, -s),vec2(s, c));\n\treturn m * v;\n}\n\nvec3 twistX(vec3 v, float a){\n\tv.yz=twist_rot(v.yz,v.x*a);\n\treturn v;\n}\n\nvec3 twistY(vec3 v, float a){\n\tv.xz=twist_rot(v.xz,v.y*a);\n\treturn v;\n}\n\nvec3 twistZ(vec3 v, float a){\n\tv.xy=twist_rot(v.xy,v.z*a);\n\treturn v;\n}\n\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Twist a SDF3D on the specified axis by an angle.\n\nCode - PauloFalcao",
				"name": "MFSDF Twist",
				"outputs": [
					{
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4",
						"v4v4": "vec4($(name_uv)_o.xyz,$(name_uv)_o.w/(1.0+$correction))"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Axis",
						"name": "axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "Angle1.a",
						"default": 0.0,
						"label": "Angle",
						"max": 360.0,
						"min": -360.0,
						"name": "angle",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 5.0,
						"min": 0.0,
						"name": "correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Twist"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Twist",
			"type": "shader"
		},
		{
			"display_name": "Box Folding",
			"icon_data": "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",
			"name": "MFSDF_Box_Folding",
			"parameters": {
				"s": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"longdesc": "The input object as a signed distance function",
						"name": "in",
						"shortdesc": "Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Folds space by inverting the coordinates of space outside the box\n\nCode - PauloFalcao",
				"name": "MFSDF Box Folding",
				"outputs": [
					{
						"longdesc": "The scaled object",
						"shortdesc": "Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(clamp($uv.xyz,-$s,$s)*2.0-$uv.xyz,$uv.w)) "
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "",
						"max": 5.0,
						"min": 0.0,
						"name": "s",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Box Folding"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Box Folding",
			"type": "shader"
		},
		{
			"display_name": "Deform Edges",
			"icon_data": "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",
			"name": "MFSDF_Deform_Edges",
			"parameters": {
				"edgeb": 0.01,
				"edges": 0.04,
				"f": 2.0,
				"g": 2.0,
				"h": 0.0,
				"iterations": 3.0,
				"m": 0.0,
				"texdb": 0.0,
				"texdc": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=blursdf3d_$name($uv.xyz,$edgeb,1.01);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_mix =clamp($texd(vec4($uv.xyz,1.0))*$texdc+$texdb+0.5-$texdc*0.5,0.0,1.0);\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$(name_uv)_mix*$f*100.0,0.0,1.0));\n\n",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base MFSDF",
						"longdesc": "Main MFSDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "mfsdfa",
						"shortdesc": "Main MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified MFSDF",
						"longdesc": "Modified MFSDF goes here, only Material attibutes will be used the SDF is ignored",
						"name": "mfsdfb",
						"shortdesc": "Modified MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Surface Deform",
						"longdesc": "Surface deformation texture based on the difference between the two PDFs",
						"name": "texd",
						"shortdesc": "Surface Deform Texture",
						"type": "tex3d_gs"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$mfsdfa(vec4(p,0.0)).w;\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$mfsdfa(vec4(p+vec3(cos(t)*r,y,sin(t)*r)*b,0.0)).w;\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Modifies an MFSDF by comparing the base SDF and a modified blured version of the base SDF.\n\nCode - PauloFalcao",
				"name": "MFSDF Deform Edges",
				"outputs": [
					{
						"type": "v4v4",
						"v4v4": "vec4($(name_uv)_tex,$(name_uv)_modsdf)"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.04,
						"label": "Edge Size",
						"longdesc": "Blur amount applied to the original SDF generating a new SDF",
						"max": 0.1,
						"min": 0.0,
						"name": "edges",
						"shortdesc": "Edge Size",
						"step": 0.0001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.02,
						"label": "Obj Blur",
						"longdesc": "A small Blur applied to the original SDF",
						"max": 0.05,
						"min": 0.0,
						"name": "edgeb",
						"shortdesc": "Original SDF Blur",
						"step": 0.0001,
						"type": "float"
					},
					{
						"default": 3.0,
						"label": "Edge Precision",
						"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
						"name": "iterations",
						"shortdesc": "Edge Blur precision",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Deform",
						"max": 4.0,
						"min": 0.0,
						"name": "g",
						"shortdesc": "SDF Deformation amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Deform Brigh.",
						"max": 1.0,
						"min": -1.0,
						"name": "texdb",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Deform Cont.",
						"max": 2.0,
						"min": 0.0,
						"name": "texdc",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Select",
						"max": 1.0,
						"min": 0.0,
						"name": "m",
						"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Contrast",
						"max": 1.0,
						"min": 0.0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Shift",
						"max": 1.0,
						"min": -1.0,
						"name": "h",
						"shortdesc": "Shift difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Deform Edges"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Deform Edges",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box_2",
					"from_node": "node_sdf3d_box_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_5",
					"to_node": "node_pxflib_5",
					"to_port": 0.0
				},
				{
					"from": "pxflib_6",
					"from_node": "node_pxflib_6",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_2",
					"to_node": "node_shader_2",
					"to_port": 0.0
				},
				{
					"from": "TEX3D_Simplex_Noise_Octaves",
					"from_node": "node_TEX3D_Simplex_Noise_Octaves",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_2",
					"to_node": "node_shader_2",
					"to_port": 2.0
				},
				{
					"from": "sdf3d_boolean",
					"from_node": "node_sdf3d_boolean",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_6",
					"to_node": "node_pxflib_6",
					"to_port": 5.0
				},
				{
					"from": "pxflib_5",
					"from_node": "node_pxflib_5",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean",
					"to_node": "node_sdf3d_boolean",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_box",
					"from_node": "node_sdf3d_box",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean",
					"to_node": "node_sdf3d_boolean",
					"to_port": 0.0
				},
				{
					"from": "MFSDF_Object",
					"from_node": "node_MFSDF_Object",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_2",
					"to_node": "node_shader_2",
					"to_port": 1.0
				},
				{
					"from": "shader_2",
					"from_node": "node_shader_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Transform",
					"to_node": "node_MFSDF_Transform",
					"to_port": 0.0
				},
				{
					"from": "MFSDF_Transform",
					"from_node": "node_MFSDF_Transform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Render",
					"to_node": "node_MFSDF_Render",
					"to_port": 0.0
				}
			],
			"display_name": "Deform Edges Example",
			"icon_data": "",
			"nodes": [
				{
					"name": "shader_2",
					"node_position": {
						"x": 196.5732421875,
						"y": 29.0559387207031
					},
					"parameters": {
						"edgeb": 0.01,
						"edges": 0.044,
						"f": 2.0,
						"g": 1.997,
						"h": 0.0,
						"iterations": 3.0,
						"m": 0.0,
						"texdb": -0.405,
						"texdc": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float $(name_uv)_sdfa=blursdf3d_$name($uv.xyz,$edgeb,1.01);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_mix =clamp($texd(vec4($uv.xyz,1.0))*$texdc+$texdb+0.5-$texdc*0.5,0.0,1.0);\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$(name_uv)_mix*$f*100.0,0.0,1.0));\n\n",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Base MFSDF",
								"longdesc": "Main MFSDF goes here, adding a small SDF blur can help to avoid hard edges",
								"name": "mfsdfa",
								"shortdesc": "Main MFSDF",
								"type": "v4v4"
							},
							{
								"default": "0.0",
								"function": true,
								"label": "Modified MFSDF",
								"longdesc": "Modified MFSDF goes here, only Material attibutes will be used the SDF is ignored",
								"name": "mfsdfb",
								"shortdesc": "Modified MFSDF",
								"type": "v4v4"
							},
							{
								"default": "0.0",
								"function": true,
								"label": "Surface Deform",
								"longdesc": "Surface deformation texture based on the difference between the two PDFs",
								"name": "texd",
								"shortdesc": "Surface Deform Texture",
								"type": "tex3d_gs"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$mfsdfa(vec4(p,0.0)).w;\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$mfsdfa(vec4(p+vec3(cos(t)*r,y,sin(t)*r)*b,0.0)).w;\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao\n\nModifies an MFSDF by comparing the base SDF and a modified blured version of the base SDF.",
						"name": "MFSDF Deform Edges",
						"outputs": [
							{
								"type": "v4v4",
								"v4v4": "vec4($(name_uv)_tex,$(name_uv)_modsdf)"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.04,
								"label": "Edge Size",
								"longdesc": "Blur amount applied to the original SDF generating a new SDF",
								"max": 0.1,
								"min": 0.0,
								"name": "edges",
								"shortdesc": "Edge Size",
								"step": 0.0001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.02,
								"label": "Obj Blur",
								"longdesc": "A small Blur applied to the original SDF",
								"max": 0.05,
								"min": 0.0,
								"name": "edgeb",
								"shortdesc": "Original SDF Blur",
								"step": 0.0001,
								"type": "float"
							},
							{
								"default": 3.0,
								"label": "Edge Precision",
								"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
								"name": "iterations",
								"shortdesc": "Edge Blur precision",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									}
								]
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Deform",
								"max": 4.0,
								"min": 0.0,
								"name": "g",
								"shortdesc": "SDF Deformation amount",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Deform Brigh.",
								"max": 1.0,
								"min": -1.0,
								"name": "texdb",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Deform Cont.",
								"max": 2.0,
								"min": 0.0,
								"name": "texdc",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Select",
								"max": 1.0,
								"min": 0.0,
								"name": "m",
								"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Color Contrast",
								"max": 1.0,
								"min": 0.0,
								"name": "f",
								"shortdesc": "Increases the difference between Textures",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Color Shift",
								"max": 1.0,
								"min": -1.0,
								"name": "h",
								"shortdesc": "Shift difference between Textures",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Deform Edges"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -727.02685546875,
						"y": -331.904052734375
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed_int": 0.0,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -735.02685546875,
						"y": -182.904006958008
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed_int": 0.0,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -488.026824951172,
						"y": -187.904006958008
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": 0.2,
						"TranslateZ": 0.2,
						"scale": 0.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "TEX3D_Simplex_Noise_Octaves",
					"node_position": {
						"x": -527.498657226562,
						"y": 96.6145477294922
					},
					"parameters": {
						"brightness": 0.0,
						"clamp": 1.0,
						"contrast": 2.0,
						"iterations": 5.0,
						"persistence": 0.5,
						"scale": 30.0,
						"scale_x": 1.0,
						"scale_y": 1.0,
						"scale_z": 1.0,
						"transx": 0.0,
						"transy": 0.0,
						"transz": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
						"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// using https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tc = fract(c * vec3(.1031, .1030, .0973));\n    c += dot(c, c.yxz+0.3333333);\n    return fract((c.xxy + c.yxx)*c.zyx)-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
						"inputs": [],
						"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
						"longdesc": "Makes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB\n\nCode - Nikat",
						"name": "TEX3D Simplex Noise Octaves",
						"outputs": [
							{
								"shortdesc": "TEX3D output",
								"tex3d": "$clamp",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 8.0,
								"label": "Scale",
								"longdesc": "Noise scale",
								"max": 32.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale X",
								"longdesc": "Noise X scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale Y",
								"longdesc": "Noise Y scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale Z",
								"longdesc": "Noise Z scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate X",
								"longdesc": "Noise X translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transx",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate Y",
								"longdesc": "Noise Y translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transy",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate Z",
								"longdesc": "Noise Z translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transz",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 12.0,
								"label": "Iterations",
								"longdesc": "Noise iterations / octaves",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Persistence",
								"longdesc": "How higher octaves affect the output",
								"max": 1.0,
								"min": 0.0,
								"name": "persistence",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Brightness",
								"longdesc": "Overall brightness",
								"max": 1.0,
								"min": 0.0,
								"name": "brightness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Contrast",
								"longdesc": "Overall Contrast",
								"max": 1.0,
								"min": 0.0,
								"name": "contrast",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "Clamp",
								"longdesc": "Makes the output restricted between 0 and 1",
								"name": "clamp",
								"type": "enum",
								"values": [
									{
										"name": "false",
										"value": "$(name_uv)_out"
									},
									{
										"name": "true",
										"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
									}
								]
							}
						],
						"shortdesc": "TEX3D Simplex Noise Octaves"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_6",
					"node_position": {
						"x": -27.4986267089844,
						"y": -303.385437011719
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 0.0,
						"Metallic": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 1.0,
						"TranlateX": 0.0,
						"TranlateY": 0.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"generic_size": 1.0,
					"name": "sdf3d_boolean",
					"node_position": {
						"x": -297.498626708984,
						"y": -323.385437011719
					},
					"parameters": {
						"op1": 1.0
					},
					"seed_int": 0.0,
					"type": "sdf3d_boolean_v"
				},
				{
					"name": "MFSDF_Object",
					"node_position": {
						"x": -92.9997253417969,
						"y": 207.083312988281
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						},
						"Metallic": 0.0,
						"Roughness": 0.0,
						"Specular": 0.5
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "\n",
						"inputs": [
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							}
						],
						"instance": "vec4 PBRObjectMaker_simple_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz);\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4(0.0,0.0,0.0,sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_simple_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "2:",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "3:",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "4:",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "5:",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Simple"
					},
					"type": "shader"
				},
				{
					"name": "MFSDF_Transform",
					"node_position": {
						"x": 622.501342773438,
						"y": 16.6145477294922
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": 0.0,
						"TranslateZ": 0.0,
						"scale": 2.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "vec4 o_$name_uv=$in(vec4(V4V4_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale, $uv.w));\n\n",
						"global": "vec3 V4V4_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Translates, Rotates, Scale a V4->V4\nAdapted from RodZilla Rotate\n\nCode - RodZilla, PauloFalcao",
						"name": "MFSDF Transform",
						"outputs": [
							{
								"shortdesc": "V4->V4 Ouput",
								"type": "v4v4",
								"v4v4": "vec4(o_$name_uv.xyz,o_$name_uv.w*$scale)"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Transform"
					},
					"type": "shader"
				},
				{
					"generic_size": 1.0,
					"name": "MFSDF_Render",
					"node_position": {
						"x": 912.501342773438,
						"y": -3.38545227050781
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1.0,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"Gamma": 1.4,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"Shadow": 1.0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 2.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "vec2 Simple360HDR_equirectangularMap(vec3 dir) {\n\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "vec4(0.0,0.0,0.0,999999999.0)",
								"function": true,
								"label": "MFSDF",
								"name": "mfsdf#",
								"shortdesc": "V4->V4 Multi-Field SDF #",
								"type": "v4v4"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec4 mfsdf_$name(vec4 p){ \n  vec4 a=vec4(0.0,0.0,0.0,999999999.0);\n  vec4 b;\n  #for\n  b=$mfsdf#(p);\n  a=(a.w<b.w)?a:b;\n  #end\n  return a;\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=mfsdf_$name(vec4(p+e.xyy,0.0)).w;\n  float v2=mfsdf_$name(vec4(p+e.yyx,0.0)).w;\n  float v3=mfsdf_$name(vec4(p+e.yxy,0.0)).w;\n  float v4=mfsdf_$name(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = mfsdf_$name(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = mfsdf_$name(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t    vec3 p=ro + rd*t;\n\t\tfloat h = mfsdf_$name(vec4(p,0.0)).w;\n\t\tfloat isLight=mfsdf_$name(vec4(p,13.0)).x;\n\t\tif (isLight>0.0) h=999999.0;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=mfsdf_$name(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1)\n\tfloat objMetallic=clamp(mfsdf_$name(vec4(p,2.0)).x,0.0,1.0);  // 2 - Metallic  (v,0,0,sdf)\n\tfloat objSpecular=clamp(max(mfsdf_$name(vec4(p,4.0)).x*0.2,objMetallic),0.0,1.0);  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=mfsdf_$name(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 objEmission=mfsdf_$name(vec4(p,13.0)).xyz; // 13 - Emission (r,g,b,sdf)\n\tobjColor=max(objColor,objEmission);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tif (objEmission.x>0.0){\n\t\t\tcolor=objEmission;\n\t\t} else {\n\t\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*((1.0-objMetallic)*objColor)+\n\t\t\tpow(r,pow(256.0,(1.0-objRoughness)))*objSpecular*mix(vec3(1.0),objColor,objMetallic)*(1.0-objRoughness)*16.0;\n\t\t}\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tvec3 objEmissionRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=mfsdf_$name(vec4(p,1.0)).xyz;\n\t\t\tobjEmissionRef=mfsdf_$name(vec4(p,13.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tif (objEmissionRef.x>0.0){\n\t\t\t  objColorRef=objEmissionRef;\n\t\t\t} else {\n\t\t\t  objColorRef=max(l,$AmbLight)*objColorRef;\n\t\t\t}\n\t\t} else {\n\t\t\tobjColorRef=$hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular*mix(vec3(1.0),objColor,objMetallic));\n\t} else {\n\t\tcolor=$hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
						"longdesc": "Ray marching node for n objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\nCode - PauloFalcao, IQ\n",
						"name": "MFSDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10.0,
								"min": -10.0,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10.0,
								"min": -10.0,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10.0,
								"min": -10.0,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1.0,
								"min": 0.0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.2,
								"label": "Gamma",
								"longdesc": "Gamma Correction",
								"max": 3.0,
								"min": 0.0,
								"name": "Gamma",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/MFSDF/Op/Deform Edges Example"
		},
		{
			"display_name": "Deform Edges Generic",
			"icon_data": "",
			"name": "MFSDF_Deform_Edges_Generic",
			"parameters": {
				"f": 2.5,
				"g": 2.5,
				"h": 0.0,
				"m": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$mfsdfa(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfb=$mfsdfb(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_mix=$texd(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$(name_uv)_mix*$f*100.0,0.0,1.0));",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base MFSDF",
						"longdesc": "Main MFSDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "mfsdfa",
						"shortdesc": "Main MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified MFSDF",
						"longdesc": "Modified MFSDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
						"name": "mfsdfb",
						"shortdesc": "Modified MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Surface Deform",
						"longdesc": "Surface deformation texture based on the difference between the two PDFs",
						"name": "texd",
						"shortdesc": "Surface Deform Texture",
						"type": "tex3d_gs"
					}
				],
				"instance": "",
				"longdesc": "Modifies an MFSDF by comparing the base SDF and a modified version of the base SDF.\nTypically the modified version is a soft version of the base version, which can be done using the Node SDF Blur\n\nCode - PauloFalcao",
				"name": "MFSDF Deform Edges Generic",
				"outputs": [
					{
						"type": "v4v4",
						"v4v4": "vec4($(name_uv)_tex,$(name_uv)_modsdf)"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Deform",
						"max": 4.0,
						"min": 0.0,
						"name": "g",
						"shortdesc": "SDF Deformation amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Select",
						"max": 1.0,
						"min": 0.0,
						"name": "m",
						"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Contrast",
						"max": 1.0,
						"min": 0.0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Shift",
						"max": 1.0,
						"min": -1.0,
						"name": "h",
						"shortdesc": "Shift difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Deform Edges Generic"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Deform Edges Generic",
			"type": "shader"
		},
		{
			"display_name": "Displace Height",
			"icon_data": "",
			"name": "MFSDF_Displace_Height",
			"parameters": {
				"Bound": 0.0,
				"Correction": 0.0,
				"Distort": 0.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "vec4 $(name_uv)_d = distortHeighByNormal_$name($uv);\n$(name_uv)_d.w = $(name_uv)_d.w/(1.0+$Distort*$Correction);",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "MFSDF",
						"name": "mfsdf",
						"shortdesc": "SDF3D Input",
						"type": "v4v4"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D Displace",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.01,-0.01,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\n//By pauloFalcao\nvec4 distortHeighByNormal_$name(vec4 uv){\n    float d=$mfsdf(uv).w;\n\tif (d<=abs($Distort*($Bound+1.0))+0.01){\n\t\tvec3 n=normal_$name(uv.xyz);\n\t\tvec3 s=$tex3d(vec4(uv.xyz-d*n,0.0));\n\t    return $mfsdf(vec4(uv.xyz-n*s*$Distort,uv.w));\n\t} else {\n\t\treturn vec4(vec3(0.0),d);\n\t}\n}",
				"longdesc": "Displace the height of a MFSDF based on a TEX3D\n\nCode - PauloFalcao",
				"name": "MFSDF Displace Height",
				"outputs": [
					{
						"shortdesc": "SDF3D Output",
						"type": "v4v4",
						"v4v4": "$(name_uv)_d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Displace",
						"max": 1.0,
						"min": 0.0,
						"name": "Distort",
						"shortdesc": "Displace amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 50.0,
						"min": 0.0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Bound",
						"longdesc": "Keep this value as low as possible!\nOutside of the displacement the SDF is just the original SDF.\nThis value controls that bound.\nIncrease this correction value if the resulting SDF is not perfect on the edges.\nA higher value will increase ray marching loop iterations and will result in higher render times",
						"max": 1.0,
						"min": 0.0,
						"name": "Bound",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Displace Height"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Displace Height",
			"type": "shader"
		},
		{
			"display_name": "Fractal IFS",
			"icon_data": "",
			"name": "MFSDF_Fractal_IFS",
			"parameters": {
				"Correction": 0.0,
				"iterations": 3.0,
				"mode": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4((($uv.w>0.5&&$uv.w<1.5)||($uv.w>3.5&&$uv.w<4.5))?1.0:0.0,0.0,0.0,length($uv)-0.4)",
						"function": true,
						"label": "SDF3D",
						"longdesc": "The object that will be repeated",
						"name": "obj3d",
						"shortdesc": "V4->V4",
						"type": "v4v4"
					},
					{
						"default": "$uv",
						"function": true,
						"label": "V4->V4 3D Transformation",
						"longdesc": "The transformation that will be applied each iteration",
						"name": "trans3d",
						"shortdesc": "V4->V4 Transformation",
						"type": "v4v4"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"function": true,
						"label": "SDF2D Custom Boolean",
						"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
						"name": "custombool",
						"shortdesc": "SDF2D Join",
						"type": "sdf2d"
					}
				],
				"instance": "\nvec4 for_fold_$name(vec4 p,float mfsdftype) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  vec4 o=$obj3d(vec4(p.xyz,mfsdftype));\n  return vec4(o.xyz,o.w/p.w);\n}\n\nvec4 for_min_$name(vec4 p,float mfsdftype) {\n  vec4 d=$obj3d(vec4(p.xyz,mfsdftype));\n  vec4 m=d;\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(vec4(p.xyz,mfsdftype));\n\td.w=d.w/p.w;\n\tm=m.w<d.w?m:d;\n  }\n  return m;\n}\n\nvec4 for_custom_$name(vec4 p,float mfsdftype) {\n  vec4 d=$obj3d(vec4(p.xyz,mfsdftype));\n  vec4 m=d;\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(vec4(p.xyz,mfsdftype));\n\tfloat a=m.w;\n\tfloat b=d.w/p.w;\n\tfloat v=$custombool(vec2(a,b));\n    float e=0.001;\n\tvec2 n=normalize(vec2($custombool(vec2(a+e,b))-$custombool(vec2(a-e,b)),\n                          $custombool(vec2(a,b+e))-$custombool(vec2(a,b-e))));\t\t\t\t\n\tm=vec4(mix(m.xyz,d.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),v);\n  }\n  return vec4(m.xyz,m.w/(1.0+$Correction));\n}\n",
				"longdesc": "Repeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.\n\nCode - PauloFalcao\n",
				"name": "MFSDF Fractal IFS",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$mode"
					}
				],
				"parameters": [
					{
						"default": 24.0,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "17",
								"value": "17"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "19",
								"value": "19"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "22",
								"value": "22"
							},
							{
								"name": "23",
								"value": "23"
							},
							{
								"name": "24",
								"value": "24"
							}
						]
					},
					{
						"default": 1.0,
						"label": "Mode",
						"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Fold",
								"value": "for_fold_$name(vec4($uv.xyz,1.0),$uv.w)"
							},
							{
								"name": "Min",
								"value": "for_min_$name(vec4($uv.xyz,1.0),$uv.w)"
							},
							{
								"name": "Custom",
								"value": "for_custom_$name(vec4($uv.xyz,1.0),$uv.w)"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "Only used for Mode Custom.\nKeep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10.0,
						"min": 0.0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Fractal"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Fractal IFS",
			"type": "shader"
		},
		{
			"display_name": "Paint Edges",
			"icon_data": "",
			"name": "MFSDF_Paint_Edges",
			"parameters": {
				"edges": 0.04,
				"f": 2.0,
				"h": 0.0,
				"iterations": 3.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$mfsdfa(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec4 $(name_uv)_tex=vec4(mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$f*100.0,0.0,1.0)),$(name_uv)_sdfa);\n\n",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base MFSDF",
						"longdesc": "Main MFSDF goes here",
						"name": "mfsdfa",
						"shortdesc": "Main MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified MFSDF",
						"longdesc": "Modified MFSDF goes here, only Material attibutes will be used the SDF is ignored",
						"name": "mfsdfb",
						"shortdesc": "Modified MFSDF",
						"type": "v4v4"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$mfsdfa(vec4(p,0.0)).w;\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$mfsdfa(vec4(p+vec3(cos(t)*r,y,sin(t)*r)*b,0.0)).w;\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Modifies an MFSDF by comparing the base SDF and a modified blured version of the base SDF.\n\nCode - PauloFalcao\n\n\n",
				"name": "MFSDF Paint Edges",
				"outputs": [
					{
						"type": "v4v4",
						"v4v4": "$(name_uv)_tex"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.04,
						"label": "Edge Size",
						"longdesc": "Blur amount applied to the original SDF generating a new SDF",
						"max": 0.1,
						"min": 0.0,
						"name": "edges",
						"shortdesc": "Edge Size",
						"step": 0.0001,
						"type": "float"
					},
					{
						"default": 3.0,
						"label": "Edge Precision",
						"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in greater rendering times. Keep this value as low as possible.",
						"name": "iterations",
						"shortdesc": "Edge Blur precision",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Contrast",
						"max": 1.0,
						"min": 0.0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Shift",
						"max": 1.0,
						"min": -1.0,
						"name": "h",
						"shortdesc": "Shift difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Paint Edges"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Paint Edges",
			"type": "shader"
		},
		{
			"display_name": "Paint Edges Generic",
			"icon_data": "",
			"name": "MFSDF_Paint_Edges_Generic",
			"parameters": {
				"f": 0.163,
				"h": -0.073
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$mfsdfa(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfb=$mfsdfb(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec4 $(name_uv)_tex=vec4(mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$f*100.0,0.0,1.0)),$(name_uv)_sdfa);",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base MFSDF",
						"longdesc": "Main MFSDF goes here",
						"name": "mfsdfa",
						"shortdesc": "Main MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified MFSDF",
						"longdesc": "Modified MFSDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
						"name": "mfsdfb",
						"shortdesc": "Modified MFSDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Modifies an MFSDF by comparing the base SDF and a modified version of the base SDF, typically the Base SDF with Blur, using the SDF Blur node.\n\nCode - PauloFalcao\n\n\n",
				"name": "MFSDF Paint Edges Generic",
				"outputs": [
					{
						"type": "v4v4",
						"v4v4": "$(name_uv)_tex"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Contrast",
						"max": 1.0,
						"min": 0.0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Shift",
						"max": 1.0,
						"min": -1.0,
						"name": "h",
						"shortdesc": "Shift difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Deform Edges Generic"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Paint Edges Generic",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box_2",
					"from_node": "node_sdf3d_box_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_5",
					"to_node": "node_pxflib_5",
					"to_port": 0.0
				},
				{
					"from": "pxflib_5",
					"from_node": "node_pxflib_5",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean",
					"to_node": "node_sdf3d_boolean",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_box",
					"from_node": "node_sdf3d_box",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean",
					"to_node": "node_sdf3d_boolean",
					"to_port": 1.0
				},
				{
					"from": "pxflib_6",
					"from_node": "node_pxflib_6",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_1",
					"to_node": "node_shader_1",
					"to_port": 0.0
				},
				{
					"from": "pxflib_3",
					"from_node": "node_pxflib_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 0.0
				},
				{
					"from": "pxflib_4",
					"from_node": "node_pxflib_4",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_6",
					"to_node": "node_pxflib_6",
					"to_port": 5.0
				},
				{
					"from": "sdf3d_box_3",
					"from_node": "node_sdf3d_box_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_10",
					"to_node": "node_pxflib_10",
					"to_port": 0.0
				},
				{
					"from": "pxflib_10",
					"from_node": "node_pxflib_10",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_11",
					"to_node": "node_pxflib_11",
					"to_port": 0.0
				},
				{
					"from": "TEX3D_Simplex_Noise_Octaves",
					"from_node": "node_TEX3D_Simplex_Noise_Octaves",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 1.0
				},
				{
					"from": "pxflib_11",
					"from_node": "node_pxflib_11",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_smoothboolean_2",
					"to_node": "node_sdf3d_smoothboolean_2",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_boolean",
					"from_node": "node_sdf3d_boolean",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_smoothboolean_2",
					"to_node": "node_sdf3d_smoothboolean_2",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_smoothboolean_2",
					"from_node": "node_sdf3d_smoothboolean_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_3",
					"to_node": "node_pxflib_3",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_smoothboolean_2",
					"from_node": "node_sdf3d_smoothboolean_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_7",
					"to_node": "node_pxflib_7",
					"to_port": 0.0
				},
				{
					"from": "pxflib_7",
					"from_node": "node_pxflib_7",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Object",
					"to_node": "node_MFSDF_Object",
					"to_port": 0.0
				},
				{
					"from": "TEX3D_Simplex_Noise_Octaves_2",
					"from_node": "node_TEX3D_Simplex_Noise_Octaves_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Object",
					"to_node": "node_MFSDF_Object",
					"to_port": 1.0
				},
				{
					"from": "MFSDF_Object",
					"from_node": "node_MFSDF_Object",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_1",
					"to_node": "node_shader_1",
					"to_port": 1.0
				},
				{
					"from": "shader_1",
					"from_node": "node_shader_1",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Transform",
					"to_node": "node_MFSDF_Transform",
					"to_port": 0.0
				},
				{
					"from": "MFSDF_Transform",
					"from_node": "node_MFSDF_Transform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Render",
					"to_node": "node_MFSDF_Render",
					"to_port": 0.0
				}
			],
			"display_name": "Paint Edges Generic Example",
			"icon_data": "",
			"nodes": [
				{
					"name": "pxflib_4",
					"node_position": {
						"x": 268.051086425781,
						"y": -204.017501831055
					},
					"parameters": {
						"Bound": 0.01,
						"Correction": 0.0,
						"Distort": 0.005
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D",
								"name": "sdf",
								"shortdesc": "SDF3D Input",
								"type": "sdf3d"
							},
							{
								"default": "vec3(0)",
								"function": true,
								"label": "TEX3D",
								"name": "tex3d",
								"shortdesc": "TEX3D Input",
								"type": "tex3d"
							}
						],
						"instance": "\nfloat distort_$name(vec3 uv){\n    float sdf=$sdf(uv);\n\tif (abs(sdf)>(abs($Distort)+$Bound)){\n\t\treturn sdf;\n\t} else {\n\t\tvec3 s=$tex3d(vec4(uv,0.0));\n\t    return sdf-s.x*$Distort;\n\t}\n}\n",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nDisplace a 3DSDF based on a TEX3D in a direction",
						"name": "SDF Displace",
						"outputs": [
							{
								"sdf3d": "distort_$name($uv)/(1.0+abs($Distort*$Correction))",
								"shortdesc": "SDF3D Output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.1,
								"label": "Amount",
								"longdesc": "Displace amount",
								"max": 1.0,
								"min": 0.0,
								"name": "Distort",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10.0,
								"min": 0.0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.1,
								"label": "Bound",
								"max": 10.0,
								"min": 0.0,
								"name": "Bound",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -14.9488906860352,
						"y": -128.017501831055
					},
					"parameters": {
						"blur": 0.01,
						"bound": 1.0,
						"iterations": 3.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "",
								"longdesc": "SDF3D Input",
								"name": "in",
								"type": "sdf3d"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$in(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$in(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nBlurs a SDF3D sampling fibonacci points on a sphere surface",
						"name": "SDF Blur",
						"outputs": [
							{
								"longdesc": "SDF3D Output",
								"sdf3d": "blursdf3d_$name($uv,$blur,$bound)",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 3.0,
								"label": "Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									},
									{
										"name": "89",
										"value": "89"
									},
									{
										"name": "144",
										"value": "144"
									},
									{
										"name": "233",
										"value": "233"
									},
									{
										"name": "377",
										"value": "377"
									},
									{
										"name": "610",
										"value": "610"
									}
								]
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Blur",
								"max": 5.0,
								"min": 0.0,
								"name": "blur",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Bound",
								"max": 10.0,
								"min": 0.0,
								"name": "bound",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -816.476684570312,
						"y": 51.9303741455078
					},
					"parameters": {
						"r": 0.0,
						"sx": 0.3,
						"sy": 0.24,
						"sz": 0.25
					},
					"seed_int": 0.0,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_6",
					"node_position": {
						"x": 211.031433105469,
						"y": -78.9828338623047
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 0.0,
						"Metallic": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 0.268,
						"TranlateX": 0.0,
						"TranlateY": 0.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"name": "shader_1",
					"node_position": {
						"x": 519.509643554688,
						"y": 118.266174316406
					},
					"parameters": {
						"f": 1.497,
						"h": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float $(name_uv)_sdfa=$mfsdfa(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfb=$mfsdfb(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec4 $(name_uv)_tex=vec4(mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$f*100.0,0.0,1.0)),$(name_uv)_sdfa);",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Base MFSDF",
								"longdesc": "Main MFSDF goes here",
								"name": "mfsdfa",
								"shortdesc": "Main MFSDF",
								"type": "v4v4"
							},
							{
								"default": "0.0",
								"function": true,
								"label": "Modified MFSDF",
								"longdesc": "Modified MFSDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
								"name": "mfsdfb",
								"shortdesc": "Modified MFSDF",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao\n\nModifies an MFSDF by comparing the base SDF and a modified version of the base SDF, typically the Base SDF with Blur, using the SDF Blur node.\n\n\n",
						"name": "MFSDF Paint Edges Generic",
						"outputs": [
							{
								"type": "v4v4",
								"v4v4": "$(name_uv)_tex"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "Color Contrast",
								"max": 1.0,
								"min": 0.0,
								"name": "f",
								"shortdesc": "Increases the difference between Textures",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Color Shift",
								"max": 1.0,
								"min": -1.0,
								"name": "h",
								"shortdesc": "Shift difference between Textures",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Deform Edges Generic"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_7",
					"node_position": {
						"x": -46.7156829833984,
						"y": 251.393798828125
					},
					"parameters": {
						"blur": 0.028,
						"bound": 1.0,
						"iterations": 3.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "",
								"longdesc": "SDF3D Input",
								"name": "in",
								"type": "sdf3d"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$in(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$in(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nBlurs a SDF3D sampling fibonacci points on a sphere surface",
						"name": "SDF Blur",
						"outputs": [
							{
								"longdesc": "SDF3D Output",
								"sdf3d": "blursdf3d_$name($uv,$blur,$bound)",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 3.0,
								"label": "Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									},
									{
										"name": "89",
										"value": "89"
									},
									{
										"name": "144",
										"value": "144"
									},
									{
										"name": "233",
										"value": "233"
									},
									{
										"name": "377",
										"value": "377"
									},
									{
										"name": "610",
										"value": "610"
									}
								]
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Blur",
								"max": 5.0,
								"min": 0.0,
								"name": "blur",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Bound",
								"max": 10.0,
								"min": 0.0,
								"name": "bound",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -836.476684570312,
						"y": -148.069625854492
					},
					"parameters": {
						"r": 0.0,
						"sx": 0.3,
						"sy": 0.16,
						"sz": 0.25
					},
					"seed_int": 0.0,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_box_3",
					"node_position": {
						"x": -796.525695800781,
						"y": -511.2041015625
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.17,
						"sy": 0.29,
						"sz": 0.18
					},
					"seed_int": 0.0,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_10",
					"node_position": {
						"x": -597.525695800781,
						"y": -491.2041015625
					},
					"parameters": {
						"angle": 222.183,
						"axis": 1.0,
						"correction": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "vec2 twist_rot(vec2 v, float a) {\n\ta=a*0.01745329251;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(vec2(c, -s),vec2(s, c));\n\treturn m * v;\n}\n\nvec3 twistX(vec3 v, float a){\n\tv.yz=twist_rot(v.yz,v.x*a);\n\treturn v;\n}\n\nvec3 twistY(vec3 v, float a){\n\tv.xz=twist_rot(v.xz,v.y*a);\n\treturn v;\n}\n\nvec3 twistZ(vec3 v, float a){\n\tv.xy=twist_rot(v.xy,v.z*a);\n\treturn v;\n}\n\n",
						"inputs": [
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "SDF3D Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTwist a SDF3D on the specified axis by an angle.",
						"name": "SDF Twist",
						"outputs": [
							{
								"sdf3d": "$in(twist$axis($uv,$angle))/(1.0+$correction)",
								"shortdesc": "SDF3D Output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 0.0,
								"label": "Axis",
								"name": "axis",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "X"
									},
									{
										"name": "Y",
										"value": "Y"
									},
									{
										"name": "Z",
										"value": "Z"
									}
								]
							},
							{
								"control": "Angle1.a",
								"default": 0.0,
								"label": "Angle",
								"max": 360.0,
								"min": -360.0,
								"name": "angle",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 5.0,
								"min": 0.0,
								"name": "correction",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Twist"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -576.476684570312,
						"y": 41.9303741455078
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": 0.2,
						"TranslateZ": 0.2,
						"scale": 0.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_11",
					"node_position": {
						"x": -569.025695800781,
						"y": -386.2041015625
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": 0.266,
						"TranslateZ": -0.019,
						"scale": 0.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": -546.476684570312,
						"y": -108.069625854492
					},
					"parameters": {
						"op": 1.0
					},
					"seed_int": 0.0,
					"type": "sdf3d_boolean"
				},
				{
					"generic_size": 1.0,
					"name": "sdf3d_smoothboolean_2",
					"node_position": {
						"x": -296.476684570312,
						"y": -188.069625854492
					},
					"parameters": {
						"k1": 0.15,
						"op1": 0.0
					},
					"seed_int": 0.0,
					"type": "sdf3d_smoothboolean_v"
				},
				{
					"name": "TEX3D_Simplex_Noise_Octaves",
					"node_position": {
						"x": -156.476669311523,
						"y": -598.069641113281
					},
					"parameters": {
						"brightness": 0.0,
						"clamp": 1.0,
						"contrast": 2.0,
						"iterations": 5.0,
						"persistence": 0.5,
						"scale": 32.0,
						"scale_x": 1.0,
						"scale_y": 1.0,
						"scale_z": 1.0,
						"transx": 0.0,
						"transy": 0.0,
						"transz": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
						"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// using https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tc = fract(c * vec3(.1031, .1030, .0973));\n    c += dot(c, c.yxz+0.3333333);\n    return fract((c.xxy + c.yxx)*c.zyx)-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
						"inputs": [],
						"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
						"longdesc": "Makes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB\n\nCode - Nikat",
						"name": "TEX3D Simplex Noise Octaves",
						"outputs": [
							{
								"shortdesc": "TEX3D output",
								"tex3d": "$clamp",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 8.0,
								"label": "Scale",
								"longdesc": "Noise scale",
								"max": 32.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale X",
								"longdesc": "Noise X scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale Y",
								"longdesc": "Noise Y scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale Z",
								"longdesc": "Noise Z scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate X",
								"longdesc": "Noise X translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transx",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate Y",
								"longdesc": "Noise Y translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transy",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate Z",
								"longdesc": "Noise Z translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transz",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 12.0,
								"label": "Iterations",
								"longdesc": "Noise iterations / octaves",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Persistence",
								"longdesc": "How higher octaves affect the output",
								"max": 1.0,
								"min": 0.0,
								"name": "persistence",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Brightness",
								"longdesc": "Overall brightness",
								"max": 1.0,
								"min": 0.0,
								"name": "brightness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Contrast",
								"longdesc": "Overall Contrast",
								"max": 1.0,
								"min": 0.0,
								"name": "contrast",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "Clamp",
								"longdesc": "Makes the output restricted between 0 and 1",
								"name": "clamp",
								"type": "enum",
								"values": [
									{
										"name": "false",
										"value": "$(name_uv)_out"
									},
									{
										"name": "true",
										"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
									}
								]
							}
						],
						"shortdesc": "TEX3D Simplex Noise Octaves"
					},
					"type": "shader"
				},
				{
					"name": "TEX3D_Simplex_Noise_Octaves_2",
					"node_position": {
						"x": -256.476684570312,
						"y": 411.930358886719
					},
					"parameters": {
						"brightness": 0.0,
						"clamp": 1.0,
						"contrast": 2.0,
						"iterations": 5.0,
						"persistence": 0.5,
						"scale": 172.0,
						"scale_x": 1.0,
						"scale_y": 1.0,
						"scale_z": 1.0,
						"transx": 0.0,
						"transy": 0.0,
						"transz": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
						"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// using https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tc = fract(c * vec3(.1031, .1030, .0973));\n    c += dot(c, c.yxz+0.3333333);\n    return fract((c.xxy + c.yxx)*c.zyx)-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
						"inputs": [],
						"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
						"longdesc": "Makes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB\n\nCode - Nikat",
						"name": "TEX3D Simplex Noise Octaves",
						"outputs": [
							{
								"shortdesc": "TEX3D output",
								"tex3d": "$clamp",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 8.0,
								"label": "Scale",
								"longdesc": "Noise scale",
								"max": 32.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale X",
								"longdesc": "Noise X scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale Y",
								"longdesc": "Noise Y scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale Z",
								"longdesc": "Noise Z scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate X",
								"longdesc": "Noise X translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transx",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate Y",
								"longdesc": "Noise Y translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transy",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate Z",
								"longdesc": "Noise Z translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transz",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 12.0,
								"label": "Iterations",
								"longdesc": "Noise iterations / octaves",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Persistence",
								"longdesc": "How higher octaves affect the output",
								"max": 1.0,
								"min": 0.0,
								"name": "persistence",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Brightness",
								"longdesc": "Overall brightness",
								"max": 1.0,
								"min": 0.0,
								"name": "brightness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Contrast",
								"longdesc": "Overall Contrast",
								"max": 1.0,
								"min": 0.0,
								"name": "contrast",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "Clamp",
								"longdesc": "Makes the output restricted between 0 and 1",
								"name": "clamp",
								"type": "enum",
								"values": [
									{
										"name": "false",
										"value": "$(name_uv)_out"
									},
									{
										"name": "true",
										"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
									}
								]
							}
						],
						"shortdesc": "TEX3D Simplex Noise Octaves"
					},
					"type": "shader"
				},
				{
					"name": "MFSDF_Object",
					"node_position": {
						"x": 288.439483642578,
						"y": 296.596618652344
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						},
						"Metallic": 0.0,
						"Roughness": 0.0,
						"Specular": 0.5
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "\n",
						"inputs": [
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							}
						],
						"instance": "vec4 PBRObjectMaker_simple_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz);\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4(0.0,0.0,0.0,sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_simple_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "2:",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "3:",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "4:",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "5:",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Simple"
					},
					"type": "shader"
				},
				{
					"name": "MFSDF_Transform",
					"node_position": {
						"x": 913.523315429688,
						"y": 161.930374145508
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": 0.0,
						"TranslateZ": 0.0,
						"scale": 2.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "vec4 o_$name_uv=$in(vec4(V4V4_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale, $uv.w));\n\n",
						"global": "vec3 V4V4_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Translates, Rotates, Scale a V4->V4\nAdapted from RodZilla Rotate\n\nCode - RodZilla, PauloFalcao",
						"name": "MFSDF Transform",
						"outputs": [
							{
								"shortdesc": "V4->V4 Ouput",
								"type": "v4v4",
								"v4v4": "vec4(o_$name_uv.xyz,o_$name_uv.w*$scale)"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Transform"
					},
					"type": "shader"
				},
				{
					"generic_size": 1.0,
					"name": "MFSDF_Render",
					"node_position": {
						"x": 1273.52331542969,
						"y": 51.9303741455078
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1.0,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"Gamma": 1.4,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"Shadow": 1.0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 2.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "vec2 Simple360HDR_equirectangularMap(vec3 dir) {\n\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "vec4(0.0,0.0,0.0,999999999.0)",
								"function": true,
								"label": "MFSDF",
								"name": "mfsdf#",
								"shortdesc": "V4->V4 Multi-Field SDF #",
								"type": "v4v4"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec4 mfsdf_$name(vec4 p){ \n  vec4 a=vec4(0.0,0.0,0.0,999999999.0);\n  vec4 b;\n  #for\n  b=$mfsdf#(p);\n  a=(a.w<b.w)?a:b;\n  #end\n  return a;\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=mfsdf_$name(vec4(p+e.xyy,0.0)).w;\n  float v2=mfsdf_$name(vec4(p+e.yyx,0.0)).w;\n  float v3=mfsdf_$name(vec4(p+e.yxy,0.0)).w;\n  float v4=mfsdf_$name(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = mfsdf_$name(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = mfsdf_$name(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t    vec3 p=ro + rd*t;\n\t\tfloat h = mfsdf_$name(vec4(p,0.0)).w;\n\t\tfloat isLight=mfsdf_$name(vec4(p,13.0)).x;\n\t\tif (isLight>0.0) h=999999.0;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=mfsdf_$name(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1)\n\tfloat objMetallic=clamp(mfsdf_$name(vec4(p,2.0)).x,0.0,1.0);  // 2 - Metallic  (v,0,0,sdf)\n\tfloat objSpecular=clamp(max(mfsdf_$name(vec4(p,4.0)).x*0.2,objMetallic),0.0,1.0);  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=mfsdf_$name(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 objEmission=mfsdf_$name(vec4(p,13.0)).xyz; // 13 - Emission (r,g,b,sdf)\n\tobjColor=max(objColor,objEmission);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tif (objEmission.x>0.0){\n\t\t\tcolor=objEmission;\n\t\t} else {\n\t\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*((1.0-objMetallic)*objColor)+\n\t\t\tpow(r,pow(256.0,(1.0-objRoughness)))*objSpecular*mix(vec3(1.0),objColor,objMetallic)*(1.0-objRoughness)*16.0;\n\t\t}\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tvec3 objEmissionRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=mfsdf_$name(vec4(p,1.0)).xyz;\n\t\t\tobjEmissionRef=mfsdf_$name(vec4(p,13.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tif (objEmissionRef.x>0.0){\n\t\t\t  objColorRef=objEmissionRef;\n\t\t\t} else {\n\t\t\t  objColorRef=max(l,$AmbLight)*objColorRef;\n\t\t\t}\n\t\t} else {\n\t\t\tobjColorRef=$hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular*mix(vec3(1.0),objColor,objMetallic));\n\t} else {\n\t\tcolor=$hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
						"longdesc": "Ray marching node for n objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\nCode - PauloFalcao, IQ\n",
						"name": "MFSDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10.0,
								"min": -10.0,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10.0,
								"min": -10.0,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10.0,
								"min": -10.0,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1.0,
								"min": 0.0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.2,
								"label": "Gamma",
								"longdesc": "Gamma Correction",
								"max": 3.0,
								"min": 0.0,
								"name": "Gamma",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/MFSDF/Op/Paint Edges Generic Example"
		},
		{
			"display_name": "Polar Repeat",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAAERNJREFUaIF9Wl2sZlV5fp53rTPK4IxoRTE1QMSx9Q8bxShC+Bn+lEgQrNaovbBpavW2V3rRiyb1qndNWps0TpMWqtKmBRGQyoAKtNZizGC0GfkbfqIUKcIMzJzz7fU+vXjftfb+zhm652TOPt+391rvz/M+78/e/LM//F2SZlbNJndJrbnLp+YkCK5aI+jyaWoukChmJAFMrW2tpuYOQIK7gyhmAAC4O0kBxlgJG7Vs1FJoDhWzYiZpo5aNWiWRlOQSBEBmVop5862pTa3FBd6/bs03VysXauzn7sc2t6bmqzatphaSSTBjXJ1LgySMBAHBjKupAZBkZhKaNwDFCgkAxUxQoblUimEluWotG7W8YqOSJCho6jaKu9xFok3T1gogjGakyOYuyGhhRDMTVJ994Zik5r61mpoLSKGL2dZqIksxKxtp1DBSCG1GQbUUIzc2KgEzxp9mBqi5JBEAKSn8FicbGyV8CILi5mo1NQ9PFmM4xMwgSZh8Fe4iEIab3AHUYiTrNDVBLsRHZiTY3KfmsVAgIRSo1XbVcsordsVSNCOwUYsZjQbIaGaUAGK1mprL5QNdgYTVNG2uErS1GsFaSi2FhJTYA2mkSwBKKbUYBKslPmRjaOuu+tLmlqSwbv9fBN3dCYIkqpVajEYIAiTVUsIJJI2spRQzlwJbJCSVYq5GkQbA8gujJXJAcpq81uLuU3NBBM24UUss20gpV2vNp+YupQ7Aro1qxlqLhYNKsVIsQBm4D6jUWoxszUkGSMJ3cUstBpCASwZEqBAECKAUM5MxEYi4FJAwtSagMLeuVZKm5pJObK3ClEZ24IHGAjMJgIEkXIKjnn7aXpe7yzp7TK25JzmYMfFHACxmtRiYnDO1dmJqAowopcTV7qEDLDYlpRTO3VvwiABAUJOaOycMCorbI1RQzKeWMJCA4CcIIlmMLtUXXjoedJZGDVKSIizoRAm9JGEV/Kg8tlYtoq0YQUgK4qpWGGSB+FBGgnTJ3UNESE1SF9eCLsw2Sil9KYKlhl/hEsjS14wACAiVjVoGeYcljAzAhUOaJ40aGbiX4J7mmFprnuFDUg1QM9HJsJq74vaMUXlAKGggmcpoZhu11FIIRCJq7i63hGsa0pjRWooZWQPfQTVEGikuMdLdV80FRCpqcholMWNeRgMF0j3IIz6JTAESzRFrRgYiMg/u2qgt7kFK1Fpz9xPaCixECBEMjoNARhayUqwYAUqqm6sVgCDdFtEARFC25KEEIQEzo4JOCNGYXjPSSrHMNZgmd9MgN5K1FgguhRCpXjGYTUMNo5kN4IGYmseflveJIkx0l1LJurk1Be1kqETeRbcxUWjWHS0gjZlhAQta7IliRpozsmYpDHzHfpE0JTR3AmHspPxwFBmnUYMEB8BBsJOeXAj7E6hZeQhx1xCuiwSXvDX286Dq7hm4S8ws63IIPRmiMEsmdw8uH6mmGGuZuTXIJ5gmEi6EoIGwSKRhWlqdg7jJuppamLCYIUzRdRiXNvcI5EgFdI4UViyDycyKbXQREQANe7vUphbXMMKplCg9AksGsXQalULWcOhIBeHqdGP3dmteg4KShl2B764DWxI3SFazXo/QjGZWmCe2OCkW1UQYlSDcc+UItiH3IPdiWSM0d/psvgHOuNIhuZM0wgVIIGroMdQio6pJFErsNJOSpSEJKYlTytiM/awnvhGvvZLtW3Sybu6AJEpq4V5SxCiqRQ012GPU5W3ByHVkrlheQpMneff9wro9KLLQLyU/jlooC8FeIUswAHk+kmjme/VU7D7sxtbd7QozJ5WjKyABnP0TWKgZACNyg0zlpST4PL2WpgUyk2cNV6xTe6TGyPQg6QrmlIQ5rth6jgaIGnUbouQ219zRdBTlxYPoUhtIruZeay2xeJRH0XNVK4MaaRZdRTF2GyOjGYkkzXgVQRpHogmcZNoTJDmcg+ooAA0wWkRLqFqMZtZZGyRL+ryDVoKhyGpPaqmpd3PFSuzxnvwgFRvZBkuKKGYCDKBRwt7bfyR7FY3PX/6WwM9YSoC798BJrZpaWDkpJSwDcAAzZIstmDQqoQbGrFcYhRaBMjLBInN22/cVQ+5xL4RIhafe8h+yAgOEV3/n4aNXvCX8LnTb9e7WyKhNZljH+tEV9dSB6GM7foyMNpxk3VVrhkM2WMELJRVbEFmeLFqfcKjNYYZubI3MTWDvdx6WdOyqfT7qWCHbJkmZwmbCQZYtJAyDOpRCCugZydy9lkQQMfY3okdFrGfGUmyEUfRlxkVgYVa13nQPzBaoyePUOw4fvXJfrGsEe5ejPo/ooGK2q5zNMqw2VzGILKkaOSgAM5sxo3f54UgocglE79ezqIgI2fjGQVjx5lbt3BcePrT3HDCsIgLF6D6WH4AJYgWAT3/9B2P7r33q/HEuYAmzEZ/FGG07zGBWelGQ6TaW/cJtPwXw8LPPffszF3jU9uvBHa7PKpqQ3Eo99/hzAM594eFXSj98zb5wWq01c28XJ8z8iRvux47jkzf++02f+eAQe40GMrlEEBs7ADpsMmVqUCaAc1732i/c8bNY668//LbR2inLhQyuuODczRfGtifAdz330IOnnYPeSqp3hg9+7bYv87UL0t955CDBPegYM0SYnFE3ShlgK3O5l3H5R7f+ZOeqn7/9Z+P8L6/6LTlIGCEXpN9px3fe8q5fPwTg0K3c+sjbumzoTImX0+Hj/3DfP/3+BQwbzRXaXPUAsI1aY+K3q9aNWoPlc04xVw/b7JLdwyHxka98PYA0TW01tXe3E9uvXByra94e6XwQwpf82Z2XLY/R4yPKHPfm2S5n6TUujfwSTXdzn1qb2iLiyM5KeQbgr3790PHT9vz0G7evpmlzNW2uVi+PB/7w09eEqFGDHPrHb/XhC/8fHT5xw/1RkEvoWJ1nM8hxQTCFq7nHT0Tq57710y76sPvL2im0vPu6y6UFJPrJvR+/arWaVlNbtRZTgmGbL+lXJ9chW4deOGBmCxtW7Flo7nyXKWmIfFLRH28p3dnXXta675r7Xdfuv+va/Viocfd1l02traa2tZq2VtPmajqxtXrHxz+0U97cKUQ77bVf9Ge+6M902sHocodxXIqWktb9gN5eYvSWOw1OAvjz5x+Kv1rz4VPvlfxtV18E4Orbvve30Ju2pjBazukIghf+288/sOdsCAeOPnazP3NtOT2W/u7WL++ICcr/PgPgnZ+8eqbC/nsQOYHaa+B+WRZykPT55x7+ymvOWdPiZBjamiYCb7rnsTfUCugHH/zNLKmFf7nig6cbp9Yos6y33RLFWTV/ds9ZAg4DX33+UQAottynuRhz1FmJHgwAyJqDqsh0PeTj/30fu/IvXIf/+U4Af3PG2zmthtD3Wo2T11x2/nn3PgEAtQZopuZj+6DKqHUcHLnj8u8e6ZfM1PgHe8+O068ePQLgzR+9HMDWasUcuETGEoAgVjNS4pf/+Pdym1E2L+YmGEW85O5Hbjl4sXDN6W/9k2d/fuXuM19hJQ25KEBIfP+818+lq+WUcRSSH7r3iWH+8QuLX6tjR753zaXL/jMWsUVp2eOYZf9736mOmW77bpvFhzH52LPv7F/tO+vsH//oc2e/5/CJrSFAVyDD/9EzTtEcS+iMBwBX3//U0HWdcvOv6djjAM46/Nij+87KTmu2ZYTZXBZJsiD+kLJ5DIfd5c3VvE3BqnmTrr7vyU/cek+TfvzIA7P0Ay89lC9+4Fd9hpvLtuZTa6vW0O0+W36xSD362JD40lu/u9SMnXbCpN7p3mLmMXq5pNSAjffpMSTp+psPnvLs4QHaD79yl9ZdwG7m3U8eGsu6qzUP+r/uP5/OKgwnOV53/PjxnCal1G++5SAW/eBg6uaamk+tTVOzllkr+/RMalj4Cbj+5oMfu+XuOQsDAA4//d+5zyBmAdDuJw8B2H/rPeg2Cx9eefPBtUV3oP8X0/+sKUSclc9Ds7dOc7hC9GnyPjxlRvDQNWP6ZHZaHu9tbQnRJahOzQdQc1347Wv3/93Rx375xKEsS7Um/erokbWlk+Z58TfvGSGahUJrMXmPH1uYAQtP9foJcummj1wyaqFlKnj+xcdT6F5e737qwfHtW28+mFLkfXzVJe+7/bS9B44duf3YTKMAzm3TTuvETnddfZG73CMmvXlMtWZP2ujaky69Iz9uaz5NPsUk+WROeP0ghXXpb3r1nsPX7g/ekEYCwJ5L3gfgaeDAsSMHjh0J5R946am0+vgBBN35oQvn2mxbZdCb62z2NcJ1tkw+roqIuOGqCxeOnX/2vvgY1sH2k1ftvuOjl+259P223ukHq7p06sXnDRo88OKRAy8eGVvOPwCAmNUlGWi2fCwcsM/RYnNRFAXNDUbUehLdPaZtWPPDMgVo91M/eRr48XWXI+lImiuqkVny71de+J4T9/5oLPRN+TVmyyUJ3HrZ+cguLGcLfbfFw1eg7H/vO5K41qhnPABAz0E6dM6Z737kiYWt09+/sXp+85kn77z+iqd/+5z1b3sqX1JPt2M5843lzDe2J34BYZPUNJ0ROhAAvrn/A91pWE4oRsJEd2mNAVPPX2vxMaCLkWP7MHBctAncuP/9QDzsn3u9UZ+qo39WZOQxcNcF7yG5+f0HHqz1De5nmCW7zogPmuQMyLnYl0D+6Wev31ECzdZaTqJi0U/deV98e2A14coL+tO7uWwY7p5vn0NumI8zn/Wq6aXv/dfHWttd7F8vef+AzRgcjkdZ63Gl2qXXXLpw/seFNogn5uDfX3G+JHNFXzV4eqi9YPiZOpbGIeeHF+PYfdF5d6SFlbmpF9JQPN9D8M2ysanLHTr1c9ShwIyfuOTGqy7ob+3MJRq7R7cdizji4qHI/AW337W0cc7PHABR4mnHsEP3Wx3yI0dZueHckXVPz1QyKvu4S+kucU3tzkYLQljD8ExKC1ANWy09KHeAPgKZ8xASdT0sZuFzz7WycVaJRoPlq0lz0UxgnjrGQyJwHfoYsoHsQY9tU801p8SyjiF3aJtmq2bsYTgMhREmkRlGYzDnB8Q7I9bJNx6jzqifg3roPC8fey0sfbJDC0d001ASQ9B4riLWeFHJ6ZZRMCA0R+cyk4+j69oRtSbN2uVLSun3DulPtnD+WoAR68vlNyRULYfp9J7GewqdORTAGmPEkCmW8dxTBHv7u5RFHdzjlbH0NLlM2NvNv/TjQgWGEzBvNIKYnemWKifFLB4zjNJz+2U9ZrLiMMA7Bhe2S7gvojow2hmmt+bATsXWZKDy2VztaFk6j4AMECwRtzTM0rGAce3BJ+NNB8AXOoylF8G6hFNHYRL46EZ2sPLiGDpUbOteQoQo95S5ZGHz+CRzSp/gjAoXfakUz9DZZxD89vSVFkty7s33mvCxcW6rbffXbQstf8/PrvozQwEOxaP7qE/HRr1AjKCIa6B5oLYEzgLcSwcv0L6mwTIrdD2iJmMosBgrzgZNPuIoCfMwUAw3Uws8DScaoJzIznlqyJ+CjNp9+G2uvYdF1uRZOkSc82llRu9cIQ1NtLwp8hOjImHnp2wgInQTiyF9VymSGZc5jOga0BdlXjhb6wbTIOo1HQYgULdBisMkcwehfINlVAOCCKUjGBZddBKphrv6O5xLM8Yia14QFolyWwpEp5ssE2bMxnd1Xrubdnvp2Ml33YToFB830Yej+v/xCu94EWaWYVnGLfaapV9s0VNWVlzbMIF4G2SNHUaxOIsP9B5lzVt9mn/SimBcOydgbRN1efGOVWbpAWyPw5kywcoeBDOQM632XNt1yG84wmvE4csePdt2Tl5v9zrlDmugp76Rljr+tpmo30Li/wB5QLNVndiBfQAAAABJRU5ErkJggg==",
			"name": "MFSDF_Polar_Repeat",
			"parameters": {
				"Axis": 1.0,
				"Distance": 1.0,
				"Repetitions": 5.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "//Adapted from MaterialMaker\n\nvec3 circle_repeat_transform_X(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.y, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Y(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.z*s;\n\trv.y = p.y;\n\trv.z = -p.x*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Z(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.y);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c-distance;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Repeats its input shape around a axis\n\nCode - Paulo Falcao, RodZilla",
				"name": "MFSDF Polar Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(circle_repeat_transform_$Axis($uv.xyz, $Repetitions, $Distance),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 4.0,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the circle",
						"max": 32.0,
						"min": 1.0,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Distance",
						"max": 5.0,
						"min": 0.0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Polar Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Polar Repeat",
			"type": "shader"
		},
		{
			"display_name": "Selector2D XZ",
			"generic_size": 2.0,
			"icon_data": "",
			"name": "MFSDF_Selector2D_XZ",
			"parameters": {

			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Selection Map",
						"name": "map",
						"shortdesc": "2D texture for selecting SDFs",
						"type": "f"
					},
					{
						"default": "vec4(0.0,0.0,0.0,1e10)",
						"function": true,
						"label": "MFSDF#",
						"name": "mfsdf#",
						"shortdesc": "MFSDF #",
						"type": "v4v4"
					}
				],
				"instance": "\nvec4 mfsdfselector_$name(vec4 p) {\n\tvec2 tile_xy = fract(p.xz+0.5)-0.5;\n\tvec2 tile_pos = floor(p.xz+0.5)-0.5;\n\n\tfloat sel = clamp($map(tile_pos),0.0,1.0);\n\n\tint index = int(floor(sel * float(#count)+1.0));\n\n\t#for\n\t\tif (index == #) {\n\t\t\t\treturn $mfsdf#(vec4(tile_xy.x,p.y,tile_xy.y,p.w));\n\t}\n\t#end\n\n\treturn vec4(0.0,0.0,0.0,1e10);\n}\n\n\nvec3 mfsdf2d_diff_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\t\n\t#for\n\t\tif (mfsdfselector_$name(vec4(0.5,xy.y,xy.x,0.0)).w<0.0) col+=vec3(1.0);\n\t\tif (mfsdfselector_$name(vec4(-0.5,xy.y,xy.x,0.0)).w<0.0) col+=vec3(1.0);\n\t\tif (mfsdfselector_$name(vec4(xy.x,xy.y,0.5,0.0)).w<0.0) col+=vec3(1.0);\n\t\tif (mfsdfselector_$name(vec4(xy.x,xy.y,-0.5,0.0)).w<0.0) col+=vec3(1.0);\n\t\tt=t+4.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (outc.x<1.0) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n\nvec3 mfsdf2d_show_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\t\n\t#for\n\t\tif (mfsdfselector_$name(vec4(xy.x,0.0,xy.y,0.0)).w<0.0) col+=vec3(1.0);\n\t\tt=t+1.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (xy.x>0.49&&xy.x<0.51||xy.x<-0.49&&xy.x>-0.51||\n\t    xy.y>0.49&&xy.y<0.51||xy.y<-0.49&&xy.y>-0.51) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}",
				"longdesc": "Selects one of multiple MFSDF inputs based on a selection map value for each tile.\nThe map(0.0-1.0) determines which MFSDF is used per tile.\n\nCode - PauloFalcao",
				"name": "MFSDF Selector2D XZ",
				"outputs": [
					{
						"shortdesc": "MFSDF Output",
						"type": "v4v4",
						"v4v4": "mfsdfselector_$name($uv)"
					},
					{
						"longdesc": "Checks the differences between the 4 connecting faces of the SDFs.",
						"rgb": "mfsdf2d_diff_$name($uv)",
						"shortdesc": "Debug tile face",
						"type": "rgb"
					},
					{
						"longdesc": "Show a 2d slice of the SDFs.",
						"rgb": "mfsdf2d_show_$name($uv)",
						"shortdesc": "Debug tile",
						"type": "rgb"
					}
				],
				"parameters": [],
				"shortdesc": "MFSDF  Selector2D XZ"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Selector2D XZ",
			"type": "shader"
		},
		{
			"display_name": "Selector2D XY",
			"generic_size": 2.0,
			"icon_data": "",
			"name": "MFSDF_Selector2D_XY",
			"parameters": {

			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Selection Map",
						"name": "map",
						"shortdesc": "2D texture for selecting SDFs",
						"type": "f"
					},
					{
						"default": "vec4(0.0,0.0,0.0,1e10)",
						"function": true,
						"label": "MFSDF#",
						"name": "mfsdf#",
						"shortdesc": "MFSDF #",
						"type": "v4v4"
					}
				],
				"instance": "\nvec4 mfsdfselector_$name(vec4 p) {\n\n\tvec2 tile_xy = fract(p.xy+0.5)-0.5;\n\tvec2 tile_pos = floor(p.xy+0.5)-0.5;\n\n\tfloat sel = clamp($map(tile_pos),0.0,1.0);\n\n\tint index = int(floor(sel * float(#count)+1.0));\n\n\t#for\n\t\tif (index == #) {\n\t\t\t\treturn $mfsdf#(vec4(tile_xy.x,tile_xy.y,p.z,p.w));\n\t}\n\t#end\n\n\treturn vec4(0.0,0.0,0.0,1e10);\n}\n\n\nvec3 mfsdf2d_diff_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (mfsdfselector_$name(vec4(0.5,xy.y,xy.x,0.0)).w<0.0) col+=vec3(1.0);\n\t\tif (mfsdfselector_$name(vec4(-0.5,xy.y,xy.x,0.0)).w<0.0) col+=vec3(1.0);\n\t\tif (mfsdfselector_$name(vec4(xy.x,0.5,xy.y,0.0)).w<0.0) col+=vec3(1.0);\n\t\tif (mfsdfselector_$name(vec4(xy.x,-0.5,xy.y,0.0)).w<0.0) col+=vec3(1.0);\n\t\tt=t+4.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (outc.x<1.0) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n\nvec3 mfsdf2d_show_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\t\n\t#for\n\t\tif (mfsdfselector_$name(vec4(xy.x,xy.y,0.0,0.0)).w<0.0) col+=vec3(1.0);\n\t\tt=t+1.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (xy.x>0.49&&xy.x<0.51||xy.x<-0.49&&xy.x>-0.51||\n\t    xy.y>0.49&&xy.y<0.51||xy.y<-0.49&&xy.y>-0.51) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n",
				"longdesc": "Selects one of multiple MFSDF inputs based on a selection map value for each tile.\nThe map(0.0-1.0) determines which MFSDF is used per tile.\n\nCode - PauloFalcao",
				"name": "MFSDF Selector2D XY",
				"outputs": [
					{
						"shortdesc": "MFSDF Output",
						"type": "v4v4",
						"v4v4": "mfsdfselector_$name($uv)"
					},
					{
						"longdesc": "Checks the differences between the 4 connecting faces of the SDFs.",
						"rgb": "mfsdf2d_diff_$name($uv)",
						"shortdesc": "Debug tile face",
						"type": "rgb"
					},
					{
						"longdesc": "Show a 2d slice of the SDFs.",
						"rgb": "mfsdf2d_show_$name($uv)",
						"shortdesc": "Debug tile",
						"type": "rgb"
					}
				],
				"parameters": [],
				"shortdesc": "MFSDF Selector XY"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Selector2D XY",
			"type": "shader"
		},
		{
			"display_name": "Selector2D YZ",
			"generic_size": 2.0,
			"icon_data": "",
			"name": "MFSDF_Selector2D_YZ",
			"parameters": {

			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Selection Map",
						"name": "map",
						"shortdesc": "2D texture for selecting SDFs",
						"type": "f"
					},
					{
						"default": "vec4(0.0,0.0,0.0,1e10)",
						"function": true,
						"label": "MFSDF#",
						"name": "mfsdf#",
						"shortdesc": "MFSDF #",
						"type": "v4v4"
					}
				],
				"instance": "\nvec4 mfsdfselector_$name(vec4 p) {\n\n\tvec2 tile_xy = fract(p.yz+0.5)-0.5;\n\tvec2 tile_pos = floor(p.yz+0.5)-0.5;\n\n\tfloat sel = clamp($map(tile_pos),0.0,1.0);\n\n\tint index = int(floor(sel * float(#count)+1.0));\n\n\t#for\n\t\tif (index == #) {\n\t\t\t\treturn $mfsdf#(vec4(p.x,tile_xy.x,tile_xy.y,p.w));\n\t}\n\t#end\n\n\treturn vec4(0.0,0.0,0.0,1e10);\n}\n\nvec3 mfsdf2d_diff_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (mfsdfselector_$name(vec4(xy.y,0.5,xy.x,0.0)).w<0.0) col+=vec3(1.0);\n\t\tif (mfsdfselector_$name(vec4(xy.y,-0.5,xy.x,0.0)).w<0.0) col+=vec3(1.0);\n\t\tif (mfsdfselector_$name(vec4(xy.x,xy.y,0.5,0.0)).w<0.0) col+=vec3(1.0);\n\t\tif (mfsdfselector_$name(vec4(xy.x,xy.y,-0.5,0.0)).w<0.0) col+=vec3(1.0);\n\t\tt=t+4.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (outc.x<1.0) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n\nvec3 mfsdf2d_show_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (mfsdfselector_$name(vec4(0.0,xy.x,xy.y,0.0)).w<0.0) col+=vec3(1.0);\n\t\tt=t+1.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (xy.x>0.49&&xy.x<0.51||xy.x<-0.49&&xy.x>-0.51||\n\t    xy.y>0.49&&xy.y<0.51||xy.y<-0.49&&xy.y>-0.51) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n",
				"longdesc": "Selects one of multiple MFSDF inputs based on a selection map value for each tile.\nThe map(0.0-1.0) determines which MFSDF is used per tile.\n\nCode - Paulo Falcao",
				"name": "MFSDF Selector2D YZ",
				"outputs": [
					{
						"shortdesc": "MFSDF Output",
						"type": "v4v4",
						"v4v4": "mfsdfselector_$name($uv)"
					},
					{
						"longdesc": "Checks the differences between the 4 connecting faces of the SDFs.",
						"rgb": "mfsdf2d_diff_$name($uv)",
						"shortdesc": "Debug tile face",
						"type": "rgb"
					},
					{
						"longdesc": "Show a 2d slice of the SDFs.",
						"rgb": "mfsdf2d_show_$name($uv)",
						"shortdesc": "Debug tile",
						"type": "rgb"
					}
				],
				"parameters": [],
				"shortdesc": "MFSDF Selector YZ"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Selector2D YZ",
			"type": "shader"
		},
		{
			"display_name": "Code",
			"generic_size": 1.0,
			"icon_data": "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",
			"name": "SDF3D_Code",
			"parameters": {
				"code": "$in1($uv)"
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"label": "",
						"name": "in#",
						"shortdesc": "SDF3D #",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Executes the code in the parameter\nExamples:\n$in1($uv)\nlength($uv)-0.4\n\nCode - PauloFalcao",
				"name": "SDF3D Code",
				"outputs": [
					{
						"sdf3d": "$code",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.5,
						"label": "",
						"longdesc": "Examples:\n$in1($uv)\nlength($uv)-0.4",
						"max": 1.0,
						"min": 0.0,
						"name": "code",
						"step": 0.1,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Op/Code",
			"type": "shader"
		},
		{
			"display_name": "Render",
			"generic_size": 1.0,
			"icon_data": "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",
			"name": "MFSDF_Render",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1.0,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2.0,
				"CamZ": 3.0,
				"CamZoom": 1.0,
				"Gamma": 1.4,
				"LookAtX": 0.0,
				"LookAtY": 0.0,
				"LookAtZ": 0.0,
				"Shadow": 1.0,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 2.5
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "vec2 Simple360HDR_equirectangularMap(vec3 dir) {\n\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,999999999.0)",
						"function": true,
						"label": "MFSDF",
						"name": "mfsdf#",
						"shortdesc": "V4->V4 Multi-Field SDF #",
						"type": "v4v4"
					},
					{
						"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "vec4 mfsdf_$name(vec4 p){ \n  vec4 a=vec4(0.0,0.0,0.0,999999999.0);\n  vec4 b;\n  #for\n  b=$mfsdf#(p);\n  a=(a.w<b.w)?a:b;\n  #end\n  return a;\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=mfsdf_$name(vec4(p+e.xyy,0.0)).w;\n  float v2=mfsdf_$name(vec4(p+e.yyx,0.0)).w;\n  float v3=mfsdf_$name(vec4(p+e.yxy,0.0)).w;\n  float v4=mfsdf_$name(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = mfsdf_$name(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = mfsdf_$name(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t    vec3 p=ro + rd*t;\n\t\tfloat h = mfsdf_$name(vec4(p,0.0)).w;\n\t\tfloat isLight=mfsdf_$name(vec4(p,13.0)).x;\n\t\tif (isLight>0.0) h=999999.0;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=mfsdf_$name(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1)\n\tfloat objMetallic=clamp(mfsdf_$name(vec4(p,2.0)).x,0.0,1.0);  // 2 - Metallic  (v,0,0,sdf)\n\tfloat objSpecular=clamp(max(mfsdf_$name(vec4(p,4.0)).x*0.2,objMetallic),0.0,1.0);  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=mfsdf_$name(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 objEmission=mfsdf_$name(vec4(p,13.0)).xyz; // 13 - Emission (r,g,b,sdf)\n\tobjColor=max(objColor,objEmission);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tif (objEmission.x>0.0){\n\t\t\tcolor=objEmission;\n\t\t} else {\n\t\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*((1.0-objMetallic)*objColor)+\n\t\t\tpow(r,pow(256.0,(1.0-objRoughness)))*objSpecular*mix(vec3(1.0),objColor,objMetallic)*(1.0-objRoughness)*16.0;\n\t\t}\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tvec3 objEmissionRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=mfsdf_$name(vec4(p,1.0)).xyz;\n\t\t\tobjEmissionRef=mfsdf_$name(vec4(p,13.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tif (objEmissionRef.x>0.0){\n\t\t\t  objColorRef=objEmissionRef;\n\t\t\t} else {\n\t\t\t  objColorRef=max(l,$AmbLight)*objColorRef;\n\t\t\t}\n\t\t} else {\n\t\t\tobjColorRef=$hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular*mix(vec3(1.0),objColor,objMetallic));\n\t} else {\n\t\tcolor=$hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
				"longdesc": "Ray marching node for n objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\nCode - PauloFalcao, IQ\n",
				"name": "MFSDF Render",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5.0,
						"min": -5.0,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5.0,
						"min": -5.0,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2.0,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5.0,
						"min": -5.0,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5.0,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5.0,
						"min": 0.0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5.0,
						"min": 0.0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10.0,
						"min": -10.0,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10.0,
						"min": -10.0,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10.0,
						"min": -10.0,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1.0,
						"min": 0.0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1.0,
						"min": 0.0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1.0,
						"min": 0.0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2.2,
						"label": "Gamma",
						"longdesc": "Gamma Correction",
						"max": 3.0,
						"min": 0.0,
						"name": "Gamma",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Render/Render",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "MFSDF_Object_And_Transform",
					"from_node": "node_MFSDF_Object_And_Transform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Render",
					"to_node": "node_MFSDF_Render",
					"to_port": 1.0
				},
				{
					"from": "graph_2",
					"from_node": "node_graph_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Render",
					"to_node": "node_MFSDF_Render",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_sphere",
					"from_node": "node_sdf3d_sphere",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Object_And_Transform",
					"to_node": "node_MFSDF_Object_And_Transform",
					"to_port": 5.0
				}
			],
			"display_name": "Render Template",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAAEE9JREFUaIGNWmuMZMdV/k5V9Tx3vX4s7Rd+Rk4Uo6ztdYKfCSDFDvFGkSEhkdmZ8Uz3dI9XwQIEKFEEEpLFj8A/vPYy3dM9u9Oz64BC8gskfsQoQrIVBI4dwCFKsDfYsde99sbs7M6j7606/Dj3Vtd99HhLY3fv7Xp833nVqVOXvvGVw0SklNJKWeeYObbOsbPWASCiOLYgMHMUW2YGoLVSRAxY6wZRbJ0DwMzOJb8CAGCdIyIwiEBERFQxuqK1UoqZtVZKKTAboyvGMDMRwHAsi7BWSmtlnYsiG1nLzETknGMGCM667ShiZqOUksW2dgaxtXFsI2vj2CqlrLXWMYNja5khExOglAIBDKUoiq2gF1hCRitFRGDWWjOzVsqx01pxxM6xMWrMmLGKUUQAMTiOLRExMwgkzEHWxYgAgiJSREzknAOgFBGRVkopYsCcO3+BmWPnokSWpBQBIOcGUay10kqNVyoiVFkmimPpxuC9UxNaKaO1Y3bMmkj0yWAn06WjhJVjZ5SuVDQRARCp78SxtdKdtVLGGLBTipjBjiNmrZQWWKluAWitFZGJYstI1Ga0VkREFDtnra0YzQznmIhlpKh7cnxMVEGKCGSSYQpgRUoWJsIgip1zjpmZrQOA2Foxxe2IBJPRioiMVkZrIQPAsgNIkbLsQGSU0lqBoY0mIsdMNtGGc85s7ewwIxEGkAgG5Bw7sJivUVprrRTJAmLBAAldRWRSyxYMREkfZhZLE2iKCIoqRADJP2PrjNHOcWwtwAQiRRWTyDGBS2Bma12cegIzAzRWMVqRMVrcSRmtRMsMBmCtE/s2wts6IlKKTMKFpifHAXCiGzCzA5hFmSQCEV6KFAAGrvrVR1MrwDsv/j2ACiVLVww75tg6MO8MIhGiEoUKW0UG2jF7Q3Ls4JTZf/llomitlMjXWudcEhwUkdKklSYCAVpprRN5xtbFsXXMABORF4RlZscgXHbw80JtZfWkqBevnqzPHwbQOb7umdTnZ8688C2Rq4QysTqtFEjZ2BKBkIgVgGPIiooUM5uNzS0t2k9cWwFwzM46iHlAAxbJBJYgkY4dcxTFjqEVaaV++VNfYhZklMD94Xp9fqZz/BRR+gQgoHPipITXFBNfc/8XOsdPekqHbpsQtyTAGC3xjx1TGmBEy+yYFNHX53+7YrRWKowz1jlrJeQm7sEMCTISxZj5H38izsMAFudnpKsQAGFxfsYDEnkvzs8gcTCA0Dl+sj5/2JNA8G3IlfHWC99SRElcFv8ikjCplSJFRhFJCJPdhtk5J/GYiOAcW+sY/N3TNsTEQO1+rKyuLy7MJCRSTwB4cX6WeQhHJmyv9oQDA53VdQDtbg+gxfnDnDUqZiwuzEgfz4YIj96+hwiKlNaklSKQY6Y/mfk8AEWKwc4lOxGA2z49A/DK6nqKJBH34sLMymqPc9IaEhsKslGbbXd7IguRaGNhVnSwsrouik2EQgBj5XiylgjFK6tzfH0oO+/CoIsv/wMAszOIGfzC20bkyIzFhcMB4ASYNxIw1+dnWp21Rm02N2dISky1UZsBqN3tNZPOSaRNsgWxbgKY0gUBJIqV5VdW1wC0umsyZWNhpnPiZLgsPdv5pozx1ixQ5AmnUm0szALc6vaQ5hQSspq1uVZnLUQvEzfrc61uL1iHCBDOK942CAQSeWeeA42FGT/hymrPo/d68R908MFDyfKc6E4AptPx4sKsfyjNi59zlhTuiAlstDo9EKUaSFp7dV06yTyCqt0dEgPQWJhN0YeA0ajNBFSJDj74OcFfn0/Qt4c/szfKdrcnIk8kD4C5WZtd7vZy9AAs1ecAiAb8TM36nGQ/oWaa9dlQon5psb0QeDsNGLlGz6w8F8pPcKys9gqCZ2a0u71GKMt0SKvbE4jDeYHlkACwJAOJvEF7gM3aXNt3Thx+qMZSJ2sszLRWewDorgceYR9b0k4MlikWF2YAbnV6wXBu1ua8x4VibtZmQ08YRcwPbNZmizYdWmDYPMNG1hrpmZVTYhft1V5IMdUXg9FK7CcRuQeUos/sQc36bKvTGz4oi7hFjyeZLcsnxBqoKONR9Ez7lEzXXu0hcR3OQko45Kj71uqspZQyg5a7vRxhacudtTRig8RhUtxen14LMlYC3TBVDreDO+7/bFE4In5POhS/p7EskyKvloRVt+f9R6w/VISMFV/PxKxCy9mVQMrY5B33ZQg0akMNtLNeyEAzDc+tzlrqMKM25WxjNOuzQ86JFyewllJAuQ7NkGEakUUJzVoyhI62TrZX1xtlEQpZsYWmJcIVzeZkn8OR4kuCQy40hQT8qJzUm7XZvGkNs9tAAyEHicc+5gfWn5hFK4DYLFjILtwupQncZpnLZXZ38X7vA7LzidmEXiyfEhNa3V5mL8OQZrM+mxEw8+Pvvjmu9zpg027s+erXQ2K+lTJsdSQclXNAGoKTVOJo+9TwF+ai6eeCT6u7FhDw6JMotNzpPfTK9z5xy92XxXFlMFBy7iF1gbGxZ+rli29879qP+qlCnx1u6oUW0hAzC20sTwAFY8i3lGRpVDV/+Y0b9fQ+a8ejgdoZwFoGYqJtUpvj4+e0Pm0Gf3vltSkDyuEL9VPceUqdhI62TyUukWRBQxKN2oyfaZjJpVYULiy/uj/94w/vu/EqYHKwoy9uKuvknBsBkdZbxmzume6T+tGFN69+6q92F9JyJ0mxSm0s1EOajXq+hS1UtrZ2dz23vUlL9cD//WT9oRvuuEap6a2tiTgycaxiSwATxUBEtG3M5tjY+anJN2L7r4MzL153O8qtnNNNUFK9kW25s7ZUn6NnV57DMA3k4D+fTSSbdH5zTr/JyesPTr9y09T1VzqetvH4YDCmSJNkRBQ5FwHbpDaNOa/NO0Q/3fz5N28+4OdrBptPK01vwwWXPE8i5LaLZ1ee8xmoPFpcmMmZDZIOuxnY9X/x51frfVcAU9aOOztutAZIERNFsd2J7TZjU+v/A5117m21eezaW4dL+Mx8Vydcqs0upwFqSCBNp3klTLgLc6Qki0k5g/GzJ2ufuqp69dR1lxMmnZvUaoxgtK5MjA+2tgdxvD2ItiK7Seo8cH5q4s2Lb333vf5/3vnr7K0oMN7cPiiLhObUCmjQXQ8cykEupeFtjNMdw6MHsPHU1+4Afmny+sucmwYmxyrjxhitxl96Pr7vNy+8f35re2crtltEm+Nj54he+9+XXwQ+8dedAGJe9p5GMZVCcN7wBDKQk9OMVCXyozPOLT+99WTtvmp1X79fvemuSefGiaYmJ4zRSmupf21H0ZZ1F53bIHr7Zz94E3gR+OEdv5bINbtphgSWhlEoG0LSBNaAwnFD+/LH/KRoUDAq2QrEvx8A3u/3J4F46+eWldt7/YDZWUfMznEU25goJsSbZy68e2YHoGqV+32IMRSSkSRfIAJzkJJQzvqFJB188FDqSSgeOsNjWqiBwIqSnXvppedvq1Yn+/2rqlX0+xVgulqV7hfOnlXV6g7wbr9/HtioVl/t94/f+vF9e6fDucOkbVTzYVfqIwDTwQcP1edLU1FO8Q2rHaXHauHwWy89/7Fqdbrf3wtMAJdVq1G/P1mtbvb7lWr1fL+/DVwAfgGcAU5Xq9/ec+O+vdPZSJoiA4CiuDM8h2e64aG+AN1/jqoIBCP4lae+dhC4FtgHTAFjgE5PxjEwALaADeA94A3gDeCf9t64d880Li3rTHO77JlJ9uO7Hjg0PP4iYy2cLTaN4MBgDKIoiqKffPX3Pl6t7gd0vz8BGGCqWt3s92NgG9gEdqrVM8B/9Pv/csvdf/iVRqVidsm7JM6ElYvybnc98AgDjbQgJ20lU1gdYl1cCKXFYDh2g51otfecFLTv/tELtwM3VKuiBNGA2M95MR7ghRvvnJ6aMMbU5h4bq1QoLYyPogGMLFUAoDvvf0S+DSsrucEhZM5swK1uz7Fjx9ba2DprbWzth1779xuAW6rVKUAKrtvABvDTfv8c8F/Xf2xqckLuDrXWtbnHxsbGaAS+sIIUlsCKBBLRtj8oCAjwxkISLpjZOWeds9Za6+I4jq1lgB1b6+6M3zEAgBj4gakCUErJJZUxWi57pPC/tPh4HrrfjLMqSPfjwDuOtk+FXtte3Y1DY2HWO0q723OO5UpcCERxbJ0LvIg/dPMN/3P6jQx7QCs1JCC3FHIwCCsoQ4D+cwg6U5A82j6Z26SkwpU7zpccXxjLnRNypWCtdc5FsY1jC4DOvHrrRz4S9n3txz8G4K75KBjG6OSmUG5/FcktoMBKS0AjWGQfEYiOtoaXU14RmTre6EgRRVHnxEnrnLNiSM5ae/PeOF+1Djio635FF9AvLYYRhghY7gZHxzIu3pYSAgWJjwQd/uwcR1E0iKK1k3/nnPv0b3xyq//axY2Ni5ubW1tbg50dP2BsfHxycnJ6aurfvv99VD/s0dfnfrdSqZDy0XL42eoWclKBXpsLmZlcEXFYRk82jsCii9JQVKkYAErRY1/6wvbZ0xOXXz41NbVvMIijKIqi9O0GValUTKUyNjb26Be/OD4x8Z1/fmnu8JcrxlQqleAVggwLCfwhjeFWwAHXp1vrAfQSyY8qiQJodyTMMQPMPPO5T8ZxPBgM4iiKrXXyqgigiJTWRmvh8Nz6Oq66tT5/2Bizi5GErdVdK9/ICHTg3s+g9LTrG6PhDxNpr1bORgl473VmBvNcrSZvSDhmf2cjrw70VlcpffeGr7iZM9lykUCymGSsQHimCVY+cO9nCldFGfRJ7K/5knrGNIcznXvdf1184gl2Lpy122oJE//EXXGzfCnjgAB6yd1PuD4duOdhjHTaXBGuvFGWQLLjHDkio9rHjpXO4AmMQJbUt0vHhp3pwL0Pl6HMlBa9Nw9vNAqWqs69rgAKflg8cmQlQM/BHwAxoQzn/L0JsKtxJ7XrEgKp0lKzycyQNaEhjbGUAID6kSP+eSfLwQEMWICzGpDJmrW5/Jnmg4qF9HRrvZ256GUwGvU5jB44KkJPnzsdQvetm3LglMNOEX2ggbTAjEuxYXp6eV22XunZrM0xcp5zqRx+/8ufHZbtkVl49dixkMDFD3IA5KvIxZZwSwgEj7GL7Edx8EF6z8WzpQTku9B4//KbwnkSUy7LqJN7oBE8Uh+452H5t9+wdgmqRQ65/WXvxbOlqb33ge6xY79ICZRff6R3eN5/c68ySPNK86chHmXZu6AvSmVjev/5qf0KCP8o/f/G1P7f+aM/Y3CzPjfy8obT99bSyZv1OQbLqyHyJ+jFIL0GEm9v1uc+UAM56Jk71iDqXbn5ru9zbmq//768cgJA8RCze2NmKUfnngsBX10HshfuJdCRd5mEwwdveby8kr38Wxy5B5eG/0KtLiHw0HDhdFAxgSsYTG5Eor1ReETqxXbpt4DhDKH2AgJZuWaSn12gZwU14kLlRMk2GbSl+m7mNIq80KAD9zxURC8EstCLoba8hRxanROF/qPSm3IOIfriqCcWH88RyCQR6fn6UqGHHAR62cBSzRU58N+UCL6kyGxyUzeCuB7iKNVSWRtZgSrtF04URKdS9IV1GQD+H7lW/mAjoKEhAAAAAElFTkSuQmCC",
			"nodes": [
				{
					"connections": [
						{
							"from": "tex3d_pattern_2",
							"from_port": 0.0,
							"to": "tex3d_colorize_3",
							"to_port": 0.0
						},
						{
							"from": "tex3d_colorize_3",
							"from_port": 0.0,
							"to": "pxflib_4",
							"to_port": 0.0
						},
						{
							"from": "pxflib_4",
							"from_port": 0.0,
							"to": "gen_outputs",
							"to_port": 0.0
						},
						{
							"from": "sdf3d_box",
							"from_port": 0.0,
							"to": "pxflib_4",
							"to_port": 5.0
						}
					],
					"label": "Checkerboard",
					"longdesc": "",
					"name": "graph_2",
					"node_position": {
						"x": -150.390625,
						"y": -282.53125
					},
					"nodes": [
						{
							"name": "sdf3d_box",
							"node_position": {
								"x": -1041.34008789062,
								"y": -203.449951171875
							},
							"parameters": {
								"r": 0.0,
								"sx": 6.0,
								"sy": 0.5,
								"sz": 6.0
							},
							"seed_int": 0.0,
							"type": "sdf3d_box"
						},
						{
							"name": "tex3d_pattern_2",
							"node_position": {
								"x": -1106.34008789062,
								"y": -381.449951171875
							},
							"parameters": {
								"mix": 4.0,
								"x_scale": "$checkersize",
								"x_wave": 2.0,
								"y_scale": 0.0,
								"y_wave": 2.0,
								"z_scale": "$checkersize",
								"z_wave": 2.0
							},
							"seed_int": 0.0,
							"type": "tex3d_pattern"
						},
						{
							"name": "gen_inputs",
							"node_position": {
								"x": -1341.34008789062,
								"y": -277.949951171875
							},
							"parameters": {

							},
							"ports": [],
							"seed_int": 0.0,
							"type": "ios"
						},
						{
							"name": "gen_outputs",
							"node_position": {
								"x": -171.340026855469,
								"y": -302.949951171875
							},
							"parameters": {

							},
							"ports": [
								{
									"group_size": 0.0,
									"name": "port0",
									"type": "v4v4"
								}
							],
							"seed_int": 0.0,
							"type": "ios"
						},
						{
							"name": "gen_parameters",
							"node_position": {
								"x": -1055.59008789062,
								"y": -653.449951171875
							},
							"parameters": {
								"checkersize": 1.0,
								"param0": 6.0,
								"param1": -1.0,
								"param2": {
									"interpolation": 0.0,
									"points": [
										{
											"a": 1.0,
											"b": 0.84375,
											"g": 0.84375,
											"pos": 0.0,
											"r": 0.84375
										},
										{
											"a": 1.0,
											"b": 0.84375,
											"g": 0.84375,
											"pos": 0.99999,
											"r": 0.84375
										},
										{
											"a": 1.0,
											"b": 0.125,
											"g": 0.125,
											"pos": 1.00001,
											"r": 0.125
										}
									],
									"type": "Gradient"
								},
								"param3": 0.0,
								"param4": 0.5,
								"param5": 0.0
							},
							"seed_int": 0.0,
							"type": "remote",
							"widgets": [
								{
									"label": "Board Size",
									"linked_widgets": [
										{
											"node": "sdf3d_box",
											"widget": "sx"
										},
										{
											"node": "sdf3d_box",
											"widget": "sz"
										}
									],
									"name": "param0",
									"type": "linked_control"
								},
								{
									"default": 1.0,
									"label": "Checker Size",
									"max": 20.0,
									"min": 0.0,
									"name": "checkersize",
									"step": 0.001,
									"type": "named_parameter"
								},
								{
									"label": "Position",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "TranlateY"
										}
									],
									"name": "param1",
									"type": "linked_control"
								},
								{
									"label": "Color",
									"linked_widgets": [
										{
											"node": "tex3d_colorize_3",
											"widget": "g"
										}
									],
									"name": "param2",
									"type": "linked_control"
								},
								{
									"label": "Metallic",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Metallic"
										}
									],
									"name": "param3",
									"type": "linked_control"
								},
								{
									"label": "Specular",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Specular"
										}
									],
									"name": "param4",
									"type": "linked_control"
								},
								{
									"label": "Roughness",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Roughness"
										}
									],
									"name": "param5",
									"type": "linked_control"
								}
							]
						},
						{
							"name": "tex3d_colorize_3",
							"node_position": {
								"x": -850.0,
								"y": -377.021362304688
							},
							"parameters": {
								"g": {
									"interpolation": 0.0,
									"points": [
										{
											"a": 1.0,
											"b": 0.84375,
											"g": 0.84375,
											"pos": 0.0,
											"r": 0.84375
										},
										{
											"a": 1.0,
											"b": 0.84375,
											"g": 0.84375,
											"pos": 0.99999,
											"r": 0.84375
										},
										{
											"a": 1.0,
											"b": 0.125,
											"g": 0.125,
											"pos": 1.00001,
											"r": 0.125
										}
									],
									"type": "Gradient"
								}
							},
							"seed_int": 0.0,
							"type": "tex3d_colorize"
						},
						{
							"name": "pxflib_4",
							"node_position": {
								"x": -591.953735351562,
								"y": -359.458862304688
							},
							"parameters": {
								"BaseColor": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0,
									"type": "Color"
								},
								"Emission": 0.0,
								"Metallic": 0.0,
								"RotateX": 0.0,
								"RotateY": 0.0,
								"RotateZ": 0.0,
								"Roughness": 0.0,
								"Specular": 0.5,
								"TranlateX": 0.0,
								"TranlateY": -1.0,
								"TranlateZ": 0.0,
								"scale": 1.0
							},
							"seed": -5947.0,
							"seed_locked": true,
							"shader_model": {
								"code": "",
								"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
								"inputs": [
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "BaseColor",
										"name": "BaseColor_tex3d",
										"shortdesc": "TEX3D",
										"type": "tex3d"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Metallic",
										"name": "Metallic_tex3d",
										"shortdesc": "Grayscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Specular",
										"name": "Specular_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Roughness",
										"name": "Roughness_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "Emission",
										"name": "Emission_tex3d",
										"type": "tex3d"
									},
									{
										"default": "length($uv)-0.4 ",
										"function": true,
										"label": "Object",
										"name": "sdf3d",
										"shortdesc": "SDF3D",
										"type": "sdf3d"
									}
								],
								"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
								"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
								"name": "MFSDF Object",
								"outputs": [
									{
										"shortdesc": "V4->V4 MFSDF ",
										"type": "v4v4",
										"v4v4": "PBRObjectMaker_$name($uv)"
									}
								],
								"parameters": [
									{
										"default": {
											"a": 1.0,
											"b": 1.0,
											"g": 1.0,
											"r": 1.0
										},
										"label": "",
										"name": "BaseColor",
										"type": "color"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "",
										"max": 1.0,
										"min": 0.0,
										"name": "Metallic",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.5,
										"label": "",
										"max": 1.0,
										"min": 0.0,
										"name": "Specular",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "",
										"max": 1.0,
										"min": 0.0,
										"name": "Roughness",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "",
										"longdesc": "Emission Scale",
										"max": 500.0,
										"min": 0.0,
										"name": "Emission",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1.0,
										"label": "S",
										"longdesc": "Object scale",
										"max": 4.0,
										"min": 0.0,
										"name": "scale",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "X",
										"max": 10.0,
										"min": -10.0,
										"name": "TranlateX",
										"shortdesc": "Translate X",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Y",
										"max": 10.0,
										"min": -10.0,
										"name": "TranlateY",
										"shortdesc": "Translate Y",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Z",
										"max": 10.0,
										"min": -10.0,
										"name": "TranlateZ",
										"shortdesc": "Translate Z",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Rx",
										"max": 180.0,
										"min": -180.0,
										"name": "RotateX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Ry",
										"max": 180.0,
										"min": -180.0,
										"name": "RotateY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Rz",
										"max": 180.0,
										"min": -180.0,
										"name": "RotateZ",
										"step": 0.001,
										"type": "float"
									}
								],
								"shortdesc": "MFSDF Object"
							},
							"type": "shader"
						}
					],
					"parameters": {
						"checkersize": 1.0,
						"param0": 6.0,
						"param1": -1.0,
						"param2": {
							"interpolation": 0.0,
							"points": [
								{
									"a": 1.0,
									"b": 0.84375,
									"g": 0.84375,
									"pos": 0.0,
									"r": 0.84375
								},
								{
									"a": 1.0,
									"b": 0.84375,
									"g": 0.84375,
									"pos": 0.99999,
									"r": 0.84375
								},
								{
									"a": 1.0,
									"b": 0.125,
									"g": 0.125,
									"pos": 1.00001,
									"r": 0.125
								}
							],
							"type": "Gradient"
						},
						"param3": 0.0,
						"param4": 0.5,
						"param5": 0.0
					},
					"seed_int": 0.0,
					"shortdesc": "",
					"type": "graph"
				},
				{
					"name": "MFSDF_Object_And_Transform",
					"node_position": {
						"x": -210.390625,
						"y": -82.53125
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 0.0,
						"Metallic": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 0.5,
						"TranlateX": 0.0,
						"TranlateY": 0.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object And Transform",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_sphere",
					"node_position": {
						"x": -390.390625,
						"y": 67.46875
					},
					"parameters": {
						"r": 0.4
					},
					"seed_int": 0.0,
					"type": "sdf3d_sphere"
				},
				{
					"generic_size": 3.0,
					"name": "MFSDF_Render",
					"node_position": {
						"x": 258.171875,
						"y": -138.40625
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1.0,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"Gamma": 1.4,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"Shadow": 1.0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 2.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "vec2 Simple360HDR_equirectangularMap(vec3 dir) {\n\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "vec4(0.0,0.0,0.0,999999999.0)",
								"function": true,
								"label": "MFSDF",
								"name": "mfsdf#",
								"shortdesc": "V4->V4 Multi-Field SDF #",
								"type": "v4v4"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec4 mfsdf_$name(vec4 p){ \n  vec4 a=vec4(0.0,0.0,0.0,999999999.0);\n  vec4 b;\n  #for\n  b=$mfsdf#(p);\n  a=(a.w<b.w)?a:b;\n  #end\n  return a;\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=mfsdf_$name(vec4(p+e.xyy,0.0)).w;\n  float v2=mfsdf_$name(vec4(p+e.yyx,0.0)).w;\n  float v3=mfsdf_$name(vec4(p+e.yxy,0.0)).w;\n  float v4=mfsdf_$name(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = mfsdf_$name(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = mfsdf_$name(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t    vec3 p=ro + rd*t;\n\t\tfloat h = mfsdf_$name(vec4(p,0.0)).w;\n\t\tfloat isLight=mfsdf_$name(vec4(p,13.0)).x;\n\t\tif (isLight>0.0) h=999999.0;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=mfsdf_$name(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1)\n\tfloat objMetallic=clamp(mfsdf_$name(vec4(p,2.0)).x,0.0,1.0);  // 2 - Metallic  (v,0,0,sdf)\n\tfloat objSpecular=clamp(max(mfsdf_$name(vec4(p,4.0)).x*0.2,objMetallic),0.0,1.0);  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=mfsdf_$name(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 objEmission=mfsdf_$name(vec4(p,13.0)).xyz; // 13 - Emission (r,g,b,sdf)\n\tobjColor=max(objColor,objEmission);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tif (objEmission.x>0.0){\n\t\t\tcolor=objEmission;\n\t\t} else {\n\t\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*((1.0-objMetallic)*objColor)+\n\t\t\tpow(r,pow(256.0,(1.0-objRoughness)))*objSpecular*mix(vec3(1.0),objColor,objMetallic)*(1.0-objRoughness)*16.0;\n\t\t}\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tvec3 objEmissionRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=mfsdf_$name(vec4(p,1.0)).xyz;\n\t\t\tobjEmissionRef=mfsdf_$name(vec4(p,13.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tif (objEmissionRef.x>0.0){\n\t\t\t  objColorRef=objEmissionRef;\n\t\t\t} else {\n\t\t\t  objColorRef=max(l,$AmbLight)*objColorRef;\n\t\t\t}\n\t\t} else {\n\t\t\tobjColorRef=$hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular*mix(vec3(1.0),objColor,objMetallic));\n\t} else {\n\t\tcolor=$hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
						"longdesc": "Ray marching node for n objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\nCode - PauloFalcao, IQ\n",
						"name": "MFSDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10.0,
								"min": -10.0,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10.0,
								"min": -10.0,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10.0,
								"min": -10.0,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1.0,
								"min": 0.0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.2,
								"label": "Gamma",
								"longdesc": "Gamma Correction",
								"max": 3.0,
								"min": 0.0,
								"name": "Gamma",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/MFSDF/Render/Render Template"
		},
		{
			"display_name": "Render 360",
			"icon_data": "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",
			"name": "MFSDF_Render_360",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1.0,
				"CamX": 2.5,
				"CamY": 2.0,
				"CamZ": 3.0,
				"CamZoom": 1.0,
				"Gamma": 1.5,
				"IPD": 0.1,
				"IS3D": 0.0,
				"Shadow": 1.0,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 2.5
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "const float r360_PI=3.14159265359;\n\nvec2 r360_equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*r360_PI,r360_PI);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(r360_PI,r360_PI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
				"inputs": [
					{
						"default": "vec4((($uv.w>0.5&&$uv.w<1.5)||($uv.w>3.5&&$uv.w<4.5))?1.0:0.0,0.0,0.0,length($uv)-0.4)",
						"function": true,
						"label": "MFSDF",
						"name": "mfsdf",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					},
					{
						"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = $mfsdf(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = $mfsdf(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = $mfsdf(vec4( ro + rd*t ,0.0)).w;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n\n\tvec3 ro=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\t\n    // VR stuff from https://developers.google.com/vr/jump/rendering-ods-content.pdf  \n\tvec2 ouv=uv;\n\tif ($IS3D) {\n    \tuv.y=1.0-uv.y;\n\t\tuv.y=mod((1.0-uv.y)*2.0,1.0);\n\t}\n    float theta=uv.x*2.0*r360_PI-r360_PI;\n    float phi=r360_PI/2.0-uv.y*r360_PI;\n    float scale=cos(phi)*(-$IPD/2.0);\n    if ($IS3D){\n\t\tif (ouv.y>0.5) {scale=-scale;}\n\t} \n    ro=vec3(cos(theta),0.0,sin(theta))*scale+ro;\n    vec3 rd=vec3(sin(theta)*cos(phi),sin(phi),-cos(theta)*cos(phi));\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=$mfsdf(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1) \n\tfloat objSpecular=$mfsdf(vec4(p,4.0)).x*0.2;  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=$mfsdf(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+4.0*pow(r,pow(256.0,(1.0-objRoughness)))*objSpecular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=$mfsdf(vec4(p,1.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(r360_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular);\n\t} else {\n\t\tcolor=$hdri(r360_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
				"longdesc": "360 Camera Ray marching node for MFSDF objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\nCode - PauloFalcao, IQ\n",
				"name": "MFSDF Render 360",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5.0,
						"min": -5.0,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5.0,
						"min": -5.0,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2.0,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5.0,
						"min": -5.0,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5.0,
						"min": 0.0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10.0,
						"min": -10.0,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10.0,
						"min": -10.0,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10.0,
						"min": -10.0,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1.0,
						"min": 0.0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1.0,
						"min": 0.0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1.0,
						"min": 0.0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.2,
						"label": "Gamma",
						"longdesc": "Gamma Correction",
						"max": 3.0,
						"min": 0.0,
						"name": "Gamma",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.1,
						"label": "IPD",
						"max": 1.0,
						"min": 0.0,
						"name": "IPD",
						"shortdesc": "Interpupillary Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 0.0,
						"label": "3D",
						"longdesc": "3D",
						"name": "IS3D",
						"type": "enum",
						"values": [
							{
								"name": "true",
								"value": "true"
							},
							{
								"name": "false",
								"value": "false"
							}
						]
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Render/Render 360",
			"type": "shader"
		},
		{
			"display_name": "Render Path Tracing",
			"generic_size": 1.0,
			"icon_data": "",
			"name": "MFSDF_Render_Path_Tracing",
			"parameters": {
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2.0,
				"CamZ": 3.0,
				"CamZoom": 1.0,
				"DOF": 0.0,
				"DOFPlane": 0.0,
				"LookAtX": 0.0,
				"LookAtY": 0.0,
				"LookAtZ": 0.0,
				"MaxDistance": 200.0,
				"MaxRayLoop": 5.0,
				"MaxRefIte": 4.0,
				"Precision": 2.0,
				"Samples": 0.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "\n\nvoid pathtracing_Onb(in vec3 N, inout vec3 T, inout vec3 B){\n    vec3 UpVector=abs(N.z)<0.999?vec3(0,0,1):vec3(1,0,0);\n    T=normalize(cross(UpVector,N));\n    B=cross(N,T);\n}\n\n\nvec2 pathtracing_equirectangularMap(vec3 dir) {\n\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint pathtracing_rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat pathtracing_RandomFloat01(inout uint state){\n    uint r=pathtracing_rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n// SAMPLING START\n\nvec2 pathtracing_randomPointInDisc(inout uint state, float radius){\n\n    float u1=pathtracing_RandomFloat01(state);\n    float u2=pathtracing_RandomFloat01(state);\n    u2=u2*2.0*3.14159265359;\n    float r = radius*sqrt(u1);\n    return r*vec2(sin(u2),cos(u2));\n}\n\nvec3 pathtracing_uniformSampleSphere(float r1,float r2){\n    const float TAU=6.28318530718;\n    float z=1.0-2.0*r1;\n    float r=sqrt(max(0.0,1.0-z*z));\n    float phi=TAU*r2;\n    return vec3(r*cos(phi),r*sin(phi),z);\n}\n\nvec3 pathtracing_cosineSampleHemissphere(inout uint state,vec3 n){\n    float u1=pathtracing_RandomFloat01(state);\n    float u2=pathtracing_RandomFloat01(state);\n    return normalize(n+pathtracing_uniformSampleSphere(u1,u2)); \n}\n\n// Adapted from \"Sampling the GGX Distribution of Visible Normals\",\n// http://jcgt.org/published/0007/04/01/\nvec3 pathtracing_SampleGGXVNDF(inout uint state,vec3 Ve,float alpha_x,float alpha_y){\n\n\n\n    float U1=pathtracing_RandomFloat01(state);\n    float U2=pathtracing_RandomFloat01(state);\n    \n    //transforming the view direction to the hemisphere configuration\n    vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));\n\n    //orthonormal basis\n    vec3 T1;vec3 T2;\n    pathtracing_Onb(Vh,T1,T2);\n\n    //parameterization of the projected area\n    float r = sqrt(U1); \n    float phi = 2.0 * 3.14159265359 * U2;    \n    float t1 = r * cos(phi);\n    float t2 = r * sin(phi);\n    float s = 0.5 * (1.0 + Vh.z);\n    t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;\n\n    //reprojection onto hemisphere\n    vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2))*Vh;\n\n    //transforming the normal back to the ellipsoid configuration\n    vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0f, Nh.z))); \n\n    return Ne;\n}\n\nfloat pathtracing_schlickWeight(float cosTheta) {\n    float m=clamp(1.-cosTheta,0.,1.);\n    float m2=m*m;\n    return m2*m2*m;\n}\n\n// SAMPLING END\n\n",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,999999999.0)",
						"function": true,
						"label": "MFSDF",
						"name": "mfsdf#",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					},
					{
						"default": "vec3(0.0)",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "vec4 mfsdf_$name(vec4 p){ \n  vec4 a=vec4(0.0,0.0,0.0,999999999.0);\n  vec4 b;\n  #for\n  b=$mfsdf#(p);\n  a=(a.w<b.w)?a:b;\n  #end\n  return a;\n}\n\n//tetrahedron normal by PauloFalcao\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.$Precision,-0.$Precision,0.0);\n  float v1=mfsdf_$name(vec4(p+e.xyy,0.0)).w;\n  float v2=mfsdf_$name(vec4(p+e.yyx,0.0)).w;\n  float v3=mfsdf_$name(vec4(p+e.yxy,0.0)).w;\n  float v4=mfsdf_$name(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid raymarch_$name(in vec3 o,in vec3 v,out vec3 p,inout float d){\n  float s;\n  for(int i=0;i<$MaxRayLoop;i++){\n    p=o+v*d;\n    s=mfsdf_$name(vec4(p,0.0)).w;\n    if (abs(s)<0.0$Precision) break;\n    d+=s;\n    if (d>$MaxDistance) break;\n  } \n}\n\nvec3 pathtracing_$name(vec2 uv) {\n\n    // Init random\n    vec2 rndgen=(uv+100.0)*10000.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint($time*100000.0)*uint(26699));\n\n    vec3 o=vec3($CamX,$CamY,$CamZ); \n    vec3 t=vec3($LookAtX,$LookAtY,$LookAtZ);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 c=normalize(t-o);\n\t\t o=o+c*$CamZoom;\n\tfloat planeDistance=length(t-o);\n    vec3 cx=normalize(cross(u,c));\n    vec3 cy=normalize(cross(cx,c));\n\n    vec3 AAColor=vec3(0.0);\n\n    for(int AALoop=0;AALoop<$Samples;AALoop++){\n\t\t\n\t    vec2 xy=uv.xy-0.5;\n\t\n\t    vec3 v=normalize(c*$CamD+cx*xy.x+cy*xy.y);\n\t\t\n\t\t//DOF focal plane\n\t\tfloat fcs=dot(v,c);\n\t\tvec3 focalPoint=o+v*(planeDistance+$DOFPlane)*1.0/fcs;\n\t\tvec2 rdisc=pathtracing_randomPointInDisc(rngState,$DOF);\n\t\to=o+rdisc.x*cx+rdisc.y*cy;\n\t\tv=normalize(focalPoint-o);\n\t\t\n\t    vec3 p;\n\t    float d=0.01;\n\t    vec3 rgb=vec3(1.0);\n\t    vec3 io=o;\n\n\t    int ii=0;\n\t    for(int i=0;i<$MaxRefIte;i++){\n\t    \tii=ii+1;\n\t        raymarch_$name(io,v,p,d);\n\t        \n\t        vec3 n=normal_$name(p);\n\t        \n\t        //View direction to tangent space\n\t        vec3 ot;vec3 ob;pathtracing_Onb(n,ot,ob);\n\t        vec3 vt=vec3(dot(-v,ot),dot(-v,ob),dot(-v,n));\n\t\t\n\t        if (d<$MaxDistance){\t\n\t        //if (length(p-o)<$MaxDistance){\n\t        vec3 obj_Emission=mfsdf_$name(vec4(p,13.0)).rgb;\n\t        \n\t        if ((obj_Emission.x+obj_Emission.y+obj_Emission.z)>0.001){\n\t            rgb=obj_Emission*rgb;\n\t            break;\n\t        } else {\n\t            float s=pathtracing_RandomFloat01(rngState);\n\t\t\t\t\n\t            vec3 obj_BaseColor=mfsdf_$name(vec4(p,1.0)).rgb; // 1 - BaseColor  (r,g,b,sdf)\n\t            float obj_Metallic=clamp(mfsdf_$name(vec4(p,2.0)).x,0.0,1.0);   // 2 - Metallic   (v,0,0,sdf)\n\t            float obj_Specular=clamp(max(mfsdf_$name(vec4(p,4.0)).x,obj_Metallic),0.0,1.0);   // 4 - Specular   (v,0,0,sdf)\n\t            float obj_Roughness=mfsdf_$name(vec4(p,5.0)).x;  // 5 - Roughness  (v,0,0,sdf)\n\n\t            if (s>obj_Specular*obj_Specular*0.5){\n\t                rgb=(obj_BaseColor-obj_BaseColor*obj_Metallic)*rgb;\n\t                v=pathtracing_cosineSampleHemissphere(rngState,n);\n\t            } else {\n\n\t                float r2=obj_Roughness*obj_Roughness*0.5;\n\t                vec3 vndf=pathtracing_SampleGGXVNDF(rngState,vt,r2,r2);\n\t                vec3 nv=reflect(-vt,vndf);\n\t\n\t                //Sample direction back to camera space\n\t                nv=nv.x*ot+nv.y*ob+nv.z*n;\n\n\t                float FH=pathtracing_schlickWeight(dot(n,nv));\n\t                vec3 Cspec0=mix(vec3(obj_Specular*0.25),obj_BaseColor,obj_Metallic);\n\t                vec3 Fs=mix(Cspec0,vec3(1.0),FH);\n\t                rgb=Fs*rgb;\n\t                v=nv;\n\t            }\n\t            io=p;\n\t            d=0.01;\n\t        }\n\t        } else {\n\t        rgb*=$hdri(pathtracing_equirectangularMap(v.xzy)).xyz;\n\t\n\t        break;\n\t        }\n\t    }//for(int i\n\t    if (ii==$MaxRefIte) rgb=vec3(0.0);//did not hit any light source\n\n\t    AAColor+=max(rgb,vec3(0));\n\t\n\t}\n\n\treturn AAColor/floor($Samples);\n\t\n}\n\n",
				"longdesc": "Path tracing ray marching node for MFSDF objects using a environment 360 HDRI image\n\nCode - PauloFalcao\n\n",
				"name": "MFSDF Render Path Tracing",
				"outputs": [
					{
						"rgba": "vec4(pathtracing_$name($uv).xyz,1.0)",
						"shortdesc": "Image output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5.0,
						"min": -5.0,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5.0,
						"min": -5.0,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2.0,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5.0,
						"min": -5.0,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5.0,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5.0,
						"min": 0.0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5.0,
						"min": 0.0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 50.0,
						"label": "MaxDistance",
						"longdesc": "Maximum render distance",
						"max": 500.0,
						"min": 1.0,
						"name": "MaxDistance",
						"step": 0.01,
						"type": "float"
					},
					{
						"default": 2.0,
						"label": "MaxRefIte",
						"longdesc": "Maximum reflection iterations",
						"name": "MaxRefIte",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "25",
								"value": "25"
							},
							{
								"name": "30",
								"value": "30"
							},
							{
								"name": "40",
								"value": "40"
							},
							{
								"name": "50",
								"value": "50"
							}
						]
					},
					{
						"default": 2.0,
						"label": "MaxRayLoop",
						"name": "MaxRayLoop",
						"type": "enum",
						"values": [
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "32",
								"value": "32"
							},
							{
								"name": "64",
								"value": "64"
							},
							{
								"name": "128",
								"value": "128"
							},
							{
								"name": "256",
								"value": "256"
							},
							{
								"name": "512",
								"value": "512"
							},
							{
								"name": "1024",
								"value": "1024"
							},
							{
								"name": "2048",
								"value": "2048"
							},
							{
								"name": "4096",
								"value": "4096"
							}
						]
					},
					{
						"default": 6.0,
						"label": "Precision",
						"name": "Precision",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "01"
							},
							{
								"name": "2",
								"value": "005"
							},
							{
								"name": "3",
								"value": "001"
							},
							{
								"name": "4",
								"value": "0005"
							},
							{
								"name": "5",
								"value": "0001"
							},
							{
								"name": "6",
								"value": "00005"
							},
							{
								"name": "7",
								"value": "00001"
							}
						]
					},
					{
						"default": 0.0,
						"label": "Samples",
						"name": "Samples",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "24",
								"value": "24"
							},
							{
								"name": "32",
								"value": "32"
							},
							{
								"name": "48",
								"value": "48"
							},
							{
								"name": "64",
								"value": "64"
							},
							{
								"name": "96",
								"value": "96"
							},
							{
								"name": "128",
								"value": "128"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "DOF",
						"max": 1.0,
						"min": 0.0,
						"name": "DOF",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "DOFPlane",
						"max": 5.0,
						"min": -5.0,
						"name": "DOFPlane",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Render Path Tracing"
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Render/Render Path Tracing",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_sphere",
					"from_node": "node_sdf3d_sphere",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Object_And_Transform",
					"to_node": "node_MFSDF_Object_And_Transform",
					"to_port": 5.0
				},
				{
					"from": "graph_2",
					"from_node": "node_graph_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Render_Path_Tracing",
					"to_node": "node_MFSDF_Render_Path_Tracing",
					"to_port": 0.0
				},
				{
					"from": "uniform",
					"from_node": "node_uniform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Render_Path_Tracing",
					"to_node": "node_MFSDF_Render_Path_Tracing",
					"to_port": 3.0
				},
				{
					"from": "MFSDF_Object_And_Transform",
					"from_node": "node_MFSDF_Object_And_Transform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Render_Path_Tracing",
					"to_node": "node_MFSDF_Render_Path_Tracing",
					"to_port": 2.0
				},
				{
					"from": "MFSDF_Object_And_Transform_2",
					"from_node": "node_MFSDF_Object_And_Transform_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Render_Path_Tracing",
					"to_node": "node_MFSDF_Render_Path_Tracing",
					"to_port": 1.0
				}
			],
			"display_name": "Render Path Tracing Template",
			"icon_data": "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",
			"name": "",
			"nodes": [
				{
					"name": "MFSDF_Object_And_Transform_2",
					"node_position": {
						"x": -223.08332824707,
						"y": -330.833312988281
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 16.0,
						"Metallic": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 0.5,
						"TranlateX": 0.0,
						"TranlateY": 1.84874,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object And Transform",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"connections": [
						{
							"from": "tex3d_pattern_2",
							"from_port": 0.0,
							"to": "tex3d_colorize_3",
							"to_port": 0.0
						},
						{
							"from": "tex3d_colorize_3",
							"from_port": 0.0,
							"to": "pxflib_4",
							"to_port": 0.0
						},
						{
							"from": "pxflib_4",
							"from_port": 0.0,
							"to": "gen_outputs",
							"to_port": 0.0
						},
						{
							"from": "sdf3d_box",
							"from_port": 0.0,
							"to": "pxflib_4",
							"to_port": 5.0
						}
					],
					"label": "Checkerboard",
					"longdesc": "",
					"name": "graph_2",
					"node_position": {
						"x": 96.9166717529297,
						"y": -330.833312988281
					},
					"nodes": [
						{
							"name": "sdf3d_box",
							"node_position": {
								"x": -1041.34008789062,
								"y": -203.449951171875
							},
							"parameters": {
								"r": 0.0,
								"sx": 4.0,
								"sy": 0.5,
								"sz": 4.0
							},
							"seed_int": 0.0,
							"type": "sdf3d_box"
						},
						{
							"name": "tex3d_pattern_2",
							"node_position": {
								"x": -1106.34008789062,
								"y": -381.449951171875
							},
							"parameters": {
								"mix": 4.0,
								"x_scale": "$checkersize",
								"x_wave": 2.0,
								"y_scale": 0.0,
								"y_wave": 2.0,
								"z_scale": "$checkersize",
								"z_wave": 2.0
							},
							"seed_int": 0.0,
							"type": "tex3d_pattern"
						},
						{
							"name": "gen_inputs",
							"node_position": {
								"x": -1341.34008789062,
								"y": -277.949951171875
							},
							"parameters": {

							},
							"ports": [],
							"seed_int": 0.0,
							"type": "ios"
						},
						{
							"name": "gen_outputs",
							"node_position": {
								"x": -171.340026855469,
								"y": -302.949951171875
							},
							"parameters": {

							},
							"ports": [
								{
									"group_size": 0.0,
									"name": "port0",
									"type": "v4v4"
								}
							],
							"seed_int": 0.0,
							"type": "ios"
						},
						{
							"name": "gen_parameters",
							"node_position": {
								"x": -1055.59008789062,
								"y": -653.449951171875
							},
							"parameters": {
								"checkersize": 2.0,
								"param0": 4.0,
								"param1": -1.0,
								"param2": {
									"interpolation": 0.0,
									"points": [
										{
											"a": 1.0,
											"b": 0.84375,
											"g": 0.84375,
											"pos": 0.0,
											"r": 0.84375
										},
										{
											"a": 1.0,
											"b": 0.84375,
											"g": 0.84375,
											"pos": 0.99999,
											"r": 0.84375
										},
										{
											"a": 1.0,
											"b": 0.125,
											"g": 0.125,
											"pos": 1.00001,
											"r": 0.125
										}
									],
									"type": "Gradient"
								},
								"param3": 0.0,
								"param4": 0.5,
								"param5": 0.0
							},
							"seed_int": 0.0,
							"type": "remote",
							"widgets": [
								{
									"label": "Board Size",
									"linked_widgets": [
										{
											"node": "sdf3d_box",
											"widget": "sx"
										},
										{
											"node": "sdf3d_box",
											"widget": "sz"
										}
									],
									"name": "param0",
									"type": "linked_control"
								},
								{
									"default": 1.0,
									"label": "Checker Size",
									"max": 20.0,
									"min": 0.0,
									"name": "checkersize",
									"step": 0.001,
									"type": "named_parameter"
								},
								{
									"label": "Position",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "TranlateY"
										}
									],
									"name": "param1",
									"type": "linked_control"
								},
								{
									"label": "Color",
									"linked_widgets": [
										{
											"node": "tex3d_colorize_3",
											"widget": "g"
										}
									],
									"name": "param2",
									"type": "linked_control"
								},
								{
									"label": "Metallic",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Metallic"
										}
									],
									"name": "param3",
									"type": "linked_control"
								},
								{
									"label": "Specular",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Specular"
										}
									],
									"name": "param4",
									"type": "linked_control"
								},
								{
									"label": "Roughness",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Roughness"
										}
									],
									"name": "param5",
									"type": "linked_control"
								}
							]
						},
						{
							"name": "tex3d_colorize_3",
							"node_position": {
								"x": -850.0,
								"y": -377.021362304688
							},
							"parameters": {
								"g": {
									"interpolation": 0.0,
									"points": [
										{
											"a": 1.0,
											"b": 0.84375,
											"g": 0.84375,
											"pos": 0.0,
											"r": 0.84375
										},
										{
											"a": 1.0,
											"b": 0.84375,
											"g": 0.84375,
											"pos": 0.99999,
											"r": 0.84375
										},
										{
											"a": 1.0,
											"b": 0.125,
											"g": 0.125,
											"pos": 1.00001,
											"r": 0.125
										}
									],
									"type": "Gradient"
								}
							},
							"seed_int": 0.0,
							"type": "tex3d_colorize"
						},
						{
							"name": "pxflib_4",
							"node_position": {
								"x": -591.953735351562,
								"y": -359.458862304688
							},
							"parameters": {
								"BaseColor": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0,
									"type": "Color"
								},
								"Emission": 0.0,
								"Metallic": 0.0,
								"RotateX": 0.0,
								"RotateY": 0.0,
								"RotateZ": 0.0,
								"Roughness": 0.0,
								"Specular": 0.5,
								"TranlateX": 0.0,
								"TranlateY": -1.0,
								"TranlateZ": 0.0,
								"scale": 1.0
							},
							"seed": -5947.0,
							"seed_locked": true,
							"shader_model": {
								"code": "",
								"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
								"inputs": [
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "BaseColor",
										"name": "BaseColor_tex3d",
										"shortdesc": "TEX3D",
										"type": "tex3d"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Metallic",
										"name": "Metallic_tex3d",
										"shortdesc": "Grayscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Specular",
										"name": "Specular_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Roughness",
										"name": "Roughness_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "Emission",
										"name": "Emission_tex3d",
										"type": "tex3d"
									},
									{
										"default": "length($uv)-0.4 ",
										"function": true,
										"label": "Object",
										"name": "sdf3d",
										"shortdesc": "SDF3D",
										"type": "sdf3d"
									}
								],
								"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
								"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
								"name": "MFSDF Object",
								"outputs": [
									{
										"shortdesc": "V4->V4 MFSDF ",
										"type": "v4v4",
										"v4v4": "PBRObjectMaker_$name($uv)"
									}
								],
								"parameters": [
									{
										"default": {
											"a": 1.0,
											"b": 1.0,
											"g": 1.0,
											"r": 1.0
										},
										"label": "",
										"name": "BaseColor",
										"type": "color"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "",
										"max": 1.0,
										"min": 0.0,
										"name": "Metallic",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.5,
										"label": "",
										"max": 1.0,
										"min": 0.0,
										"name": "Specular",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "",
										"max": 1.0,
										"min": 0.0,
										"name": "Roughness",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "",
										"longdesc": "Emission Scale",
										"max": 500.0,
										"min": 0.0,
										"name": "Emission",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1.0,
										"label": "S",
										"longdesc": "Object scale",
										"max": 4.0,
										"min": 0.0,
										"name": "scale",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "X",
										"max": 10.0,
										"min": -10.0,
										"name": "TranlateX",
										"shortdesc": "Translate X",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Y",
										"max": 10.0,
										"min": -10.0,
										"name": "TranlateY",
										"shortdesc": "Translate Y",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Z",
										"max": 10.0,
										"min": -10.0,
										"name": "TranlateZ",
										"shortdesc": "Translate Z",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Rx",
										"max": 180.0,
										"min": -180.0,
										"name": "RotateX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Ry",
										"max": 180.0,
										"min": -180.0,
										"name": "RotateY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Rz",
										"max": 180.0,
										"min": -180.0,
										"name": "RotateZ",
										"step": 0.001,
										"type": "float"
									}
								],
								"shortdesc": "MFSDF Object"
							},
							"type": "shader"
						}
					],
					"parameters": {
						"checkersize": 2.0,
						"param0": 4.0,
						"param1": -1.0,
						"param2": {
							"interpolation": 0.0,
							"points": [
								{
									"a": 1.0,
									"b": 0.84375,
									"g": 0.84375,
									"pos": 0.0,
									"r": 0.84375
								},
								{
									"a": 1.0,
									"b": 0.84375,
									"g": 0.84375,
									"pos": 0.99999,
									"r": 0.84375
								},
								{
									"a": 1.0,
									"b": 0.125,
									"g": 0.125,
									"pos": 1.00001,
									"r": 0.125
								}
							],
							"type": "Gradient"
						},
						"param3": 0.0,
						"param4": 0.5,
						"param5": 0.0
					},
					"seed_int": 0.0,
					"shortdesc": "",
					"type": "graph"
				},
				{
					"name": "uniform",
					"node_position": {
						"x": 96.9166717529297,
						"y": -110.83332824707
					},
					"parameters": {
						"color": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						}
					},
					"seed_int": 0.0,
					"type": "uniform"
				},
				{
					"name": "MFSDF_Object_And_Transform",
					"node_position": {
						"x": -293.083312988281,
						"y": 19.1666717529297
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 0.0,
						"Metallic": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 1.0,
						"TranlateX": 0.0,
						"TranlateY": 0.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object And Transform",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_sphere",
					"node_position": {
						"x": -483.083312988281,
						"y": 139.16667175293
					},
					"parameters": {
						"r": 0.4
					},
					"seed_int": 0.0,
					"type": "sdf3d_sphere"
				},
				{
					"generic_size": 3.0,
					"name": "MFSDF_Render_Path_Tracing",
					"node_position": {
						"x": 96.9166717529297,
						"y": -10.8333282470703
					},
					"parameters": {
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"DOF": 0.0,
						"DOFPlane": 0.0,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"MaxDistance": 200.0,
						"MaxRayLoop": 5.0,
						"MaxRefIte": 4.0,
						"Precision": 2.0,
						"Samples": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "\n\nvoid pathtracing_Onb(in vec3 N, inout vec3 T, inout vec3 B){\n    vec3 UpVector=abs(N.z)<0.999?vec3(0,0,1):vec3(1,0,0);\n    T=normalize(cross(UpVector,N));\n    B=cross(N,T);\n}\n\n\nvec2 pathtracing_equirectangularMap(vec3 dir) {\n\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint pathtracing_rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat pathtracing_RandomFloat01(inout uint state){\n    uint r=pathtracing_rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n// SAMPLING START\n\nvec2 pathtracing_randomPointInDisc(inout uint state, float radius){\n\n    float u1=pathtracing_RandomFloat01(state);\n    float u2=pathtracing_RandomFloat01(state);\n    u2=u2*2.0*3.14159265359;\n    float r = radius*sqrt(u1);\n    return r*vec2(sin(u2),cos(u2));\n}\n\nvec3 pathtracing_uniformSampleSphere(float r1,float r2){\n    const float TAU=6.28318530718;\n    float z=1.0-2.0*r1;\n    float r=sqrt(max(0.0,1.0-z*z));\n    float phi=TAU*r2;\n    return vec3(r*cos(phi),r*sin(phi),z);\n}\n\nvec3 pathtracing_cosineSampleHemissphere(inout uint state,vec3 n){\n    float u1=pathtracing_RandomFloat01(state);\n    float u2=pathtracing_RandomFloat01(state);\n    return normalize(n+pathtracing_uniformSampleSphere(u1,u2)); \n}\n\n// Adapted from \"Sampling the GGX Distribution of Visible Normals\",\n// http://jcgt.org/published/0007/04/01/\nvec3 pathtracing_SampleGGXVNDF(inout uint state,vec3 Ve,float alpha_x,float alpha_y){\n\n\n\n    float U1=pathtracing_RandomFloat01(state);\n    float U2=pathtracing_RandomFloat01(state);\n    \n    //transforming the view direction to the hemisphere configuration\n    vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));\n\n    //orthonormal basis\n    vec3 T1;vec3 T2;\n    pathtracing_Onb(Vh,T1,T2);\n\n    //parameterization of the projected area\n    float r = sqrt(U1); \n    float phi = 2.0 * 3.14159265359 * U2;    \n    float t1 = r * cos(phi);\n    float t2 = r * sin(phi);\n    float s = 0.5 * (1.0 + Vh.z);\n    t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;\n\n    //reprojection onto hemisphere\n    vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2))*Vh;\n\n    //transforming the normal back to the ellipsoid configuration\n    vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0f, Nh.z))); \n\n    return Ne;\n}\n\nfloat pathtracing_schlickWeight(float cosTheta) {\n    float m=clamp(1.-cosTheta,0.,1.);\n    float m2=m*m;\n    return m2*m2*m;\n}\n\n// SAMPLING END\n\n",
						"inputs": [
							{
								"default": "vec4(0.0,0.0,0.0,999999999.0)",
								"function": true,
								"label": "MFSDF",
								"name": "mfsdf#",
								"shortdesc": "V4->V4 Multi-Field SDF",
								"type": "v4v4"
							},
							{
								"default": "vec3(0.0)",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec4 mfsdf_$name(vec4 p){ \n  vec4 a=vec4(0.0,0.0,0.0,999999999.0);\n  vec4 b;\n  #for\n  b=$mfsdf#(p);\n  a=(a.w<b.w)?a:b;\n  #end\n  return a;\n}\n\n//tetrahedron normal by PauloFalcao\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.$Precision,-0.$Precision,0.0);\n  float v1=mfsdf_$name(vec4(p+e.xyy,0.0)).w;\n  float v2=mfsdf_$name(vec4(p+e.yyx,0.0)).w;\n  float v3=mfsdf_$name(vec4(p+e.yxy,0.0)).w;\n  float v4=mfsdf_$name(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid raymarch_$name(in vec3 o,in vec3 v,out vec3 p,inout float d){\n  float s;\n  for(int i=0;i<$MaxRayLoop;i++){\n    p=o+v*d;\n    s=mfsdf_$name(vec4(p,0.0)).w;\n    if (abs(s)<0.0$Precision) break;\n    d+=s;\n    if (d>$MaxDistance) break;\n  } \n}\n\nvec3 pathtracing_$name(vec2 uv) {\n\n    // Init random\n    vec2 rndgen=(uv+100.0)*10000.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint($time*100000.0)*uint(26699));\n\n    vec3 o=vec3($CamX,$CamY,$CamZ); \n    vec3 t=vec3($LookAtX,$LookAtY,$LookAtZ);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 c=normalize(t-o);\n\t\t o=o+c*$CamZoom;\n\tfloat planeDistance=length(t-o);\n    vec3 cx=normalize(cross(u,c));\n    vec3 cy=normalize(cross(cx,c));\n\n    vec3 AAColor=vec3(0.0);\n\n    for(int AALoop=0;AALoop<$Samples;AALoop++){\n\t\t\n\t    vec2 xy=uv.xy-0.5;\n\t\n\t    vec3 v=normalize(c*$CamD+cx*xy.x+cy*xy.y);\n\t\t\n\t\t//DOF focal plane\n\t\tfloat fcs=dot(v,c);\n\t\tvec3 focalPoint=o+v*(planeDistance+$DOFPlane)*1.0/fcs;\n\t\tvec2 rdisc=pathtracing_randomPointInDisc(rngState,$DOF);\n\t\to=o+rdisc.x*cx+rdisc.y*cy;\n\t\tv=normalize(focalPoint-o);\n\t\t\n\t    vec3 p;\n\t    float d=0.01;\n\t    vec3 rgb=vec3(1.0);\n\t    vec3 io=o;\n\n\t    int ii=0;\n\t    for(int i=0;i<$MaxRefIte;i++){\n\t    \tii=ii+1;\n\t        raymarch_$name(io,v,p,d);\n\t        \n\t        vec3 n=normal_$name(p);\n\t        \n\t        //View direction to tangent space\n\t        vec3 ot;vec3 ob;pathtracing_Onb(n,ot,ob);\n\t        vec3 vt=vec3(dot(-v,ot),dot(-v,ob),dot(-v,n));\n\t\t\n\t        if (d<$MaxDistance){\t\n\t        //if (length(p-o)<$MaxDistance){\n\t        vec3 obj_Emission=mfsdf_$name(vec4(p,13.0)).rgb;\n\t        \n\t        if ((obj_Emission.x+obj_Emission.y+obj_Emission.z)>0.001){\n\t            rgb=obj_Emission*rgb;\n\t            break;\n\t        } else {\n\t            float s=pathtracing_RandomFloat01(rngState);\n\t\t\t\t\n\t            vec3 obj_BaseColor=mfsdf_$name(vec4(p,1.0)).rgb; // 1 - BaseColor  (r,g,b,sdf)\n\t            float obj_Metallic=clamp(mfsdf_$name(vec4(p,2.0)).x,0.0,1.0);   // 2 - Metallic   (v,0,0,sdf)\n\t            float obj_Specular=clamp(max(mfsdf_$name(vec4(p,4.0)).x,obj_Metallic),0.0,1.0);   // 4 - Specular   (v,0,0,sdf)\n\t            float obj_Roughness=mfsdf_$name(vec4(p,5.0)).x;  // 5 - Roughness  (v,0,0,sdf)\n\n\t            if (s>obj_Specular*obj_Specular*0.5){\n\t                rgb=(obj_BaseColor-obj_BaseColor*obj_Metallic)*rgb;\n\t                v=pathtracing_cosineSampleHemissphere(rngState,n);\n\t            } else {\n\n\t                float r2=obj_Roughness*obj_Roughness*0.5;\n\t                vec3 vndf=pathtracing_SampleGGXVNDF(rngState,vt,r2,r2);\n\t                vec3 nv=reflect(-vt,vndf);\n\t\n\t                //Sample direction back to camera space\n\t                nv=nv.x*ot+nv.y*ob+nv.z*n;\n\n\t                float FH=pathtracing_schlickWeight(dot(n,nv));\n\t                vec3 Cspec0=mix(vec3(obj_Specular*0.25),obj_BaseColor,obj_Metallic);\n\t                vec3 Fs=mix(Cspec0,vec3(1.0),FH);\n\t                rgb=Fs*rgb;\n\t                v=nv;\n\t            }\n\t            io=p;\n\t            d=0.01;\n\t        }\n\t        } else {\n\t        rgb*=$hdri(pathtracing_equirectangularMap(v.xzy)).xyz;\n\t\n\t        break;\n\t        }\n\t    }//for(int i\n\t    if (ii==$MaxRefIte) rgb=vec3(0.0);//did not hit any light source\n\n\t    AAColor+=max(rgb,vec3(0));\n\t\n\t}\n\n\treturn AAColor/floor($Samples);\n\t\n}\n\n",
						"longdesc": "Path tracing ray marching node for MFSDF objects using a environment 360 HDRI image\n\nCode - PauloFalcao\n\n",
						"name": "MFSDF Render Path Tracing",
						"outputs": [
							{
								"rgba": "vec4(pathtracing_$name($uv).xyz,1.0)",
								"shortdesc": "Image output",
								"type": "rgba"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 50.0,
								"label": "MaxDistance",
								"longdesc": "Maximum render distance",
								"max": 500.0,
								"min": 1.0,
								"name": "MaxDistance",
								"step": 0.01,
								"type": "float"
							},
							{
								"default": 2.0,
								"label": "MaxRefIte",
								"longdesc": "Maximum reflection iterations",
								"name": "MaxRefIte",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "18",
										"value": "18"
									},
									{
										"name": "20",
										"value": "20"
									},
									{
										"name": "25",
										"value": "25"
									},
									{
										"name": "30",
										"value": "30"
									},
									{
										"name": "40",
										"value": "40"
									},
									{
										"name": "50",
										"value": "50"
									}
								]
							},
							{
								"default": 2.0,
								"label": "MaxRayLoop",
								"name": "MaxRayLoop",
								"type": "enum",
								"values": [
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "32",
										"value": "32"
									},
									{
										"name": "64",
										"value": "64"
									},
									{
										"name": "128",
										"value": "128"
									},
									{
										"name": "256",
										"value": "256"
									},
									{
										"name": "512",
										"value": "512"
									},
									{
										"name": "1024",
										"value": "1024"
									},
									{
										"name": "2048",
										"value": "2048"
									},
									{
										"name": "4096",
										"value": "4096"
									}
								]
							},
							{
								"default": 6.0,
								"label": "Precision",
								"name": "Precision",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "01"
									},
									{
										"name": "2",
										"value": "005"
									},
									{
										"name": "3",
										"value": "001"
									},
									{
										"name": "4",
										"value": "0005"
									},
									{
										"name": "5",
										"value": "0001"
									},
									{
										"name": "6",
										"value": "00005"
									},
									{
										"name": "7",
										"value": "00001"
									}
								]
							},
							{
								"default": 0.0,
								"label": "Samples",
								"name": "Samples",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "24",
										"value": "24"
									},
									{
										"name": "32",
										"value": "32"
									},
									{
										"name": "48",
										"value": "48"
									},
									{
										"name": "64",
										"value": "64"
									},
									{
										"name": "96",
										"value": "96"
									},
									{
										"name": "128",
										"value": "128"
									}
								]
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "DOF",
								"max": 1.0,
								"min": 0.0,
								"name": "DOF",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "DOFPlane",
								"max": 5.0,
								"min": -5.0,
								"name": "DOFPlane",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Render Path Tracing"
					},
					"type": "shader"
				}
			],
			"shader_model": {
				"global": "",
				"instance": "",
				"longdesc": "",
				"name": ""
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Render/Render Path Tracing Template"
		},
		{
			"connections": [
				{
					"from": "pxflib_8",
					"from_node": "node_pxflib_8",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "iterate_buffer",
					"to_node": "node_iterate_buffer",
					"to_port": 1.0
				},
				{
					"from": "iterate_buffer",
					"from_node": "node_iterate_buffer",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "pxflib_8",
					"to_node": "node_pxflib_8",
					"to_port": 2.0
				},
				{
					"from": "uniform_2",
					"from_node": "node_uniform_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "iterate_buffer",
					"to_node": "node_iterate_buffer",
					"to_port": 0.0
				},
				{
					"from": "MFSDF_Boolean",
					"from_node": "node_MFSDF_Boolean",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_8",
					"to_node": "node_pxflib_8",
					"to_port": 0.0
				},
				{
					"from": "iterate_buffer",
					"from_node": "node_iterate_buffer",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "1983",
					"to_node": "node_1983",
					"to_port": 0.0
				},
				{
					"from": "pxflib_8",
					"from_node": "node_pxflib_8",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "1983_2",
					"to_node": "node_1983_2",
					"to_port": 0.0
				},
				{
					"from": "graph_2",
					"from_node": "node_graph_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Boolean",
					"to_node": "node_MFSDF_Boolean",
					"to_port": 0.0
				},
				{
					"from": "MFSDF_Object_And_Transform",
					"from_node": "node_MFSDF_Object_And_Transform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Boolean",
					"to_node": "node_MFSDF_Boolean",
					"to_port": 1.0
				},
				{
					"from": "MFSDF_Object",
					"from_node": "node_MFSDF_Object",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Boolean",
					"to_node": "node_MFSDF_Boolean",
					"to_port": 2.0
				},
				{
					"from": "sdf3d_sphere",
					"from_node": "node_sdf3d_sphere",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Object",
					"to_node": "node_MFSDF_Object",
					"to_port": 0.0
				}
			],
			"display_name": "Render Path Tracing Realtime",
			"icon_data": "",
			"name": "",
			"nodes": [
				{
					"name": "iterate_buffer",
					"node_position": {
						"x": 37.5,
						"y": -235.125
					},
					"parameters": {
						"autostop": false,
						"f32": true,
						"filter": false,
						"iterations": 999999999.0,
						"mipmap": false,
						"shrink": false,
						"size": 9.0
					},
					"seed": 29168.0,
					"seed_locked": true,
					"type": "iterate_buffer"
				},
				{
					"generic_size": 2.0,
					"name": "MFSDF_Boolean",
					"node_position": {
						"x": -372.5,
						"y": 84.875
					},
					"parameters": {
						"op1": 0.0,
						"op2": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "vec4 $(name_uv)_sout=$in($uv);\n#for\n$(name_uv)_sout=$op#($(name_uv)_sout, $in#($uv));\n#end",
						"global": "vec4 mfsdf_boolean_union(vec4 a, vec4 b) {\n\treturn vec4((a.w<b.w)?vec4(a):vec4(b));\n}\nvec4 mfsdf_boolean_sub(vec4 a, vec4 b) {\n\treturn vec4((-a.w>b.w)?vec4(a.xyz,-a.w):vec4(b));\n}\nvec4 mfsdf_boolean_inter(vec4 a, vec4 b) {\n\treturn vec4((a.w>b.w)?vec4(a):vec4(b));\n}",
						"inputs": [
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 MFSDF Base",
								"type": "v4v4"
							},
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in#",
								"shortdesc": "V4->V4 MFSDF #",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Performs a boolean operation (union, intersection or difference) between two shapes\n\nCode - PauloFalcao",
						"name": "MFSDF Boolean",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF",
								"type": "v4v4",
								"v4v4": "$(name_uv)_sout"
							}
						],
						"parameters": [
							{
								"default": 2.0,
								"label": "2:",
								"name": "op#",
								"type": "enum",
								"values": [
									{
										"name": "Union",
										"value": "mfsdf_boolean_union"
									},
									{
										"name": "Subtraction",
										"value": "mfsdf_boolean_sub"
									},
									{
										"name": "Intersection",
										"value": "mfsdf_boolean_inter"
									}
								]
							}
						],
						"shortdesc": "MFSDF Boolean"
					},
					"type": "shader"
				},
				{
					"name": "comment_line",
					"node_position": {
						"x": 527.5,
						"y": -235.125
					},
					"parameters": {

					},
					"seed_int": 0.0,
					"text": "TAARender=false",
					"type": "comment_line"
				},
				{
					"name": "comment_line_2",
					"node_position": {
						"x": 517.5,
						"y": -5.125
					},
					"parameters": {

					},
					"seed_int": 0.0,
					"text": "TAARender=true",
					"type": "comment_line"
				},
				{
					"name": "1983",
					"node_position": {
						"x": 527.5,
						"y": -205.125
					},
					"parameters": {
						"gamma": 2.2
					},
					"seed": -50131.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "buf",
								"type": "rgba"
							}
						],
						"instance": "",
						"name": "Realtime Output",
						"outputs": [
							{
								"rgba": "vec4(pow($buf($uv).xyz/$buf($uv).w,vec3(1.0/$gamma)),1.0)",
								"type": "rgba"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 2.2,
								"label": "Gamma",
								"max": 5.0,
								"min": 0.0,
								"name": "gamma",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"connections": [
						{
							"from": "tex3d_pattern_2",
							"from_port": 0.0,
							"to": "tex3d_colorize_3",
							"to_port": 0.0
						},
						{
							"from": "tex3d_colorize_3",
							"from_port": 0.0,
							"to": "pxflib_4",
							"to_port": 0.0
						},
						{
							"from": "pxflib_4",
							"from_port": 0.0,
							"to": "gen_outputs",
							"to_port": 0.0
						},
						{
							"from": "sdf3d_box",
							"from_port": 0.0,
							"to": "pxflib_4",
							"to_port": 5.0
						}
					],
					"label": "Checkerboard",
					"longdesc": "",
					"name": "graph_2",
					"node_position": {
						"x": -772.5,
						"y": -125.125
					},
					"nodes": [
						{
							"name": "sdf3d_box",
							"node_position": {
								"x": -1041.34008789062,
								"y": -203.449951171875
							},
							"parameters": {
								"r": 0.0,
								"sx": 6.0,
								"sy": 0.5,
								"sz": 6.0
							},
							"seed_int": 0.0,
							"type": "sdf3d_box"
						},
						{
							"name": "tex3d_pattern_2",
							"node_position": {
								"x": -1106.34008789062,
								"y": -381.449951171875
							},
							"parameters": {
								"mix": 4.0,
								"x_scale": "$checkersize",
								"x_wave": 2.0,
								"y_scale": 0.0,
								"y_wave": 2.0,
								"z_scale": "$checkersize",
								"z_wave": 2.0
							},
							"seed_int": 0.0,
							"type": "tex3d_pattern"
						},
						{
							"name": "gen_inputs",
							"node_position": {
								"x": -1341.34008789062,
								"y": -277.949951171875
							},
							"parameters": {

							},
							"ports": [],
							"seed_int": 0.0,
							"type": "ios"
						},
						{
							"name": "gen_outputs",
							"node_position": {
								"x": -171.340026855469,
								"y": -302.949951171875
							},
							"parameters": {

							},
							"ports": [
								{
									"group_size": 0.0,
									"name": "port0",
									"type": "v4v4"
								}
							],
							"seed_int": 0.0,
							"type": "ios"
						},
						{
							"name": "gen_parameters",
							"node_position": {
								"x": -1055.59008789062,
								"y": -653.449951171875
							},
							"parameters": {
								"checkersize": 2.0,
								"param0": 6.0,
								"param1": -1.0,
								"param2": {
									"interpolation": 0.0,
									"points": [
										{
											"a": 1.0,
											"b": 0.859375,
											"g": 0.859375,
											"pos": 0.0,
											"r": 0.859375
										},
										{
											"a": 1.0,
											"b": 0.859375,
											"g": 0.859375,
											"pos": 0.99999,
											"r": 0.859375
										},
										{
											"a": 1.0,
											"b": 0.13671875,
											"g": 0.13671875,
											"pos": 1.00001,
											"r": 0.13671875
										}
									],
									"type": "Gradient"
								},
								"param3": 0.0,
								"param4": 0.5,
								"param5": 0.0
							},
							"seed_int": 0.0,
							"type": "remote",
							"widgets": [
								{
									"label": "Board Size",
									"linked_widgets": [
										{
											"node": "sdf3d_box",
											"widget": "sx"
										},
										{
											"node": "sdf3d_box",
											"widget": "sz"
										}
									],
									"name": "param0",
									"type": "linked_control"
								},
								{
									"default": 1.0,
									"label": "Checker Size",
									"max": 20.0,
									"min": 0.0,
									"name": "checkersize",
									"step": 0.001,
									"type": "named_parameter"
								},
								{
									"label": "Position",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "TranlateY"
										}
									],
									"name": "param1",
									"type": "linked_control"
								},
								{
									"label": "Color",
									"linked_widgets": [
										{
											"node": "tex3d_colorize_3",
											"widget": "g"
										}
									],
									"name": "param2",
									"type": "linked_control"
								},
								{
									"label": "Metallic",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Metallic"
										}
									],
									"name": "param3",
									"type": "linked_control"
								},
								{
									"label": "Specular",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Specular"
										}
									],
									"name": "param4",
									"type": "linked_control"
								},
								{
									"label": "Roughness",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Roughness"
										}
									],
									"name": "param5",
									"type": "linked_control"
								}
							]
						},
						{
							"name": "tex3d_colorize_3",
							"node_position": {
								"x": -850.0,
								"y": -377.021362304688
							},
							"parameters": {
								"g": {
									"interpolation": 0.0,
									"points": [
										{
											"a": 1.0,
											"b": 0.859375,
											"g": 0.859375,
											"pos": 0.0,
											"r": 0.859375
										},
										{
											"a": 1.0,
											"b": 0.859375,
											"g": 0.859375,
											"pos": 0.99999,
											"r": 0.859375
										},
										{
											"a": 1.0,
											"b": 0.13671875,
											"g": 0.13671875,
											"pos": 1.00001,
											"r": 0.13671875
										}
									],
									"type": "Gradient"
								}
							},
							"seed_int": 0.0,
							"type": "tex3d_colorize"
						},
						{
							"name": "pxflib_4",
							"node_position": {
								"x": -591.953735351562,
								"y": -359.458862304688
							},
							"parameters": {
								"BaseColor": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0,
									"type": "Color"
								},
								"Emission": 0.0,
								"Metallic": 0.0,
								"RotateX": 0.0,
								"RotateY": 0.0,
								"RotateZ": 0.0,
								"Roughness": 0.0,
								"Specular": 0.5,
								"TranlateX": 0.0,
								"TranlateY": -1.0,
								"TranlateZ": 0.0,
								"scale": 1.0
							},
							"seed": -5947.0,
							"seed_locked": true,
							"shader_model": {
								"code": "",
								"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
								"inputs": [
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "BaseColor",
										"name": "BaseColor_tex3d",
										"shortdesc": "TEX3D",
										"type": "tex3d"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Metallic",
										"name": "Metallic_tex3d",
										"shortdesc": "Grayscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Specular",
										"name": "Specular_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Roughness",
										"name": "Roughness_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "Emission",
										"name": "Emission_tex3d",
										"type": "tex3d"
									},
									{
										"default": "length($uv)-0.4 ",
										"function": true,
										"label": "Object",
										"name": "sdf3d",
										"shortdesc": "SDF3D",
										"type": "sdf3d"
									}
								],
								"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
								"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
								"name": "MFSDF Object",
								"outputs": [
									{
										"shortdesc": "V4->V4 MFSDF ",
										"type": "v4v4",
										"v4v4": "PBRObjectMaker_$name($uv)"
									}
								],
								"parameters": [
									{
										"default": {
											"a": 1.0,
											"b": 1.0,
											"g": 1.0,
											"r": 1.0
										},
										"label": "",
										"name": "BaseColor",
										"type": "color"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "",
										"max": 1.0,
										"min": 0.0,
										"name": "Metallic",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.5,
										"label": "",
										"max": 1.0,
										"min": 0.0,
										"name": "Specular",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "",
										"max": 1.0,
										"min": 0.0,
										"name": "Roughness",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "",
										"longdesc": "Emission Scale",
										"max": 500.0,
										"min": 0.0,
										"name": "Emission",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1.0,
										"label": "S",
										"longdesc": "Object scale",
										"max": 4.0,
										"min": 0.0,
										"name": "scale",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "X",
										"max": 10.0,
										"min": -10.0,
										"name": "TranlateX",
										"shortdesc": "Translate X",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Y",
										"max": 10.0,
										"min": -10.0,
										"name": "TranlateY",
										"shortdesc": "Translate Y",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Z",
										"max": 10.0,
										"min": -10.0,
										"name": "TranlateZ",
										"shortdesc": "Translate Z",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Rx",
										"max": 180.0,
										"min": -180.0,
										"name": "RotateX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Ry",
										"max": 180.0,
										"min": -180.0,
										"name": "RotateY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.0,
										"label": "Rz",
										"max": 180.0,
										"min": -180.0,
										"name": "RotateZ",
										"step": 0.001,
										"type": "float"
									}
								],
								"shortdesc": "MFSDF Object"
							},
							"type": "shader"
						}
					],
					"parameters": {
						"checkersize": 2.0,
						"param0": 6.0,
						"param1": -1.0,
						"param2": {
							"interpolation": 0.0,
							"points": [
								{
									"a": 1.0,
									"b": 0.859375,
									"g": 0.859375,
									"pos": 0.0,
									"r": 0.859375
								},
								{
									"a": 1.0,
									"b": 0.859375,
									"g": 0.859375,
									"pos": 0.99999,
									"r": 0.859375
								},
								{
									"a": 1.0,
									"b": 0.13671875,
									"g": 0.13671875,
									"pos": 1.00001,
									"r": 0.13671875
								}
							],
							"type": "Gradient"
						},
						"param3": 0.0,
						"param4": 0.5,
						"param5": 0.0
					},
					"seed_int": 0.0,
					"shortdesc": "",
					"type": "graph"
				},
				{
					"name": "uniform_2",
					"node_position": {
						"x": -112.5,
						"y": -235.125
					},
					"parameters": {
						"color": {
							"a": 1.0,
							"b": 0.6171875,
							"g": 0.6171875,
							"r": 0.6171875,
							"type": "Color"
						}
					},
					"seed_int": 0.0,
					"type": "uniform"
				},
				{
					"name": "MFSDF_Object_And_Transform",
					"node_position": {
						"x": -492.5,
						"y": -215.125
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 16.0,
						"Metallic": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 0.5,
						"TranlateX": 0.0,
						"TranlateY": 2.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object And Transform",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"name": "MFSDF_Object",
					"node_position": {
						"x": -672.5,
						"y": 144.875
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 1.0,
							"type": "Color"
						},
						"Metallic": 0.0,
						"Roughness": 0.0,
						"Specular": 0.5
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "\n",
						"inputs": [
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							}
						],
						"instance": "vec4 PBRObjectMaker_simple_$name(vec4 uv){\n\tfloat sdf=$sdf3d(uv.xyz);\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4(0.0,0.0,0.0,sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_simple_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "2:",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "3:",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "4:",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "5:",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Simple"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_sphere",
					"node_position": {
						"x": -912.5,
						"y": 154.875
					},
					"parameters": {
						"r": 0.4
					},
					"seed_int": 0.0,
					"type": "sdf3d_sphere"
				},
				{
					"name": "1983_2",
					"node_position": {
						"x": 517.5,
						"y": 24.875
					},
					"parameters": {

					},
					"seed": -50131.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "buf",
								"type": "rgba"
							}
						],
						"instance": "",
						"name": "TAA Render Output",
						"outputs": [
							{
								"rgba": "vec4($buf($uv).xyz,1.0)",
								"type": "rgba"
							}
						],
						"parameters": []
					},
					"type": "shader"
				},
				{
					"name": "pxflib_8",
					"node_position": {
						"x": -22.5,
						"y": 14.875
					},
					"parameters": {
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"DOF": 0.0,
						"DOFPlane": 0.0,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"MaxDistance": 200.0,
						"MaxRayLoop": 5.0,
						"MaxRefIte": 4.0,
						"Precision": 2.0,
						"ReFrameX": 1.0,
						"ReFrameY": 1.0,
						"Size": 9.0,
						"TAARender": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "\n\nvoid pathtracing_Onb(in vec3 N, inout vec3 T, inout vec3 B){\n    vec3 UpVector=abs(N.z)<0.999?vec3(0,0,1):vec3(1,0,0);\n    T=normalize(cross(UpVector,N));\n    B=cross(N,T);\n}\n\n\nvec2 pathtracing_equirectangularMap(vec3 dir) {\n    const float PI=3.14159265359;\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint pathtracing_rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat pathtracing_RandomFloat01(inout uint state){\n    uint r=pathtracing_rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n// SAMPLING START\n\nvec2 pathtracing_randomPointInDisc(inout uint state, float radius){\n    const float PI=3.14159265359;\n    float u1=pathtracing_RandomFloat01(state);\n    float u2=pathtracing_RandomFloat01(state);\n    u2=u2*2.0*PI;\n    float r = radius*sqrt(u1);\n    return r*vec2(sin(u2),cos(u2));\n}\n\nvec3 pathtracing_uniformSampleSphere(float r1,float r2){\n    const float TAU=6.28318530718;\n    float z=1.0-2.0*r1;\n    float r=sqrt(max(0.0,1.0-z*z));\n    float phi=TAU*r2;\n    return vec3(r*cos(phi),r*sin(phi),z);\n}\n\nvec3 pathtracing_cosineSampleHemissphere(inout uint state,vec3 n){\n    float u1=pathtracing_RandomFloat01(state);\n    float u2=pathtracing_RandomFloat01(state);\n    return normalize(n+pathtracing_uniformSampleSphere(u1,u2)); \n}\n\n// Adapted from \"Sampling the GGX Distribution of Visible Normals\",\n// http://jcgt.org/published/0007/04/01/\nvec3 pathtracing_SampleGGXVNDF(inout uint state,vec3 Ve,float alpha_x,float alpha_y){\n\n    const float PI=3.14159265359;\n\n    float U1=pathtracing_RandomFloat01(state);\n    float U2=pathtracing_RandomFloat01(state);\n    \n    //transforming the view direction to the hemisphere configuration\n    vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));\n\n    //orthonormal basis\n    vec3 T1;vec3 T2;\n    pathtracing_Onb(Vh,T1,T2);\n\n    //parameterization of the projected area\n    float r = sqrt(U1); \n    float phi = 2.0 * PI * U2;    \n    float t1 = r * cos(phi);\n    float t2 = r * sin(phi);\n    float s = 0.5 * (1.0 + Vh.z);\n    t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;\n\n    //reprojection onto hemisphere\n    vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2))*Vh;\n\n    //transforming the normal back to the ellipsoid configuration\n    vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0f, Nh.z))); \n\n    return Ne;\n}\n\nfloat pathtracing_schlickWeight(float cosTheta) {\n    float m=clamp(1.-cosTheta,0.,1.);\n    float m2=m*m;\n    return m2*m2*m;\n}\n\n// SAMPLING END\n\n",
						"inputs": [
							{
								"default": "vec4(1.0,0.0,0.0,length($uv)-0.4)",
								"function": true,
								"label": "MFSDF",
								"name": "mfsdf",
								"shortdesc": "V4->V4 Multi-Field SDF",
								"type": "v4v4"
							},
							{
								"default": "vec3(0.0)",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							},
							{
								"default": "vec4(0.0)",
								"label": "Iterate Buffer Out",
								"name": "input",
								"type": "rgba"
							}
						],
						"instance": "\n//tetrahedron normal by PauloFalcao\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.$Precision,-0.$Precision,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid raymarch_$name(in vec3 o,in vec3 v,out vec3 p,inout float d){\n  float s;\n  for(int i=0;i<$MaxRayLoop;i++){\n    p=o+v*d;\n    s=$mfsdf(vec4(p,0.0)).w;\n    if (abs(s)<0.0$Precision) break;\n    d+=s;\n    if (d>$MaxDistance) break;\n  } \n}\n\nvec3 pathtracing_$name(vec2 uv) {\n\t\n    vec2 dxy = vec2(1.0)/$Size;\n\n    // Init random\n    vec2 rndgen=(uv+100.0)*10000.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint($TAARender*100000.0));\n\n    vec3 o=vec3($CamX,$CamY,$CamZ); \n    vec3 t=vec3($LookAtX,$LookAtY,$LookAtZ);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 c=normalize(t-o);\n\t\t o=o+c*$CamZoom;\n\tfloat planeDistance=length(t-o);\n    vec3 cx=normalize(cross(u,c));\n    vec3 cy=normalize(cross(cx,c));\n\n    vec3 rgb=vec3(1.0);\n\t\n\tif (($ReFrameX/2.0>abs(uv.x-0.5))&&($ReFrameY/2.0>abs(uv.y-0.5))){\n\t\tfloat ReFrame=min($ReFrameX,$ReFrameY);\n\t\tuv.x=(uv.x-0.5)/ReFrame+0.5;\n\t\tuv.y=(uv.y-0.5)/ReFrame+0.5;\n\t\tdxy/=ReFrame;\n\n\t    vec2 xy=uv.xy;\n\t\txy+=(vec2(pathtracing_RandomFloat01(rngState),pathtracing_RandomFloat01(rngState))-0.5)*dxy-0.5;\n\n\n\t    vec3 v=normalize(c*$CamD+cx*xy.x+cy*xy.y);\n\t\t\n\t\t//DOF focal plane\n\t\tfloat fcs=dot(v,c);\n\t\tvec3 focalPoint=o+v*(planeDistance+$DOFPlane)*1.0/fcs;\n\t\tvec2 rdisc=pathtracing_randomPointInDisc(rngState,$DOF);\n\t\to=o+rdisc.x*cx+rdisc.y*cy;\n\t\tv=normalize(focalPoint-o);\n\t\t\n\t    vec3 p;\n\t    float d=0.01;\n\n\t    vec3 io=o;\n\n\t    int ii=0;\n\t    for(int i=0;i<$MaxRefIte;i++){\n\t    \tii=ii+1;\n\t        raymarch_$name(io,v,p,d);\n\t        \n\t        vec3 n=normal_$name(p);\n\t        \n\t        //View direction to tangent space\n\t        vec3 ot;vec3 ob;pathtracing_Onb(n,ot,ob);\n\t        vec3 vt=vec3(dot(-v,ot),dot(-v,ob),dot(-v,n));\n\t\t\n\t        if (d<$MaxDistance){\t\n\t        //if (length(p-o)<$MaxDistance){\n\t        vec3 obj_Emission=$mfsdf(vec4(p,13.0)).rgb;\n\t        \n\t        if ((obj_Emission.x+obj_Emission.y+obj_Emission.z)>0.001){\n\t            rgb=obj_Emission*rgb;\n\t            break;\n\t        } else {\n\t            float s=pathtracing_RandomFloat01(rngState);\n\t\t\t\t\n\t            vec3 obj_BaseColor=$mfsdf(vec4(p,1.0)).rgb; // 1 - BaseColor  (r,g,b,sdf)\n\t            float obj_Metallic=clamp($mfsdf(vec4(p,2.0)).x,0.0,1.0);   // 2 - Metallic   (v,0,0,sdf)\n\t            float obj_Specular=clamp(max($mfsdf(vec4(p,4.0)).x,obj_Metallic),0.0,1.0);   // 4 - Specular   (v,0,0,sdf)\n\t            float obj_Roughness=$mfsdf(vec4(p,5.0)).x;  // 5 - Roughness  (v,0,0,sdf)\n\n\t            if (s>obj_Specular*obj_Specular*0.5){\n\t                rgb=(obj_BaseColor-obj_BaseColor*obj_Metallic)*rgb;\n\t                v=pathtracing_cosineSampleHemissphere(rngState,n);\n\t            } else {\n\n\t                float r2=obj_Roughness*obj_Roughness*0.5;\n\t                vec3 vndf=pathtracing_SampleGGXVNDF(rngState,vt,r2,r2);\n\t                vec3 nv=reflect(-vt,vndf);\n\t\n\t                //Sample direction back to camera space\n\t                nv=nv.x*ot+nv.y*ob+nv.z*n;\n\n\t                float FH=pathtracing_schlickWeight(dot(n,nv));\n\t                vec3 Cspec0=mix(vec3(obj_Specular*0.25),obj_BaseColor,obj_Metallic);\n\t                vec3 Fs=mix(Cspec0,vec3(1.0),FH);\n\t                rgb=Fs*rgb;\n\t                v=nv;\n\t            }\n\t            io=p;\n\t            d=0.01;\n\t        }\n\t        } else {\n\t        rgb*=$hdri(pathtracing_equirectangularMap(v.xzy)).xyz;\n\t\n\t        break;\n\t        }\n\t    }//for(int i\n\t    if (ii==$MaxRefIte) rgb=vec3(0.0);//did not hit any light source\n\t\n\t}\n\n\treturn rgb;\n}\n\n\nvec3 pathtracing_taa_$name(vec2 uv) {\n\n    // Init random\n    vec2 rndgen=(uv+100.0)*10000.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint($TAARender*100000.0)*uint(26699));\n\n    vec3 o=vec3($CamX,$CamY,$CamZ); \n    vec3 t=vec3($LookAtX,$LookAtY,$LookAtZ);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 c=normalize(t-o);\n\t\t o=o+c*$CamZoom;\n\tfloat planeDistance=length(t-o);\n    vec3 cx=normalize(cross(u,c));\n    vec3 cy=normalize(cross(cx,c));\n\n    vec3 rgb=vec3(1.0);\n\t\n    vec2 xy=uv.xy-0.5;\n\n    vec3 v=normalize(c*$CamD+cx*xy.x+cy*xy.y);\n\t\n\t//DOF focal plane\n\tfloat fcs=dot(v,c);\n\tvec3 focalPoint=o+v*(planeDistance+$DOFPlane)*1.0/fcs;\n\tvec2 rdisc=pathtracing_randomPointInDisc(rngState,$DOF);\n\to=o+rdisc.x*cx+rdisc.y*cy;\n\tv=normalize(focalPoint-o);\n\t\n    vec3 p;\n    float d=0.01;\n\n    vec3 io=o;\n\n    int ii=0;\n    for(int i=0;i<$MaxRefIte;i++){\n    \tii=ii+1;\n        raymarch_$name(io,v,p,d);\n        \n        vec3 n=normal_$name(p);\n        \n        //View direction to tangent space\n        vec3 ot;vec3 ob;pathtracing_Onb(n,ot,ob);\n        vec3 vt=vec3(dot(-v,ot),dot(-v,ob),dot(-v,n));\n\t\n        if (d<$MaxDistance){\t\n        //if (length(p-o)<$MaxDistance){\n        vec3 obj_Emission=$mfsdf(vec4(p,13.0)).rgb;\n        \n        if ((obj_Emission.x+obj_Emission.y+obj_Emission.z)>0.001){\n            rgb=obj_Emission*rgb;\n            break;\n        } else {\n            float s=pathtracing_RandomFloat01(rngState);\n\t\t\t\n            vec3 obj_BaseColor=$mfsdf(vec4(p,1.0)).rgb; // 1 - BaseColor  (r,g,b,sdf)\n            float obj_Metallic=clamp($mfsdf(vec4(p,2.0)).x,0.0,1.0);   // 2 - Metallic   (v,0,0,sdf)\n            float obj_Specular=clamp(max($mfsdf(vec4(p,4.0)).x,obj_Metallic),0.0,1.0);   // 4 - Specular   (v,0,0,sdf)\n            float obj_Roughness=$mfsdf(vec4(p,5.0)).x;  // 5 - Roughness  (v,0,0,sdf)\n\n            if (s>obj_Specular*obj_Specular*0.5){\n                rgb=(obj_BaseColor-obj_BaseColor*obj_Metallic)*rgb;\n                v=pathtracing_cosineSampleHemissphere(rngState,n);\n            } else {\n\n                float r2=obj_Roughness*obj_Roughness*0.5;\n                vec3 vndf=pathtracing_SampleGGXVNDF(rngState,vt,r2,r2);\n                vec3 nv=reflect(-vt,vndf);\n\n                //Sample direction back to camera space\n                nv=nv.x*ot+nv.y*ob+nv.z*n;\n\n                float FH=pathtracing_schlickWeight(dot(n,nv));\n                vec3 Cspec0=mix(vec3(obj_Specular*0.25),obj_BaseColor,obj_Metallic);\n                vec3 Fs=mix(Cspec0,vec3(1.0),FH);\n                rgb=Fs*rgb;\n                v=nv;\n            }\n            io=p;\n            d=0.01;\n        }\n        } else {\n        rgb*=$hdri(pathtracing_equirectangularMap(v.xzy)).xyz;\n\n        break;\n        }\n    }//for(int i\n    if (ii==$MaxRefIte) rgb=vec3(0.0);//did not hit any light source\n\n\treturn rgb;\n\t\n}\n\n",
						"longdesc": "Type - MFSDF Render\nCode - PauloFalcao\n\nPath tracing ray marching node for MFSDF objects using a environment 360 HDRI image\n\n",
						"name": "MFSDF Render Path Tracing Buffer",
						"outputs": [
							{
								"rgba": "vec4(pathtracing_$name($uv).xyz,1.0)+$input($uv)",
								"shortdesc": "Iterate Buffer Output",
								"type": "rgba"
							},
							{
								"rgba": "vec4(pathtracing_taa_$name($uv).xyz,1.0)",
								"shortdesc": "TAA Render Output",
								"type": "rgba"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 50.0,
								"label": "MaxDistance",
								"longdesc": "Maximum render distance",
								"max": 500.0,
								"min": 1.0,
								"name": "MaxDistance",
								"step": 0.01,
								"type": "float"
							},
							{
								"default": 2.0,
								"label": "MaxRefIte",
								"longdesc": "Maximum reflection iterations",
								"name": "MaxRefIte",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "18",
										"value": "18"
									},
									{
										"name": "20",
										"value": "20"
									},
									{
										"name": "25",
										"value": "25"
									},
									{
										"name": "30",
										"value": "30"
									},
									{
										"name": "40",
										"value": "40"
									},
									{
										"name": "50",
										"value": "50"
									}
								]
							},
							{
								"default": 2.0,
								"label": "MaxRayLoop",
								"name": "MaxRayLoop",
								"type": "enum",
								"values": [
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "32",
										"value": "32"
									},
									{
										"name": "64",
										"value": "64"
									},
									{
										"name": "128",
										"value": "128"
									},
									{
										"name": "256",
										"value": "256"
									},
									{
										"name": "512",
										"value": "512"
									},
									{
										"name": "1024",
										"value": "1024"
									},
									{
										"name": "2048",
										"value": "2048"
									},
									{
										"name": "4096",
										"value": "4096"
									}
								]
							},
							{
								"default": 6.0,
								"label": "Precision",
								"name": "Precision",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "01"
									},
									{
										"name": "2",
										"value": "005"
									},
									{
										"name": "3",
										"value": "001"
									},
									{
										"name": "4",
										"value": "0005"
									},
									{
										"name": "5",
										"value": "0001"
									},
									{
										"name": "6",
										"value": "00005"
									},
									{
										"name": "7",
										"value": "00001"
									}
								]
							},
							{
								"default": 10.0,
								"first": 0.0,
								"label": "BufferSize",
								"last": 13.0,
								"name": "Size",
								"type": "size"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "ReFrameX",
								"max": 1.0,
								"min": 0.0,
								"name": "ReFrameX",
								"step": 0.01,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "ReFrameY",
								"max": 1.0,
								"min": 0.0,
								"name": "ReFrameY",
								"step": 0.01,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "DOF",
								"max": 1.0,
								"min": 0.0,
								"name": "DOF",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "DOFPlane",
								"max": 5.0,
								"min": -5.0,
								"name": "DOFPlane",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "TAARender",
								"name": "TAARender",
								"type": "enum",
								"values": [
									{
										"name": "true",
										"value": "$time"
									},
									{
										"name": "false",
										"value": "$input.iteration"
									}
								]
							}
						],
						"shortdesc": "MFSDF Render Path Tracing"
					},
					"type": "shader"
				}
			],
			"shader_model": {
				"global": "",
				"instance": "",
				"longdesc": "",
				"name": ""
			},
			"shortdesc": "",
			"tree_item": "PF/MFSDF/Render/Render Path Tracing Realtime"
		},
		{
			"display_name": "Neural Fox",
			"icon_data": "",
			"name": "SDF_Neural_Fox",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//code from https://www.shadertoy.com/view/3lyfzw\n//Made with this wonderful tutorial https://www.youtube.com/watch?v=8pwXpfi-0bU\n//Using Ida Faber model - CC Attribution\n//https://sketchfab.com/3d-models/stylized-fox-92c2a35e54664974b8564c674cc712da\n\nfloat paulofalcao_sdf3d_generator_neural_fox(vec3 p) {\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n\tp.xyz=vec3(-p.x,-p.z,p.y);\n    p.y=-sqrt(p.y*p.y+0.001)+0.01;\n    //neural networks can be really compact... when they want to be\n\tvec4 f0_0=sin(p.y*vec4(1.627,-3.273,.822,-1.929)+p.z*vec4(4.114,.716,-3.074,2.185)+p.x*vec4(2.235,.937,3.908,-1.072)+vec4(6.915,3.461,-1.359,1.899));\n\tvec4 f0_1=sin(p.y*vec4(-.001,-3.255,1.831,.966)+p.z*vec4(-3.328,.890,1.475,-.323)+p.x*vec4(.290,-1.169,-4.054,3.146)+vec4(-4.517,-2.674,6.099,.070));\n\tvec4 f0_2=sin(p.y*vec4(3.113,-1.089,2.397,-.459)+p.z*vec4(-4.309,1.202,1.134,2.052)+p.x*vec4(-1.018,.550,-3.955,4.027)+vec4(-7.136,2.863,-1.640,-5.590));\n\tvec4 f0_3=sin(p.y*vec4(.343,1.509,4.401,-1.962)+p.z*vec4(1.198,1.852,2.207,-4.658)+p.x*vec4(2.067,.056,-.156,-.631)+vec4(-4.943,.051,7.095,3.128));\n\tvec4 f1_0=sin(mat4(vec4(.234,.264,-.181,.015),vec4(1.018,-.023,.417,-.338),vec4(.527,-.030,.056,-.005),vec4(-.843,.446,-.139,-.079))*f0_0+\n    \tmat4(vec4(-.512,.346,-.264,.380),vec4(.135,.249,.118,-.188),vec4(-.110,.210,.101,-.157),vec4(.126,.259,.262,.446))*f0_1+\n    \tmat4(vec4(.595,.318,.262,-.279),vec4(.802,.891,-.050,-.347),vec4(.131,-.369,.420,-.025),vec4(-.217,-.197,.152,.931))*f0_2+\n    \tmat4(vec4(.522,.906,-.530,.246),vec4(.685,.684,-.106,.175),vec4(.437,.507,-.459,.127),vec4(.342,-.398,-.243,.008))*f0_3+\n    \tvec4(.376,-.814,1.500,-1.007))/1.0+f0_0;\n\tvec4 f1_1=sin(mat4(vec4(.124,.489,-.159,-.094),vec4(.099,.611,-.257,-.614),vec4(-.108,.309,-.121,-.389),vec4(.049,-.606,.030,-.723))*f0_0+\n    \tmat4(vec4(.511,.456,-.645,-1.008),vec4(.009,-.461,-.198,-.754),vec4(.978,.413,-.641,-.412),vec4(-1.068,-.308,.291,-.170))*f0_1+\n    \tmat4(vec4(.428,-.220,-.163,-.356),vec4(.744,.548,.221,.563),vec4(.242,-.214,-.224,-.567),vec4(.391,.045,-.061,-.186))*f0_2+\n    \tmat4(vec4(-.001,-.252,.747,-.435),vec4(.539,.003,-.305,-.643),vec4(-.261,.164,-.336,.295),vec4(.383,-.395,-.136,-.008))*f0_3+\n    \tvec4(-1.007,-1.304,1.076,1.194))/1.0+f0_1;\n\tvec4 f1_2=sin(mat4(vec4(-.502,.308,-.174,.023),vec4(-.560,-.534,.624,-.555),vec4(.309,.630,-.122,.310),vec4(.368,.878,-.206,-.350))*f0_0+\n    \tmat4(vec4(.684,.334,-.702,.420),vec4(-.698,.960,-.053,-.676),vec4(-.272,.365,-.074,.407),vec4(-.375,.202,.532,-.207))*f0_1+\n    \tmat4(vec4(-.116,-.269,.153,-.453),vec4(-.530,.488,-.724,.065),vec4(.405,.667,-.642,.043),vec4(-.103,.430,-.562,.346))*f0_2+\n    \tmat4(vec4(.472,-.026,-.433,.070),vec4(-.210,-.057,-.253,.310),vec4(-.344,.047,.386,.552),vec4(.246,-.111,.331,.350))*f0_3+\n    \tvec4(-.725,-1.197,.825,-3.455))/1.0+f0_2;\n\tvec4 f1_3=sin(mat4(vec4(.027,.173,.253,-.822),vec4(-.478,.458,.101,.045),vec4(.025,.248,.759,.184),vec4(-.317,-.014,-.077,-.353))*f0_0+\n    \tmat4(vec4(-.283,-.201,.219,-.248),vec4(-.571,-.458,.401,-.226),vec4(.432,.245,-.160,-.065),vec4(-.421,-1.315,-.569,-.520))*f0_1+\n    \tmat4(vec4(.313,-.258,.291,-.284),vec4(-.732,.295,-.087,-.441),vec4(.836,-.701,.566,.889),vec4(-.116,-.252,-.542,-.396))*f0_2+\n    \tmat4(vec4(-.381,-.907,.516,.431),vec4(-.273,.257,.027,-.179),vec4(-.214,.077,-.130,-.282),vec4(-.368,-.270,.618,-.041))*f0_3+\n    \tvec4(2.580,-.950,1.416,.227))/1.0+f0_3;\n\tvec4 f2_0=sin(mat4(vec4(.288,.277,.179,.290),vec4(-.968,-1.492,.495,-.421),vec4(.153,-.177,.580,-.388),vec4(.971,-.335,.007,.032))*f1_0+\n\t    mat4(vec4(-.194,-.137,.202,.157),vec4(-.160,1.025,-.550,-.053),vec4(.485,.030,-.537,.065),vec4(.021,-.384,-.109,-.452))*f1_1+\n\t    mat4(vec4(-.748,.241,.386,-.441),vec4(-.620,-.869,.559,.681),vec4(.367,.256,-.459,-1.047),vec4(.260,.241,-.793,.494))*f1_2+\n\t    mat4(vec4(-.958,-.093,-.110,-.074),vec4(-.260,-.856,.521,.613),vec4(-.562,.079,.238,.056),vec4(-.413,-1.011,.118,-.104))*f1_3+\n\t    vec4(.980,1.564,-2.935,-.589))/1.4+f1_0;\n\tvec4 f2_1=sin(mat4(vec4(.181,.166,-.082,.469),vec4(.474,.703,.969,.559),vec4(.998,-.016,.193,-.363),vec4(.452,.152,.543,-.394))*f1_0+\n\t    mat4(vec4(-.711,-.586,.015,.459),vec4(.404,.538,.575,-.249),vec4(-.562,-.484,.549,.673),vec4(-1.160,.144,-.010,-.093))*f1_1+\n\t    mat4(vec4(.663,.424,.164,.089),vec4(1.168,.000,.636,-.309),vec4(.088,-.779,.352,-.722),vec4(-1.071,-.059,-.089,.310))*f1_2+\n\t    mat4(vec4(-.156,-.515,.176,-.125),vec4(.034,.431,.367,.228),vec4(.394,.263,.039,.195),vec4(1.077,.460,-.456,-.031))*f1_3+\n\t    vec4(.495,.756,-2.986,-1.239))/1.4+f1_1;\n\tvec4 f2_2=sin(mat4(vec4(-.586,-.569,-.492,-.407),vec4(-.224,-.624,.373,-.080),vec4(-.216,.279,.704,.072),vec4(-.780,-.607,.575,.568))*f1_0+\n\t    mat4(vec4(.070,-.760,.980,.566),vec4(-.124,-.326,.463,.559),vec4(-.297,.161,-.449,-.236),vec4(-.369,-.591,-.190,-.548))*f1_1+\n\t    mat4(vec4(.054,.276,-.894,-.120),vec4(.795,1.111,-.473,.031),vec4(.387,.292,.974,1.024),vec4(.150,.184,.253,-.287))*f1_2+\n\t    mat4(vec4(.435,1.658,.294,-.403),vec4(-.377,.175,-.493,.204),vec4(-.499,-.614,.119,-.557),vec4(-.799,-.168,-.481,-.192))*f1_3+\n\t    vec4(-2.130,-2.233,-.605,-3.251))/1.4+f1_2;\n\tvec4 f2_3=sin(mat4(vec4(.884,.369,.064,-.009),vec4(.434,.437,-.618,.117),vec4(.046,-.601,-.376,-.182),vec4(1.130,-.913,-.029,.602))*f1_0+\n\t    mat4(vec4(.314,-1.064,.861,-.572),vec4(-.633,.111,-.122,-.179),vec4(.277,-.615,-.069,.678),vec4(.109,.024,-1.124,-.553))*f1_1+\n\t    mat4(vec4(.243,.009,.461,.333),vec4(-.624,-.670,.328,.350),vec4(1.132,-.523,-.099,.402),vec4(.183,.245,-.232,.186))*f1_2+\n\t    mat4(vec4(-.057,.076,.660,-.139),vec4(.729,.450,.109,-.177),vec4(.088,-.111,.020,-.546),vec4(-.487,-1.286,.100,.117))*f1_3+\n\t    vec4(.529,-2.910,3.311,2.936))/1.4+f1_3;\n\treturn dot(f2_0,vec4(.021,-.057,.076,-.038))+\n\t    dot(f2_1,vec4(-.022,-.081,.064,-.063))+\n\t    dot(f2_2,vec4(-.049,-.057,.048,.076))+\n\t    dot(f2_3,vec4(.014,-.049,.060,.071))+\n\t    -0.010;\n}",
				"inputs": [],
				"instance": "",
				"longdesc": "Generates a fox using a neural network using PauloFalcao code from https://www.shadertoy.com/view/3lyfzw\nModel trained by PauloFalcao\nMade using Blackle https://www.shadertoy.com/view/wtVyWK\nAnd this wonderful tutorial https://www.youtube.com/watch?v=8pwXpfi-0bU\nUsing Ida Faber model\nhttps://sketchfab.com/3d-models/stylized-fox-92c2a35e54664974b8564c674cc712da\n\nCode - PauloFalcao, Blackle",
				"name": "SDF Neural Fox",
				"outputs": [
					{
						"sdf3d": "paulofalcao_sdf3d_generator_neural_fox($uv)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [],
				"shortdesc": "SDF Neural Fox"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Gen/Neural Fox",
			"type": "shader"
		},
		{
			"display_name": "Neural Standford Bunny",
			"icon_data": "",
			"name": "SDF_Neural_Stanford_Bunny",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//code from blackle https://www.shadertoy.com/view/wtVyWK\n\nfloat blackle_sdf3d_generator_neural_stanford_bunny(vec3 p) {\n   p.xyz=vec3(-p.x,-p.z,p.y);\n   //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n    //neural networks can be really compact... when they want to be\n    vec4 f00=sin(p.y*vec4(-3.02,1.95,-3.42,-.60)+p.z*vec4(3.08,.85,-2.25,-.24)-p.x*vec4(-.29,1.16,-3.74,2.89)+vec4(-.71,4.50,-3.24,-3.50));\n    vec4 f01=sin(p.y*vec4(-.40,-3.61,3.23,-.14)+p.z*vec4(-.36,3.64,-3.91,2.66)-p.x*vec4(2.90,-.54,-2.75,2.71)+vec4(7.02,-5.41,-1.12,-7.41));\n    vec4 f02=sin(p.y*vec4(-1.77,-1.28,-4.29,-3.20)+p.z*vec4(-3.49,-2.81,-.64,2.79)-p.x*vec4(3.15,2.14,-3.85,1.83)+vec4(-2.07,4.49,5.33,-2.17));\n    vec4 f03=sin(p.y*vec4(-.49,.68,3.05,.42)+p.z*vec4(-2.87,.78,3.78,-3.41)-p.x*vec4(-2.65,.33,.07,-.64)+vec4(-3.24,-5.90,1.14,-4.71));\n    vec4 f10=sin(mat4(vec4(-.34,.06,-.59,-.76),vec4(.10,-.19,-.12,.44),vec4(.64,-.02,-.26,.15),vec4(-.16,.21,.91,.15))*f00+\n        mat4(vec4(.01,.54,-.77,.11),vec4(.06,-.14,.43,.51),vec4(-.18,.08,.39,.20),vec4(.33,-.49,-.10,.19))*f01+\n        mat4(vec4(.27,.22,.43,.53),vec4(.18,-.17,.23,-.64),vec4(-.14,.02,-.10,.16),vec4(-.13,-.06,-.04,-.36))*f02+\n        mat4(vec4(-.13,.29,-.29,.08),vec4(1.13,.02,-.83,.32),vec4(-.32,.04,-.31,-.16),vec4(.14,-.03,-.20,.39))*f03+\n        vec4(.73,-4.28,-1.56,-1.80))/1.0+f00;\n    vec4 f11=sin(mat4(vec4(-1.11,.55,-.12,-1.00),vec4(.16,.15,-.30,.31),vec4(-.01,.01,.31,-.42),vec4(-.29,.38,-.04,.71))*f00+\n        mat4(vec4(.96,-.02,.86,.52),vec4(-.14,.60,.44,.43),vec4(.02,-.15,-.49,-.05),vec4(-.06,-.25,-.03,-.22))*f01+\n        mat4(vec4(.52,.44,-.05,-.11),vec4(-.56,-.10,-.61,-.40),vec4(-.04,.55,.32,-.07),vec4(-.02,.28,.26,-.49))*f02+\n        mat4(vec4(.02,-.32,.06,-.17),vec4(-.59,.00,-.24,.60),vec4(-.06,.13,-.21,-.27),vec4(-.12,-.14,.58,-.55))*f03+\n        vec4(-2.24,-3.48,-.80,1.41))/1.0+f01;\n    vec4 f12=sin(mat4(vec4(.44,-.06,-.79,-.46),vec4(.05,-.60,.30,.36),vec4(.35,.12,.02,.12),vec4(.40,-.26,.63,-.21))*f00+\n        mat4(vec4(-.48,.43,-.73,-.40),vec4(.11,-.01,.71,.05),vec4(-.25,.25,-.28,-.20),vec4(.32,-.02,-.84,.16))*f01+\n        mat4(vec4(.39,-.07,.90,.36),vec4(-.38,-.27,-1.86,-.39),vec4(.48,-.20,-.05,.10),vec4(-.00,-.21,.29,.63))*f02+\n        mat4(vec4(.46,-.32,.06,.09),vec4(.72,-.47,.81,.78),vec4(.90,.02,-.21,.08),vec4(-.16,.22,.32,-.13))*f03+\n        vec4(3.38,1.20,.84,1.41))/1.0+f02;\n    vec4 f13=sin(mat4(vec4(-.41,-.24,-.71,-.25),vec4(-.24,-.75,-.09,.02),vec4(-.27,-.42,.02,.03),vec4(-.01,.51,-.12,-1.24))*f00+\n        mat4(vec4(.64,.31,-1.36,.61),vec4(-.34,.11,.14,.79),vec4(.22,-.16,-.29,-.70),vec4(.02,-.37,.49,.39))*f01+\n        mat4(vec4(.79,.47,.54,-.47),vec4(-1.13,-.35,-1.03,-.22),vec4(-.67,-.26,.10,.21),vec4(-.07,-.73,-.11,.72))*f02+\n        mat4(vec4(.43,-.23,.13,.09),vec4(1.38,-.63,1.57,-.20),vec4(.39,-.14,.42,.13),vec4(-.57,-.08,-.21,.21))*f03+\n        vec4(-.34,-3.28,.43,-.52))/1.0+f03;\n    f00=sin(mat4(vec4(-.72,.23,-.89,.52),vec4(.38,.19,-.16,-.88),vec4(.26,-.37,.09,.63),vec4(.29,-.72,.30,-.95))*f10+\n        mat4(vec4(-.22,-.51,-.42,-.73),vec4(-.32,.00,-1.03,1.17),vec4(-.20,-.03,-.13,-.16),vec4(-.41,.09,.36,-.84))*f11+\n        mat4(vec4(-.21,.01,.33,.47),vec4(.05,.20,-.44,-1.04),vec4(.13,.12,-.13,.31),vec4(.01,-.34,.41,-.34))*f12+\n        mat4(vec4(-.13,-.06,-.39,-.22),vec4(.48,.25,.24,-.97),vec4(-.34,.14,.42,-.00),vec4(-.44,.05,.09,-.95))*f13+\n        vec4(.48,.87,-.87,-2.06))/1.4+f10;\n    f01=sin(mat4(vec4(-.27,.29,-.21,.15),vec4(.34,-.23,.85,-.09),vec4(-1.15,-.24,-.05,-.25),vec4(-.12,-.73,-.17,-.37))*f10+\n        mat4(vec4(-1.11,.35,-.93,-.06),vec4(-.79,-.03,-.46,-.37),vec4(.60,-.37,-.14,.45),vec4(-.03,-.21,.02,.59))*f11+\n        mat4(vec4(-.92,-.17,-.58,-.18),vec4(.58,.60,.83,-1.04),vec4(-.80,-.16,.23,-.11),vec4(.08,.16,.76,.61))*f12+\n        mat4(vec4(.29,.45,.30,.39),vec4(-.91,.66,-.35,-.35),vec4(.21,.16,-.54,-.63),vec4(1.10,-.38,.20,.15))*f13+\n        vec4(-1.72,-.14,1.92,2.08))/1.4+f11;\n    f02=sin(mat4(vec4(1.00,.66,1.30,-.51),vec4(.88,.25,-.67,.03),vec4(-.68,-.08,-.12,-.14),vec4(.46,1.15,.38,-.10))*f10+\n        mat4(vec4(.51,-.57,.41,-.09),vec4(.68,-.50,-.04,-1.01),vec4(.20,.44,-.60,.46),vec4(-.09,-.37,-1.30,.04))*f11+\n        mat4(vec4(.14,.29,-.45,-.06),vec4(-.65,.33,-.37,-.95),vec4(.71,-.07,1.00,-.60),vec4(-1.68,-.20,-.00,-.70))*f12+\n        mat4(vec4(-.31,.69,.56,.13),vec4(.95,.36,.56,.59),vec4(-.63,.52,-.30,.17),vec4(1.23,.72,.95,.75))*f13+\n        vec4(-.90,-3.26,-.44,-3.11))/1.4+f12;\n    f03=sin(mat4(vec4(.51,-.98,-.28,.16),vec4(-.22,-.17,-1.03,.22),vec4(.70,-.15,.12,.43),vec4(.78,.67,-.85,-.25))*f10+\n        mat4(vec4(.81,.60,-.89,.61),vec4(-1.03,-.33,.60,-.11),vec4(-.06,.01,-.02,-.44),vec4(.73,.69,1.02,.62))*f11+\n        mat4(vec4(-.10,.52,.80,-.65),vec4(.40,-.75,.47,1.56),vec4(.03,.05,.08,.31),vec4(-.03,.22,-1.63,.07))*f12+\n        mat4(vec4(-.18,-.07,-1.22,.48),vec4(-.01,.56,.07,.15),vec4(.24,.25,-.09,-.54),vec4(.23,-.08,.20,.36))*f13+\n        vec4(-1.11,-4.28,1.02,-.23))/1.4+f13;\n    return dot(f00,vec4(.09,.12,-.07,-.03))+dot(f01,vec4(-.04,.07,-.08,.05))+\n        dot(f02,vec4(-.01,.06,-.02,.07))+dot(f03,vec4(-.05,.07,.03,.04))-0.16;\n}",
				"inputs": [],
				"instance": "",
				"longdesc": "Generates a stanford bunny using a neural network using Blackle code from https://www.shadertoy.com/view/wtVyWK\n\nCode - Blackle",
				"name": "SDF Neural Stanford Bunny",
				"outputs": [
					{
						"sdf3d": "blackle_sdf3d_generator_neural_stanford_bunny($uv)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [],
				"shortdesc": "SDF Neural Stanford Bunny"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Gen/Neural Standford Bunny",
			"type": "shader"
		},
		{
			"display_name": "Octahedron",
			"icon_data": "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",
			"name": "SDF_Octahedron",
			"parameters": {
				"r": 0.5,
				"x": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "float iq_sdOctahedron( vec3 p, float s){\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}",
				"inputs": [],
				"instance": "",
				"longdesc": "Generates a Octahedron as a signed distance function\nCode from www.iquilezles.org/www/articles/distfunctions/distfunctions.htm\n\nCode - IQ",
				"name": "SDF Octahedron",
				"outputs": [
					{
						"sdf3d": "iq_sdOctahedron($uv,$r)-$x",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "Radius1.r",
						"default": 0.5,
						"label": "Size",
						"longdesc": "The size of the Octahedron",
						"max": 1.0,
						"min": 0.0,
						"name": "r",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Rounding",
						"longdesc": "Roundness of the object",
						"max": 1.0,
						"min": 0.0,
						"name": "x",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Octahedron"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Gen/Octahedron",
			"type": "shader"
		},
		{
			"display_name": "QuadPyramid",
			"icon_data": "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",
			"name": "SDF_QuadPyramid",
			"parameters": {
				"h": 1.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "//by IQ https://iquilezles.org/articles/distfunctions/\nfloat sdPyramid( vec3 p, float h ){\n  float m2 = h*h + 0.25;\n    \n  p.xz = abs(p.xz);\n  p.xz = (p.z>p.x) ? p.zx : p.xz;\n  p.xz -= 0.5;\n\n  vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n  float s = max(-q.x,0.0);\n  float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n  float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n  float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n  float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n  return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));\n}",
				"inputs": [],
				"instance": "",
				"longdesc": "Generates a quadrangular pyramid\n\nCode - IQ",
				"name": "SDF QuadPyramid",
				"outputs": [
					{
						"longdesc": "Shows the rounded box",
						"sdf3d": "sdPyramid($uv,$h)",
						"shortdesc": "Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "Height",
						"longdesc": "The radius of the rounded box",
						"max": 10.0,
						"min": 0.0,
						"name": "h",
						"shortdesc": "Radius",
						"step": 0.0001,
						"type": "float"
					}
				],
				"shortdesc": "QuadPyramid"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Gen/QuadPyramid",
			"type": "shader"
		},
		{
			"display_name": "Simplex Noise",
			"icon_data": "",
			"name": "SDF_Simplex_Noise",
			"parameters": {
				"Correction": 2.0,
				"Distance": 0.0,
				"scale": 1.0,
				"scale_x": 1.0,
				"scale_y": 1.0,
				"scale_z": 1.0,
				"translate_x": 0.0,
				"translate_y": 0.0,
				"translate_z": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_F3 =  0.3333333;\nconst float XsX3zB_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_random3(s), x);\n\t d.y = dot(XsX3zB_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [],
				"instance": "",
				"longdesc": "Makes a non periodic noise using nikat code from https://www.shadertoy.com/view/XsX3zB\n\nCode - Nikat",
				"name": "SDF Simplex Noise",
				"outputs": [
					{
						"sdf3d": "(XsX3zB_simplex3d(($uv.xyz+vec3($translate_x,$translate_y,$translate_z))*vec3($scale_x,$scale_y,$scale_z)*$scale))/(1.0+$Correction*$scale)-$Distance",
						"shortdesc": "TEX3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8.0,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32.0,
						"min": 0.0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16.0,
						"min": 0.0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16.0,
						"min": 0.0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16.0,
						"min": 0.0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Translate X",
						"longdesc": "Noise X Translation",
						"max": 100.0,
						"min": 0.0,
						"name": "translate_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Translate Y",
						"longdesc": "Noise Y Translation",
						"max": 100.0,
						"min": 0.0,
						"name": "translate_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Translate Z",
						"longdesc": "Noise Z Translation",
						"max": 100.0,
						"min": 0.0,
						"name": "translate_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Distance",
						"longdesc": "Distance to surface",
						"max": 0.5,
						"min": -0.5,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2.0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10.0,
						"min": 0.0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Simplex Noise"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Gen/Simplex Noise",
			"type": "shader"
		},
		{
			"display_name": "Checkerboard",
			"icon_data": "",
			"name": "SDF_Checkerboard",
			"parameters": {
				"AA": 0.0,
				"Position": -1.0,
				"Size": 10.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "float Simple_AAcheckedboard2D(vec2 p) {\n    p*=2.0;\n\tvec2 w=max(abs(dFdx(p)),abs(dFdy(p)))+1e-5;\n\tif (max(w.x,w.y)>1.0) {\n\t\treturn mod(floor(p.x)+floor(p.y),2.0);\n\t}\n\tvec2 i=((1.-abs(2.*fract((p+.5*w)/2.)-1.))-(1.-abs(2.*fract((p-.5*w)/2.)-1.)))/w;\n\treturn .5-.5*i.x*i.y;\n}",
				"inputs": [],
				"instance": "",
				"longdesc": "",
				"name": "SDF Checkerboard",
				"outputs": [
					{
						"sdf3d": "max($uv.y-$Position,length(vec3($uv.x,$uv.y+$Position,$uv.z))-$Size)",
						"type": "sdf3d"
					},
					{
						"tex3d": "vec3($AA)*0.9+0.1",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "Position",
						"max": 2.0,
						"min": -5.0,
						"name": "Position",
						"step": 0.1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 10.0,
						"label": "Size",
						"max": 30.0,
						"min": 1.0,
						"name": "Size",
						"step": 1.0,
						"type": "float"
					},
					{
						"default": 1.0,
						"label": "AA",
						"name": "AA",
						"shortdesc": "Anti-Aliasing",
						"type": "enum",
						"values": [
							{
								"name": "No",
								"value": "mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0)"
							},
							{
								"name": "Yes",
								"value": "Simple_AAcheckedboard2D($uv.xz)"
							}
						]
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Gen/Checkerboard",
			"type": "shader"
		},
		{
			"display_name": "Transform",
			"icon_data": "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",
			"name": "SDF_Transform",
			"parameters": {
				"RotateX": 0.0,
				"RotateY": 0.0,
				"RotateZ": 0.0,
				"TranslateX": 0.0,
				"TranslateY": 0.0,
				"TranslateZ": 0.0,
				"scale": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
				"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Translates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate\n\nCode - RodZilla, PauloFalcao",
				"name": "SDF Transform",
				"outputs": [
					{
						"sdf3d": "o_$name_uv*$scale",
						"shortdesc": "V4->V4 Ouput",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "S",
						"max": 4.0,
						"min": 0.0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "X",
						"max": 10.0,
						"min": -10.0,
						"name": "TranslateX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Y",
						"max": 10.0,
						"min": -10.0,
						"name": "TranslateY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Z",
						"max": 10.0,
						"min": -10.0,
						"name": "TranslateZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Rx",
						"longdesc": "The rotation around the X axis",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateX",
						"shortdesc": "Rotate.x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Ry",
						"longdesc": "The rotation around the Y axis",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateY",
						"shortdesc": "Rotate.y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Rz",
						"longdesc": "The rotation around the Z axis",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateZ",
						"shortdesc": "Rotate.z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Transform"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Transform",
			"type": "shader"
		},
		{
			"display_name": "Multi Transform",
			"icon_data": "",
			"name": "Multi_Transform",
			"parameters": {
				"RotateX": 0.0,
				"RotateY": 0.0,
				"RotateZ": 0.0,
				"TranslateX": 0.0,
				"TranslateY": 0.0,
				"TranslateZ": 0.0,
				"scale": 1.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "vec3 MultiTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					},
					{
						"default": "0.0",
						"label": "",
						"name": "tex",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Translates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate\n\nCode - RodZilla, PauloFalcao",
				"name": "Multi Transform",
				"outputs": [
					{
						"sdf3d": "$in(MultiTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale)*$scale",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					},
					{
						"shortdesc": "TEX3D",
						"tex3d": "$tex(MultiTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale)",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "S",
						"max": 4.0,
						"min": 0.0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "X",
						"max": 10.0,
						"min": -10.0,
						"name": "TranslateX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Y",
						"max": 10.0,
						"min": -10.0,
						"name": "TranslateY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Z",
						"max": 10.0,
						"min": -10.0,
						"name": "TranslateZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Rx",
						"longdesc": "The rotation around the X axis",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateX",
						"shortdesc": "Rotate.x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Ry",
						"longdesc": "The rotation around the Y axis",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateY",
						"shortdesc": "Rotate.y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Rz",
						"longdesc": "The rotation around the Z axis",
						"max": 180.0,
						"min": -180.0,
						"name": "RotateZ",
						"shortdesc": "Rotate.z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Transform"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Multi Transform",
			"type": "shader"
		},
		{
			"display_name": "Repeat",
			"icon_data": "",
			"name": "SDF_Repeat",
			"parameters": {
				"RepX": 4.0,
				"RepY": 1.0,
				"RepZ": 4.0,
				"X": 1.0,
				"Y": 1.0,
				"Z": 1.0
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec3 opRepLim(vec3 p,vec3 c,vec3 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor((p+0.0001)/c+0.5),vec3(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Repeats its input shape\n\nCode - IQ",
				"name": "SDF Repeat",
				"outputs": [
					{
						"sdf3d": "$in(opRepLim($uv,vec3($X,$Y,$Z)*2.0,vec3($RepX-1.0,$RepY-1.0,$RepZ-1.0)))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4.0,
						"min": 0.0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepX",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepY",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepZ",
						"step": 1.0,
						"type": "float"
					}
				],
				"shortdesc": "SDF Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Repeat",
			"type": "shader"
		},
		{
			"display_name": "Polar Repeat",
			"icon_data": "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",
			"name": "SDF_Polar_Repeat",
			"parameters": {
				"Axis": 1.0,
				"Distance": 1.0,
				"Repetitions": 5.0
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from MaterialMaker\n\nvec3 circle_repeat_transform_X(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.y, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Y(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.z*s;\n\trv.y = p.y;\n\trv.z = -p.x*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Z(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.y);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c-distance;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Repeats its input shape around a axis\n\nCode - Paulo Falcao, RodZilla",
				"name": "SDF Polar Repeat",
				"outputs": [
					{
						"sdf3d": "$in(circle_repeat_transform_$Axis($uv, $Repetitions, $Distance))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 4.0,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the circle",
						"max": 32.0,
						"min": 1.0,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Distance",
						"max": 5.0,
						"min": 0.0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Polar Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Polar Repeat",
			"type": "shader"
		},
		{
			"display_name": "Custom Boolean",
			"icon_data": "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",
			"name": "SDF_Custom_Boolean",
			"parameters": {
				"Correction": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D A",
						"name": "in1",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "0.0",
						"label": "SDF3D B",
						"name": "in2",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"label": "SDF2D Custom Union",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "joinSDF2D",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nA boolean operation between SDF3D A and SDF3D B is defined by a custom SDF2D",
				"name": "SDF Custom Boolean",
				"outputs": [
					{
						"sdf3d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10.0,
						"min": 0.0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Custom Boolean",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box",
					"from_node": "node_sdf3d_box",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_smoothboolean_2",
					"to_node": "node_sdf3d_smoothboolean_2",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_box_2",
					"from_node": "node_sdf3d_box_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_smoothboolean_2",
					"to_node": "node_sdf3d_smoothboolean_2",
					"to_port": 1.0
				},
				{
					"from": "SDF2D_Axis",
					"from_node": "node_SDF2D_Axis",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdboolean",
					"to_node": "node_sdboolean",
					"to_port": 0.0
				},
				{
					"from": "sdboolean",
					"from_node": "node_sdboolean",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_smoothboolean_2",
					"to_node": "node_sdf3d_smoothboolean_2",
					"to_port": 2.0
				},
				{
					"from": "sdcircle",
					"from_node": "node_sdcircle",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdboolean",
					"to_node": "node_sdboolean",
					"to_port": 2.0
				},
				{
					"from": "SDF2D_Axis_2",
					"from_node": "node_SDF2D_Axis_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdboolean",
					"to_node": "node_sdboolean",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_smoothboolean_2",
					"from_node": "node_sdf3d_smoothboolean_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "SDF_Transform",
					"to_node": "node_SDF_Transform",
					"to_port": 0.0
				},
				{
					"from": "SDF_Transform",
					"from_node": "node_SDF_Transform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib",
					"to_node": "node_pxflib",
					"to_port": 0.0
				}
			],
			"display_name": "Custom Boolean Example",
			"icon_data": "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",
			"nodes": [
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -340.407653808594,
						"y": -125.038391113281
					},
					"parameters": {
						"r": 0.01,
						"sx": 0.07,
						"sy": 1.39,
						"sz": 0.5
					},
					"seed": 44278.0,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -333.407653808594,
						"y": -252.038391113281
					},
					"parameters": {
						"r": 0.01,
						"sx": 2.5,
						"sy": 0.68,
						"sz": 2.5
					},
					"seed": 53834.0,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_smoothboolean_2",
					"node_position": {
						"x": -60.5551147460938,
						"y": -183.631713867188
					},
					"parameters": {
						"Correction": 0.0
					},
					"seed": -51977.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "SDF3D A",
								"name": "in1",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "0.0",
								"label": "SDF3D B",
								"name": "in2",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"label": "SDF2D Custom Union",
								"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
								"name": "joinSDF2D",
								"shortdesc": "SDF2D Custom Union",
								"type": "sdf2d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThe union between SDF3D A and SDF3D B is defined by a custom SDF2D",
						"name": "Custom Union",
						"outputs": [
							{
								"sdf3d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10.0,
								"min": 0.0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"generic_size": 2.0,
					"name": "sdboolean",
					"node_position": {
						"x": -111.85400390625,
						"y": 71.3672485351562
					},
					"parameters": {
						"op1": 0.0,
						"op2": 0.0
					},
					"seed_int": 0.0,
					"type": "sdboolean_v"
				},
				{
					"name": "SDF_Transform",
					"node_position": {
						"x": 359.444885253906,
						"y": -203.631713867188
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": -0.5,
						"TranslateZ": 0.0,
						"scale": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Translates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate\n\nCode - RodZilla, PauloFalcao",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "SDF2D_Axis",
					"node_position": {
						"x": -370.555114746094,
						"y": 26.3682861328125
					},
					"parameters": {
						"mode": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "SDF2D Distance to Axis\nUsed in more complex operations like Custom Union\n\nCode - PauloFalcao",
						"name": "SDF2D Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0.0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "SDF2D Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "SDF2D_Axis_2",
					"node_position": {
						"x": -370.555114746094,
						"y": 96.3682861328125
					},
					"parameters": {
						"mode": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "SDF2D Distance to Axis\nUsed in more complex operations like Custom Union\n\nCode - PauloFalcao",
						"name": "SDF2D Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0.0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "SDF2D Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdcircle",
					"node_position": {
						"x": -370.555114746094,
						"y": 166.368286132812
					},
					"parameters": {
						"cx": -0.3,
						"cy": -0.3,
						"r": 0.18
					},
					"seed": -52182.0,
					"type": "sdcircle"
				},
				{
					"generic_size": 1.0,
					"name": "pxflib",
					"node_position": {
						"x": 629.444885253906,
						"y": -213.631713867188
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1.0,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"Pow": 64.0,
						"Reflection": 0.2,
						"Shadow": 1.0,
						"Specular": 0.0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv.xyz)-0.4",
								"function": true,
								"label": "SDF3D #",
								"name": "sdf#",
								"shortdesc": "SDF3D #",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.0,0.0)",
								"function": true,
								"label": "TEX3D #",
								"name": "tex#",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "\nvec2 input_$name(vec3 p) {\n    vec2 sdf=vec2(999999.0,0.0);\n\tfloat m;\n#for\n    m=$sdf#(p);\n    if (m<sdf.x){\n\t  sdf=vec2(m,#.0);\n\t}\n#end\n    return sdf;\n}\n\n\nvec3 tex_$name(vec3 p,float id) {\n    vec3 t=vec3(0.0);\n#for\n    if (id>(#.0-0.5)&&id<(#.0+0.5)) {\n\t  t=$tex#(vec4(p,id));\n\t}\n#end\n\n    return t;\n}\n\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\t\n\tvec3 objColor=tex_$name(p,dS.y);\n\t\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=tex_$name(p,dS.y);\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "SDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1.0,
								"min": 0.0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32.0,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024.0,
								"min": 0.0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10.0,
								"min": -10.0,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10.0,
								"min": -10.0,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10.0,
								"min": -10.0,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1.0,
								"min": 0.0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/SDF3D/Op/Custom Boolean Example"
		},
		{
			"display_name": "Displace",
			"icon_data": "",
			"name": "SDF_Displace",
			"parameters": {
				"Bound": 0.01,
				"Correction": 0.0,
				"Distort": 0.02
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "\nfloat distort_$name(vec3 uv){\n    float sdf=$sdf(uv);\n\tif (abs(sdf)>(abs($Distort)+$Bound)){\n\t\treturn sdf;\n\t} else {\n\t\tvec3 s=$tex3d(vec4(uv,0.0));\n\t    return sdf-s.x*$Distort;\n\t}\n}\n",
				"longdesc": "Displace a 3DSDF based on a TEX3D in a direction\n\nCode - PauloFalcao",
				"name": "SDF Displace",
				"outputs": [
					{
						"sdf3d": "distort_$name($uv)/(1.0+abs($Distort*$Correction))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.1,
						"label": "Amount",
						"longdesc": "Displace amount",
						"max": 1.0,
						"min": 0.0,
						"name": "Distort",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10.0,
						"min": 0.0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.1,
						"label": "Bound",
						"max": 10.0,
						"min": 0.0,
						"name": "Bound",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Displace",
			"type": "shader"
		},
		{
			"display_name": "Displace by Direction",
			"icon_data": "",
			"name": "SDF_Displace_by_Direction",
			"parameters": {
				"Correction": 0.0,
				"DirX": 1.0,
				"DirY": 1.0,
				"DirZ": 1.0,
				"Distort": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nfloat distort_$name(vec3 uv){\n\tvec3 s=$tex3d(vec4(uv,0.0));\n\treturn $sdf(uv-s*vec3($DirX,$DirY,$DirZ)*$Distort);\n}\n",
				"longdesc": "Displace a 3DSDF based on a TEX3D in a direction\n\nCode - PauloFalcao",
				"name": "SDF Displace by Direction",
				"outputs": [
					{
						"sdf3d": "distort_$name($uv)/(1.0+$Distort*$Correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.1,
						"label": "Amount",
						"longdesc": "Displace amount",
						"max": 1.0,
						"min": 0.0,
						"name": "Distort",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Dir X",
						"longdesc": "Displace X",
						"max": 1.0,
						"min": 0.0,
						"name": "DirX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Dir Y",
						"longdesc": "Displace Y",
						"max": 1.0,
						"min": 0.0,
						"name": "DirY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Dir Z",
						"longdesc": "Displace Z",
						"max": 1.0,
						"min": 0.0,
						"name": "DirZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10.0,
						"min": 0.0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Displace by Direction",
			"type": "shader"
		},
		{
			"display_name": "Displace Height",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAAIABJREFUaIFVemuMXdd13rfW3uec+77z5DzJGVKiXpREUpIdK47j2I4fzQONHddx7cRpkKIJ0vSBpkjRAmnaFP3TB4K2QNAiSJPGKPpI4wYOEjuw5XdlyYkkSqRISaRIDoec98x933vOfqzVH2eopheYwcy5Z++z91rf+tY+a330G3/zk0TEzJY5iKhqjCIqIQoRCORjJJCohBBFQQTDTEQAQozOhygCQBUiAoJhBgBARIhIAaZyJiTWJNYYYoEaZsOsqok1ibWqSkSqKqpQAMrMxrBEcSGGGMsb5P7XMUrhvShs+TwRGRYuRPEx+BDLlamCmcq7j6cGEYGJQICCmXyIAFSVmVURJQIwbIgAwDAr1BCLqjEMrypqrUmsyRJLRARSaLhvo3KUiBIhhuA8QGBiJlKiKKJQJi6NyMwKtYf9oapGEedDFAWOF22YnQ9ExjCb5NiopZHKRTOTQq0xTJQklgBmKv9lZkCjqKoSACJVLf1W/pEkpvQhCKRUeB+ilJ40TKVDmBmqqgjiS3cRUBouiACwhonIhhAVKoryEjMRKIqEKOVEJRLKDVjLqTXVLC2nImYCEmuYiYkBZWJmUgUI3ocoKirvoKtEgg+h8MegtZYJZI2xxhBB9Rh7IGIiUQVgjLGGoWBryosUqdytiNpx4VS1tO7930ogERECgYhg2VjDxASFAqpqjSmdQERMZI0xzKJaYosIqmoMi0ZSIgbAx18w8TFyQEQhiLVGREIUhRKImRJrymkjkerxbDFKiCKqx3sA0sQyk7WGSwcZw8ZwCcoS9yVUrDVMFKMQUQmS0nflEGsYIAJElYEyVAgEEABjmFmZjhGI8lZAFSFGBQwdP9paVdUQRVVz50tTMtF94IGYDJhVATCICKIKgZ2faomKiPJ99ggxihyTAzMd448AkGG2hkHHnBNizENUgAnGmPJukXIP4PKhRKrHixORWPKIAoBCo2oUoYB3KKgcXoYKDEuIxzBQBUp+gkKJyDCJqu2PJyWdHRu1JCXVMixICKbcl6rCl/yoxx/nYxlthgkEVS2Jy7KhkixQXlQmApGoiki5RKhGVb2/XC7pgjkxxtyfikDGln6FqILI3J+zDIASQiax5h3yLi3BRCXgSodEOaZRJmKmDz6/9cDBwZ/VGzd+cK0kwSjH4UNEGgGNrCREpdVEtBxeGv5Df7774OHBl6Znbjw1R6XtADAxc2KNNYaAMhFFEVHhY7geG5LpOFqNYSYyP/Dkw3/JEAhRQojlkz75wvbgrYPDk60gxwkkiojqs5uD2RgWJpPXOyKrTSaU61DFxZf3d5bqpQNA+P7n7378ldvdfb+70igz0Pr3dp6ejBre12xy/cxMSb7G8MoLOz/92sb6nf7LKw1fGk+1pMSSPwgozWeYrTWpNSWxcuF94b0LsXB+lBejST4u3DgvhpN8aTL5xHj4oeeuOx+cD877KBKjWFU2ZipNPjwYlF4riegzL+1/3/7+h79xMwTxMa5+5+6i6NT8zMMhjJ/788Qaa/gpoorz1ph6jPzcS6m1zJx9542PFZOZSjql8tSLOyXFgVA6IUQpMVDGaonDMtwBmAtn10OMPsQQRVRENYQYJP74pa0F2Iahhvfp9vjO2lQJkfPfvHQyadZCCIRBjLKb7y7XRbX1le+e5/q3Creh6vcKt1y/uNGbN2a+2ez3R9XKVPfsHD9/78gVO85tAVtskurUaG2KiD66E5e9a1QyJyJs3lhtikiZVQG89xu3PvTK7dObg9dPz/D90HqH983Tj5wueU0BEY1yPO7x7e6cyapQw5Q4x/vh7lItitSP7JboDe+uiVxV3Iphe3vSXG1+/ChbIKoQ/7Mkubf1+pOT9iLRAnOzkg1H4xzYuN39Y9WbKld9eC3KVaKtanXx9PTy8/cWnZ9nqiZmFGIffLAzltMzaWLTxH74m7fPjUfTlTRRNXeH+2fn6DjWUGYS60NkopKCUCYJVQA7VH/YmK7THtEW0XA8or+APz89zfy+Ip8heq7e+O1OZ6DmRw5f//iLXDdG06Rm7aM3X9pcOXfD+0aaxpsv2Sfft1+t3BznA6J5yDXBdO92ABxwpoM3iUbOB9U9orriSHVPpaOaMQF45tubS5NJvVqxxhgXToSYGHNMpjjObrakoE+/uP0cm92n5wH9e1d6s4N+wnQ0DL/ZnlrpdQ9U9yXujYb/6Jpdd76dZvVG/UK3vzXc/BTwwfWLM4DcfqUL7AEPA98SHfl8dPdyFxgqDpjeJFyP/vJ44uv1L598ciW4S1n1E5Px/GS0rbTJNCNqvev5cKQ6MDz55sbfIFr0vppYm1hSECFVDSJExARRQBUEq6p/96X95mQ848Odb49ajUY7hGqW2SxphfjZyfiXogyYRon9nUbzlPN1w2klC0nS2bpi589uJckh0clbL1vAAyNgGvjw9tVvAK+eOKuN5sn3vOuFr3ztFuO1wXhxuPkPB+gAq499/5mDoz815ne3r/7h4qNXi6IeIqsWiZ0Ym9298lfWLvRjvKY4IpoVTYCJokuYeu5m54On431GFhXz7kcfeM/OpBLjLYlv+vBEs9lQrSTGZFkRZezjXK22v/fWhxbWF70/A/Ddy5Xl0wPnbxzc/ZPxUbcy1br3egq0gSFwBASgDwTgilZ7qlc2Nja8uzYcnx1u/jiwDCgQ9zcro4NGbRb1WQPYg+v3phYnSfL5JP1TouWZpRDjUHGosiNyN8YZNiuTyUnv1ib5lceWjzPr12/90Ju7loluq+6rXgPOzc1NVKdViQjMQZSY5324tvxoGI9PMDW3r7330WcjaOuNF7aADLiZ55eBCtADItAFxkABmKXHpifjw+D7o1iEOMW0svK43LuyDwDIgAlAczODXg95vltf9SG8Wm8sQl4aju5681sH17+++HA9SsX7X2tPLTnXaNZrQD3Gz33x8n/7xMW5L73xWJFPO2+efeLs7vb4eyK7h2/b1sJIpRtj39CRyL4LHcXQmMbW1a9QtWm5ceJU2m5757b3N68BV4Ho+pOVxxpnHru9u7EJbAIbwDZw0Jx3iSFmYk6sbWRZJcsG3Z0+MGo37xTuHvD2/ubMj/7EC9vbbzj/3u7tZ3q7iyfP1gzXvD9RnZ2p1t7auvojS2fOAy1jKsxZag0xxbhy4/BNl1dDmGMy/66YfuLg4Cy0aC2+liZHMe55ty1yF7gtsqnYZu7Mrb6y92aXG0ma5KAt5692tq4BB0ACbGftgzzPF0+/fbS1CYzOPLXfmMsNw5gkSRJrDBs1JrdmMn/yzuG9rcLtAFvAJnDNJ68PB7XOLQYeAsD1cbf/janpkStuTSa71ZkfTdN55kykYkxKZAjleZDTysu+CMbYB4eDWK9WnE9dsWrNvwfSwtVUM1OkaWpMEmPMx/lX1y+2Dw7cUe93N69sASNgF5gAk6VzJoZOjN1BX+fPGtVJv2+s5TQx5emMCaAYQj6ZDPPCT63vJzar1hLiBJj0+7mxc8AA0FPnrUi7Vv1Y92iD7e+FcG64Sc3zI8AQsaooEoVjGgUR77/t477CptUKDDetKwq35t0v1+u/3t9oAAQwsDt39vcPrp9ZOVfvdKzhXpI8Nv3EV3yY7F4bA2HxMYUaYxRIJE4RNQAw95TGgqSSVKxhoqeeeeq73/1eI3drlcr61tUDYB/4+ZXHf9E5TlMDeMAA/s6rcf1iEGlmWCvcv2o2/uMQN4B9oKJa86HOVGV2oiPVQ6Inpmf+9PDQUpJWGrVJt1cJsaW6XBS/unbhP29cqgNzp5/6CaL99NxUUbRVkdrcGLp7uXvqvJw6r6qZczU2jrjjvCWqWVsX9TtX0zNPOeKf/amf/NJ//wMR3bpzl2wi21dngfeceMgVxezM7INHR19m/tGskkBHK4/7e1cAOFVvjBqqEp1w7udXnvhN5kTEhpA4VyVkBKg6MiOmo6KYH22aX51eKt8Go0hUDSJj0crM8sdnV88U7vk7r1J9tnBurOrZFDb93nD/Vm930lpMgZZqm81n711+cXzArYXG9uvj4X4X2O5szy6tD25vnF9ekl7/YDC69sYLdeAE8MTo8Pmid6G9MBPDlPcfqlVf2Hzt1GBvsvrEs/29+ZnlqkgFagFEcSqLSXp549JfNOfvxHg7L+74sBFly5q7zPtp+gutBesKX6lUpk7M7W5uHQBbwKHIL4ZQ63T2iKYXHrmcZi+MxndVZ1UJuAPsA4PNVxeADwOfW308aa09Mj39mY1LAFJgAuTA0dXn/8Ppp2hj898cXB8DKdAHtoDXppqPNU4kqqSoJHZlMPiVk0/+sSt6EgMQCUOQC1FVeoRdka0iXzv9lN56+euAAC2gBnxkgIunn1p2bto587mZ5aE11Yvn/2Ljzm2Jd2J8tl5/wLtGoxpBAmTWFvX6t5w7JO5k2U5/9zpggN8G3r92od3rUog+Tdxg/zLggRwA8HtrFx6cjKdH4wdXHvhid2cMOKAGjLLs2f2d2fZiPYSKYVJNmZs7b7zYWlgd7OVTSztRNr3bVLklclP0NmhT4nZ7MbYXTvT3EuDn1i5cnFleLIppkaZh857miQNjLm1u3grhZog3Q/wRm8xnlUqjnjvvVUU1ZZNUq3+mGBgz6O92gH8L1M88XcknqfNMlFvLs6t/1tuNgAC/BTw4tThbFA3LMcZT86e+1N2JwBh4tnCPnrowJVILocIEVQFk9mT97mvbwHZz/q7KRpQbeXHDh7dFbxFuie4YY+9deWb94qdnltdjnA6hSVQ3plGt2EuKxIeRhF3n7hbul45ups2LylT5l7+R/J1fyXxsErkQHrLmY1n68salVeDRtQs3jOm4Ytf7BsAEJxqJFJhtNz/TGyydPF8XyYypJmnbhfUY/wHwu61Gpz98COgDu4oxtK5wRB2RXe+S9Yty+5VXrS2AAhqs8QpH9I+r1bUQZidjmXngW0SVws0AFUXN2mpi0iS1r1sTi6Lni53CDSuVWqsO3y2kXfz6v0izLC1cRbRJGERZsWZn/eIl1XnmjkpbtRalCmUFSQTwyfWLXzt8691rF9pRKoQkSZLUVnycjvLQqfOmd3MGuHPqfJ+wpVIFshgjaKDaDeGI0F+/mHjv7l7OAQP83KnzZ5lPhDDjilmi6dQu5JNvEQ+IZhJbMSZhY5lMbC3sx3hkjTm4cWF0+P3VSjPktdpMYgwMexeC6iHhEOhEkcQS8xu3Xj5sLRwy7zHtGHOX+C7RHnNH9Kcb84siC4mti9Qtp0nifHAgAZ7Y3xwBRzMrhyK7we+EcM+Hu1E2oXdBmyKbzu8B+40Tzw73P3Xy/IPWzIlMqbasbVerCx//sfD6mze2r+ZTi3Ln1XZnu7G4xsx2Ym0kssbUgTngALQsMRBHESTJKEu3xpPtKPtMXZXuyOei80uP9ZzvEC1sX+sCQyAHHgYeXrvgfBjeu9w//VSbyBhbPXPaXL5qo0YRt/rkQ3df+5+qlig1xhrDoqoSmCfAhI1nY3au/gxw/vRTM6ItoGFMVSQFTJKMvvEdqlVn281Lm68JkAItgEWslO+QInzyyaJ/67ZKEmU83KqbVUmSvTTdLNyW6g50S+Se83+/1VpyxS2TXEns7y+fA8gaM8+UGDOK8eje5d0zTxsRAbzh9md+auuf/PMt8buqA9XRqfPnVLc2Lh0BTSAFNhcfFRAzt7aurAJPA6unn1pQbRiuiFSYEyDNUhGZ+DDu3WLCLYCA6Sfed0dkJkZLRCQy9j5N052kVnNDBcbi61EY2jG8mZgtyFYMmyH8097tdzfO1VUavqhl6dTW698Ebp1+qpfnwhQUWH2SVb1qAZoQnVs7ddPwLtEe0R5w5H1OVMw/FI3ZB+T4wKJZDI2lx6bSNAAcoxhTjTEBTAiWGapxvO3ceBjDOMS90+dnavUNpjzqzuFNszi9VGVWlb4PsTqFOBZGkTVGtfaRMR/65b/1J999cUPkRlHcdOEXGna5Mr30t39h9OJLIUZMLa7096i7vTnczxsn+tF50SAaCcFyTjRTqz7/6pV7Pmwz7RLtxLjl3KHEAmrYGIAJufchBuR5TaUJqjPXmdtEVZHanVdts0GDLYk+V+nEuC3yPyRL0gTGFqqd3pZ5uL3QImKJAu14L80TrjIz5uqRDx1rvvz8C7eL4s3BsNq59Wuuv5KYVhjJzR2qZM55BXR2Zb670wT2hvtxdHSPa5HgoQ6YGH71jbd2gt9W2Vbdkrjp3L5IvVqbr1aze1fODQ/ODA8qk6Oj+twwRkuUEVWNzYj09iut3m795AOcd1TVq4xUj0R2ib7a3e0lTeeDZ9PLO3Y2ivHeSIwiHtgZjVxW6UOrRDIadb3bzYvZ7u15IAOEaaSB9t8Q4np1dorrUVXXLlzcuFQAV4BscOcWTuWaDFUPVLIY8hi7Ioch7ORFpVad37++0MP7gAeAk+sXp4fDIdHX99/6PHC3eaqepS3DfPsVA7SByrjXVAkiBTAUGao6w9PAkUluOd/3sd1at2xNJcJ7V/OhArjEdlyes+EYfYy5SpplGfCDQAoEokGMImqNib3tFGjNnIUqAY8ABbAB9BO7Xbih8y1rEmOcaj+EYZRHRndlhAeA9wKPA/W1CwtFvpglMUq68nj/3pUvDO5spGfqWUWBBlB/8F1y+NY8U52pEBmLTIB9YAoYGzsAJj4MRE1bhlyfU2M8EAgeFEEe6lWcgpmn02ylv7sOzAC1asbHRSUCkUIxObKsybA3BgarTxatEyPnJqo5tBAdifRiKERns3Rp0nkAeAZ47OST09NLc8zTbFqtFqWpE632dm4CnUlnUp9prjxgZpaJOBadkcSuYi/KNnCbaEN0WKvsoxaII/PIe8P1ppvsu+qsJIljcqqBoESqUGhqTMvYpRSN8WgRqFQrZTVGqawuERGxnxwtP+6627u12YHIIPhxjJFYCBEAqAqcSOzSzPL69PLJqcUzd15tzSxXgSTfLkZ7/f7usDgaVCpJXtwGssH+oD2fVWtCcHlnpNpR3RK5C9wDdom6zRNdMUIEIi9q8+pSbm2FiKPAWAUZVagKCwsDJEyT5sroYHcLqEMtUABQWIChQnRE1Dm8vrt+Mc8Lr0rWpkzHzVeAoBkoU81E63cvmbUL7vRT9vAtMWYIjcAEGEYhYBo4BVwHuv1haqxWqsOpM8nuNYbmTH3RoTFHnAySdgh5WdhKrDGPNGdz58bEmlgPCBBRFsePa5BEDJHZ/q6fbjkF9QaukgVgougTDpn3gD3Vw9rcnsQO08hwDmjZj2KTWFNNk0Zi2zZpzCzXmO3R9dRaq1oQxqL9EMrD9n5iez7kwKA5P/R+EoI3dliZOZwcdpj3VbszZw+5PnQhAkxkDVey1J50wcawLzJUjcYoyBgqezNlfchDB8xvLa3NjY9GhIN2owVUQWW9z6mOiHppcsDcy9IJ1EtUEVtWjImIWZljkuRJ1o2xMbzLRLlIk2AVld6gD+zXa0eEQ2ZqN7LpsxXnRjEcFK5X+GqSUOuBPAanmIwnUdQaJqDsy0QRe9I7jsIixDw21cBcNvnAYLLleX1CtJtMFTUMJkcNRZNQBRIQAQHIQZNKc5ClY2BcTHJ/3FM5bisRkTEuseM06QS2FMeEQ0WmSLr9AsiB0Wg8aNR6QAfUK1wQUVAhUoBGzgGkUFFlUGLIMCdpUpZ4jTH2pCglFmmiWbbDHAEo6LhKrWWrUIm8tUfJ3Kg+nx7dyGLMoBYwRGSMVNuhvXpi/dTw4KDYGzNzwmRBhkkArypEherTH3jfK9963tfnDro7FahVjYAHHFBuo7B2OP1gPy8cyg4xlT8EJcCWjXRrcb/hbYgw3qHPLz9625o7aXYnTa/nruNDLbEaAoiUqAz2dzqkRGSMYYXGaJkMkbWWmSMg0NwVZXPZMqXWGua8cF5iFAVTo1qdabby/oD79zDukqh2eg4AUEy3pTnvs+neaPKOLIKJyp4kQy2ziiZZAmZV5eP9sD+6bjObVtI0zVJjDQdZuPmSX7uQiUp0jiimaTA2iBJgFIhBnSt5NiqDmUPZyFYiYjbWJo167dxjj3z6pz65urLyB//rC8997ZuHnU4IceL81uEhs9HaImoLohpn1XtHEiUEnUSedCogYvZAAMlxqxiWjSEymYkAgOh8olpPU/a9IZFFlgbiIsZRjJMQDPDgxiVeecJ7nzNPDI+MyQ1P8qJCVDfGaCQRASJBjEVilRlsStkBMznnXn7l1ZdfvlS6i5jTJCUOElUkSvTqg3qvec6FXx1uGiABXHudiGCNB42NGYo6UyoRiAAiOm48htAkqqk2AD/YG0Ft7/CtATAkyo3xzqfAAlBT8aoDid0Q0jTp27Rgz8xWtWFsBQpCZPLWzq+dunfYGTlfCnVi7qJz6hyVjV5rYK1YIybhJKlWqx99/3u/9sU/sYWruHBquElACljAWzNz+Pbu8rk+0X4Uk6VDpsBc9mdNGJBtsmqFuEGxDtQNDwjRi92O0iEakQ5CjKpN4CEgkVgAPWNq1u6DkiwtRJwPmOyZbK5mTKWSaWIr83Mbe4dOoqiSKud5mk+qzlvvjSgAr+qTJM+ScZIGwBrz7W/8n7ZJprN0SrXVPNUElgd3RlOnoeoXHqkYux1CzFLR8QT1UIo4xjsxOuJhWl9sWtNSrhf3pDPJo0Qm+2Zv0G3Ve8wTEWKqACeBKqioVo4Sa0FizF//2c/+69/5L0WIk3G3MenR3MPqPJj3tncnUQqCECWFa/kwqzh9+PZk+rSBgFCIjoCBYt+HfRmHNHUxthRTaWUZvEA0G2OzcTLzXq0dZ3xPpIiH3d64rBQGk6oEQA2RSp6GEYsw0STEEVGf2YuY/vrFy7t3TO6KWgXG8KT4gUZtrb3UmmpX52ZHPjrmP3/t9Zx4FGMY71tFWhzp+Mj70SRMJmnDEflJPhXjqrXLqmuDvfW8O1WdmQFaTKvd2769GIgLICSWiZp5Z5qzBebVJF1jfsCaZeYWUSVJ8zTZGe9thdBn9sYoCXOZ0dkSJVBSLUIcGnPEPBIhgnlPfZ7ai7a/a3M3qWTVvDjl/HToadHt9PbHUoyIBsrDKJPxjg/Fsb4LGqBDl4/ybsimshDnVVdB69Yu1GfPDvam0vaMasNwnF4WY+LWFT/cH7QXmV3Sudfavj3f3Zmv2uVKe7XeWPzwB+LtzXGS7Hbfvg7sKDqqBRDL/q8ixohSlaUYG9NXdSKWiA2bH2vO1SuVUTXBoJfmxeFU80ruBo3aoHDd4DvF5Gjc7Y8PBuPDsc9dKShQKMgBORCYY95rFb2FycHJ3Y2TrRNnmJuVqZr3FZFakiRJGu9d6QF9YDy1lE8OuZjU06RRzRohb+Wd6uRQbr9ZuO7mYO8q80u9QTdLB6qBGQQtpRaAHL9qIwAZUQ2w1giRfaJama5mbBcvtw5df9jsDkZTzS/H6AejE8AiQK16AS5IoygROWhJ+6riiX2MGh1EEsNpu9Hu3apNnakSWaJgzNDYNEr9PtXYzvVok5xoxNwh7AI1KInY0egohLet+U5vMGg1eiKeSI5VIijzWlQlogyoE9UJIN5n/uQPvds+MjUl40m38/ah4etTzX53sKCIirzV6BF1Adsb2FaDGBEoazCBOScAFEQjolGNUAd4ZlaN3Vu19vqUNU4kD8o0klZDohBBQlQ2jjAA7Yqo6kD1liqArdHkNWDcanRVR1oqXvS+SgqqaogqQBNoqFrQLUMfjaKAbY4njf03GiFOAzOKUbu51BvUTj6Um/oQGDH3+fowxLK7TyACxfsVES3VR0y58p6I9oYn2s0q63TnRrZ4jg3LztXDGLuD0S7AgGvUVMUrekBQPRLl0dgBQ2AEcKs+ijEApYrzL2siDJACNaBGRISa4tNRFg3fBSzvXqMYKcaEqA5tgg6A9447pt0cQftEvflHd/au9VUKIjmes9yAEo5PLBPQNrTbrG/0Bh8BDluN3d3XvegG0w3gRWAXiM36BFBAoH3RviozJcCkUfOqAhgFMZOIASm9Iw0iEAzAigDt9ocfbtYfUF0DbgAA7HXndok2VV+y5lMf/2EF/usffW3JjWshFNb2iA4nOwxY4g50ohCACQwCvaNZgBIcsWPoVOvzKrE3dIDeb7SlzToxHWscRABEgA0Ts8y0q6JTzBKCNayKHChUI5PiWJcJICoi08/5uNCsnwTmgRy494HvI8B+nvnCX/vYOnRNASgBP/PxD9kvfHWl+7ZLs0zFiTQJvSgMFUBBhoihqohAVDAhUSSijTTJZs5mSWLXzMVnLp5aX/ujL3zRhRBUxntvTmIYh+hVDVHNcI2omWSN6TOpqlGNPvjOzUJCT5WICiKvKI/TTEiY3qXaAE2pVoiiqsexHMx89nN/9b745v65iSg+9gBfexsqBzFuSbwX4qFiCASQIWRAhcgotIw2RY1oRvQEeDFtLwJzRe5u39699Go7n7S8r0yKWnWWJ4fjEBxQYZ4hWmRzau6hZWPmRaZ8mALqrm8hXlEQ5UBUrQ1GaeHWKukDxiy9/13XNrbmRDIiBnYMb6+vALDviFqPI+ZYO6T7n/wogNb//upHgh4R9lX/k00sNBGtKLJSLQUVRQ540ZrhheiXVNsxJjGyCJi86ES0G6Q73Bz7YI0hlTphRnRB4ynVWaKMKAKeqBNdiNFY2+v2u8CDrcZys76gOiPi3v9uAKsfePct4PC5F5pE9z7w7lL8Zz749Dn6S+8r78Cu/LhHz4zfuBmibjO//yc/cuuNWzlR6A0aWZqoQCFAUM2Ban90ul49HfKTSWOZcAKYJ5pWrbiYVbL++OAe065IQpglWiBajLIyOTrVmF9kmgGyEKU4OiDeDeFUlj6TpY+LPKZ6lugE0c7plVI+DqA4szo4vXocYYAtq1R0n25BBNV35K8Aip/8iCpOQAF86hM//NoffmXUbg4JXeE+9HAwCsAMsNmsz3b6z7R1VXXemIw9buHeAAAAtElEQVRZVYYRe8yx9/aQ6KZIVK0pEmhGaDHPqMzvvTk3dxaqe50bBzFmhn+AeQqYZ54jmlZNVN+8r2X+f4a9nyEIVErIS0Hp8erLWCYt0XTsHNwPmkeAhDARyZmHxMPpVl+0JzJUvV2v7gPPdt+enX2onlglpMVYs/S1YXyOOSHKQAlhArzdH6626pa44d3cwVvB+26MbyeW3/+upa+9sAacgLYIEO0RXTfm/4c57vMTEeH/Ag/L7UkXghKYAAAAAElFTkSuQmCC",
			"name": "SDF_Displace_Height",
			"parameters": {
				"Bound": 0.0,
				"Correction": 0.0,
				"Distort": 0.0
			},
			"shader_model": {
				"code": "vec4 $(name_uv)_d = distortHeighByNormal_$name($uv.xyz);\n$(name_uv)_d.w = $(name_uv)_d.w/(1.0+$Distort*$Correction);",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D Displace",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.01,-0.01,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\n//By pauloFalcao\nvec4 distortHeighByNormal_$name(vec3 uv){\n    float d=$sdf(uv);\n\tif (d<=abs($Distort*($Bound+1.0))+0.01){\n\t\tvec3 n=normal_$name(uv);\n\t\tvec3 s=$tex3d(vec4(uv-d*n,0.0));\n\t    return vec4(s,$sdf(uv-n*s*$Distort));\n\t} else {\n\t\treturn vec4(vec3(0.0),d);\n\t}\n\n}",
				"longdesc": "Displace the height of a 3DSDF based on a TEX3D\n\nCode - PauloFalcao",
				"name": "SDF Displace Height",
				"outputs": [
					{
						"sdf3d": "$(name_uv)_d.w",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					},
					{
						"longdesc": "TEX3D at the original SDF3D surface before the displace",
						"shortdesc": "TEX3D Output",
						"tex3d": "$(name_uv)_d.xyz",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Displace",
						"max": 1.0,
						"min": 0.0,
						"name": "Distort",
						"shortdesc": "Displace amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 50.0,
						"min": 0.0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Bound",
						"longdesc": "Keep this value as low as possible!\nOutside of the displacement the SDF is just the original SDF.\nThis value controls that bound.\nIncrease this correction value if the resulting SDF is not perfect on the edges.\nA higher value will increase ray marching loop iterations and will result in higher render times",
						"max": 1.0,
						"min": 0.0,
						"name": "Bound",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Displace Height"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Displace Height",
			"type": "shader"
		},
		{
			"display_name": "Smooth Axis Symmetry",
			"icon_data": "",
			"name": "SDF_Smooth_Axis_Symmetry",
			"parameters": {
				"mode": 0.0,
				"smooth": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Transforms a SDF3D making a mirror smooth symmetry using the chosen axis\n\nCode - PauloFalcao",
				"name": "SDF Smooth Axis Symmetry",
				"outputs": [
					{
						"sdf3d": "$in(vec3($mode))",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
							},
							{
								"name": "XY",
								"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
							},
							{
								"name": "XZ",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
							},
							{
								"name": "X",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Smooth",
						"max": 1.0,
						"min": 0.0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Axis Symmetry"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"display_name": "Smooth Polar Repeat",
			"icon_data": "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",
			"name": "SDF_Smooth_Polar_Repeat",
			"parameters": {
				"Axis": 1.0,
				"Distance": 1.0,
				"Repetitions": 6.0,
				"Smooth": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec3 sdf_smoothRot_X(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.y,p.z)*s)/(m+1.0))/s;\n  return vec3(p.x,sin(x)*length(p.yz),cos(x)*length(p.yz)-distance);\n}\n\nvec3 sdf_smoothRot_Y(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.x,p.z)*s)/(m+1.0))/s;\n  return vec3(sin(x)*length(p.xz),p.y,cos(x)*length(p.xz)-distance);\n}\n\nvec3 sdf_smoothRot_Z(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.x,p.y)*s)/(m+1.0))/s;\n  return vec3(sin(x)*length(p.xy),cos(x)*length(p.xy)-distance,p.z);\n}\n\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "This is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions. The technique was later improved by gaz.\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh\nGaz improvement https://www.shadertoy.com/view/7sKGzR\n\nCode - PauloFalcao, Gaz",
				"name": "SDF Smooth Polar Repeat",
				"outputs": [
					{
						"sdf3d": "$in(sdf_smoothRot_$Axis($uv,$Repetitions,$Smooth,$Distance))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Axis",
						"longdesc": "Polar repetition axis, objects will be repeated around this axis.",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 6.0,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32.0,
						"min": 1.0,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5.0,
						"min": 0.0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1.0,
						"min": 0.0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Polar Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"display_name": "Smooth Repeat Fold",
			"icon_data": "",
			"name": "SDF_Smooth_Repeat_Fold",
			"parameters": {
				"Axis": 4.0,
				"Iterations": 2.0,
				"SmoothX": 0.0,
				"SmoothY": 0.0,
				"SmoothZ": 0.0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "//From https://www.shadertoy.com/view/wlyBWm by @paulofalcao\n\nvec3 smoothrepeat_$name(vec3 p,vec3 smooth_size,vec3 size){\n    size.$Axis/=2.0;\n    float w=pow(2.0,float($Iterations));\n\tfor(int i=0;i<$Iterations;i++){\n        p.$Axis=sqrt(p.$Axis*p.$Axis+smooth_size.$Axis);//smooth abs\n\t\tp.$Axis-=size.$Axis*w;//translate\n\t\tw=w/2.0;\n\t}\n\treturn p;\n}\n",
				"longdesc": "Repeats its input shape with smoothness using folding reflection symmetry\n\nCode - PauloFalcao",
				"name": "SDF Smooth Repeat Fold",
				"outputs": [
					{
						"sdf3d": "$in(smoothrepeat_$name($uv,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 3.0,
						"label": "Axis",
						"longdesc": "Repetition axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"default": 2.0,
						"label": "Repetitions",
						"longdesc": "Repetitions in the X axis",
						"name": "Iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "0"
							},
							{
								"name": "2",
								"value": "1"
							},
							{
								"name": "4",
								"value": "2"
							},
							{
								"name": "8",
								"value": "3"
							},
							{
								"name": "16",
								"value": "4"
							},
							{
								"name": "32",
								"value": "5"
							},
							{
								"name": "64",
								"value": "6"
							},
							{
								"name": "128",
								"value": "7"
							},
							{
								"name": "256",
								"value": "8"
							},
							{
								"name": "512",
								"value": "9"
							},
							{
								"name": "1024",
								"value": "10"
							},
							{
								"name": "2048",
								"value": "11"
							},
							{
								"name": "4096",
								"value": "12"
							},
							{
								"name": "8192",
								"value": "13"
							},
							{
								"name": "16384",
								"value": "14"
							},
							{
								"name": "32768",
								"value": "15"
							},
							{
								"name": "65536",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4.0,
						"min": 0.0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 0.1,
						"min": 0.0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 0.1,
						"min": 0.0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 0.1,
						"min": 0.0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Smooth Repeat Fold",
			"type": "shader"
		},
		{
			"display_name": "Smooth Repeat Infinite",
			"icon_data": "",
			"name": "SDF_Smooth_Repeat_Infinite",
			"parameters": {
				"Axis": 4.0,
				"SmoothX": 0.0,
				"SmoothY": 0.0,
				"SmoothZ": 0.0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "float blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return $in(p);\n}",
				"longdesc": "Repeats its input shape with smoothness using reflection symmetry (Infinite repetitions)\n\nCode - Blackle",
				"name": "SDF Smooth Repeat Infinite",
				"outputs": [
					{
						"sdf3d": "blakle_smoothrepeat_asin_sin_$name($uv,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)*0.635)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6.0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4.0,
						"min": 0.0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Repeat V2"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Smooth Repeat Infinite",
			"type": "shader"
		},
		{
			"display_name": "Smooth Repeat Limited",
			"icon_data": "",
			"name": "SDF_Smooth_Repeat_Limited",
			"parameters": {
				"Axis": 4.0,
				"RepX": 3.0,
				"RepY": 3.0,
				"RepZ": 3.0,
				"SmoothB": 0.0,
				"SmoothX": 0.0,
				"SmoothY": 0.0,
				"SmoothZ": 0.0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "//Uses shapes from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm by iq\n//And Smooth Repetition in https://www.shadertoy.com/view/wlyBWm by blakle\n\nfloat iq_sdRoundBox(in vec3 p,in vec3 b, float r ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0)-r;\n}\n\nfloat iq_opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\n\n",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "vec3 blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return p;\n}\n\nfloat Blackle_SDF3D_Smooth_Repeat_$name(vec3 p,vec3 size,vec3 rep,vec3 smooth_,float smoothb){\n  float b=iq_sdRoundBox(p,size*rep,smoothb);\n  p=blakle_smoothrepeat_asin_sin_$name(p,smooth_,size);\n  return iq_opSmoothIntersection($in(p),b,smoothb);\n}\n",
				"longdesc": "Repeats its input shape with smoothness using reflection symmetry with a smooth box limit\n\nCode - Blackle, PauloFalcao",
				"name": "SDF Smooth Repeat Limited",
				"outputs": [
					{
						"sdf3d": "Blackle_SDF3D_Smooth_Repeat_$name($uv,vec3($X,$Y,$Z)*0.635,vec3($RepX,$RepY,$RepZ)+1.5,vec3($SmoothX,$SmoothY,$SmoothZ),$SmoothB)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6.0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4.0,
						"min": 0.0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.01,
						"label": "SmoothB",
						"longdesc": "Smoothness on the boundary. Uses smooth intersection with a box",
						"max": 1.0,
						"min": 0.0,
						"name": "SmoothB",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Repeat V2 Limited"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Smooth Repeat Limited",
			"type": "shader"
		},
		{
			"display_name": "Axis Symmetry",
			"icon_data": "",
			"name": "SDF_Axis_Symmetry",
			"parameters": {
				"mode": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Transforms a SDF3D making a mirror symmetry using the chosen axis\n\nCode - PauloFalcao",
				"name": "SDF Axis Symmetry",
				"outputs": [
					{
						"sdf3d": "$in(vec3($mode))",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6.0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "SDF Axis Symmetry"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Axis Symmetry",
			"type": "shader"
		},
		{
			"display_name": "RotAndFlip",
			"icon_data": "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",
			"name": "SDF3D_RotAndFlip",
			"parameters": {
				"anglex": 0.0,
				"angley": 0.0,
				"anglez": 0.0,
				"flipx": 0.0,
				"flipy": 0.0,
				"flipz": 0.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "sdf",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					}
				],
				"instance": "vec3 sdf3drotandflip_$name(vec3 p) {\n\tvec3 point = p;\n\t$flipx\n\t$flipy\n\t$flipz\n\tvec3 resultX = $anglex;\n\tvec3 resultY = $angley;\n\tvec3 resultZ = $anglez;\n\treturn resultZ;\n}",
				"longdesc": "Rotates and flips axis",
				"name": "SDF3D RotAndFlip",
				"outputs": [
					{
						"sdf3d": "$sdf(sdf3drotandflip_$name($uv));",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Flip X",
						"name": "flipx",
						"type": "enum",
						"values": [
							{
								"name": "No",
								"value": ""
							},
							{
								"name": "Yes",
								"value": "point.x = -point.x;"
							}
						]
					},
					{
						"default": 0.0,
						"label": "Flip Y",
						"name": "flipy",
						"type": "enum",
						"values": [
							{
								"name": "No",
								"value": ""
							},
							{
								"name": "Yes",
								"value": "point.y = -point.y;"
							}
						]
					},
					{
						"default": 0.0,
						"label": "Flip Z",
						"name": "flipz",
						"type": "enum",
						"values": [
							{
								"name": "No",
								"value": ""
							},
							{
								"name": "Yes",
								"value": "point.z = -point.z;"
							}
						]
					},
					{
						"default": 3.0,
						"label": "Angle X",
						"name": "anglex",
						"type": "enum",
						"values": [
							{
								"name": "0°",
								"value": "point;"
							},
							{
								"name": "90°",
								"value": "vec3(point.x, -point.z, point.y);"
							},
							{
								"name": "180°",
								"value": "vec3(point.x, -point.y, -point.z);"
							},
							{
								"name": "270°",
								"value": "vec3(point.x, point.z, -point.y);"
							}
						]
					},
					{
						"default": 3.0,
						"label": "Angle Y",
						"name": "angley",
						"type": "enum",
						"values": [
							{
								"name": "0°",
								"value": "resultX;"
							},
							{
								"name": "90°",
								"value": "vec3(resultX.z, resultX.y, -resultX.x);"
							},
							{
								"name": "180°",
								"value": "vec3(-resultX.x, resultX.y, -resultX.z);"
							},
							{
								"name": "270°",
								"value": "vec3(-resultX.z, resultX.y, resultX.x);"
							}
						]
					},
					{
						"default": 3.0,
						"label": "Angle Z",
						"name": "anglez",
						"type": "enum",
						"values": [
							{
								"name": "0°",
								"value": "resultY;"
							},
							{
								"name": "90°",
								"value": "vec3(-resultY.y, resultY.x, resultY.z);"
							},
							{
								"name": "180°",
								"value": "vec3(-resultY.x, -resultY.y, resultY.z);"
							},
							{
								"name": "270°",
								"value": "vec3(resultY.y, -resultY.x, resultY.z);"
							}
						]
					}
				],
				"shortdesc": "SDF3D RotAndFlip"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/RotAndFlip",
			"type": "shader"
		},
		{
			"display_name": "Bevel",
			"icon_data": "",
			"name": "SDF3D_Bevel",
			"parameters": {
				"s": 0.2
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "A kind of bevel, only works well with axis aligned surfaces\n\nCode - PauloFalcao",
				"name": "SDF3D Bevel",
				"outputs": [
					{
						"sdf3d": "($in($uv+vec3(0.0,0.0,$s))+$in($uv+vec3(0.0,0.0,-$s))+$in($uv+vec3(0.0,$s,0.0))+$in($uv+vec3(0.0,-$s,0.0))+$in($uv+vec3($s,0.0,0.0))+$in($uv+vec3(-$s,0.0,0.0)))/6.0",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.5,
						"label": "Size",
						"max": 1.0,
						"min": 0.0,
						"name": "s",
						"step": 0.0001,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Bevel",
			"type": "shader"
		},
		{
			"display_name": "Blur",
			"icon_data": "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",
			"name": "SDF_Blur",
			"parameters": {
				"blur": 0.0,
				"bound": 1.0,
				"iterations": 3.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"longdesc": "SDF3D Input",
						"name": "in",
						"type": "sdf3d"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$in(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$in(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Blurs a SDF3D sampling fibonacci points on a sphere surface\n\nCode - PauloFalcao",
				"name": "SDF Blur",
				"outputs": [
					{
						"longdesc": "SDF3D Output",
						"sdf3d": "blursdf3d_$name($uv,$blur,$bound)",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 3.0,
						"label": "Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							},
							{
								"name": "89",
								"value": "89"
							},
							{
								"name": "144",
								"value": "144"
							},
							{
								"name": "233",
								"value": "233"
							},
							{
								"name": "377",
								"value": "377"
							},
							{
								"name": "610",
								"value": "610"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Blur",
						"max": 5.0,
						"min": 0.0,
						"name": "blur",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Bound",
						"max": 10.0,
						"min": 0.0,
						"name": "bound",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Blur",
			"type": "shader"
		},
		{
			"display_name": "Box Folding",
			"icon_data": "",
			"name": "SDF_Box_Folding",
			"parameters": {
				"s": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "1.0",
						"label": "",
						"longdesc": "The input object as a signed distance function",
						"name": "in",
						"shortdesc": "Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Folds space by inverting the coordinates of space outside the box \n\nCode - PauloFalcao",
				"name": "SDF Box Folding",
				"outputs": [
					{
						"longdesc": "The scaled object",
						"sdf3d": "$in(clamp($uv,-$s,$s)*2.0-$uv)",
						"shortdesc": "Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "",
						"max": 5.0,
						"min": 0.0,
						"name": "s",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Box Folding"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Box Folding",
			"type": "shader"
		},
		{
			"display_name": "Correction",
			"icon_data": "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",
			"name": "SDF_Correction",
			"parameters": {
				"correction": 0.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "vec2 $(name_uv)_in = $in($uv);",
				"global": "",
				"inputs": [
					{
						"default": "vec2(100.0, 0.0)",
						"label": "",
						"longdesc": "The input object as a signed distance function",
						"name": "in",
						"shortdesc": "SDF 3D",
						"type": "sdf3dc"
					}
				],
				"instance": "",
				"longdesc": "Divides the SDF estimation by a factor, to correct for errors.\nRelated with Lipschitz continuity.\n\nCode - PauloFalcao",
				"name": "SDF Correction",
				"outputs": [
					{
						"longdesc": "The scaled object",
						"sdf3dc": "vec2($(name_uv)_in.x/($correction+1.0), $(name_uv)_in.y)",
						"shortdesc": "Output",
						"type": "sdf3dc"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "The correction factor",
						"max": 1.0,
						"min": 0.0,
						"name": "correction",
						"shortdesc": "Correction",
						"step": 0.01,
						"type": "float"
					}
				],
				"shortdesc": "SDF Correction"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Correction",
			"type": "shader"
		},
		{
			"display_name": "Deform Edges",
			"icon_data": "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",
			"name": "SDF_Deform_Edges",
			"parameters": {
				"edgeb": 0.0,
				"edges": 0.04,
				"f": 2.0,
				"g": 2.0,
				"h": 0.0,
				"iterations": 3.0,
				"m": 0.0,
				"texdb": 0.0,
				"texdc": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=blursdf3d_$name($uv.xyz,$edgeb,1.01);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_mix=clamp($texd(vec4($uv.xyz,1.0))*$texdc+$texdb+0.5-$texdc*0.5,0.0,1.0);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.,0.0,1.0));\n",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base SDF",
						"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "sdfa",
						"shortdesc": "Main SDF",
						"type": "sdf3d"
					},
					{
						"default": "0.5",
						"function": true,
						"label": "Surface Deform",
						"longdesc": "Surface deformation texture based on the difference between the two PDFs",
						"name": "texd",
						"shortdesc": "Surface Deform Texture",
						"type": "tex3d_gs"
					},
					{
						"default": "vec3(0.8,0.6,0.6)",
						"function": true,
						"label": "Tex Bump",
						"longdesc": "Bump Texture, where the SDF difference is negative",
						"name": "texa",
						"shortdesc": "Bump Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "Tex Surface",
						"longdesc": "Surface Texture, where the SDF difference is close to zero",
						"name": "texb",
						"shortdesc": "Surface Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.3,0.1,0.1)",
						"function": true,
						"label": "Tex Hole",
						"longdesc": "Hole Texture, where the SDF difference is positive",
						"name": "texc",
						"shortdesc": "Hole Texture",
						"type": "tex3d"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$sdfa(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$sdfa(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Modifies an SDF by comparing the base SDF and a modified blured version of the base SDF.\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.\n\nCode - PauloFalcao",
				"name": "SDF Deform Edges",
				"outputs": [
					{
						"sdf3d": "$(name_uv)_modsdf",
						"type": "sdf3d"
					},
					{
						"tex3d": "$(name_uv)_tex",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.04,
						"label": "Edge Size",
						"longdesc": "Blur amount applied to the original SDF generating a new SDF",
						"max": 0.1,
						"min": 0.0,
						"name": "edges",
						"shortdesc": "Edge Size",
						"step": 0.0001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.02,
						"label": "Obj Blur",
						"longdesc": "A small Blur applied to the original SDF",
						"max": 0.5,
						"min": 0.0,
						"name": "edgeb",
						"shortdesc": "Obj Blur",
						"step": 0.0001,
						"type": "float"
					},
					{
						"default": 6.0,
						"label": "Edge Precision",
						"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
						"name": "iterations",
						"shortdesc": "Edge Blur precision",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Deform",
						"max": 4.0,
						"min": 0.0,
						"name": "g",
						"shortdesc": "SDF Deformation amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Deform Brigh.",
						"max": 1.0,
						"min": -1.0,
						"name": "texdb",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Deform Cont.",
						"max": 2.0,
						"min": 0.0,
						"name": "texdc",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Select",
						"max": 1.0,
						"min": 0.0,
						"name": "m",
						"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Contrast",
						"max": 1.0,
						"min": 0.0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Shift",
						"max": 1.0,
						"min": -1.0,
						"name": "h",
						"shortdesc": "Shift  difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Deform Edges"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Deform Edges",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box_2",
					"from_node": "node_sdf3d_box_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_5",
					"to_node": "node_pxflib_5",
					"to_port": 0.0
				},
				{
					"from": "pxflib",
					"from_node": "node_pxflib",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_2",
					"to_node": "node_shader_2",
					"to_port": 2.0
				},
				{
					"from": "pxflib_2",
					"from_node": "node_pxflib_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_2",
					"to_node": "node_shader_2",
					"to_port": 3.0
				},
				{
					"from": "pxflib_3",
					"from_node": "node_pxflib_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_2",
					"to_node": "node_shader_2",
					"to_port": 4.0
				},
				{
					"from": "TEX3D_Simplex_Noise_Octaves",
					"from_node": "node_TEX3D_Simplex_Noise_Octaves",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_2",
					"to_node": "node_shader_2",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_boolean_2",
					"from_node": "node_sdf3d_boolean_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_2",
					"to_node": "node_shader_2",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_box",
					"from_node": "node_sdf3d_box",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean_2",
					"to_node": "node_sdf3d_boolean_2",
					"to_port": 0.0
				},
				{
					"from": "pxflib_5",
					"from_node": "node_pxflib_5",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean_2",
					"to_node": "node_sdf3d_boolean_2",
					"to_port": 1.0
				},
				{
					"from": "shader_2",
					"from_node": "node_shader_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "Multi_Transform",
					"to_node": "node_Multi_Transform",
					"to_port": 0.0
				},
				{
					"from": "shader_2",
					"from_node": "node_shader_2",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "Multi_Transform",
					"to_node": "node_Multi_Transform",
					"to_port": 1.0
				},
				{
					"from": "Multi_Transform",
					"from_node": "node_Multi_Transform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 2.0
				},
				{
					"from": "Multi_Transform",
					"from_node": "node_Multi_Transform",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 3.0
				},
				{
					"from": "SDF_Checkerboard",
					"from_node": "node_SDF_Checkerboard",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 0.0
				},
				{
					"from": "SDF_Checkerboard",
					"from_node": "node_SDF_Checkerboard",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 1.0
				}
			],
			"display_name": "Deform Edges Example",
			"icon_data": "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",
			"nodes": [
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -215.054260253906,
						"y": 72.4473876953125
					},
					"parameters": {
						"color": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 0.0,
							"type": "Color"
						}
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -214.054260253906,
						"y": -73.5526123046875
					},
					"parameters": {
						"color": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						}
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -212.054260253906,
						"y": 2.4473876953125
					},
					"parameters": {
						"color": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 1.0,
							"type": "Color"
						}
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "shader_2",
					"node_position": {
						"x": 29.4658813476562,
						"y": -12.2637939453125
					},
					"parameters": {
						"edgeb": 0.019,
						"edges": 0.0378,
						"f": 2.0,
						"g": 2.0,
						"h": 0.0,
						"iterations": 3.0,
						"m": 0.0,
						"texdb": -0.38,
						"texdc": 1.768
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float $(name_uv)_sdfa=blursdf3d_$name($uv.xyz,$edgeb,1.01);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_mix=clamp($texd(vec4($uv.xyz,1.0))*$texdc+$texdb+0.5-$texdc*0.5,0.0,1.0);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.,0.0,1.0));\n",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Base SDF",
								"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
								"name": "sdfa",
								"shortdesc": "Main SDF",
								"type": "sdf3d"
							},
							{
								"default": "0.5",
								"function": true,
								"label": "Surface Deform",
								"longdesc": "Surface deformation texture based on the difference between the two PDFs",
								"name": "texd",
								"shortdesc": "Surface Deform Texture",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(0.8,0.6,0.6)",
								"function": true,
								"label": "Tex Bump",
								"longdesc": "Bump Texture, where the SDF difference is negative",
								"name": "texa",
								"shortdesc": "Bump Texture",
								"type": "tex3d"
							},
							{
								"default": "vec3(1.0,0.0,0.0)",
								"function": true,
								"label": "Tex Surface",
								"longdesc": "Surface Texture, where the SDF difference is close to zero",
								"name": "texb",
								"shortdesc": "Surface Texture",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.3,0.1,0.1)",
								"function": true,
								"label": "Tex Hole",
								"longdesc": "Hole Texture, where the SDF difference is positive",
								"name": "texc",
								"shortdesc": "Hole Texture",
								"type": "tex3d"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$sdfa(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$sdfa(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - SDF Operator\nCode - PauloFalcao\n\nModifies an SDF by comparing the base SDF and a modified blured version of the base SDF.\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.",
						"name": "SDF Deform Edges",
						"outputs": [
							{
								"sdf3d": "$(name_uv)_modsdf",
								"type": "sdf3d"
							},
							{
								"tex3d": "$(name_uv)_tex",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.04,
								"label": "Edge Size",
								"longdesc": "Blur amount applied to the original SDF generating a new SDF",
								"max": 0.1,
								"min": 0.0,
								"name": "edges",
								"shortdesc": "Edge Size",
								"step": 0.0001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.02,
								"label": "Obj Blur",
								"longdesc": "A small Blur applied to the original SDF",
								"max": 0.5,
								"min": 0.0,
								"name": "edgeb",
								"shortdesc": "Obj Blur",
								"step": 0.0001,
								"type": "float"
							},
							{
								"default": 6.0,
								"label": "Edge Precision",
								"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
								"name": "iterations",
								"shortdesc": "Edge Blur precision",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									}
								]
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Deform",
								"max": 4.0,
								"min": 0.0,
								"name": "g",
								"shortdesc": "SDF Deformation amount",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Deform Brigh.",
								"max": 1.0,
								"min": -1.0,
								"name": "texdb",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Deform Cont.",
								"max": 2.0,
								"min": 0.0,
								"name": "texdc",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Select",
								"max": 1.0,
								"min": 0.0,
								"name": "m",
								"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Color Contrast",
								"max": 1.0,
								"min": 0.0,
								"name": "f",
								"shortdesc": "Increases the difference between Textures",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Color Shift",
								"max": 1.0,
								"min": -1.0,
								"name": "h",
								"shortdesc": "Shift  difference between Textures",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Deform Edges"
					},
					"type": "shader"
				},
				{
					"name": "TEX3D_Simplex_Noise_Octaves",
					"node_position": {
						"x": -315.850402832031,
						"y": 168.927734375
					},
					"parameters": {
						"brightness": 0.0,
						"clamp": 1.0,
						"contrast": 2.0,
						"iterations": 5.0,
						"persistence": 0.5,
						"scale": 26.0,
						"scale_x": 1.0,
						"scale_y": 1.0,
						"scale_z": 1.0,
						"transx": 0.0,
						"transy": 0.0,
						"transz": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
						"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// using https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tc = fract(c * vec3(.1031, .1030, .0973));\n    c += dot(c, c.yxz+0.3333333);\n    return fract((c.xxy + c.yxx)*c.zyx)-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
						"inputs": [],
						"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
						"longdesc": "Makes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB\n\nCode - Nikat",
						"name": "TEX3D Simplex Noise Octaves",
						"outputs": [
							{
								"shortdesc": "TEX3D output",
								"tex3d": "$clamp",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 8.0,
								"label": "Scale",
								"longdesc": "Noise scale",
								"max": 32.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale X",
								"longdesc": "Noise X scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale Y",
								"longdesc": "Noise Y scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Scale Z",
								"longdesc": "Noise Z scale",
								"max": 16.0,
								"min": 0.0,
								"name": "scale_z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate X",
								"longdesc": "Noise X translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transx",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate Y",
								"longdesc": "Noise Y translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transy",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Translate Z",
								"longdesc": "Noise Z translate",
								"max": 100.0,
								"min": 0.0,
								"name": "transz",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 12.0,
								"label": "Iterations",
								"longdesc": "Noise iterations / octaves",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Persistence",
								"longdesc": "How higher octaves affect the output",
								"max": 1.0,
								"min": 0.0,
								"name": "persistence",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Brightness",
								"longdesc": "Overall brightness",
								"max": 1.0,
								"min": 0.0,
								"name": "brightness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Contrast",
								"longdesc": "Overall Contrast",
								"max": 1.0,
								"min": 0.0,
								"name": "contrast",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "Clamp",
								"longdesc": "Makes the output restricted between 0 and 1",
								"name": "clamp",
								"type": "enum",
								"values": [
									{
										"name": "false",
										"value": "$(name_uv)_out"
									},
									{
										"name": "true",
										"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
									}
								]
							}
						],
						"shortdesc": "TEX3D Simplex Noise Octaves"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -695.850402832031,
						"y": -101.072265625
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed_int": 0.0,
					"type": "sdf3d_box"
				},
				{
					"generic_size": 1.0,
					"name": "sdf3d_boolean_2",
					"node_position": {
						"x": -195.850402832031,
						"y": -201.072265625
					},
					"parameters": {
						"op1": 1.0
					},
					"seed_int": 0.0,
					"type": "sdf3d_boolean_v"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -685.850402832031,
						"y": -251.072265625
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed_int": 0.0,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -495.850402832031,
						"y": -101.072265625
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": 0.2,
						"TranslateZ": 0.2,
						"scale": 0.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "SDF_Checkerboard",
					"node_position": {
						"x": 464.149597167969,
						"y": -221.072265625
					},
					"parameters": {
						"AA": 0.0,
						"Position": -1.0,
						"Size": 10.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "float Simple_AAcheckedboard2D(vec2 p) {\n    p*=2.0;\n\tvec2 w=max(abs(dFdx(p)),abs(dFdy(p)))+1e-5;\n\tif (max(w.x,w.y)>1.0) {\n\t\treturn mod(floor(p.x)+floor(p.y),2.0);\n\t}\n\tvec2 i=((1.-abs(2.*fract((p+.5*w)/2.)-1.))-(1.-abs(2.*fract((p-.5*w)/2.)-1.)))/w;\n\treturn .5-.5*i.x*i.y;\n}",
						"inputs": [],
						"instance": "",
						"longdesc": "",
						"name": "SDF Checkerboard",
						"outputs": [
							{
								"sdf3d": "max($uv.y-$Position,length(vec3($uv.x,$uv.y+$Position,$uv.z))-$Size)",
								"type": "sdf3d"
							},
							{
								"tex3d": "vec3($AA)*0.9+0.1",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "Position",
								"max": 2.0,
								"min": -5.0,
								"name": "Position",
								"step": 0.1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 10.0,
								"label": "Size",
								"max": 30.0,
								"min": 1.0,
								"name": "Size",
								"step": 1.0,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "AA",
								"name": "AA",
								"shortdesc": "Anti-Aliasing",
								"type": "enum",
								"values": [
									{
										"name": "No",
										"value": "mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0)"
									},
									{
										"name": "Yes",
										"value": "Simple_AAcheckedboard2D($uv.xz)"
									}
								]
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "Multi_Transform",
					"node_position": {
						"x": 444.149597167969,
						"y": -11.072265625
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": 0.0,
						"TranslateZ": 0.0,
						"scale": 2.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "vec3 MultiTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"default": "0.0",
								"label": "",
								"name": "tex",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							}
						],
						"instance": "",
						"longdesc": "Translates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate\n\nCode - RodZilla, PauloFalcao",
						"name": "Multi Transform",
						"outputs": [
							{
								"sdf3d": "$in(MultiTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale)*$scale",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"shortdesc": "TEX3D",
								"tex3d": "$tex(MultiTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale)",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"generic_size": 2.0,
					"name": "pxflib_4",
					"node_position": {
						"x": 804.149597167969,
						"y": -211.072265625
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1.0,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"Pow": 64.0,
						"Reflection": 0.2,
						"Shadow": 1.0,
						"Specular": 0.0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv.xyz)-0.4",
								"function": true,
								"label": "SDF3D #",
								"name": "sdf#",
								"shortdesc": "SDF3D #",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.0,0.0)",
								"function": true,
								"label": "TEX3D #",
								"name": "tex#",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "\nvec2 input_$name(vec3 p) {\n    vec2 sdf=vec2(999999.0,0.0);\n\tfloat m;\n#for\n    m=$sdf#(p);\n    if (m<sdf.x){\n\t  sdf=vec2(m,#.0);\n\t}\n#end\n    return sdf;\n}\n\n\nvec3 tex_$name(vec3 p,float id) {\n    vec3 t=vec3(0.0);\n#for\n    if (id>(#.0-0.5)&&id<(#.0+0.5)) {\n\t  t=$tex#(vec4(p,id));\n\t}\n#end\n\n    return t;\n}\n\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\t\n\tvec3 objColor=tex_$name(p,dS.y);\n\t\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=tex_$name(p,dS.y);\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "SDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1.0,
								"min": 0.0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32.0,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024.0,
								"min": 0.0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10.0,
								"min": -10.0,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10.0,
								"min": -10.0,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10.0,
								"min": -10.0,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1.0,
								"min": 0.0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/SDF3D/Op/Deform Edges Example"
		},
		{
			"display_name": "Deform Edges Generic",
			"icon_data": "",
			"name": "SDF_Deform_Edges_Generic",
			"parameters": {
				"f": 2.5,
				"g": 2.5,
				"h": 0.0,
				"m": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$sdfa($uv.xyz);\nfloat $(name_uv)_sdfb=$sdfb($uv.xyz);\nfloat $(name_uv)_mix=$texd(vec4($uv.xyz,1.0));\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.,0.0,1.0));",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base SDF",
						"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "sdfa",
						"shortdesc": "Main SDF",
						"type": "sdf3d"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified SDF",
						"longdesc": "Modified SDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
						"name": "sdfb",
						"shortdesc": "Modified SDF",
						"type": "sdf3d"
					},
					{
						"default": "0.2",
						"function": true,
						"label": "Surface Deform",
						"longdesc": "Surface deformation texture based on the difference between the two PDFs",
						"name": "texd",
						"shortdesc": "Surface Deform Texture",
						"type": "tex3d_gs"
					},
					{
						"default": "vec3(0.7)",
						"function": true,
						"label": "Tex Bump",
						"longdesc": "Bump Texture, where the SDF difference is negative",
						"name": "texa",
						"shortdesc": "Bump Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "Tex Surface",
						"longdesc": "Surface Texture, where the SDF difference is close to zero",
						"name": "texb",
						"shortdesc": "Surface Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.2)",
						"function": true,
						"label": "Tex Hole",
						"longdesc": "Hole Texture, where the SDF difference is positive",
						"name": "texc",
						"shortdesc": "Hole Texture",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Modifies an SDF by comparing the base SDF and a modified version of the base SDF.\nTypically the modified version is a soft version of the base version, which can be done using the Node SDF Blur\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.\n\nCode - PauloFalcao",
				"name": "SDF Deform Edges Generic",
				"outputs": [
					{
						"sdf3d": "$(name_uv)_modsdf",
						"type": "sdf3d"
					},
					{
						"tex3d": "$(name_uv)_tex",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Deform",
						"max": 4.0,
						"min": 0.0,
						"name": "g",
						"shortdesc": "SDF Deformation amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Select",
						"max": 1.0,
						"min": 0.0,
						"name": "m",
						"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Contrast",
						"max": 1.0,
						"min": 0.0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Shift",
						"max": 1.0,
						"min": -1.0,
						"name": "h",
						"shortdesc": "Shift  difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Deform Edges Generic"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Deform Edges Generic",
			"type": "shader"
		},
		{
			"display_name": "Fractal IFS",
			"icon_data": "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",
			"name": "SDF_Fractal_IFS",
			"parameters": {
				"iterations": 3.0,
				"minite": 0.0,
				"mode": 1.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "SDF3D",
						"longdesc": "The object that will be repeated",
						"name": "obj3d",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					},
					{
						"default": "vec4(0.0)",
						"function": true,
						"label": "V4->V4 3D Transformation",
						"longdesc": "The transformation that will be applied each iteration",
						"name": "trans3d",
						"shortdesc": "V4->V4 Transformation",
						"type": "v4v4"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"function": true,
						"label": "SDF2D Custom Boolean",
						"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
						"name": "custombool",
						"shortdesc": "SDF2D Join",
						"type": "sdf2d"
					}
				],
				"instance": "float for_fold_$name(vec4 p) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  return $obj3d(p.xyz)/p.w;\n}\n\nfloat for_min_$name(vec4 p) {\n  float d=0.0;\n  float m=999999.0;\n  if ($minite==0){\n\t  d=$obj3d(p.xyz);\n\t  m=min(999999.0,d);\n  }\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tif (i>=$minite) m=min(m,d/p.w);\n  }\n  return m;\n}\n\nfloat for_custom_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=$custombool(vec2(999999.0,d));\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=$custombool(vec2(m,d/p.w));\n  }\n  return m;\n}",
				"longdesc": "IFS Fractal, repeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.\n\nCode - PauloFalcao",
				"name": "SDF Fractal IFS",
				"outputs": [
					{
						"sdf3d": "$mode",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 24.0,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "17",
								"value": "17"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "19",
								"value": "19"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "22",
								"value": "22"
							},
							{
								"name": "23",
								"value": "23"
							},
							{
								"name": "24",
								"value": "24"
							}
						]
					},
					{
						"default": 0.0,
						"label": "Mode",
						"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Fold",
								"value": "for_fold_$name(vec4($uv,1.0))"
							},
							{
								"name": "Min",
								"value": "for_min_$name(vec4($uv,1.0))"
							},
							{
								"name": "Custom",
								"value": "for_custom_$name(vec4($uv,1.0))"
							}
						]
					},
					{
						"default": 0.0,
						"label": "MinIteration",
						"longdesc": "Used for Min and Custom, only the objects after and on this iteration will be combined.",
						"name": "minite",
						"shortdesc": "Minimum Iteration",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							}
						]
					}
				],
				"shortdesc": "SDF Fractal"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Fractal IFS",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_sphere",
					"from_node": "node_sdf3d_sphere",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_18",
					"to_node": "node_pxflib_18",
					"to_port": 0.0
				},
				{
					"from": "sdsmoothboolean",
					"from_node": "node_sdsmoothboolean",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_18",
					"to_node": "node_pxflib_18",
					"to_port": 2.0
				},
				{
					"from": "pxflib_18",
					"from_node": "node_pxflib_18",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_rotate_2",
					"to_node": "node_sdf3d_rotate_2",
					"to_port": 0.0
				},
				{
					"from": "SDF_Checkerboard",
					"from_node": "node_SDF_Checkerboard",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib",
					"to_node": "node_pxflib",
					"to_port": 0.0
				},
				{
					"from": "SDF_Checkerboard",
					"from_node": "node_SDF_Checkerboard",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "pxflib",
					"to_node": "node_pxflib",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_rotate_2",
					"from_node": "node_sdf3d_rotate_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib",
					"to_node": "node_pxflib",
					"to_port": 2.0
				},
				{
					"from": "pxflib_2",
					"from_node": "node_pxflib_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_8",
					"to_node": "node_pxflib_8",
					"to_port": 0.0
				},
				{
					"from": "pxflib_8",
					"from_node": "node_pxflib_8",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_3",
					"to_node": "node_pxflib_3",
					"to_port": 0.0
				},
				{
					"from": "pxflib_3",
					"from_node": "node_pxflib_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_5",
					"to_node": "node_pxflib_5",
					"to_port": 0.0
				},
				{
					"from": "pxflib_5",
					"from_node": "node_pxflib_5",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 0.0
				},
				{
					"from": "pxflib_4",
					"from_node": "node_pxflib_4",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_18",
					"to_node": "node_pxflib_18",
					"to_port": 1.0
				}
			],
			"display_name": "Fractal IFS Example",
			"icon_data": "",
			"nodes": [
				{
					"name": "sdf3d_sphere",
					"node_position": {
						"x": -363.157257080078,
						"y": -245.824523925781
					},
					"parameters": {
						"r": 0.45
					},
					"seed": 31350.0,
					"type": "sdf3d_sphere"
				},
				{
					"name": "sdsmoothboolean",
					"node_position": {
						"x": -13.1572875976562,
						"y": 91.1754760742188
					},
					"parameters": {
						"k": 0.01
					},
					"seed": 61915.0,
					"shader_model": {
						"code": "",
						"global": "float sdSmoothXYUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - SDF2D Operator\nCode - IQ, RodZilla\n\nReturns a 2D SDF of a smooth boolean operation (union, intersection and difference) between the X axis and the Y axis\n\nBased of the original sdSmoothBoolean with X axis and Y axis for input",
						"name": "Smooth Union XY",
						"outputs": [
							{
								"longdesc": "The shape generated by the boolean operation",
								"sdf2d": "sdSmoothXYUnion($uv.x, $uv.y, $k)",
								"shortdesc": "Output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "The smoothness of the boolean operation",
								"max": 1.0,
								"min": 0.0,
								"name": "k",
								"shortdesc": "Smoothness",
								"step": 0.0001,
								"type": "float"
							}
						],
						"shortdesc": "Smooth Union XY"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_4",
					"node_position": {
						"x": -440.672271728516,
						"y": 273.290466308594
					},
					"parameters": {
						"mode": 0.0,
						"smooth": "sin($time*0.2)*0.1+0.1"
					},
					"seed": -23788.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "V4->V4",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror smooth symmetry using the chosen axis",
						"name": "Smooth Axis Symmetry",
						"outputs": [
							{
								"shortdesc": "V4->V4 output",
								"type": "v4v4",
								"v4v4": "$in(vec4(vec3($mode),$uv.w))"
							}
						],
						"parameters": [
							{
								"default": 0.0,
								"label": "Axis",
								"longdesc": "Axis",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "XYZ",
										"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
									},
									{
										"name": "XY",
										"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
									},
									{
										"name": "XZ",
										"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
									},
									{
										"name": "YZ",
										"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
									},
									{
										"name": "X",
										"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
									},
									{
										"name": "Y",
										"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
									},
									{
										"name": "Z",
										"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
									}
								]
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Smooth",
								"longdesc": "Smooth amount",
								"max": 1.0,
								"min": 0.0,
								"name": "smooth",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Smooth Axis Symmetry"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -450.672271728516,
						"y": 173.290466308594
					},
					"parameters": {
						"ax": -20.0,
						"ay": 30.0,
						"az": -20.0
					},
					"seed": -55518.0,
					"shader_model": {
						"code": "",
						"global": "vec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nRotates a V4->V4\nAdapted from RodZilla TEX3D Rotate",
						"name": "Rotate",
						"outputs": [
							{
								"shortdesc": "V4->V4 Ouput",
								"type": "v4v4",
								"v4v4": "$in(vec4(v4v4_rotate($uv.xyz, -vec3($ax, $ay, $az)*0.01745329251), $uv.w))"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "ax",
								"shortdesc": "Rotate.x",
								"step": 1.0,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "ay",
								"shortdesc": "Rotate.y",
								"step": 1.0,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "az",
								"shortdesc": "Rotate.z",
								"step": 1.0,
								"type": "float"
							}
						],
						"shortdesc": "V4->V4 Rotate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -450.672271728516,
						"y": 73.2904663085938
					},
					"parameters": {
						"x": 0.5,
						"y": 0.5,
						"z": 0.5
					},
					"seed": -47518.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "vec4(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTranslates the input V4->V4 Coordinates",
						"name": "Translate",
						"outputs": [
							{
								"shortdesc": "V4->V4 Output",
								"type": "v4v4",
								"v4v4": "$in(vec4($uv.xyz-vec3($x, $y, $z),$uv.w))"
							}
						],
						"parameters": [
							{
								"control": "P1.x",
								"default": 0.0,
								"label": "X",
								"max": 1.0,
								"min": -1.0,
								"name": "x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "P1.y",
								"default": 0.0,
								"label": "Y",
								"max": 1.0,
								"min": -1.0,
								"name": "y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 1.0,
								"min": -1.0,
								"name": "z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Translate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_18",
					"node_position": {
						"x": 12.1926879882812,
						"y": -132.174560546875
					},
					"parameters": {
						"iterations": 6.0,
						"mode": 2.0
					},
					"seed": -64326.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "SDF3D",
								"longdesc": "The object that will be repeated",
								"name": "obj3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"default": "vec4(0.0)",
								"function": true,
								"label": "V4->V4 3D Transformation",
								"longdesc": "The transformation that will be applied each iteration",
								"name": "trans3d",
								"shortdesc": "V4->V4 Transformation",
								"type": "v4v4"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"function": true,
								"label": "SDF2D Custom Boolean",
								"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
								"name": "custombool",
								"shortdesc": "SDF2D Join",
								"type": "sdf2d"
							}
						],
						"instance": "float for_fold_$name(vec4 p) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  return $obj3d(p.xyz)/p.w;\n}\n\nfloat for_min_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=min(999999.0,d);\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=min(m,d/p.w);\n  }\n  return m;\n}\n\nfloat for_custom_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=$custombool(vec2(999999.0,d));\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=$custombool(vec2(m,d/p.w));\n  }\n  return m;\n}",
						"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "Fractal",
						"outputs": [
							{
								"sdf3d": "$mode",
								"shortdesc": "SDF3D Output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 24.0,
								"label": "Iterations",
								"longdesc": "Number of Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "0",
										"value": "0"
									},
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "17",
										"value": "17"
									},
									{
										"name": "18",
										"value": "18"
									},
									{
										"name": "19",
										"value": "19"
									},
									{
										"name": "20",
										"value": "20"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "22",
										"value": "22"
									},
									{
										"name": "23",
										"value": "23"
									},
									{
										"name": "24",
										"value": "24"
									}
								]
							},
							{
								"default": 0.0,
								"label": "Mode",
								"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Fold",
										"value": "for_fold_$name(vec4($uv,1.0))"
									},
									{
										"name": "Min",
										"value": "for_min_$name(vec4($uv,1.0))"
									},
									{
										"name": "Custom",
										"value": "for_custom_$name(vec4($uv,1.0))"
									}
								]
							}
						],
						"shortdesc": "Fractal"
					},
					"type": "shader"
				},
				{
					"generic_size": 1.0,
					"name": "sdf3d_rotate_2",
					"node_position": {
						"x": 459.327728271484,
						"y": -116.709533691406
					},
					"parameters": {
						"ax": "$time*13.0",
						"ay": "$time*23.0",
						"az": "$time*17.0"
					},
					"seed": -40181.0,
					"type": "sdf3d_rotate"
				},
				{
					"name": "pxflib_8",
					"node_position": {
						"x": -450.672271728516,
						"y": -76.7095336914062
					},
					"parameters": {
						"mode": 1.0,
						"x": 1.0,
						"xyz": 0.327,
						"y": 1.0,
						"z": 1.0
					},
					"seed": 47382.0,
					"shader_model": {
						"code": "vec4 o_$name_uv=$in(vec4($uv.xyz/vec3($x, $y, $z)/$xyz,$uv.w));",
						"global": "",
						"inputs": [
							{
								"default": "vec4(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nScales the input V4->V4 Coordinates",
						"name": "Scale",
						"outputs": [
							{
								"shortdesc": "V4->V4 Output",
								"type": "v4v4",
								"v4v4": "$mode"
							}
						],
						"parameters": [
							{
								"control": "P1.x",
								"default": 1.0,
								"label": "XYZ",
								"longdesc": "Scales all axis",
								"max": 1.0,
								"min": -1.0,
								"name": "xyz",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "X",
								"longdesc": "Scale X axis",
								"max": 1.0,
								"min": -1.0,
								"name": "x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Y",
								"longdesc": "Scale Y axis",
								"max": 1.0,
								"min": -1.0,
								"name": "y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Z",
								"longdesc": "Scale Z axis",
								"max": 1.0,
								"min": -1.0,
								"name": "z",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "Mode",
								"longdesc": "- Multi-Field SDF mode is the default mode used for scaling Multi-Field SDF objecta.\n- Coordinates Transformation is the mode that should be used for coordinates transformations operations, like in the fractal node input V4->V4 3D Transformation",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Multi-Field SDF (def. mode)",
										"value": "vec4(o_$name_uv.xyz,o_$name_uv.w*min(min($x, $y), $z)*$xyz)"
									},
									{
										"name": "Coordinates Transformation",
										"value": "vec4(o_$name_uv.xyz,$uv.w/min(min($x, $y), $z)/$xyz)"
									}
								]
							}
						],
						"shortdesc": "Translate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -450.672271728516,
						"y": -146.709533691406
					},
					"parameters": {

					},
					"seed": 39623.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
						"name": "Axis",
						"outputs": [
							{
								"shortdesc": "V4->V4 Coordinates Output",
								"type": "v4v4",
								"v4v4": "$uv"
							}
						],
						"parameters": [],
						"shortdesc": "Axis"
					},
					"type": "shader"
				},
				{
					"name": "SDF_Checkerboard",
					"node_position": {
						"x": 299.327728271484,
						"y": -296.709533691406
					},
					"parameters": {
						"AA": 0.0,
						"Position": -1.0,
						"Size": 10.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "float Simple_AAcheckedboard2D(vec2 p) {\n    p*=2.0;\n\tvec2 w=max(abs(dFdx(p)),abs(dFdy(p)))+1e-5;\n\tif (max(w.x,w.y)>1.0) {\n\t\treturn mod(floor(p.x)+floor(p.y),2.0);\n\t}\n\tvec2 i=((1.-abs(2.*fract((p+.5*w)/2.)-1.))-(1.-abs(2.*fract((p-.5*w)/2.)-1.)))/w;\n\treturn .5-.5*i.x*i.y;\n}",
						"inputs": [],
						"instance": "",
						"longdesc": "",
						"name": "SDF Checkerboard",
						"outputs": [
							{
								"sdf3d": "max($uv.y-$Position,length(vec3($uv.x,$uv.y+$Position,$uv.z))-$Size)",
								"type": "sdf3d"
							},
							{
								"tex3d": "vec3($AA)*0.9+0.1",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "Position",
								"max": 2.0,
								"min": -5.0,
								"name": "Position",
								"step": 0.1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 10.0,
								"label": "Size",
								"max": 30.0,
								"min": 1.0,
								"name": "Size",
								"step": 1.0,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "AA",
								"name": "AA",
								"shortdesc": "Anti-Aliasing",
								"type": "enum",
								"values": [
									{
										"name": "No",
										"value": "mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0)"
									},
									{
										"name": "Yes",
										"value": "Simple_AAcheckedboard2D($uv.xz)"
									}
								]
							}
						]
					},
					"type": "shader"
				},
				{
					"generic_size": 2.0,
					"name": "pxflib",
					"node_position": {
						"x": 659.327758789062,
						"y": -246.709533691406
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1.0,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"Pow": 64.0,
						"Reflection": 0.2,
						"Shadow": 1.0,
						"Specular": 0.0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv.xyz)-0.4",
								"function": true,
								"label": "SDF3D #",
								"name": "sdf#",
								"shortdesc": "SDF3D #",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.0,0.0)",
								"function": true,
								"label": "TEX3D #",
								"name": "tex#",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "\nvec2 input_$name(vec3 p) {\n    vec2 sdf=vec2(999999.0,0.0);\n\tfloat m;\n#for\n    m=$sdf#(p);\n    if (m<sdf.x){\n\t  sdf=vec2(m,#.0);\n\t}\n#end\n    return sdf;\n}\n\n\nvec3 tex_$name(vec3 p,float id) {\n    vec3 t=vec3(0.0);\n#for\n    if (id>(#.0-0.5)&&id<(#.0+0.5)) {\n\t  t=$tex#(vec4(p,id));\n\t}\n#end\n\n    return t;\n}\n\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\t\n\tvec3 objColor=tex_$name(p,dS.y);\n\t\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=tex_$name(p,dS.y);\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "SDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1.0,
								"min": 0.0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32.0,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024.0,
								"min": 0.0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10.0,
								"min": -10.0,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10.0,
								"min": -10.0,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10.0,
								"min": -10.0,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1.0,
								"min": 0.0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/SDF3D/Op/Fractal IFS Example"
		},
		{
			"display_name": "Selector2D XZ",
			"generic_size": 2.0,
			"icon_data": "",
			"name": "SDF3D_Selector2D_XZ",
			"parameters": {

			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Selection Map",
						"name": "map",
						"shortdesc": "2D texture for selecting SDFs",
						"type": "f"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "SDF#",
						"name": "sdf#",
						"shortdesc": "SDF3D #",
						"type": "sdf3d"
					}
				],
				"instance": "\nfloat sdfselector_$name(vec3 p) {\n\tvec2 tile_xy = fract(p.xz+0.5)-0.5;\n\tvec2 tile_pos = floor(p.xz+0.5)-0.5;\n\n\tfloat sel = clamp($map(tile_pos),0.0,1.0);\n\t\n\tint index = int(floor(sel * float(#count)+1.0));\n\t\n\t#for\n\t\tif (index == #) {\n\t\t\treturn $sdf#(vec3(tile_xy.x,p.y,tile_xy.y));\n\t\t}\n\t#end\n\t\n\treturn 1e10;\n}\n\n\nvec3 sdf2d_diff_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (sdfselector_$name(vec3(0.5,xy.y,xy.x))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(-0.5,xy.y,xy.x))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(xy.x,xy.y,0.5))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(xy.x,xy.y,-0.5))<0.0) col+=vec3(1.0);\n\t\tt=t+4.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (outc.x<1.0) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n\nvec3 sdf2d_show_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (sdfselector_$name(vec3(xy.x,0.0,xy.y))<0.0) col+=vec3(1.0);\n\t\tt=t+1.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (xy.x>0.49&&xy.x<0.51||xy.x<-0.49&&xy.x>-0.51||\n\t    xy.y>0.49&&xy.y<0.51||xy.y<-0.49&&xy.y>-0.51) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n",
				"longdesc": "Selects one of multiple SDF3D inputs based on a selection map value for each tile.\nThe map's red channel (0.0-1.0) determines which SDF is used per tile.\n\nCode  - PauloFalcao",
				"name": "SDF3D Selector2D XZ",
				"outputs": [
					{
						"sdf3d": "sdfselector_$name($uv)",
						"shortdesc": "SDF Output",
						"type": "sdf3d"
					},
					{
						"longdesc": "Checks the differences between the 4 connecting faces of the SDFs.",
						"rgb": "sdf2d_diff_$name($uv)",
						"shortdesc": "Debug tile faces",
						"type": "rgb"
					},
					{
						"longdesc": "Show a 2d slice of the SDFs.",
						"rgb": "sdf2d_show_$name($uv)",
						"shortdesc": "Debug tile",
						"type": "rgb"
					}
				],
				"parameters": [],
				"shortdesc": "SDF3D Selector XZ"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Selector2D XZ",
			"type": "shader"
		},
		{
			"display_name": "Selector2D XY",
			"generic_size": 2.0,
			"icon_data": "",
			"name": "SDF3D_Selector2D_XY",
			"parameters": {

			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Selection Map",
						"name": "map",
						"shortdesc": "2D texture for selecting SDFs",
						"type": "f"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "SDF#",
						"name": "sdf#",
						"shortdesc": "SDF3D #",
						"type": "sdf3d"
					}
				],
				"instance": "\nfloat sdfselector_$name(vec3 p) {\n\n\tvec2 tile_xy = fract(p.xy+0.5)-0.5;\n\tvec2 tile_pos = floor(p.xy+0.5)-0.5;\n\n\tfloat sel = clamp($map(tile_pos),0.0,1.0);\n\n\tint index = int(floor(sel * float(#count)+1.0));\n\t\n\t#for\n\t\tif (index == #) {\n\t\t\t\treturn $sdf#(vec3(tile_xy.x,tile_xy.y,p.z));\n\t}\n\t#end\n\n\treturn 1e10;\n}\n\n\nvec3 sdf2d_diff_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (sdfselector_$name(vec3(0.5,xy.y,xy.x))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(-0.5,xy.y,xy.x))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(xy.x,0.5,xy.y))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(xy.x,-0.5,xy.y))<0.0) col+=vec3(1.0);\n\t\tt=t+4.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (outc.x<1.0) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n\nvec3 sdf2d_show_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (sdfselector_$name(vec3(xy.x,xy.y,0.0))<0.0) col+=vec3(1.0);\n\t\tt=t+1.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (xy.x>0.49&&xy.x<0.51||xy.x<-0.49&&xy.x>-0.51||\n\t    xy.y>0.49&&xy.y<0.51||xy.y<-0.49&&xy.y>-0.51) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n",
				"longdesc": "Selects one of multiple SDF3D inputs based on a selection map value for each tile.\nThe map's red channel (0.0-1.0) determines which SDF is used per tile.\n\nCode  - PauloFalcao",
				"name": "SDF3D Selector2D XY",
				"outputs": [
					{
						"sdf3d": "sdfselector_$name($uv)",
						"shortdesc": "SDF Output",
						"type": "sdf3d"
					},
					{
						"longdesc": "Checks the differences between the 4 connecting faces of the SDFs.",
						"rgb": "sdf2d_diff_$name($uv)",
						"shortdesc": "Debug tile faces",
						"type": "rgb"
					},
					{
						"longdesc": "Show a 2d slice of the SDFs.",
						"rgb": "sdf2d_show_$name($uv)",
						"shortdesc": "Debug tile",
						"type": "rgb"
					}
				],
				"parameters": [],
				"shortdesc": "SDF3D Selector XY"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Selector2D XY",
			"type": "shader"
		},
		{
			"display_name": "Selector2D YZ",
			"generic_size": 2.0,
			"icon_data": "",
			"name": "SDF3D_Selector2D_YZ",
			"parameters": {

			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Selection Map",
						"name": "map",
						"shortdesc": "2D texture for selecting SDFs",
						"type": "f"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "SDF#",
						"name": "sdf#",
						"shortdesc": "SDF3D #",
						"type": "sdf3d"
					}
				],
				"instance": "\nfloat sdfselector_$name(vec3 p) {\n\n\tvec2 tile_xy = fract(p.yz+0.5)-0.5;\n\tvec2 tile_pos = floor(p.yz+0.5)-0.5;\n\n\tfloat sel = clamp($map(tile_pos),0.0,1.0);\n\n\tint index = int(floor(sel * float(#count)+1.0));\n\n\t#for\n\t\tif (index == #) {\n\t\t\t\treturn $sdf#(vec3(p.x,tile_xy.x,tile_xy.y));\n\t}\n\t#end\n\n\treturn 1e10;\n}\n\n\nvec3 sdf2d_diff_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (sdfselector_$name(vec3(xy.y,0.5,xy.x))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(xy.y,-0.5,xy.x))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(xy.x,xy.y,0.5))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(xy.x,xy.y,-0.5))<0.0) col+=vec3(1.0);\n\t\tt=t+4.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (outc.x<1.0) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n\nvec3 sdf2d_show_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (sdfselector_$name(vec3(0.0,xy.x,xy.y))<0.0) col+=vec3(1.0);\n\t\tt=t+1.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (xy.x>0.49&&xy.x<0.51||xy.x<-0.49&&xy.x>-0.51||\n\t    xy.y>0.49&&xy.y<0.51||xy.y<-0.49&&xy.y>-0.51) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n",
				"longdesc": "Selects one of multiple SDF3D inputs based on a selection map value for each tile.\nThe map (0.0-1.0) determines which SDF is used per tile.\n\nCode - Paulo Falcao",
				"name": "SDF3D Selector2D YZ",
				"outputs": [
					{
						"sdf3d": "sdfselector_$name($uv)",
						"shortdesc": "SDF Output",
						"type": "sdf3d"
					},
					{
						"longdesc": "Checks the differences between the 4 connecting faces of the SDFs.",
						"rgb": "sdf2d_diff_$name($uv)",
						"shortdesc": "Debug tile faces",
						"type": "rgb"
					},
					{
						"longdesc": "Show a 2d slice of the SDFs.",
						"rgb": "sdf2d_show_$name($uv)",
						"shortdesc": "Debug tile",
						"type": "rgb"
					}
				],
				"parameters": [],
				"shortdesc": "SDF3D Selector YZ"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Selector2D YZ",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_torus_2",
					"from_node": "node_sdf3d_torus_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_translate_3_4",
					"to_node": "node_sdf3d_translate_3_4",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_torus_2",
					"from_node": "node_sdf3d_torus_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_translate_3_5",
					"to_node": "node_sdf3d_translate_3_5",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_translate_3_4",
					"from_node": "node_sdf3d_translate_3_4",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean_3",
					"to_node": "node_sdf3d_boolean_3",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_translate_3_5",
					"from_node": "node_sdf3d_translate_3_5",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean_3",
					"to_node": "node_sdf3d_boolean_3",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_boolean_3",
					"from_node": "node_sdf3d_boolean_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "_3",
					"to_node": "node__3",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_boolean_3",
					"from_node": "node_sdf3d_boolean_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "RandomSDF3DSelector_7",
					"to_node": "node_RandomSDF3DSelector_7",
					"to_port": 1.0
				},
				{
					"from": "_3",
					"from_node": "node__3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "RandomSDF3DSelector_7",
					"to_node": "node_RandomSDF3DSelector_7",
					"to_port": 2.0
				},
				{
					"from": "shader_2",
					"from_node": "node_shader_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "RandomSDF3DSelector_7",
					"to_node": "node_RandomSDF3DSelector_7",
					"to_port": 0.0
				},
				{
					"from": "RandomSDF3DSelector_7",
					"from_node": "node_RandomSDF3DSelector_7",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_3",
					"to_node": "node_pxflib_3",
					"to_port": 5.0
				},
				{
					"from": "pxflib_3",
					"from_node": "node_pxflib_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "MFSDF_Render",
					"to_node": "node_MFSDF_Render",
					"to_port": 0.0
				}
			],
			"display_name": "Selector2D XZ Example",
			"icon_data": "",
			"nodes": [
				{
					"name": "sdf3d_torus_2",
					"node_position": {
						"x": -746.499450683594,
						"y": -46.5116386413574
					},
					"parameters": {
						"R": 0.5,
						"axis": 1.0,
						"r": 0.1
					},
					"seed_int": 0.0,
					"type": "sdf3d_torus"
				},
				{
					"generic_size": 1.0,
					"name": "sdf3d_translate_3_5",
					"node_position": {
						"x": -516.499450683594,
						"y": 33.4883613586426
					},
					"parameters": {
						"x": -0.5,
						"y": 0.0,
						"z": -0.5
					},
					"seed_int": 0.0,
					"type": "sdf3d_translate"
				},
				{
					"generic_size": 1.0,
					"name": "sdf3d_boolean_3",
					"node_position": {
						"x": -326.499450683594,
						"y": -46.5116386413574
					},
					"parameters": {
						"op1": 0.0
					},
					"seed_int": 0.0,
					"type": "sdf3d_boolean_v"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": 453.500549316406,
						"y": -176.511642456055
					},
					"parameters": {
						"BaseColor": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 1.0,
							"type": "Color"
						},
						"Emission": 0.0,
						"Metallic": 0.0,
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"Roughness": 0.0,
						"Specular": 1.0,
						"TranlateX": 0.0,
						"TranlateY": 0.0,
						"TranlateZ": 0.0,
						"scale": 1.0
					},
					"seed": -5947.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"max": 1.0,
								"min": 0.0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500.0,
								"min": 0.0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"generic_size": 1.0,
					"name": "sdf3d_translate_3_4",
					"node_position": {
						"x": -509.742736816406,
						"y": -93.3683242797852
					},
					"parameters": {
						"x": 0.5,
						"y": 0.0,
						"z": 0.5
					},
					"seed_int": 0.0,
					"type": "sdf3d_translate"
				},
				{
					"name": "shader_2",
					"node_position": {
						"x": -139.742782592773,
						"y": -143.36833190918
					},
					"parameters": {
						"seed": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "float random2d1d(vec2 c,float seed) {\n\tc = fract(c*17.15)+5.0+seed;\n\tc += dot(c.x, c.y);\n\treturn fract(c.x*c.x*c.y);\n}\n",
						"inputs": [],
						"instance": "",
						"longdesc": "A simple 2d random noise\n\nCode - Paulo Falcao",
						"name": "Greyscale RandomNoise2D",
						"outputs": [
							{
								"f": "random2d1d($uv,$seed)",
								"shortdesc": "Greyscale Output",
								"type": "f"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.5,
								"label": "Seed",
								"max": 1.0,
								"min": 0.0,
								"name": "seed",
								"shortdesc": "Random Seed",
								"step": 0.0001,
								"type": "float"
							}
						],
						"shortdesc": "Greyscale RandomNoise2D"
					},
					"type": "shader"
				},
				{
					"name": "_3",
					"node_position": {
						"x": -119.742782592773,
						"y": 26.6316738128662
					},
					"parameters": {
						"anglex": 0.0,
						"angley": 0.0,
						"anglez": 0.0,
						"flipx": 1.0,
						"flipy": 0.0,
						"flipz": 0.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "sdf",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec3 sdf3drotandflip_$name(vec3 p) {\n\tvec3 point = p;\n\t$flipx\n\t$flipy\n\t$flipz\n\tvec3 resultX = $anglex;\n\tvec3 resultY = $angley;\n\tvec3 resultZ = $anglez;\n\treturn resultZ;\n}",
						"longdesc": "Rotates and flips axis",
						"name": "SDF3D RotAndFlip",
						"outputs": [
							{
								"sdf3d": "$sdf(sdf3drotandflip_$name($uv));",
								"shortdesc": "SDF3D Output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 0.0,
								"label": "Flip X",
								"name": "flipx",
								"type": "enum",
								"values": [
									{
										"name": "No",
										"value": ""
									},
									{
										"name": "Yes",
										"value": "point.x = -point.x;"
									}
								]
							},
							{
								"default": 0.0,
								"label": "Flip Y",
								"name": "flipy",
								"type": "enum",
								"values": [
									{
										"name": "No",
										"value": ""
									},
									{
										"name": "Yes",
										"value": "point.y = -point.y;"
									}
								]
							},
							{
								"default": 0.0,
								"label": "Flip Z",
								"name": "flipz",
								"type": "enum",
								"values": [
									{
										"name": "No",
										"value": ""
									},
									{
										"name": "Yes",
										"value": "point.z = -point.z;"
									}
								]
							},
							{
								"default": 3.0,
								"label": "Angle X",
								"name": "anglex",
								"type": "enum",
								"values": [
									{
										"name": "0°",
										"value": "point;"
									},
									{
										"name": "90°",
										"value": "vec3(point.x, -point.z, point.y);"
									},
									{
										"name": "180°",
										"value": "vec3(point.x, -point.y, -point.z);"
									},
									{
										"name": "270°",
										"value": "vec3(point.x, point.z, -point.y);"
									}
								]
							},
							{
								"default": 3.0,
								"label": "Angle Y",
								"name": "angley",
								"type": "enum",
								"values": [
									{
										"name": "0°",
										"value": "resultX;"
									},
									{
										"name": "90°",
										"value": "vec3(resultX.z, resultX.y, -resultX.x);"
									},
									{
										"name": "180°",
										"value": "vec3(-resultX.x, resultX.y, -resultX.z);"
									},
									{
										"name": "270°",
										"value": "vec3(-resultX.z, resultX.y, resultX.x);"
									}
								]
							},
							{
								"default": 3.0,
								"label": "Angle Z",
								"name": "anglez",
								"type": "enum",
								"values": [
									{
										"name": "0°",
										"value": "resultY;"
									},
									{
										"name": "90°",
										"value": "vec3(-resultY.y, resultY.x, resultY.z);"
									},
									{
										"name": "180°",
										"value": "vec3(-resultY.x, -resultY.y, resultY.z);"
									},
									{
										"name": "270°",
										"value": "vec3(resultY.y, -resultY.x, resultY.z);"
									}
								]
							}
						],
						"shortdesc": "SDF3D RotAndFlip"
					},
					"type": "shader"
				},
				{
					"generic_size": 2.0,
					"name": "RandomSDF3DSelector_7",
					"node_position": {
						"x": 173.500564575195,
						"y": -66.5116348266602
					},
					"parameters": {

					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Selection Map",
								"name": "map",
								"shortdesc": "2D texture for selecting SDFs",
								"type": "f"
							},
							{
								"default": "0.0",
								"function": true,
								"label": "SDF#",
								"name": "sdf#",
								"type": "sdf3d"
							}
						],
						"instance": "\nfloat sdfselector_$name(vec3 p) {\n\tvec2 tile_xy = fract(p.xz+0.5)-0.5;\n\tvec2 tile_pos = floor(p.xz+0.5)-0.5;\n\n\tfloat sel = clamp($map(tile_pos),0.0,1.0);\n\n\tint index = int(floor(sel * float(#count)+1.0));\n\t\n\t#for\n\t\tif (index == #) {\n\t\t\treturn $sdf#(vec3(tile_xy.x,p.y,tile_xy.y));\n\t\t}\n\t#end\n\t\n\treturn 1e10;\n}\n\n\nvec3 sdf2d_diff_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (sdfselector_$name(vec3(0.5,xy.y,xy.x))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(-0.5,xy.y,xy.x))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(xy.x,xy.y,0.5))<0.0) col+=vec3(1.0);\n\t\tif (sdfselector_$name(vec3(xy.x,xy.y,-0.5))<0.0) col+=vec3(1.0);\n\t\tt=t+4.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (outc.x<1.0) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n\nvec3 sdf2d_show_$name(vec2 xy) {\n\txy-=0.5;\n\tvec3 col=vec3(0.0);\n\tfloat t=0.0;\n\n\t#for\n\t\tif (sdfselector_$name(vec3(xy.x,0.0,xy.y))<0.0) col+=vec3(1.0);\n\t\tt=t+1.0;\n\t#end\n\n\tvec3 outc=col/t;\n\tif (xy.x>0.49&&xy.x<0.51||xy.x<-0.49&&xy.x>-0.51||\n\t    xy.y>0.49&&xy.y<0.51||xy.y<-0.49&&xy.y>-0.51) outc*=vec3(1.0,0.0,0.0);\n\treturn pow(outc,vec3(1.0/2.2));\n}\n",
						"longdesc": "Type: SDF3D Operator\n\nSelects one of multiple SDF3D inputs based on a selection map value for each tile.\nThe map (0.0-1.0) determines which SDF is used per tile.",
						"name": "SDF3D Selector2D XZ",
						"outputs": [
							{
								"sdf3d": "sdfselector_$name($uv)",
								"shortdesc": "SDF Output",
								"type": "sdf3d"
							},
							{
								"longdesc": "Checks the differences between the 4 connecting faces of the SDFs.",
								"rgb": "sdf2d_diff_$name($uv)",
								"shortdesc": "Debug tile faces",
								"type": "rgb"
							},
							{
								"longdesc": "Show a 2d slice of the SDFs.",
								"rgb": "sdf2d_show_$name($uv)",
								"shortdesc": "Debug tile",
								"type": "rgb"
							}
						],
						"parameters": [],
						"shortdesc": "Random SDF3D Selector"
					},
					"type": "shader"
				},
				{
					"generic_size": 1.0,
					"name": "MFSDF_Render",
					"node_position": {
						"x": 776.225769042969,
						"y": -183.336837768555
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1.0,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 6.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"Gamma": 1.4,
						"LookAtX": 0.0,
						"LookAtY": 1.2,
						"LookAtZ": 0.0,
						"Shadow": 1.0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 2.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "vec2 Simple360HDR_equirectangularMap(vec3 dir) {\n\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "vec4(0.0,0.0,0.0,999999999.0)",
								"function": true,
								"label": "MFSDF",
								"name": "mfsdf#",
								"shortdesc": "V4->V4 Multi-Field SDF #",
								"type": "v4v4"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec4 mfsdf_$name(vec4 p){ \n  vec4 a=vec4(0.0,0.0,0.0,999999999.0);\n  vec4 b;\n  #for\n  b=$mfsdf#(p);\n  a=(a.w<b.w)?a:b;\n  #end\n  return a;\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=mfsdf_$name(vec4(p+e.xyy,0.0)).w;\n  float v2=mfsdf_$name(vec4(p+e.yyx,0.0)).w;\n  float v3=mfsdf_$name(vec4(p+e.yxy,0.0)).w;\n  float v4=mfsdf_$name(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = mfsdf_$name(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = mfsdf_$name(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t    vec3 p=ro + rd*t;\n\t\tfloat h = mfsdf_$name(vec4(p,0.0)).w;\n\t\tfloat isLight=mfsdf_$name(vec4(p,13.0)).x;\n\t\tif (isLight>0.0) h=999999.0;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=mfsdf_$name(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1)\n\tfloat objMetallic=clamp(mfsdf_$name(vec4(p,2.0)).x,0.0,1.0);  // 2 - Metallic  (v,0,0,sdf)\n\tfloat objSpecular=clamp(max(mfsdf_$name(vec4(p,4.0)).x*0.2,objMetallic),0.0,1.0);  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=mfsdf_$name(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 objEmission=mfsdf_$name(vec4(p,13.0)).xyz; // 13 - Emission (r,g,b,sdf)\n\tobjColor=max(objColor,objEmission);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tif (objEmission.x>0.0){\n\t\t\tcolor=objEmission;\n\t\t} else {\n\t\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*((1.0-objMetallic)*objColor)+\n\t\t\tpow(r,pow(256.0,(1.0-objRoughness)))*objSpecular*mix(vec3(1.0),objColor,objMetallic)*(1.0-objRoughness)*16.0;\n\t\t}\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tvec3 objEmissionRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=mfsdf_$name(vec4(p,1.0)).xyz;\n\t\t\tobjEmissionRef=mfsdf_$name(vec4(p,13.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tif (objEmissionRef.x>0.0){\n\t\t\t  objColorRef=objEmissionRef;\n\t\t\t} else {\n\t\t\t  objColorRef=max(l,$AmbLight)*objColorRef;\n\t\t\t}\n\t\t} else {\n\t\t\tobjColorRef=$hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular*mix(vec3(1.0),objColor,objMetallic));\n\t} else {\n\t\tcolor=$hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
						"longdesc": "Ray marching node for n objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\nCode - PauloFalcao, IQ\n",
						"name": "MFSDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10.0,
								"min": -10.0,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10.0,
								"min": -10.0,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10.0,
								"min": -10.0,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1.0,
								"min": 0.0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.2,
								"label": "Gamma",
								"longdesc": "Gamma Correction",
								"max": 3.0,
								"min": 0.0,
								"name": "Gamma",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/SDF3D/Op/Selector2D XZ Example"
		},
		{
			"display_name": "Rotate with TEX3D modulation",
			"icon_data": "",
			"name": "Rotate_with_TEX3D_modulation",
			"parameters": {
				"ax": 0.0,
				"ay": 0.0,
				"az": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec3 rotate3d_with_modulation(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "xt",
						"shortdesc": "TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "0.0",
						"label": "",
						"name": "yt",
						"shortdesc": "TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "0.0",
						"label": "",
						"name": "zt",
						"shortdesc": "TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "0.0",
						"label": "",
						"longdesc": "The input object as signed distance function",
						"name": "in",
						"shortdesc": "Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Rotates its input 3D object described as a signed distance function.\n\nCode - PauloFalcao",
				"name": "Rotate with TEX3D modulation",
				"outputs": [
					{
						"longdesc": "The rotated object",
						"sdf3d": "$in(rotate3d_with_modulation($uv, -vec3($xt($uv)*$ax, $yt($uv)*$ay, $zt($uv)*$az)*0.01745329251))",
						"shortdesc": "Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "X",
						"longdesc": "The rotation around the X axis",
						"max": 180.0,
						"min": -180.0,
						"name": "ax",
						"shortdesc": "Rotate.x",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Y",
						"longdesc": "The rotation around the Y axis",
						"max": 180.0,
						"min": -180.0,
						"name": "ay",
						"shortdesc": "Rotate.y",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Z",
						"longdesc": "The rotation around the Z axis",
						"max": 180.0,
						"min": -180.0,
						"name": "az",
						"shortdesc": "Rotate.z",
						"step": 1.0,
						"type": "float"
					}
				],
				"shortdesc": "Rotate"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Rotate with TEX3D modulation",
			"type": "shader"
		},
		{
			"display_name": "Twist",
			"icon_data": "",
			"name": "SDF_Twist",
			"parameters": {
				"angle": 0.0,
				"axis": 1.0,
				"correction": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "vec2 twist_rot(vec2 v, float a) {\n\ta=a*0.01745329251;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(vec2(c, -s),vec2(s, c));\n\treturn m * v;\n}\n\nvec3 twistX(vec3 v, float a){\n\tv.yz=twist_rot(v.yz,v.x*a);\n\treturn v;\n}\n\nvec3 twistY(vec3 v, float a){\n\tv.xz=twist_rot(v.xz,v.y*a);\n\treturn v;\n}\n\nvec3 twistZ(vec3 v, float a){\n\tv.xy=twist_rot(v.xy,v.z*a);\n\treturn v;\n}\n\n",
				"inputs": [
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Twist a SDF3D on the specified axis by an angle.\n\nCode - PauloFalcao",
				"name": "SDF Twist",
				"outputs": [
					{
						"sdf3d": "$in(twist$axis($uv,$angle))/(1.0+$correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Axis",
						"name": "axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "Angle1.a",
						"default": 0.0,
						"label": "Angle",
						"max": 360.0,
						"min": -360.0,
						"name": "angle",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 5.0,
						"min": 0.0,
						"name": "correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Twist"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Twist",
			"type": "shader"
		},
		{
			"display_name": "Boolean Chamfer",
			"icon_data": "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",
			"name": "SDF_Boolean_Chamfer",
			"parameters": {
				"Size": 0.5
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionChamfer from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionChamfer(float a, float b, float r) {\n\treturn min(min(a, b), (a - r + b)*sqrt(0.5));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF3D A",
						"name": "in1",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "$uv.y",
						"label": "SDF3D B",
						"name": "in2",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Makes SDF3D chamfer with 2 objects using Mercury fOpUnionChamfer from https://mercury.sexy/hg_sdf/\n\nCode - Mercury",
				"name": "SDF Boolean Chamfer",
				"outputs": [
					{
						"sdf3d": "fOpUnionChamfer($in1($uv), $in2($uv), $Size)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5.0,
						"label": "Size",
						"longdesc": "The size of the chamfer",
						"max": 10.0,
						"min": 0.0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Union Chamfer"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Boolean Chamfer",
			"type": "shader"
		},
		{
			"display_name": "Boolean Stairs",
			"icon_data": "",
			"name": "SDF_Boolean_Stairs",
			"parameters": {
				"NStairs": 6.0,
				"Size": 1.0
			},
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF3D A",
						"name": "in1",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "$uv.y",
						"label": "SDF3D B",
						"name": "in2",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Makes SDF3D stairs with 2 objects using Mercury fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nCode - Mercury",
				"name": "SDF Boolean Stairs",
				"outputs": [
					{
						"sdf3d": "fOpUnionStairs($in1($uv), $in2($uv), $Size, $NStairs)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5.0,
						"label": "Size",
						"longdesc": "The size of the stairs",
						"max": 10.0,
						"min": 0.0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32.0,
						"label": "NStairs",
						"longdesc": "The number of the stairs",
						"max": 10.0,
						"min": 0.0,
						"name": "NStairs",
						"step": 1.0,
						"type": "float"
					}
				],
				"shortdesc": "SDF Union Stairs"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Op/Boolean Stairs",
			"type": "shader"
		},
		{
			"display_name": "Render",
			"generic_size": 1.0,
			"icon_data": "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",
			"name": "SDF_Render",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1.0,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2.0,
				"CamZ": 3.0,
				"CamZoom": 1.0,
				"LookAtX": 0.0,
				"LookAtY": 0.0,
				"LookAtZ": 0.0,
				"Pow": 64.0,
				"Reflection": 0.2,
				"Shadow": 1.0,
				"Specular": 0.0,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
				"inputs": [
					{
						"default": "length($uv.xyz)-0.4",
						"function": true,
						"label": "SDF3D #",
						"name": "sdf#",
						"shortdesc": "SDF3D #",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "TEX3D #",
						"name": "tex#",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "\nvec2 input_$name(vec3 p) {\n    vec2 sdf=vec2(999999.0,0.0);\n\tfloat m;\n#for\n    m=$sdf#(p);\n    if (m<sdf.x){\n\t  sdf=vec2(m,#.0);\n\t}\n#end\n    return sdf;\n}\n\n\nvec3 tex_$name(vec3 p,float id) {\n    vec3 t=vec3(0.0);\n#for\n    if (id>(#.0-0.5)&&id<(#.0+0.5)) {\n\t  t=$tex#(vec4(p,id));\n\t}\n#end\n\n    return t;\n}\n\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\t\n\tvec3 objColor=tex_$name(p,dS.y);\n\t\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=tex_$name(p,dS.y);\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
				"name": "SDF Render",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5.0,
						"min": -5.0,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5.0,
						"min": -5.0,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2.0,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5.0,
						"min": -5.0,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5.0,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5.0,
						"min": 0.0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5.0,
						"min": 0.0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Reflection",
						"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
						"max": 1.0,
						"min": 0.0,
						"name": "Reflection",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1.0,
						"min": 0.0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32.0,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024.0,
						"min": 0.0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10.0,
						"min": -10.0,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10.0,
						"min": -10.0,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10.0,
						"min": -10.0,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1.0,
						"min": 0.0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1.0,
						"min": 0.0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1.0,
						"min": 0.0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Render/Render",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "SDF_Checkerboard",
					"from_node": "node_SDF_Checkerboard",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib",
					"to_node": "node_pxflib",
					"to_port": 0.0
				},
				{
					"from": "SDF_Checkerboard",
					"from_node": "node_SDF_Checkerboard",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "pxflib",
					"to_node": "node_pxflib",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_sphere_2",
					"from_node": "node_sdf3d_sphere_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib",
					"to_node": "node_pxflib",
					"to_port": 2.0
				},
				{
					"from": "tex3d_uniform",
					"from_node": "node_tex3d_uniform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib",
					"to_node": "node_pxflib",
					"to_port": 3.0
				}
			],
			"display_name": "Render Template",
			"icon_data": "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",
			"nodes": [
				{
					"name": "SDF_Checkerboard",
					"node_position": {
						"x": -206.768615722656,
						"y": -155.210876464844
					},
					"parameters": {
						"AA": 0.0,
						"Position": -1.0,
						"Size": 10.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "float Simple_AAcheckedboard2D(vec2 p) {\n    p*=2.0;\n\tvec2 w=max(abs(dFdx(p)),abs(dFdy(p)))+1e-5;\n\tif (max(w.x,w.y)>1.0) {\n\t\treturn mod(floor(p.x)+floor(p.y),2.0);\n\t}\n\tvec2 i=((1.-abs(2.*fract((p+.5*w)/2.)-1.))-(1.-abs(2.*fract((p-.5*w)/2.)-1.)))/w;\n\treturn .5-.5*i.x*i.y;\n}",
						"inputs": [],
						"instance": "",
						"longdesc": "",
						"name": "SDF Checkerboard",
						"outputs": [
							{
								"sdf3d": "max($uv.y-$Position,length(vec3($uv.x,$uv.y+$Position,$uv.z))-$Size)",
								"type": "sdf3d"
							},
							{
								"tex3d": "vec3($AA)*0.9+0.1",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "Position",
								"max": 2.0,
								"min": -5.0,
								"name": "Position",
								"step": 0.1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 10.0,
								"label": "Size",
								"max": 30.0,
								"min": 1.0,
								"name": "Size",
								"step": 1.0,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "AA",
								"name": "AA",
								"shortdesc": "Anti-Aliasing",
								"type": "enum",
								"values": [
									{
										"name": "No",
										"value": "mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0)"
									},
									{
										"name": "Yes",
										"value": "Simple_AAcheckedboard2D($uv.xz)"
									}
								]
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_sphere_2",
					"node_position": {
						"x": -146.768615722656,
						"y": -35.2108764648438
					},
					"parameters": {
						"r": 0.4
					},
					"seed_int": 0.0,
					"type": "sdf3d_sphere"
				},
				{
					"name": "tex3d_uniform",
					"node_position": {
						"x": -164.768615722656,
						"y": 39.7891235351562
					},
					"parameters": {
						"color": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 1.0,
							"type": "Color"
						}
					},
					"seed_int": 0.0,
					"type": "tex3d_uniform"
				},
				{
					"generic_size": 2.0,
					"name": "pxflib",
					"node_position": {
						"x": 115.805847167969,
						"y": -153.867370605469
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1.0,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"Pow": 64.0,
						"Reflection": 0.2,
						"Shadow": 1.0,
						"Specular": 0.0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv.xyz)-0.4",
								"function": true,
								"label": "SDF3D #",
								"name": "sdf#",
								"shortdesc": "SDF3D #",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.0,0.0)",
								"function": true,
								"label": "TEX3D #",
								"name": "tex#",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "\nvec2 input_$name(vec3 p) {\n    vec2 sdf=vec2(999999.0,0.0);\n\tfloat m;\n#for\n    m=$sdf#(p);\n    if (m<sdf.x){\n\t  sdf=vec2(m,#.0);\n\t}\n#end\n    return sdf;\n}\n\n\nvec3 tex_$name(vec3 p,float id) {\n    vec3 t=vec3(0.0);\n#for\n    if (id>(#.0-0.5)&&id<(#.0+0.5)) {\n\t  t=$tex#(vec4(p,id));\n\t}\n#end\n\n    return t;\n}\n\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\t\n\tvec3 objColor=tex_$name(p,dS.y);\n\t\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=tex_$name(p,dS.y);\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "SDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1.0,
								"min": 0.0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32.0,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024.0,
								"min": 0.0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10.0,
								"min": -10.0,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10.0,
								"min": -10.0,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10.0,
								"min": -10.0,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1.0,
								"min": 0.0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/SDF3D/Render/Render Template"
		},
		{
			"display_name": "Render MatCap",
			"icon_data": "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",
			"name": "SDF_Render_MatCap",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1.0,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2.0,
				"CamZ": 3.0,
				"CamZoom": 1.0,
				"LookAtX": 0.0,
				"LookAtY": 0.0,
				"LookAtZ": 0.0,
				"MatCapMode": 0.0,
				"MatCapRef": 1.0,
				"Pow": 64.0,
				"Shadow": 1.0,
				"SkyColor": {
					"interpolation": 3.0,
					"points": [
						{
							"a": 1.0,
							"b": 0.979167,
							"g": 0.864656,
							"pos": 0.0,
							"r": 0.793357
						},
						{
							"a": 1.0,
							"b": 1.0,
							"g": 0.6984,
							"pos": 0.118182,
							"r": 0.510612
						},
						{
							"a": 1.0,
							"b": 0.557292,
							"g": 0.329521,
							"pos": 0.411598,
							"r": 0.287342
						},
						{
							"a": 1.0,
							"b": 0.416667,
							"g": 0.209503,
							"pos": 0.945455,
							"r": 0.17114
						}
					],
					"type": "Gradient"
				},
				"Specular": 1.0,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D A",
						"name": "sdf_a",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.1,0.1)",
						"function": true,
						"label": "TEX3D A",
						"name": "tex3d_a",
						"shortdesc": "TEX3D A",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.0,0.0,1.0)",
						"function": true,
						"label": "MatCap A",
						"longdesc": "MapCap image for object A\nMatCap (Material Capture, also known as LitSphere) are complete materials, including lighting and reflections\nDownload MapCaps from https://github.com/nidorx/matcaps",
						"name": "matcap_a",
						"shortdesc": "Image MapCap",
						"type": "rgb"
					},
					{
						"default": "$uv.y+1.0",
						"function": true,
						"label": "SDF3D B",
						"name": "sdf_b",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "(vec3(mod(floor($uv.x)+floor($uv.z),2.0))*0.25+0.5)",
						"function": true,
						"label": "TEX3D B",
						"name": "tex3d_b",
						"shortdesc": "TEX3D B",
						"type": "tex3d"
					}
				],
				"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tfloat fog=max(1.0-(d/50.0),0.0);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tfloat r=clamp(dot(reflect(rd,-n),light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\tif (dS.y<0.5){\n\t    \tvec3 mc=$matcap_a((n*mat3(cX,cY,ray)).xy*0.5+0.5);\n\t\t\tfloat mcf=$MatCapRef;\n\t\t\t$MatCapMode\n\t\t}\n\t} else {\n\t    color=$SkyColor(rd.y).xyz;\n\t}\n    return color*(fog)+$SkyColor(rd.y).xyz*(1.0-fog);\n}\n\n\n\n",
				"longdesc": "Ray marching node for 2 objects using a matcap image for reflections\n\nCode - PauloFalcao, IQ",
				"name": "SDF Render MatCap",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5.0,
						"min": -5.0,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5.0,
						"min": -5.0,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2.0,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5.0,
						"min": -5.0,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5.0,
						"min": -5.0,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5.0,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5.0,
						"min": 0.0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5.0,
						"min": 0.0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1.0,
						"min": 0.0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32.0,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024.0,
						"min": 0.0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "MatCapRef",
						"longdesc": "MatCap image reflection strength",
						"max": 1.0,
						"min": 0.0,
						"name": "MatCapRef",
						"shortdesc": "MatCapRef",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1.0,
						"label": "MatCapMode",
						"longdesc": "Matcap Mode",
						"name": "MatCapMode",
						"type": "enum",
						"values": [
							{
								"name": "None",
								"value": ""
							},
							{
								"name": "Direct",
								"value": "color=mc;"
							},
							{
								"name": "Mix",
								"value": "color=mix(color,mc,mcf);"
							},
							{
								"name": "Add",
								"value": "color+=mc*mcf;"
							}
						]
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10.0,
						"min": -10.0,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10.0,
						"min": -10.0,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10.0,
						"min": -10.0,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": {
							"interpolation": 3.0,
							"points": [
								{
									"a": 1.0,
									"b": 1.0,
									"g": 0.6984,
									"pos": 0.009091,
									"r": 0.510612
								},
								{
									"a": 1.0,
									"b": 0.317708,
									"g": 0.187858,
									"pos": 1.0,
									"r": 0.163812
								}
							],
							"type": "Gradient"
						},
						"label": "SkyColor",
						"longdesc": "A gradient that tries to simulate a sky",
						"name": "SkyColor",
						"type": "gradient"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1.0,
						"min": 0.0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1.0,
						"min": 0.0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1.0,
						"min": 0.0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Ray Marching MatCap"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Render/Render MatCap",
			"type": "shader"
		},
		{
			"display_name": "Axis",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAQhJREFUeJztkKFNgwEUBi80BEFq8CV4LKKKAVgAVHcAA2ELdsAjMJWVHQLxLwH2w5K3wAm+S575nrkcy7IELgL8uc/AT+B+7M+B78Db2G8CX4H92Al8BI6B67G/BA6Bh7HfBt4Dj2NfB14DT4Gz8bsL7AKXY78KbAObsZ8GzgOrnPDPaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsGsAWsGkAW8CmAWwBmwawBWwawBawaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsGsAWsGkAW8CmAWwBmwawBWwawBawaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsfgH3UU+JzCgMYwAAAABJRU5ErkJggg==",
			"name": "SDF2D_Axis",
			"parameters": {
				"mode": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [],
				"instance": "",
				"longdesc": "SDF2D Distance to Axis\nUsed in more complex operations like Custom Union\n\nCode - PauloFalcao",
				"name": "SDF2D Axis",
				"outputs": [
					{
						"sdf2d": "$mode",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "Mode",
						"longdesc": "SDF2D made using the distance to axis X / Y at 0",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "$uv.x"
							},
							{
								"name": "Y",
								"value": "$uv.y"
							}
						]
					}
				],
				"shortdesc": "SDF2D Distance to Axis"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Gen/Axis",
			"type": "shader"
		},
		{
			"display_name": "Axis Symmetry",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAhhJREFUeJztmrFKw0AYx38txaE49hW6OLSDL6CzgoM+gBQEFzdxc+omPoAghD6ADgV1tS/g0sGlbyBOIg5Scg5JIW01McnlPu19fzhoc7n8jj+5S5vvXwMMdIA+sA00gXfgE7taA9aBD+AROAfGcZ8cvwYdA9fAJvAMDIER8Gp5Ai1gC9gDNoAn4CjuE+UPDUwNPBhoG6Di1o5ZUxOxpfm8GRg7gicnMTYRW5Zfj9bcEJh8c9tUpUnMbCLNb0QbzmjhhB2CYN8qste7Be4TR0bASeKzGP/FQHfuFgmCwIRhaLUFQbBwG3ZNxJblN9JcO6vXrbh/EYaFxrngpxoAcFkSflpyfNV8Oxb/Y3lvQOYSSOrwl+cNck9Djp/LAICrjP7jvBcU5uc2AODuh+O7RS4mzC9kAMDBwvebohcS5nu/CaoB0hOQVuE9wPWar4pfyABXu70Lfm4Dqn7Ou+bnMmBgGZ5XVfC93wS9NyBzCZT9P19WVfNTDSj6JseWXPAbUcWkNXcweoFoV8vXbBGxZ5/F+FMDfYfv5GetHxcnpPmeF0aQL03J8r0vjtYA43N53PsfQt4vAaQ3IXm++GNI8wGifM0HSNfnpfmaD8garPmAFZf3Bmg+IO8kNB+A5gMAzQesjNQA6QlIS/MBRQZpPkBQmg+wLO83Qe8N0HxAWqfmAyxK8wFLTfMB5i8URpAvTWk+AM0HCPK/ANfkGNbiPqw8AAAAAElFTkSuQmCC",
			"name": "SDF2D_Axis_Symmetry",
			"parameters": {
				"mode": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D",
						"name": "in",
						"shortdesc": "SDF2D",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Transforms a SDF2D making a mirror symmetry using the chosen axis\n\nCode - PauloFalcao",
				"name": "SDF2D Axis Symmetry",
				"outputs": [
					{
						"sdf2d": "$in($mode)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 2.0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XY",
								"value": "abs($uv.xy-vec2(0.5))+vec2(0.5)"
							},
							{
								"name": "X",
								"value": "vec2(abs($uv.x-0.5)+0.5,$uv.y)"
							},
							{
								"name": "Y",
								"value": "vec2($uv.x,abs($uv.y-0.5)+0.5)"
							}
						]
					}
				],
				"shortdesc": "SDF2D Axis Symmetry"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Op/Axis Symmetry",
			"type": "shader"
		},
		{
			"display_name": "Blur",
			"icon_data": "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",
			"name": "SDF2D_Blur",
			"parameters": {
				"blur": 0.0,
				"iterations": 4.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF2D Input",
						"type": "sdf2d"
					}
				],
				"instance": "float blursdf_$name(in vec2 p,in float r){\n\tfloat a=0.0;\n\t//fibonacci angle\n\tfor(int i=0;i<$iterations;i++){\n\t\tfloat g=float(i)*2.39996322973;\n\t\tfloat v=r*sqrt(float(i))*0.01;\n\t\ta+=$in(p+vec2(v*cos(g),v*sin(g))*(1.0/sqrt($iterations.0)));\n\t}\n\n\treturn a/$iterations.0;\n}",
				"longdesc": "Blurs a SDF2D sampling fibonacci points on a disc\n\nCode - PauloFalcao",
				"name": "SDF2D Blur",
				"outputs": [
					{
						"sdf2d": "blursdf_$name($uv,$blur)",
						"shortdesc": "SDF2D Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 4.0,
						"label": "Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							},
							{
								"name": "89",
								"value": "89"
							},
							{
								"name": "144",
								"value": "144"
							},
							{
								"name": "233",
								"value": "233"
							},
							{
								"name": "377",
								"value": "377"
							},
							{
								"name": "610",
								"value": "610"
							},
							{
								"name": "987",
								"value": "987"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Blur",
						"max": 5.0,
						"min": 0.0,
						"name": "blur",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Op/Blur",
			"type": "shader"
		},
		{
			"display_name": "Custom Boolean",
			"icon_data": "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",
			"name": "SDF2D_Boolean_Union",
			"parameters": {
				"Correction": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D A",
						"name": "in1",
						"shortdesc": "SDF2D A",
						"type": "sdf2d"
					},
					{
						"default": "$uv.y",
						"label": "SDF2D B",
						"name": "in2",
						"shortdesc": "SDF2D B",
						"type": "sdf2d"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"label": "SDF2D Custom Union",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "joinSDF2D",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "A custom boolean operation between SDF2D A and SDF2D B is defined by a custom SDF2D\n\nCode - PauloFalcao",
				"name": "SDF2D Boolean Union",
				"outputs": [
					{
						"sdf2d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10.0,
						"min": 0.0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF2D Custom Union"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Op/Custom Boolean",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdbox",
					"from_node": "node_sdbox",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "paulofalcao_sdf2d_operator_custom_union_2",
					"to_node": "node_paulofalcao_sdf2d_operator_custom_union_2",
					"to_port": 0.0
				},
				{
					"from": "sdbox_2",
					"from_node": "node_sdbox_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "paulofalcao_sdf2d_operator_custom_union_2",
					"to_node": "node_paulofalcao_sdf2d_operator_custom_union_2",
					"to_port": 1.0
				},
				{
					"from": "paulofalcao_sdf2d_input_3",
					"from_node": "node_paulofalcao_sdf2d_input_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdboolean",
					"to_node": "node_sdboolean",
					"to_port": 0.0
				},
				{
					"from": "paulofalcao_sdf2d_input_4",
					"from_node": "node_paulofalcao_sdf2d_input_4",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdboolean",
					"to_node": "node_sdboolean",
					"to_port": 1.0
				},
				{
					"from": "sdcircle_2",
					"from_node": "node_sdcircle_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdboolean",
					"to_node": "node_sdboolean",
					"to_port": 2.0
				},
				{
					"from": "sdboolean",
					"from_node": "node_sdboolean",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "paulofalcao_sdf2d_operator_custom_union_2",
					"to_node": "node_paulofalcao_sdf2d_operator_custom_union_2",
					"to_port": 2.0
				}
			],
			"display_name": "Custom Boolean Example",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAAA0JJREFUaIHtmj9LI0EYxn+GjaBVwO7gEKzkSiGlpFj0GklvtfErHF4drCN6X8GvIClGwQO5UrC8MiCCzRFYsAhcwmKxRDc7725mN7uuI3lIM+9MnnnfnX/v7jwrpKELx3APx3Cn1T7C12h5NBodHBykEgL0+/21tbV0KgCacAo7cAonc2lj6IIPzdQ2j7HyaDQyoZaaxalm0QQfumJdTTIO4QEa0lOvBHfQgAcYzm1aB9+Y991GIAof6tFydATq0wf/kREOxVsMTqTu3zzv27ALwB+4LME5Q/4v4OuupkyvHkzgClpTSwuuTKbQGZxpdAlTSOefQC/ZqxmHu9CRGq3CJMI7BwsEkIQWTGBVqupE9yVx4bZhYNyT7NnCAYQYQFuy+4ADXdjT6lbhF2xl7KkkbMEAFPyfte+Fg/As/WeSo5/SRiDFpeca3GvWHri5+igVrrSm75HyBSFWz/OCIFBKKaWCIPA8T2+zyAiY8EuONR0pX7jR2Q8PD2u1t1NPKQVcXFxI3WSGMX/cMTHZaev7ZhAEejvdmHsEDPmhpW9HejK3C7cx0/X1td6BaMwHY/7b6VH9BjEbtRuWTSERV7Gy53nhqnqFUkrfKHIHYMivOwY4Jrl4uBsEQRDOy/39/aOjo6K2oCz837K8OWRHySexDOsX8TKAqmF9AE6xS8oQRXbquiVmzuIuVCBc17V+Ci0DqBrWB+DopsKXXYGEPzTLZxwBPcrcOCuaUIf1I7AMoGpYH4DT7/cLpNOuHwUUmz46Jl0awtyzAju1fgotA6ganyGAR+kXh9n3+/ww4xdcdSSVhfBp8WPcD/yF73PZLPu4u7wf+HiwbAqJsOl+ANuvWdGXLPTMBR7pnhV6P9CSLrpvHdjRrD9hIr4uV4obyaWdGpxKs2g9q1SlZAxgXTOGskawWm4TngPnkuDpErYzCZ5KQCh42pYUaB04j5ZtlZytREyCkm4WMVGeoNw1fCdOUO6aiwplV+vwNLf72V7jnpn8bTHdKPAUlV1Gc6ExbGYRvlYCHzZh/FqOJXNjaMAwQcRYLTowhEbUexKy0Y3pUKSLv98NzemD39Drko7bEziBLvxOlt8LKPTKMCq/T9xdXgCqhw/WZjLb1QAAAABJRU5ErkJggg==",
			"nodes": [
				{
					"name": "sdbox_2",
					"node_position": {
						"x": -163.157135009766,
						"y": -139.802551269531
					},
					"parameters": {
						"cx": 0.0,
						"cy": 0.0,
						"h": 0.5,
						"w": 0.1
					},
					"seed": 56656.0,
					"type": "sdbox"
				},
				{
					"name": "sdbox",
					"node_position": {
						"x": -165.157135009766,
						"y": -269.802551269531
					},
					"parameters": {
						"cx": 0.0,
						"cy": 0.0,
						"h": 0.1,
						"w": 0.5
					},
					"seed": 7444.0,
					"type": "sdbox"
				},
				{
					"name": "paulofalcao_sdf2d_input_3",
					"node_position": {
						"x": -243.821014404297,
						"y": 4.80462646484375
					},
					"parameters": {
						"mode": 0.0
					},
					"seed": 34667.0,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0.0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdcircle_2",
					"node_position": {
						"x": -233.821014404297,
						"y": 144.804626464844
					},
					"parameters": {
						"cx": -0.35,
						"cy": -0.35,
						"r": 0.06
					},
					"seed": -64610.0,
					"type": "sdcircle"
				},
				{
					"name": "paulofalcao_sdf2d_input_4",
					"node_position": {
						"x": -233.821014404297,
						"y": 74.8046264648438
					},
					"parameters": {
						"mode": 1.0
					},
					"seed": -56712.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0.0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"generic_size": 2.0,
					"name": "sdboolean",
					"node_position": {
						"x": 33.098388671875,
						"y": -8.11334228515625
					},
					"parameters": {
						"op1": 0.0,
						"op2": 0.0
					},
					"seed_int": 0.0,
					"type": "sdboolean_v"
				},
				{
					"name": "paulofalcao_sdf2d_operator_custom_union_2",
					"node_position": {
						"x": 286.178985595703,
						"y": -145.195373535156
					},
					"parameters": {
						"Correction": 0.0
					},
					"seed": -38336.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "$uv.x",
								"label": "SDF2D A",
								"name": "in1",
								"shortdesc": "SDF2D A",
								"type": "sdf2d"
							},
							{
								"default": "$uv.y",
								"label": "SDF2D B",
								"name": "in2",
								"shortdesc": "SDF2D B",
								"type": "sdf2d"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"label": "SDF2D Custom Union",
								"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
								"name": "joinSDF2D",
								"shortdesc": "SDF2D Custom Union",
								"type": "sdf2d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nThe union between SDF2D A and SDF2D B is defined by a custom SDF2D",
						"name": "Custom Union",
						"outputs": [
							{
								"sdf2d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10.0,
								"min": 0.0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Custom Union"
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/SDF2D/Op/Custom Boolean Example"
		},
		{
			"display_name": "Repeat",
			"icon_data": "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",
			"name": "SDF2D_Repeat",
			"parameters": {
				"RepX": 3.0,
				"RepY": 3.0,
				"X": 0.1,
				"Y": 0.1
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec2 opRepLim2D(vec2 p,vec2 c,vec2 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor((p+0.0001)/c+0.5),vec2(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Repeats its input shape\n\nCode - IQ",
				"name": "SDF2D Repeat",
				"outputs": [
					{
						"sdf2d": "$in(opRepLim2D($uv-vec2(0.5),vec2($X,$Y)*2.0,vec2($RepX-1.0,$RepY-1.0))+vec2(0.5))",
						"shortdesc": "SDF2D Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4.0,
						"min": 0.0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4.0,
						"min": 0.0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepX",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128.0,
						"min": 1.0,
						"name": "RepY",
						"step": 1.0,
						"type": "float"
					}
				],
				"shortdesc": "SDF2D Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Op/Repeat",
			"type": "shader"
		},
		{
			"display_name": "Smooth Boolean XY",
			"icon_data": "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",
			"name": "SDF2D_Boolean_Union_XY",
			"parameters": {
				"k": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "float sdSmoothXYUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }",
				"inputs": [],
				"instance": "",
				"longdesc": "Returns a 2D SDF of a smooth boolean operation (union, intersection and difference) between the X axis and the Y axis\n\nBased of the original sdSmoothBoolean with X axis and Y axis for input\n\nCode - IQ, RodZilla",
				"name": "SDF2D Boolean Union XY",
				"outputs": [
					{
						"longdesc": "The shape generated by the boolean operation",
						"sdf2d": "sdSmoothXYUnion($uv.x, $uv.y, $k)",
						"shortdesc": "Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "",
						"longdesc": "The smoothness of the boolean operation",
						"max": 1.0,
						"min": 0.0,
						"name": "k",
						"shortdesc": "Smoothness",
						"step": 0.0001,
						"type": "float"
					}
				],
				"shortdesc": "SDF2D Smooth Union XY"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Op/Smooth Boolean XY",
			"type": "shader"
		},
		{
			"display_name": "Boolean Chamfer",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAitJREFUeJztmaFOA0EQhr8jkKB4AAQ5j0GiCKJ9hD4AQYLDYfAkBAOSYHC8RIPCYBBoqCdIzg3iaChwO9s7tnt7N3zJJW12et3v3925QDNAmGEMXAK3uJkAO8CzUlMAq8o4gIgwHA49VYtHptcYZDTzvuqagOSemsIzDoiIeGsiXablywAMywum5UEwLQ+Sfb6oJGS3z7LMU1UAL56axZDAyhdt7gLT8r8DMCb/PQCD8l8BGJWXZWij22t3yoFHzz0CktbK5wKTuLvAtHx5mZZ3B2BEvjoAQ/LlU2CWuN3+DthQakbArud7/k6iKz8SGMc7AkblywAMywum5ac7wLC8HoAB+d+PwSlxH3UH6I+7Y2AdePXMpxmJr/yxwEW8I2BM/nsABuW/AjAqXwZgWF6W0+z2h0rNGbCljNdkMBh0aOXPBPaD7oAlPZ7UVv4JuFJq6qME0H95UAPQfqjM6YM8qAG4yOmLPIDzbwE3j8CaMh5T/hxYUcb9NAhAI7b8DfBQb4o/aHAEXHRPHoIGsEvX5CFoABppykO0ANKUh+BN0IX2n5xQ8psN5hUtABeh5E8893DTcgBbwJEyPq/8KfDeaAaRekATFi8PyQYQRx6SDWCFGPKQbAAa4eSh9SZYl03Kbq/J7wFvc9+xYwH42AOua32ig0fARX156FUA82/7WXoUQDPMB9CzJljFtjpqIACAe+eI+SPwH0DbE2gb8wEYaYJVlL97Gt8BBR+0VPDvnG/uvgAAAABJRU5ErkJggg==",
			"name": "SDF2D_Boolean_Chamfer",
			"parameters": {
				"Size": 0.5
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionChamfer(float a, float b, float r) {\n\treturn min(min(a, b), (a - r + b)*sqrt(0.5));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D A",
						"name": "in1",
						"shortdesc": "SDF2D A",
						"type": "sdf2d"
					},
					{
						"default": "$uv.y",
						"label": "SDF2D B",
						"name": "in2",
						"shortdesc": "SDF2D B",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Makes SDF2D chamfer with 2 objects using Mercury fOpUnionChamfer from https://mercury.sexy/hg_sdf/\n\nCode - Mercury",
				"name": "SDF2D Boolean Chamfer",
				"outputs": [
					{
						"longdesc": "SDF2D stairs generated by the boolean operation",
						"sdf2d": "fOpUnionChamfer($in1($uv), $in2($uv), $Size)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5.0,
						"label": "Size",
						"longdesc": "The size of the stairs",
						"max": 10.0,
						"min": 0.0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF2D Union Chamfer"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Op/Boolean Chamfer",
			"type": "shader"
		},
		{
			"display_name": "Boolean Stairs",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABAlJREFUeJztm01IVFEUx3/mEwIHoohACTc11KIwRIgYjBa5MGhlLaKCwYW0KHER2aJFC6GPRYS0aTO4EUsojCAiYmjXooWKBdYmmGrRpxU5JebU4mZY3Pvkf3vOE26/1cy95//ucJg599xz7tS8hx84uA3kF73fAjwAal0C4BQwuOj9SeBipUKpVIpRpUcEcFQUvQaOiJpisUhX10lRtfxECy/uiMIJr+U+eKmWk1Vpf4C0Cd4BkW2w3+NBhUJBVDR7rpQsVgcAnI4RvbOMZbNZcrmcuPxOICNqkiW6HTN5WXxYuVwmkzkrqqaAC6ImOaL8Egb6xjUO3Bc11+VVkiL4IBi8A6ItgvFeryXyHpo+r5V8iB6IgtEvX0TFNuC4qNkHtIoaP6JaTG7/N7atboGxsTF1GWBU1HwGRkSNTgTmYKPm9m1tbaJiCjgjaq4BD0WNRvBBMHgHOFPh5afRQ5N8YLQ6oFAokM1mxUdNivY7gAFRcxDoFDXxOL8BuVyOcrksPm69Y/ytY3wt8Mox51o7g0m3kyE6FTNpDjbqYntE+xfAAVFzD7gkauxEg0uaqAcbgKei/VePNZIh+F0geAdE2nk/j8ntFQZF+zpgWNR0AN2ixhBdrFREyXHcm4cr2qtb10agwTE36xjfDMyI60BUKpUoFouibBST2yuotaWP6MfiCdTcIgJ+dWzUpoV6sAG4Kto/Bl6KmieSdfBBMHgHOKJZs/iYRkxur5AX7QF6Rft64ESshcMB/ZimhcIAJrdXOBcz98YytgloF9doATY4Z2OOwxn0SP8Kk9sr3BLtvwNDouYNcNM6s0Q94AJ60+IAem5/TLR/BtwQNXcxW+ufBB8Eg3dAFUpidaJ9k8caLR6a3YDsgD5M00JhGJPbqxqFLNAVM//JMrYL2O7zDWjFNC1suMpYDdgCkH2rW2BaHF+NXpes+P4ERjBNC4U+TG6vsF+0fwmclxT/EAN8OjbqwQZirjEmQvC7QPAOSGgbbMU0LRR6Mbm9whXRvgnoibVIMA/oxH3jy1XGasfk9jZc0d7VsfrmGF8DzDvmykknQuOYpoXCECa3V1CrUdO4vj3LkAn6dGzUgw3AI9He3oILPggG74AqHIY6RPsW3IHOhfqPB4BDQFUc0I1pWih0YXJ7G65oH+do25WvdUBjtW6IzKBfw5pET53V8tpsNa/IDKA2LdSDjUEr4QUfBIN3QIq3xOo9NGq5bOuSFik64AR6La8Hk9srHI6Zm0vTAWA6NraymK2Gt8A89oNS3O3m586ZlB0ApmNzV9RcwX29zoX9T10rwAFgL5hWh/+7QNofIB1qfr9agQ7YjWlaKBzC5PYK5nbqCnQAwHbAdXvN1XxpxF56m4tZp4afE5e0ibv6TscAAAAASUVORK5CYII=",
			"name": "SDF2D_Boolean_Stairs",
			"parameters": {
				"NStairs": 5.0,
				"Size": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D A",
						"name": "in1",
						"shortdesc": "SDF2D A",
						"type": "sdf2d"
					},
					{
						"default": "$uv.y",
						"label": "SDF2D B",
						"name": "in2",
						"shortdesc": "SDF2D B",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Makes SDF2D stairs with 2 objects using Mercury fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nCode - Mercury",
				"name": "SDF2D Boolean Stairs",
				"outputs": [
					{
						"longdesc": "SDF2D stairs generated by the boolean operation",
						"sdf2d": "fOpUnionStairs($in1($uv), $in2($uv), $Size, $NStairs)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5.0,
						"label": "Size",
						"longdesc": "The size of the stairs",
						"max": 10.0,
						"min": 0.0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32.0,
						"label": "NStairs",
						"longdesc": "The number of the stairs",
						"max": 10.0,
						"min": 0.0,
						"name": "NStairs",
						"step": 1.0,
						"type": "float"
					}
				],
				"shortdesc": "SDF2D Union Stairs"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Op/Boolean Stairs",
			"type": "shader"
		},
		{
			"display_name": "Distance Coloring",
			"icon_data": "",
			"name": "SDF2D_Distance_Coloring",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//by IQ\n//from https://www.shadertoy.com/view/3ltSW2\nvec3 iq_2dsdf_coloring( in float c )\n{\n    vec3 col = vec3(1.0) - sign(c)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(c));\n\tcol *= 0.8 + 0.2*cos(128.0*abs(c));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(c)) );\n\n\treturn col;\n}",
				"inputs": [
					{
						"default": "length($uv)-0.5",
						"label": "SDF2D",
						"name": "c",
						"shortdesc": "SDF2D input",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "IQ SDF 2D distance coloring from https://www.shadertoy.com/view/3ltSW2\n\nCode - IQ",
				"name": "SDF2D Distance Coloring",
				"outputs": [
					{
						"rgb": "iq_2dsdf_coloring($c($uv*2.0-1.0))",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [],
				"shortdesc": "SDF2D Distance Coloring"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Render/Distance Coloring",
			"type": "shader"
		},
		{
			"display_name": "Code",
			"generic_size": 1.0,
			"icon_data": "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",
			"name": "SDF2D_Code",
			"parameters": {
				"code": "$in1($uv)"
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"label": "",
						"name": "in#",
						"shortdesc": "SDF2D #",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Executes the code in the parameter\nExamples:\n$in1($uv)\nlength($uv)-0.4\n\nCode - PauloFalcao",
				"name": "SDF2D Code",
				"outputs": [
					{
						"sdf2d": "$code",
						"shortdesc": "SDF2D Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.5,
						"label": "",
						"longdesc": "Examples:\n$in1($uv)\nlength($uv)-0.4",
						"max": 1.0,
						"min": 0.0,
						"name": "code",
						"step": 0.1,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/SDF2D/Op/Code",
			"type": "shader"
		},
		{
			"display_name": "Box with Edge Distortion",
			"icon_data": "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",
			"name": "SDF_Box_with_Edge_Distortion",
			"parameters": {
				"r": 0.1,
				"sx": 1.0,
				"sy": 1.0,
				"sz": 1.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "float box3d(vec3 uv, vec3 s) {\n\tvec3 q = abs(uv) - s;\n\treturn length(max(q, 0.0))+min(max(q.x, max(q.y, q.z)), 0.0);\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "Distortion",
						"name": "t",
						"type": "tex3d_gs"
					}
				],
				"instance": "",
				"longdesc": "Generates a rounded box with edge distortion\n\nCode - PauloFalcao",
				"name": "SDF Box with Edge Distortion",
				"outputs": [
					{
						"longdesc": "Shows the rounded box",
						"sdf3d": "(box3d($uv, vec3($sx, $sy, $sz)-$r/2.0)-$r/2.0)+$t($uv)*((box3d($uv, vec3($sx, $sy, $sz)-$r)-$r)-(box3d($uv, vec3($sx, $sy, $sz)-$r/2.0)-$r/2.0))",
						"shortdesc": "Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "Rect1.x",
						"default": 0.5,
						"label": "Size X",
						"longdesc": "The size of the box along the X axis",
						"max": 1.0,
						"min": 0.0,
						"name": "sx",
						"shortdesc": "Size.x",
						"step": 0.01,
						"type": "float"
					},
					{
						"control": "Rect1.y",
						"default": 0.5,
						"label": "Size Y",
						"longdesc": "The size of the box along the Y axis",
						"max": 1.0,
						"min": 0.0,
						"name": "sy",
						"shortdesc": "Size.y",
						"step": 0.01,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Z",
						"longdesc": "The size of the box along the Z axis",
						"max": 1.0,
						"min": 0.0,
						"name": "sz",
						"shortdesc": "Size.z",
						"step": 0.01,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Radius",
						"longdesc": "The radius of the rounded box",
						"max": 1.0,
						"min": 0.0,
						"name": "r",
						"shortdesc": "Radius",
						"step": 0.01,
						"type": "float"
					}
				],
				"shortdesc": "SDF Box with Distortion"
			},
			"shortdesc": "",
			"tree_item": "PF/SDF3D/Gen/Box with Edge Distortion",
			"type": "shader"
		},
		{
			"display_name": "Axis",
			"icon_data": "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",
			"name": "TEX3D_Axis",
			"parameters": {
				"mode": 5.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [],
				"instance": "",
				"longdesc": "Generates a TEX3D using direct coordinates\n\nCode - PauloFalcao",
				"name": "TEX3D Axis",
				"outputs": [
					{
						"shortdesc": "V4->V4 output",
						"tex3d": "vec3($mode)",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": 1.0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "$uv.xyz"
							},
							{
								"name": "XY",
								"value": "$uv.xy,0.0"
							},
							{
								"name": "XZ",
								"value": "$uv.x,0.0,$uv.z"
							},
							{
								"name": "YZ",
								"value": "0.0,$uv.yz"
							},
							{
								"name": "X",
								"value": "$uv.x"
							},
							{
								"name": "Y",
								"value": "$uv.y"
							},
							{
								"name": "Z",
								"value": "$uv.z"
							}
						]
					}
				],
				"shortdesc": "TEX3D Axis"
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Gen/Axis",
			"type": "shader"
		},
		{
			"display_name": "Checkerboard",
			"icon_data": "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",
			"name": "TEX3D_Checkerboard",
			"parameters": {
				"AA": 0.0,
				"Position": -1.0,
				"Size": 10.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "float Simple_AAcheckedboard2D(vec2 p) {\n    p*=2.0;\n\tvec2 w=max(abs(dFdx(p)),abs(dFdy(p)))+1e-5;\n\tif (max(w.x,w.y)>1.0) {\n\t\treturn mod(floor(p.x)+floor(p.y),2.0);\n\t}\n\tvec2 i=((1.-abs(2.*fract((p+.5*w)/2.)-1.))-(1.-abs(2.*fract((p-.5*w)/2.)-1.)))/w;\n\treturn .5-.5*i.x*i.y;\n}",
				"inputs": [],
				"instance": "",
				"longdesc": "Generates a Checkerboard pattern\n\nCode - PauloFalcao",
				"name": "TEX3D Checkerboard",
				"outputs": [
					{
						"sdf3d": "max($uv.y-$Position,length(vec3($uv.x,$uv.y+$Position,$uv.z))-$Size)",
						"type": "sdf3d"
					},
					{
						"tex3d": "vec3($AA)*0.9+0.1",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "Position",
						"max": 2.0,
						"min": -5.0,
						"name": "Position",
						"step": 0.1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 10.0,
						"label": "Size",
						"max": 30.0,
						"min": 1.0,
						"name": "Size",
						"step": 1.0,
						"type": "float"
					},
					{
						"default": 1.0,
						"label": "AA",
						"longdesc": "Does not work with TAA Render",
						"name": "AA",
						"shortdesc": "Anti-Aliasing",
						"type": "enum",
						"values": [
							{
								"name": "No",
								"value": "mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0)"
							},
							{
								"name": "Yes",
								"value": "Simple_AAcheckedboard2D($uv.xz)"
							}
						]
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Gen/Checkerboard",
			"type": "shader"
		},
		{
			"display_name": "Color",
			"icon_data": "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",
			"name": "TEX3D_Color",
			"parameters": {
				"color": {
					"a": 1.0,
					"b": 0.0,
					"g": 0.0,
					"r": 1.0,
					"type": "Color"
				}
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [],
				"instance": "",
				"longdesc": "A 3D Texture with a single color\n\nCode - PauloFalcao",
				"name": "TEX3D Color",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$color.xyz",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0
						},
						"label": "Color",
						"name": "color",
						"type": "color"
					}
				],
				"shortdesc": "TEX3D Color"
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Gen/Color",
			"type": "shader"
		},
		{
			"display_name": "Simplex Noise",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAADjFJREFUeJztW8tuI9UWXfVwvctvO3E6HdLQD8YMEBJiwgwJiTl/wQeA7gcgGDFnCEMGMGXIFIQQ0NDQD5F0nMR27CrXu+oOorW73Pdyk3Yn5EpQUgZJ2VXnrLP3Wmvvc6IAqPA3vtSrHsBVX/8AcNUDuOrrHwCuegBXfelX9eIXX3wRZVmiLEtUVYVHjx5dyTgU/AUyuLm5Cd/3Yds2ACBNUyyXS0RRhKIooOs6TNOEpmkoigJVVUHTNDx48OCyh3Z5AAwGA3S7XZimCQAoigJFUayselmWUBQFqqpCVVUoioKiKJAkCZbLJcqyhO/76Ha7+Pbbby9jmBcPQK/Xg+u6AICqqqAoivxomgbDMNBoNAAAeZ4jyzJUVbXyWQDIsgxJkiDPcyiKgna7jV6vh2+++eYih3txAAyHQ+i6jkajgaIoZDJFUSBNU5RlCU3TYFkWbNtGo9GAoiioqievL8sSAKBpGjRNk2eoqirPAQBd1/Hdd99dxLAvBoCtrS1ZuUajgUajgbIskWUZ0jRFlmUCimVZcF0XpmkKYIZhQFVVWfWiKKCqqty3LAuGYSDPc0wmE0wmE9i2jZ9//vl5hw4NwL/W/fL29jYcx5HJ2bYtRFcnM06QeU6wFEURAmRa1EEry1KAMAwDlmXBNE0URYEgCLC7uwtFURAEwdoArC2Dm5ubmM/nsCwLjuPAMAwYhoGyLIXsuHqKosjEuLp1EMgPVVVJChVFAU3ToKqqAENQms0mgFMOefnll2Ga5tqKsRYAo9EI0+kUzWYTvV5PJlSWJfI8BwDYtg3HcVYAYCpQBeopwCjJ81zum6YpqVIUBZbLJcIwRJZlMAwDtm2jKArcunULiqLg/v37lw/AYDBAEATwfR/9fl8Gx4mpqiqDs20bhmFAURTJ4TzPkSSJECOJjxFBNdB1Ha7rotlswrIsFEWB2WyGNE3FP9i2Ddd1oaoq+v0+Go0Gfvnll8sFQFVVGRgAJEkiEyBzk8UZvpwUeQCArHKe58IXfE6dG/guwzDQ7XbhOA729/eR5zkcx4Hv+2KgxuPxs07n2Uhwa2sLmqbB8zxomrYib4ZhyMQACAB1jeff6vJmWRZ8319RBk3TJD34u2masCwLun66ZqZpotPpwPM8iS5VVcVEnfc6dwRsb28jz3O4rgvLsoTQGO6KoohxIRAEg5PhBMuylO9bloVWqwXP82QCYRgiiiKkaYrZbIbFYoHZbCafIdiu68L3fcRxLCQ6HA4xHA7xww8/XCwAwGn4M/SDIEBZluLsGMZcWea0qqpoNBqwbRue58G2bSG7NE2haZpMpNFoIM9zWJaF+XwuP8vlElVVScjTaxBUphMAGIaBLMvOP6fzfOjOnTvIsgzNZhOmaQobU7aY19RshjpTg+7PcRx4ngff9+F5HhzHkZCuqkpWl9LqeR48z0Oj0ZBomM1myLJMoom8wndpmobBYIA333zzXACcKwKyLBMHF0WRDIKAUMKAU20mCdIHWJaFRqOxQo4ECzhNlziOJWW4grTMpmliMplgsViInPIZeZ6LpDIaWq2WPOus60wSvHHjhpCSpmmYz+cIwxCWZaHf76PVasG2bclBMjgB4ySeVgUAQm6UyjzPsVwusVwuxQgxcp4ulWmPWW8wpYqiEFLd3d090y6fGQF0dwAQxzHSNIVpmmi322g2mxKi9PAEwHEcMUIMVU4yz/MVe6tpGsqyxHK5RJqmCMMQiqLAcRwxQ67rSokMPKkkAaz4jziOkWUZPM87FxecCYCu6zI5vog5XQ9/kl3dCFG6mALU/TRNRbZY7tZ9AO20ruuSUgQryzIhWhZcJEESct02n3X9TxLc3d2VxgXdGydLfaf9LctSVp4OkAN3XVdIj0VPmqYIggCz2QzT6RTz+RxJkggZAqcFVb2S1HVdwKo7SAJCI0aAq6rCW2+9tX4EsA7P8xxxHMuLgCfFSZIkInms6jhQXnWgWOklSSLNEEYPwSE5apoGAPJdfp99AVaHTC3ei+MYrutK9K4NACs3Ppy+/+kIIPr12p73sywTZ5YkiZgl1g/1FKjLmWEYkkKcIFOD/iFNU7iuK0DxvYxWmqS1AajnUN3KcsWoxbz/375PZmY5TMBUVV1RAEYA7xmGIY1UKgKjp26RuQiUQs/zJB3b7TbCMFwfAOCJuTFNU+Sunuuapkme0gbXdZ4KwInXawVGDCdE0DRNk2ao67pI01Q+02w2V2qQenQYhoHhcIhWqwVN09But89MgT/1AS+88AIArOSlbdsCBv07Q64oCpkAV4PWlV6AIUoQGo2GECTBpMp0Oh0MBgM0m00JccMw0G630el0xBKzi8y6otPpoNPprDRqNjY28OOPPz5bBBB1ANLLsyxL7C9ljWT4dDlMwGh3mev1lheLGkYKeYMg836SJIjjGKqqwvM86Louuc06gaBalgXP8xAEAeI4FvX5s+tPAWClx1Wla+PK0bxQokhaJDIqQZ3BOcg6gdYHz+/WjVGWZTg4OMBkMhEZZSpxX6FOvCTXOI4xHo+xtbUlyvVMAJCV64xObWd5y+jgStOL16OoPkmaqTqZEiBGAcFN0xSTyQRBEGB/fx/z+XylO0Qj1Wq14Pv+yh7DcrnEdDrFZDIRznhmAA4PD9FsNlc6OADEwpK06Pt935fGBJk/iqL/WOH6bhBZnAarvl9A271YLLBcLlfaaYwCltF0iNPpFIvFAlEUIYoiiaLPPvvs2QHgxZym7aROswhhztKUUAloRRmSfBYjgqxe3/Tg71mWSUMkz/MViw1ACiLXdTEcDtHtdhFFkbyXzO84jvx9LQDSNF3x8UmSCEvXfTjDmgPlhOnvCQQNCknVtm0JaXZ9gyCQipDpVSdfvo9AUm7rC0LJbTQaZ+4Z/E8AaCktyxISYwhzggxNGpR6SUxQGNIEjBLZ6XTgOA7iOMbJyQkWi4W0v5bLJWzbxnA4RKfTWTE9BDQIAhwdHSFJEiwWC0yn0xU/QjDXBoCr3ul0ZMXr5qXeBmO9AEAkj/U85TEIAomgZrMpXV62vsIwxGQywfHxMeI4RqvVQq/XW6ny6sAnSYIoiqCqquS8rutI0xRJkiAIAuGqtQA4OjoStu90OpjNZitdHnIDJ0mQaF2Zs3XloEFh04L6z25umqYroW2apngJKkYUReIt6ttotm0Lf1BZvvrqq/UBAE41fzabYTQaSSvq6dZWvdtbZ32GIz9LH0FHyTKboVqWpQALAM1mU2SOHeP5fC6uj1FBmaNhms/ncF1XUuG5AHAcB5PJBFEUyb5/nYwYjnVjA0BcYt2Lc9JsoS8WC8llOsO62SHL9/t9AJAI4QR93xcCVRQFs9kMk8kEqqpia2vrXFtlZwLw008/4fr163j8+DGuXbsmIVyWJU5OTsSQ1Dc5+cMqEMCKoaKuh2Eo+QtAACAInudhNBphZ2cHZVkiiiL88ccfMmk+j9Gxv7+P4+Nj3Lx5E6qq4uuvv35+AIDTFT85OYHjOHBdF61WSwYZBIHkIQnOdV04jiMpwrQBTnWaYUr/UN9DYGnsui76/T5GoxG2trZQFAWm0ylarZY0Zest+SAI8PjxY2iahtFodO7d4nMB8Ntvv+HWrVuYz+dYLBZI0xTb29uy0uzC1DtD9OjUccMwZMeXXp1kRfkEnpiceiXJ1KnLJ11jnueYz+ei97u7u7h+/To+/vjjiwMAOPUEbFTeu3cP8/kco9Fo5SQHzUd9Y4S7QowYbmZWVSXNinpDtN4n4KrTZ0ynUzkv5DiOpBM5YDQa4ZVXXsG9e/fOO63zA/Do0SPs7OxIiO7t7SHPcwyHQ9n2IhiqqspRuKd3iBzHQbvdRpZl0mJjFcfVJ0mOx2McHh5KlUnNZy+ATVTglGA7nQ5c18Unn3xy8QAAwMOHD7GzsyONCjoyx3FkCzvLMgRBgDAMxdqGYSiSZFnWip1m22w+n4v/Z3Swd0hipCGqEyyjYDKZ4MaNG3jvvfeeZUrrnQ+oqgobGxvSF2QvwHVd0eUgCMSpVVUFz/NW+gK6rsP3fVRVhfl8jjiOcXBwIFtu3W53pevL4omOk/VHHMf4/fff4bruWoemnhmA+/fvwzAMbG5uwjRNeJ4HRVGkr0/vT4ICsEKItm0jSRKp/4EnBygWiwXCMJRVZx1i2zaqqsLR0RGOjo6Qpil6vR7a7TYePHgAy7KwubmJTz/99PIBAIC7d+/CNE3cvn0bi8UCtm0jDEMcHBzIRgiPvnKl6gclnt7N9TxPXB+7ua1WS57D7s6vv/6K4+NjdLtd+L6Pg4MD6LqO119/HR988ME6U1n/lNj333+Psiyxvb2NxWKBqqqwWCyk5mcIszIsimKlWRHHsURQnuewbRsbGxvIsgy+76PVakl/YX9/H3fv3sXe3p40PmmAbt++vfbkgQs6KPnGG2/IKY08z+F5HjY2NmT73Pd9IcnlconxeIyjoyPkeS5FEYsY4PTkBwulIAiwt7eHw8NDqKqKa9euYTQaAQA+/PDD5x368x2U5PXw4UO89tpriKJIurB1aSMIbKOfnJxgPB5jOp2uHLICnrTcuN9AUFqtFl566SXcuXMHJycn+Oijj5532KfvxQUfln733XeFxMIwRBiG0DQN/X4fg8EAiqJgOp1iPB5juVxKGtSPzpLdp9MpgiCAaZq4efMm2u023n///Ysc7uUdl3/nnXfQ6/UAANPpdCXnqRT1pifPABmGgSAIMB6PkaYpBoMBhsMhPv/888sY5l/zDxOvvvoqWq2WFDAkOcMwxDNEUSRNER7J+fLLLy97aH8NAP/tevvtt1dOk33xxRdXMYyrA+D/5frb/9fYPwBc9QCu+voHgKsewFVf/wY0TUJIpOAuZgAAAABJRU5ErkJggg==",
			"name": "TEX3D_Simplex_Noise",
			"parameters": {
				"scale": 16.0,
				"scale_x": 1.0,
				"scale_y": 1.0,
				"scale_z": 1.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// using https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_random3(vec3 c) {\n\tc = fract(c * vec3(.1031, .1030, .0973));\n    c += dot(c, c.yxz+0.3333333);\n    return fract((c.xxy + c.yxx)*c.zyx)-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_F3 =  0.3333333;\nconst float XsX3zB_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_random3(s), x);\n\t d.y = dot(XsX3zB_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [],
				"instance": "",
				"longdesc": "Makes a non periodic noise using nikat code from https://www.shadertoy.com/view/XsX3zB\n\nCode - Nikat",
				"name": "TEX3D Simplex Noise",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "vec3(XsX3zB_simplex3d($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale))*0.5+0.5",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8.0,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32.0,
						"min": 0.0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16.0,
						"min": 0.0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16.0,
						"min": 0.0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16.0,
						"min": 0.0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "TEX3D Simplex Noise"
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Gen/Simplex Noise",
			"type": "shader"
		},
		{
			"display_name": "Simplex Noise Octaves",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAANmUlEQVR4AezaR4ul1RMG8PO0OeecRkHdKQoujGvxK/g1XLpzIboWQXBpRFQERVFUUHEt6GZmN8PknHP4v7/zUkMLfUP39Mzwd+bS5TmnTp2qep6qN9w7LrTWzlzKgoAB/6X7d5mAS7f2I/LLHTDycOn+96J1wH333dceeOCB9tBDD7U1a9ZctApcEAJuu+22dtddd3XADz74YHv44Ydbknbq1Kl24sSJLoh47LHH2pNPPtmeeuqp9uyzz14QUs4bAUDfeuutHfhNN93UzK+//vp23XXXtSuvvLJdddVV7ZprrmlXX311u+KKK7osLCz8a3zxxRcbeeGFF84bGQur7fmee+5pt9xySwdZwG+44YYGXEmSDjRJ8ykCEMMmSe+QM2fO9HP0r7zySnv55ZeZr6qsGgFa23UNzM0339yIaqt0kg64DZ8CpfpsdAqCdAcde8IPMtgPxzoRdIhYzctjVQhYs2ZNk6gEgbj22mt7i6tckrPJa3f7AN94441NhxgJHRKAb8MnGbugztQe29tvv70999xzg9W5/50TAY888kh79NFHe7tKnAAtrdOnT3d9kl59eoIAwtZNsA0f8yTt5MmTXeiJDtBFQLus7rzzzoZcxJk///zz/YY5uFjx34oJUHUVV3lScyAkLyMAgJO0CgJjTdizOXbsWDt+/Hh/EvBDZ0zSkMifJwWf/OmImnuyuIyefvppx1YkKyIAeMlUYhI1l7gs7Em02hp46wKejODYA3jkyBHH+mWDLB3Ch33k2Dx69Gg7dOhQO3jwYCcMcWIiwCXxzDPPMFu2LJsAz2vVk7hokjQ30kseYODNAQImSX8yIME5Z1TSSACy5ifJ2ftGGz72yeHDhxsi2CKGPd8uEd0wTycM7v71t2wCgMT8Yi9J+nVeVdbqwEuOvWs/Sb9RSroNn2Rc2x+Wvd11gv1kvAHSIywZ7w+1x59zRIwk/Z3i/vvvd2RZsrAca6+uKqHliYSsJaLSgLtZGRcnyVZlxWJrnz1wABC+EKvCZcuHPedVnLAh9Ek6cB1AdN2rr74qzNyyMK/lvffe2ysosAQlI2lJAqPtJWFeAqh9naEj6Nk5BwRgSECKfXa1ZkeXpHcXX0n6pdGGjxySdAIAt8+/Arz00kuDxXx/C/OZtf7ezlZgAMyRIUlSCUgCECNdCUDAOWdkYw9BdR4QQk8nVpIOmp09OnHZ8Jmk0QPu8Wj0Ntrm/MxFgBuMoEm628XzJL0KEqRnAKC1ERBk2AOaVMXZ0AMDBDEn/CTpXcfepeYmaO4MItjpOn74BZ7cfffd7bXXXuNipizMtBgMBBRYoGHZ7+YCAiYJ+yQZE9ba1uxVCTAje4IU550l5vwC5ZzLa9++fQ3g/fv3t927dzd3fnvyQKwz/PNHx6e5EQl33HEHlzNlJgHe7wUUzCiwUeJEcIkn6a1qTyIq4xntXV9C1nwQSTqbjI9GPvhtwwdQz3uyd+/eDtzTARn2dIIY/LiPIMt5l6VRHPsug3luiDMJkCzHElQBgekAqKpa22Pjay8B3kiHEEk5yxf7AWt/VTYCRcyBVHXgCjRwgNqj12Hm1SXW9u3xIw4ikMDnNJlJgMQlDWCSnjRAAiDBPpDa3E2Izn7NJZOMlaYj/EnKOX7NgSQAGHWVs0ABS8wBNUcOQZZLRJfQl/BN+J4mUwl4/PHH+/UOpGQ4BBR4I7DEXDcQa1JVVh0CKGCELz7prT37tby1ZMVBAKKco2cDMBLYAmp+4MCBfq8wRw47Ppxz6b3++uuWE2UqARKRKDCVNJAqTG9U0SKk9uidkUQlpUKVrDl9VbuyA8oZsejMxam5fOgIgpLxpuv7ASIRgwBr4qwzzk+SqQRIRBWMRGUJp5ybAws4AZrYV7VKUnWAkxyRrIT4TsbLypyUH775ApboMrGKNATyyQ9CkYsAcekRIA5/bCbJVAIEJkn62xjQiEjGNYD2jQITICRubMPHyMbesOzPdQmal/BJEFejM/zQJWOlxQHW+cVEIMO9ANH07Ixi8ldxlhqnEsABZw5KyFg6YzImRi8JQVXYtSpJwVUNiCKCn2SsOt9IVSl2bErn8Zmkv2TZEyNJf9QCyqdY5kQHIEcX8CGfZPwS1aZ8Fibt+Wk6Sf+hosBKnr0ANQc6Ge0kYg8gI0BI0L5akVirrPNJ+rdAj0yA6J0xWrNlZ06s3W/YJOm/DrGlR5L4SECMHCrvN954Q9pLykQCAOCAU2MJwLWHZXqeJWHOPkmvFB3QkiOqDQipa5xNGz7GsuEfcMTRs689ZHnLcx4ZbsK6hZ6Ns0kGj62TSyduVyzxn6kEAFMCHOclWhwBRnuCJOm/86tKJYgAQKyBWgxGJYmzgMrP3HmjMwXOrz7mfgv0dmq09rJFEOGMXMThj5+Kz/dSsrCUsnTAq3iN5vYE0WLmdK55a2Ds0amONcD2JIQICUnWXKIqJFFgVdazG1j79vhhT+9LjkqbI8DvE2UrDn9iJmniyEWO02QiAf/880//CswJUXlEkKp6Mr7hAUhX156A7OqMtQSBUS1kSFTygANI6IFmS08QQYBGkN8lkIAA5/lkX+D54Bup5nJ/8803pbCkTCSANadAcAKQli+QqsyGVOsJzIYghI0kVAMAImGJF1B7bJwF1DxJf1yysaZn5yxSkGVOJ0dnS+RrnqTfAxRHjpNkKgEcCYAAoJBArBeDZiNRgFXDngoQe8nYkgiQfIEwkjrDNz/i0knaGgF8GYHmBznA0otnbY+YO+/SZMPPJJlJgIOcAGckSfrlARwRzCiZSj4Z78T0Eiwb+3zqkCT91xzVBI4NW34QQwcsnXnpXAL0dLrJzbDOsnVenqqPBPEmyVQCyhHwql4jZ4AAp0ICCUjHRlAAic5hk4yE8KPSLqU6A1iS/u8CSfqTRCX9EkXcNwAFmJ69KhcJCDCnF4tf7wPiyEW+k2Rh0gb9X3/91b/+StramKTrgBfICLh9AQETfM+ePY34zo4IerbsEIZcaz6sJQ8cYEY/cbvR6Q4Vd+morhj8ianqziEGSYhga98bIZsPP/xQyIkylQCnBDESjiUgYc6xbW7P3H4yXh7sJOFLCRLMdQMinHG+wIpBFoMFGDh+2TnLpzFJf9Fyxl4yFoVPRdKF4syqfhs+MwngdLDrX4aMkgBA5exJQpLJ+GoqOBvBiW5AgrkRAH4kyi5JB9OGjz1V5sOXm73DT2LsxDKyF5OdeTLe6e3TiTW46f96hHAFsZ4mMwlYu3Ztb3lJJSPTgklIMqpEtK3ktTaC7BO2EitASCCSUj0jOxUDStIAIQwIX3LYW/NF+DeyN3cpyYEvsfiy/9lnn1FNlZkEOA2YYAJZG5P0X4tUH2jXobYtUujqnIRUkwAFsAQJAM7waXTGvnhiJekdUrbGNnx0HtDO8UGcte+SI4PZzL+5CNiwYUNPQmKqI6i5UVCJEHNVBd4+4GyAsZek/8prTS9pIkvnnTV3TscRfoDSATpBfKQn6f9KrEMIn7qHnfO//PILVzNlLgJ4EdQoAcmbS07Vam2uMmzY02tJAkQSx/rjDklIYc8WWPZJ+n6S/jYItK5xkG0y+gBWlQnfnjhbtmxpugyZ7OeRuQnQBUl6JwgoWQJsVREBSfr/5QGctVFlgQTa85yu9szt8VU6cxUF3tiGDx/uM/YQggCVV/Fdu3a1nTt39scu/bfffjucmO9vbgK4W79+fb8hJiNIwHWBPRU0r1HikiV0ZYMwlTSy1x1A8AUYIKpaOn7YsQfOSKfi27dv78B37NjR//XIuZ9++kmouWVZBPAqAclKSkKqQMwBJa5B6yT9a6m3tCQNWLbaVHWNqkc2bdrUNm/e3IDwOz+ARmtn2BMkGWvPfsk8/xACw2JZNgHr1q3rz1mPNckQCVSSLg8BEJSkfyNLxlHlkEPY8wH81q1bmyryQ/gsArZt23a2yq5xtkb7zuoUneAN8KOPPhJ6WbJsAnj3bgCEZAEBWusCIXlA7amSfTqJstMhOsicnZEvow5hRwDcuHFjQwDhm43q6xxE8G3P7wQff/yx1JYtKyJAlL///ru3tGQAda0Dai15l4AKW0sUcJcPsESHAOQcvTlCgAcSGWyQZRSTf0QALwZbX5Y+/fRT2yuSFRMgmi9Lf/75Z78kXL+A6gSJIgAISVojAnCAkvSnSYF3U/To8kSoc+za8EEM8vjW8shGrBevn3/+ua208oPr/ndOBHQPw39+/fXXs89s1UrGp4Q5AQYQZBhVDyBgVb9skMdGlY2A26d3BolDuPbEE0+077//3vScZVUIkAUSfvvtt/6Y9Dz39ZSoqkp7htMXWN0BoLNaH0hEEe8LOsKrdZKz/4e5dv/999/bSm524iwlq0ZAOf/xxx/b119/3f9BxcuL7/Tu0MjwHd8vuX7Y9ELkBUhHEF+FkVTgEeCSQZ4zgH/33XcVZtXGVSegMvvkk0/aBx980N5///3+LziqiRBAvRe4hnWELkDEYnFXZ/PHH380XcVX+V3t8bwRsDjR9957r7377rvtnXfeaW+99VZ7++23m2e5ewASVFnXfPPNN+2HH37oHfTVV18tdnHe5heEgKWy//zzz5vv61988UX78ssvlzK5ILqLRsAFQTdHkMsEzEHSf9rkcgf8v5f3XPP/HwAAAP//xrIewAAAAAZJREFUAwB610vXMRzZmgAAAABJRU5ErkJggg==",
			"name": "TEX3D_Simplex_Noise_Octaves",
			"parameters": {
				"brightness": 0.0,
				"clamp": 1.0,
				"contrast": 2.0,
				"iterations": 5.0,
				"persistence": 0.5,
				"scale": 4.0,
				"scale_x": 1.0,
				"scale_y": 1.0,
				"scale_z": 1.0,
				"transx": 0.0,
				"transy": 0.0,
				"transz": 0.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// using https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tc = fract(c * vec3(.1031, .1030, .0973));\n    c += dot(c, c.yxz+0.3333333);\n    return fract((c.xxy + c.yxx)*c.zyx)-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [],
				"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
				"longdesc": "Makes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB\n\nCode - Nikat",
				"name": "TEX3D Simplex Noise Octaves",
				"outputs": [
					{
						"shortdesc": "TEX3D output",
						"tex3d": "$clamp",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8.0,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32.0,
						"min": 0.0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16.0,
						"min": 0.0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16.0,
						"min": 0.0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16.0,
						"min": 0.0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Translate X",
						"longdesc": "Noise X translate",
						"max": 100.0,
						"min": 0.0,
						"name": "transx",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Translate Y",
						"longdesc": "Noise Y translate",
						"max": 100.0,
						"min": 0.0,
						"name": "transy",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Translate Z",
						"longdesc": "Noise Z translate",
						"max": 100.0,
						"min": 0.0,
						"name": "transz",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 12.0,
						"label": "Iterations",
						"longdesc": "Noise iterations / octaves",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Persistence",
						"longdesc": "How higher octaves affect the output",
						"max": 1.0,
						"min": 0.0,
						"name": "persistence",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Brightness",
						"longdesc": "Overall brightness",
						"max": 1.0,
						"min": 0.0,
						"name": "brightness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Contrast",
						"longdesc": "Overall Contrast",
						"max": 1.0,
						"min": 0.0,
						"name": "contrast",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1.0,
						"label": "Clamp",
						"longdesc": "Makes the output restricted between 0 and 1",
						"name": "clamp",
						"type": "enum",
						"values": [
							{
								"name": "false",
								"value": "$(name_uv)_out"
							},
							{
								"name": "true",
								"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
							}
						]
					}
				],
				"shortdesc": "TEX3D Simplex Noise Octaves"
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Gen/Simplex Noise Octaves",
			"type": "shader"
		},
		{
			"display_name": "Scale",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAACflJREFUeJztW9tLVFEX/52Z45mrDmHRH1BEIBiBKSpeKiovDwnmQ5QvWoIEXhITMntIHwwpX8QHSevBHkRJg8C0IkMsmgTJp3mJJOnBCyJko3Pmcr6Hvr3b57JnzlFrPvj6weac2Weffdb67bXXXvsyAgAF/8ewJVuAZOMfAckWINn4R0CyBUg2kk5AQUEBCgoKkvZ98W98JC8vD+/fvwcAFBcXw2azQRAECIKA169fq8qeO3cOAPDq1au/IdqfJ6CoqAg2229Dm5mZUT0vLS2FIAjc90tKShCLxTA9Pf1H5PsjBBQUFMBms6kSi7KyMmoBL168oPmVlZU6Ml6+fEnvS0tLMTk5ua+yCtinSDAnJwcfP36kLc6mqakpldKiKEIURdjtdoyMjBjWV1NTg6GhIV1+RUUFJiYm9kNkAPtkAbm5ufjw4cOvCkURNptN14dFUURKSgpVnhDAg9frRUNDAxRFgaIo6OvrAwCkp6fj6tWrGB4e3g/R90ZAVlYWHA4H5ubmaN6bN28My3o8HkqC3W5PSIDH46H3iqKgra0N0WgU0WgUkUgEdXV1GBgY2Iv4APYwDGZnZ2N+fl6l/IULF7jlXS4X3G637sqD2+2myePxwO12w+v1ore3F6mpqfD5fGhsbMT169d3qwKAXfqA7OxsSJIEu91OEzH58vJyiKIISZJoSklJwcDAAJqammjLk+u9e/d09ff09KC1tdXw293d3YhGo2hvb7cqtiEsd4GsrCz4/X4UFRVBFEWdyUuSBIfDQZV/9OgRAKClpUXlAwhxRmhtbUVfXx8EQcCNGzdUz9xuN2KxGB48eIBIJIK2tjYAQHNzM3p7e62qY50Ah8MBALDb7Yb93eVyQZIkPHnyRJXvdDpVDjCRD3A6nRAEAYODgwCA2tpaWn8sFqP+4OHDh7h58yZ8Pp9VVQBY9AG5ubm0z/OEdzgcOuVJvtPphNPphMPhoIkHUo688/TpU5rvdDrhcrlUfiQ1NRWdnZ1W1AFgwQeQcX63uH//vqEFXLt2zbD86OjoLwE1gZGiKIjFYjRFIhFEIhHIsoydnR0Eg0FL/sG0BbDK87x9fX09933iG1j/IEmSqfJsqqqqUlkSua+vr4fH44HX67VkCaYtQOv0ysvLIUkSXC4XHA4HHj9+DAC4deuWyvuT1NjYaFjv6Ogo7Ha7LnosKyszLD81NQVFUVBSUqLKHxkZgSzLqK6uBgDcvXvXcITRwpQFsLE9gSiKtDWJ8gBUrWu2pXdTXuuAiTUQmFEeMEkAUZ4Nb4kgWofHtj57zwOxEG3cwANb7t27dzSfdJGxsTGa19XVlVA3U8Og0YyO11KsQmwXIHj27JkqGNL6k7m5Od23tN8l84NYLEbzHQ4HXWcgSEtLS6xbogLs7E4rCAlyWLBKawkYHx83zGeRn59vymJI8vv9VB7iOAkaGhoSqRefgLy8PNWUVitIPAHJxCclJQWXL1/GxMSETnhRNDbArKwsLC4uxq1fSyLbjbSyxoPpUaCsrAyiKMLj8cDlcmFoaAgtLS2qwEaSJDQ3N+venZiYQEVFhWG9fr8fNptNNxJkZGQgEAhQkybXY8eO6epYXFxEZmamKm9ychI/f/7ExsYG6urquHqZjgMEQVC1bFNTk+o3uWoxPj7ObWkAuuCIJAA4fvy4bh3BCFrlgd9xhMvliqtXXAKKi4vpPVnJ0S5qGAlOQBzebgkAgCNHjnDrjwfSPUhcwENcAojjI+avncoa5fGU44Gth1eeLWMWhYWFcZ0p1THeQ7b/aWN4LQk8weNNewGo6uSVZ79lBaR8f38/v0y8ClgCWOGMBOYJnmjaS97TOkJtmXhL51zl/ktAvMiSOwoUFBRgdnbW8lL06OgoDYLYeN7v9xta0NGjRw3rWV9fhyAIsNlsOHDgAM3f3NykgRA7MyRrhWRmGAqFcOLECUxPT+P8+fNceRPalFXmedbADnFmugZpde33iXUQAshzRVFgt9sRi8WoJbHleeASMDs7G/dFHlglWWi7ipGpG9WjJcBut6ssgIWiKLrNmEQEmIoDKisrzRRTCa79sHa6a0QSCx5JrAUZ1UlIy8jIMCdvvIdko9JKN2AFYZfMecImqke7dM5urLIKs3msvGfOnIkvr2nNNOjp6YkrOBFmfn5elW+FAKMoTtvSgiDA5/Pp8szC9FygpqYGXq+XblJ0dHSgr69PtTwlSRIuXryoe9coVidYX183HAadTidkWdYpZBQLbG1twev1qvICgQB+/PiBtbU17uoSYMECjDYqtcLxmM/MzEQgEDB8pjVdQRCo8lprMtuyS0tLdHiMpzxgggB27U3rdcmmBdsHeRAEAV++fNELoOnDxOzZ+rRXFjs7O9yV45ycnETqJY4D2FUXo6HHCgRBwLdv31SBEBvkaMuSazxijWQimyZmkNAC2JMZfX19uqUosmOTCEZdJZFJJ3ouyzIAtWUuLy8jGo3SZ4lgygeUlpbS+2g0qmP8ypUrpj7Gwkx/Ngp0CMLhsGFAFIlEEA6HcerUKXNywOQoUFFRgfT0dKSlpaG3txfd3d10m5uMBFVVVZiamtKt8KakpHADk83NTcMVId5UNhqNGgZQa2trOHTokCmlWZgeBSYmJhAKhRCJRHD79m1Eo1HVFlUsFsPz589VrcILWVmQZ+w1Xnle9Mgqrz2IFQ+WAqHh4WGEQiGEw2G0t7dTZ8OSUFJSYpkAs+XD4bBh/srKCr33+/2qlaxEsBwJDgwMUAcTiURUJBDPe/bsWZ118KCd2mqdLIEsy9x6CDELCwvIzs62pM+uQuFgMAgAaGtrQzgcpvNwdugpKipCbm5uQgK0RGnL7+zsYHt7mzu0ff/+HaFQCACwurpqWZd9OyY3ODgIp9PJHRF44fDKyorKCZLYfmtr65eAgqCyErLbs7KygnA4jFAohGAwiPX1dZw+fdqy3Hs6Jdbc3Ayfz4fU1FTIsoza2lqMjIyotrPJSMCbC7DDKlng2Nzc1MX2BMTbHz58mOa9fft2V8oD+2QBnZ2ddKJEhkXtWYD8/HzDd0lkqI37Dx48mPC7CwsLWF1djXs6LRH25bR4R0cHgsEgtre3UV1djaqqKsiyDFmWEQ6Hud4b+B24kER+a7G8vIyvX7/S336/HydPntyT8sA+nhVub29Xncy4dOkSvY+3VyfLsqr/s7H/0tISFEVBNBpFMBikxMzMzFj29jzsmxMk4J3MmJycpP6gsLCQ5n/+/Fm1H0gQCARUK76yLJsOb61g3wkg6OrqQlpaGt2iHhsbg8PhUO0Mi6LI9Q2fPn0yPaXdC/7Y/wXu3Lmj+r2xsQGXy6Xbq5uenlYtj5E1vEQrOfuFP2YBidDf3w9JkrjH5P4WkkbA/wqS/qepZOMfAckWINn4R0CyBUg2/gPfGySwSVSiygAAAABJRU5ErkJggg==",
			"name": "TEX3D_Scale",
			"parameters": {
				"Scale": 1.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec3(0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Scales the TEX3D texture\n\nCode - PauloFalcao",
				"name": "TEX3D Scale",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$in($uv*$Scale)",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "Scale",
						"longdesc": "Scale factor",
						"max": 10.0,
						"min": 0.0,
						"name": "Scale",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "TEX3D Scale"
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Op/Scale",
			"type": "shader"
		},
		{
			"display_name": "Translate",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAA+BJREFUeJztWttuozAQHcDY/aAIRPrQVqpUqb/cx/5NqjwhIe7sw2roxNjGyTZmss2RLAgQ7HPmeDyQRAAwwS9GvPUAtsZdgK0HsDXuAmw9gK3x6wUQITrZ7/eQJAnEcQxRFM1bbCZ8fHyEGNr1BCiKApIkmYlT0rgPAE4RQuDHBSiKAoQQM2naaNSpGPr5kPgxAfI8hzRNTyJuIy+EACHEiUOSJFmdFtfAjwiAUdctT+d8HMeQpulMnl5vyg+h8E8C7HY7UEotiFDySZKAlHImjy4xCbDFNLhYgCzLZlI28lLKmTw2Gn3MFabvhsJFAmRZBlJKa+SFEDN5kwAuB7AXYLfbndhYj2CapqCUMpLXHXCTAiilZgI6eSklPDw8OKNvSoL6fdgKQIsbPXsrpWby6IA0TRcJ8GanQJ7n1oSH5JVSC/tLKU/I36wDcN7r5NH2SN42/89xQByHe0bzEsBU12PCo7an5F0JcC0JshPAVNsLIWbCOvH/ygFFURjrehNhnbwpAdocwDYHuCo8m9UpedcSaFtOWTlAjwzW9pSgS4g1AZA8SwH2+/3C/jaiaHPTZ58pQF3AZgro0cfMbyNv2rpqAPZTQH+R4Yq0jTxt9BnCVQixEUB/feUi59N08jfhAHSBaeC2Y/ScSwxXMRQKVgEeHx+N7/HWiJqKHGz0OPtCiL6awuXPNnhbcznEtQqwEgCzv2mwPs33WnYCIOhb3bWBu8hTe6/dJ2QdYJX68/Pz+yJDlqZkTOfXXGC7D+6HgpfXbL/k+DaXeFsnwbMEoBXhtVsoePdk+l1v7Xc+076pmc6HgrOncRwXx1zE9WM256ydDylABEz/Jte27cmKEEURTNPfoU7TBNM0wTiOMI4jDMMAwzBA13XQdR00TQNVVUFZlpDnubOfIH+QuAR6IUa3+jX0OBWn67rVflgLgFudIAUSpg0dUdf1aj+s/yPkWxBR8jgl2raF19fX1e+yFsAUbbpvIt73PXRdB1VVefXBdgpQ2IhjEqTJsO97aJoGnp6evO7NVgA9+vS4jTiuAGVZevdzUwKYIk/Jt20LVVXB8/Ozdz+sBZimabECUPJInJLPsuysftgKgFWoXgDRyOuFz+FwOLsftgIMwwAA3wLYsj2SPx6P8Pb2dnY/bAXo+362vz739Tl/PB7h5eXlon5YC4DQKzxK/nA4XBR5BFsBsI6n0e/7fl7nL0l4JrAVoGkaAIBF5HGdP2epc4GtAHVdn2R8tLxvhecLtgKUZTk/0tZ17fVgcwnYCvD19QXv7+9X74ftG6FQYP04HAJ3AbYewNa4C7D1ALbGrxfgD7hpBE5IUx6AAAAAAElFTkSuQmCC",
			"name": "TEX3D_Translate",
			"parameters": {
				"x": 0.0,
				"y": 0.0,
				"z": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Translates the input TEX3D\n\nCode - PauloFalcao",
				"name": "TEX3D Translate",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$in($uv-vec4($x, $y, $z,0.0))",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 0.0,
						"label": "X",
						"max": 1.0,
						"min": -1.0,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "P1.y",
						"default": 0.0,
						"label": "Y",
						"max": 1.0,
						"min": -1.0,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Z",
						"max": 1.0,
						"min": -1.0,
						"name": "z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "TEX3D Translate"
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Op/Translate",
			"type": "shader"
		},
		{
			"display_name": "Brightness and Contrast",
			"icon_data": "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",
			"name": "TEX3D_Brightness_and_Contrast",
			"parameters": {
				"brightness": 0.0,
				"clamp": 0.0,
				"contrast": 1.0
			},
			"shader_model": {
				"code": "vec3 $(name_uv)_bc = vec3($in($uv)*$contrast+vec3($brightness)+0.5-$contrast*0.5);",
				"global": "",
				"inputs": [
					{
						"default": "vec3(0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Changes TEX3D brightness and contrast\n\nCode - PauloFalcao",
				"name": "TEX3D Brightness and Contrast",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$clamp",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Brightness",
						"longdesc": "Brightness amount",
						"max": 1.0,
						"min": -1.0,
						"name": "brightness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Contrast",
						"longdesc": "Contrast amount",
						"max": 2.0,
						"min": 0.0,
						"name": "contrast",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1.0,
						"label": "Clamp",
						"longdesc": "Clamp values between 0 and 1",
						"name": "clamp",
						"type": "enum",
						"values": [
							{
								"name": "true",
								"value": "clamp($(name_uv)_bc,vec3(0),vec3(1))"
							},
							{
								"name": "false",
								"value": "$(name_uv)_bc"
							}
						]
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Op/Brightness and Contrast",
			"type": "shader"
		},
		{
			"display_name": "Axis Symmetry",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABRNJREFUeJztWr9P8lwYPS2lFMTww93/wUEJMUbjYCIkxsDCYOLE5GRCwsbioonGCScX42BMjJMBJv1j2AiDYCiBlvYbvtx+pbRwW25t3u/lJE/qW25Pn3Puc2/vbV8OgI6/GHzQCQSNlQFBJxA0VgYEnUDQWBkQdAJBY2UAa8JsNou9vT3WtMjn8zg+PmbOK7AiymQyCIfDCIVC4Hn2hZVMJqGqKk5PTzEej9FoNJjwMsk0m81CFEUIgmAEayQSCSSTSWxsbCCdTqNQKDDh5eDTXiCXy4HjOIRCIYiiiHA4DEEQ8Pz8PPe6arUKjuPAcZxxTtd1XF9f+5EmuyFgBc/zEEUR7+/vrq67ubmZ+vfV1RXLtGbgWwX8KfDlMVgqlZhz1ut15pwA4yFQKBQgSRJEUWRJCwCQJAmPj4/QdR3lcpkZr6sKyGazjr8Vi0VEo1FEIhFIkrR0YlZIkmTE09OTY7tKpeKKl9qATCbj+HgrFouQJMkQH4lEXCVBA8JN4uXlxbZdKpXC5eUlNS+1AWSRYwUp+0gkMhWsYeYmJry9vc20i8fjSKfT1LxUBmSzWYRCIVsDyJgnyYmi6MscQLitRlgRi8Wwvr6OWq1GxUtlgCAI4Hl+ZolbKpWMpIhwvwyw3of83Wq1ptpFo1Gsra0hkUhQ8bpeB+RyOfA8j4+Pj7nt7u7uplaA5EiCVJQ5iMkcxxlHsiLc3d2de79mswlFUXBycuJGjvvHIMdxVD1MxJMwiycGkCPP81MGmMVbl8VOiEQinjZhrq8IhUJUy1uz+HlBqmNRLMLh4aGnoee6AmhvYhZGMwTMVWAdAjQV4Ca3qTzdXkDTG6QdEet1CJAjLX7FANq9vlUwMYIIN1eBnQFeKsDLewjfdoOvr69LTYJWAzY3N/1I07/3AXYVQPsY9DoEPOXpF7GdQLNwqwnW3vcyBLzAVwPsyn1e71sXQ6QK/ITvFUCELYr/pQFm8ebSXmSA13WAF/zKHGAn2jre502Cf6QB88TZVUJQk6DrAVatVumIbQQtEzTodDpu5XjbDdK2s5azUzj97rYCfmU36CYZ80xuZ4jT7162w17h2xxgFWAn2Ol36zk/4ekhS/O5yirGLpx629rzNCb0ej0vUtwboOv0eyc7IXaiFomnMUDXdVe5GfcGxW4wn88jmUwikUjg4eHBOF+v141X1Oa3taIo4uDgwHUy80DEEaG6rkPTNEwmE0SjUaNdu92GLMvo9/vY3t5eyEtVAZqmQVVVTCaTqfMXFxczznvpBVpY76Pr+pR4AFBVFYqiQJZlKk4qA5rNJkajEVRVtU3KHNZEWcGpAqxQVRWj0Qj7+/tUvNRzwHg8xmg0mjlfLpehaRo0TZsxgiWswjVNm+l9ABiNRvj5+aHmpTag0Wg4ltX5+bmRFDGCNczCNU1z/AAry7Kr+YfpK7G3tzfjU9nR0RErWgD/ViAxwa7nl4HOOlqtFnPO4XDInBOAvvovMn4RN5tNfH5+Ls3T6/Xw/f3NICN7+LYXUBQFPM/j6+vL+KIrCAK2trbmXtfpdKZ2dYqi+Lq2YDIEKpUKUqkU4vE4YrEYotEozs7OGKT3H9rtNlRVNZ7zsixjZ2dnaV4mQ+D29hbdbhf9fh+DwQDD4ZAF7RRkWcZgMEC/30e322UiHmA4BO7v7wEAtVptZsnMAv1+H7IsU6/waLF6CgSdQNBYGRB0AkFjZUDQCQSNlQFBJxA0/noD/gFzEtfh4gFJUgAAAABJRU5ErkJggg==",
			"name": "TEX3D_Axis_Symmetry",
			"parameters": {
				"mode": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "TEX3D",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Transforms a TEX3D making a mirror symmetry using the chosen axis\n\nCode - PauloFalcao",
				"name": "TEX3D Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "SDF3D output",
						"tex3d": "$in(vec3($mode))",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": 6.0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "TEX3D Axis Symmetry"
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Op/Axis Symmetry",
			"type": "shader"
		},
		{
			"display_name": "Paint Edges",
			"icon_data": "",
			"name": "Tex3D_Paint_Edges",
			"parameters": {
				"edges": 0.04,
				"f": 2.0,
				"h": 0.0,
				"iterations": 4.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$sdfa($uv.xyz);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$f*100.,0.0,1.0));\n",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base SDF",
						"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "sdfa",
						"shortdesc": "Main SDF",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0.8,0.6,0.6)",
						"function": true,
						"label": "Tex Bump ",
						"longdesc": "Bump Texture, where the SDF difference is negative",
						"name": "texa",
						"shortdesc": "Bump Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "Tex Surface",
						"longdesc": "Surface Texture, where the SDF difference is close to zero",
						"name": "texb",
						"shortdesc": "Surface Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.3,0.1,0.1)",
						"function": true,
						"label": "Tex Hole",
						"longdesc": "Hole Texture, where the SDF difference is positive",
						"name": "texc",
						"shortdesc": "Hole Texture",
						"type": "tex3d"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$sdfa(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$sdfa(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Modifies an SDF by comparing the base SDF and a modified blured version of the base SDF.\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.\n\nCode - PauloFalcao\n\n",
				"name": "Tex3D Paint Edges",
				"outputs": [
					{
						"tex3d": "$(name_uv)_tex",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.04,
						"label": "Edge Size",
						"longdesc": "Blur amount applied to the original SDF generating a new SDF",
						"max": 0.1,
						"min": 0.0,
						"name": "edges",
						"shortdesc": "Edge Size",
						"step": 0.0001,
						"type": "float"
					},
					{
						"default": 6.0,
						"label": "Edge Precision",
						"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
						"name": "iterations",
						"shortdesc": "Edge Blur precision",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Contrast",
						"max": 1.0,
						"min": 0.0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Shift",
						"max": 1.0,
						"min": -1.0,
						"name": "h",
						"shortdesc": "Shift  difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Tex3D Paint Edges"
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Op/Paint Edges",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "pxflib",
					"from_node": "node_pxflib",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_3",
					"to_node": "node_shader_3",
					"to_port": 1.0
				},
				{
					"from": "pxflib_2",
					"from_node": "node_pxflib_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_3",
					"to_node": "node_shader_3",
					"to_port": 2.0
				},
				{
					"from": "pxflib_3",
					"from_node": "node_pxflib_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_3",
					"to_node": "node_shader_3",
					"to_port": 3.0
				},
				{
					"from": "sdf3d_boolean",
					"from_node": "node_sdf3d_boolean",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "shader_3",
					"to_node": "node_shader_3",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_box_2",
					"from_node": "node_sdf3d_box_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_5",
					"to_node": "node_pxflib_5",
					"to_port": 0.0
				},
				{
					"from": "pxflib_5",
					"from_node": "node_pxflib_5",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean",
					"to_node": "node_sdf3d_boolean",
					"to_port": 0.0
				},
				{
					"from": "sdf3d_box",
					"from_node": "node_sdf3d_box",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "sdf3d_boolean",
					"to_node": "node_sdf3d_boolean",
					"to_port": 1.0
				},
				{
					"from": "sdf3d_boolean",
					"from_node": "node_sdf3d_boolean",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "Multi_Transform",
					"to_node": "node_Multi_Transform",
					"to_port": 0.0
				},
				{
					"from": "shader_3",
					"from_node": "node_shader_3",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "Multi_Transform",
					"to_node": "node_Multi_Transform",
					"to_port": 1.0
				},
				{
					"from": "SDF_Checkerboard",
					"from_node": "node_SDF_Checkerboard",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 0.0
				},
				{
					"from": "SDF_Checkerboard",
					"from_node": "node_SDF_Checkerboard",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 1.0
				},
				{
					"from": "Multi_Transform",
					"from_node": "node_Multi_Transform",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 2.0
				},
				{
					"from": "Multi_Transform",
					"from_node": "node_Multi_Transform",
					"from_port": 1.0,
					"keep_alive": false,
					"to": "pxflib_4",
					"to_node": "node_pxflib_4",
					"to_port": 3.0
				}
			],
			"display_name": "Paint Edges Example",
			"icon_data": "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",
			"nodes": [
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -209.581970214844,
						"y": -102.948303222656
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": 0.2,
						"TranslateZ": 0.2,
						"scale": 0.5
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -412.582000732422,
						"y": 79.0516967773438
					},
					"parameters": {
						"color": {
							"a": 1.0,
							"b": 1.0,
							"g": 1.0,
							"r": 1.0,
							"type": "Color"
						}
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -413.582000732422,
						"y": 143.051696777344
					},
					"parameters": {
						"color": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 1.0,
							"type": "Color"
						}
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -413.582000732422,
						"y": 225.051696777344
					},
					"parameters": {
						"color": {
							"a": 1.0,
							"b": 0.0,
							"g": 0.0,
							"r": 0.0,
							"type": "Color"
						}
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1.0,
									"b": 1.0,
									"g": 1.0,
									"r": 1.0
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -456.582000732422,
						"y": -97.9483032226562
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed_int": 0.0,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -448.582000732422,
						"y": -246.948303222656
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed_int": 0.0,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": 19.4180297851562,
						"y": -171.948303222656
					},
					"parameters": {
						"op": 1.0
					},
					"seed_int": 0.0,
					"type": "sdf3d_boolean"
				},
				{
					"name": "shader_3",
					"node_position": {
						"x": -158.901428222656,
						"y": 149.815612792969
					},
					"parameters": {
						"edges": 0.0377,
						"f": 2.0,
						"h": 0.0,
						"iterations": 4.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "float $(name_uv)_sdfa=$sdfa($uv.xyz);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$f*100.,0.0,1.0));\n",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Base SDF",
								"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
								"name": "sdfa",
								"shortdesc": "Main SDF",
								"type": "sdf3d"
							},
							{
								"default": "vec3(0.8,0.6,0.6)",
								"function": true,
								"label": "Tex Bump ",
								"longdesc": "Bump Texture, where the SDF difference is negative",
								"name": "texa",
								"shortdesc": "Bump Texture",
								"type": "tex3d"
							},
							{
								"default": "vec3(1.0,0.0,0.0)",
								"function": true,
								"label": "Tex Surface",
								"longdesc": "Surface Texture, where the SDF difference is close to zero",
								"name": "texb",
								"shortdesc": "Surface Texture",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.3,0.1,0.1)",
								"function": true,
								"label": "Tex Hole",
								"longdesc": "Hole Texture, where the SDF difference is positive",
								"name": "texc",
								"shortdesc": "Hole Texture",
								"type": "tex3d"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$sdfa(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$sdfa(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - Tex3D Operator\nCode - PauloFalcao\n\nModifies an SDF by comparing the base SDF and a modified blured version of the base SDF.\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.\n\n",
						"name": "Tex3D Paint Edges",
						"outputs": [
							{
								"tex3d": "$(name_uv)_tex",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.04,
								"label": "Edge Size",
								"longdesc": "Blur amount applied to the original SDF generating a new SDF",
								"max": 0.1,
								"min": 0.0,
								"name": "edges",
								"shortdesc": "Edge Size",
								"step": 0.0001,
								"type": "float"
							},
							{
								"default": 6.0,
								"label": "Edge Precision",
								"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
								"name": "iterations",
								"shortdesc": "Edge Blur precision",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									}
								]
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Color Contrast",
								"max": 1.0,
								"min": 0.0,
								"name": "f",
								"shortdesc": "Increases the difference between Textures",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Color Shift",
								"max": 1.0,
								"min": -1.0,
								"name": "h",
								"shortdesc": "Shift  difference between Textures",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Tex3D Paint Edges"
					},
					"type": "shader"
				},
				{
					"name": "Multi_Transform",
					"node_position": {
						"x": 361.838165283203,
						"y": -168.659484863281
					},
					"parameters": {
						"RotateX": 0.0,
						"RotateY": 0.0,
						"RotateZ": 0.0,
						"TranslateX": 0.0,
						"TranslateY": 0.0,
						"TranslateZ": 0.0,
						"scale": 2.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "vec3 MultiTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"default": "0.0",
								"label": "",
								"name": "tex",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							}
						],
						"instance": "",
						"longdesc": "Translates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate\n\nCode - RodZilla, PauloFalcao",
						"name": "Multi Transform",
						"outputs": [
							{
								"sdf3d": "$in(MultiTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale)*$scale",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"shortdesc": "TEX3D",
								"tex3d": "$tex(MultiTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale)",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "S",
								"max": 4.0,
								"min": 0.0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "X",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Y",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Z",
								"max": 10.0,
								"min": -10.0,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180.0,
								"min": -180.0,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "SDF_Checkerboard",
					"node_position": {
						"x": 346.818756103516,
						"y": -315.759582519531
					},
					"parameters": {
						"AA": 0.0,
						"Position": -1.0,
						"Size": 10.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "float Simple_AAcheckedboard2D(vec2 p) {\n    p*=2.0;\n\tvec2 w=max(abs(dFdx(p)),abs(dFdy(p)))+1e-5;\n\tif (max(w.x,w.y)>1.0) {\n\t\treturn mod(floor(p.x)+floor(p.y),2.0);\n\t}\n\tvec2 i=((1.-abs(2.*fract((p+.5*w)/2.)-1.))-(1.-abs(2.*fract((p-.5*w)/2.)-1.)))/w;\n\treturn .5-.5*i.x*i.y;\n}",
						"inputs": [],
						"instance": "",
						"longdesc": "",
						"name": "SDF Checkerboard",
						"outputs": [
							{
								"sdf3d": "max($uv.y-$Position,length(vec3($uv.x,$uv.y+$Position,$uv.z))-$Size)",
								"type": "sdf3d"
							},
							{
								"tex3d": "vec3($AA)*0.9+0.1",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1.0,
								"label": "Position",
								"max": 2.0,
								"min": -5.0,
								"name": "Position",
								"step": 0.1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 10.0,
								"label": "Size",
								"max": 30.0,
								"min": 1.0,
								"name": "Size",
								"step": 1.0,
								"type": "float"
							},
							{
								"default": 1.0,
								"label": "AA",
								"name": "AA",
								"shortdesc": "Anti-Aliasing",
								"type": "enum",
								"values": [
									{
										"name": "No",
										"value": "mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0)"
									},
									{
										"name": "Yes",
										"value": "Simple_AAcheckedboard2D($uv.xz)"
									}
								]
							}
						]
					},
					"type": "shader"
				},
				{
					"generic_size": 2.0,
					"name": "pxflib_4",
					"node_position": {
						"x": 656.818725585938,
						"y": -235.759582519531
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1.0,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2.0,
						"CamZ": 3.0,
						"CamZoom": 1.0,
						"LookAtX": 0.0,
						"LookAtY": 0.0,
						"LookAtZ": 0.0,
						"Pow": 64.0,
						"Reflection": 0.2,
						"Shadow": 1.0,
						"Specular": 0.0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1.0
					},
					"seed_int": 0.0,
					"shader_model": {
						"code": "",
						"global": "\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*3.14159265359,3.14159265359);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv.xyz)-0.4",
								"function": true,
								"label": "SDF3D #",
								"name": "sdf#",
								"shortdesc": "SDF3D #",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.0,0.0)",
								"function": true,
								"label": "TEX3D #",
								"name": "tex#",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "\nvec2 input_$name(vec3 p) {\n    vec2 sdf=vec2(999999.0,0.0);\n\tfloat m;\n#for\n    m=$sdf#(p);\n    if (m<sdf.x){\n\t  sdf=vec2(m,#.0);\n\t}\n#end\n    return sdf;\n}\n\n\nvec3 tex_$name(vec3 p,float id) {\n    vec3 t=vec3(0.0);\n#for\n    if (id>(#.0-0.5)&&id<(#.0+0.5)) {\n\t  t=$tex#(vec4(p,id));\n\t}\n#end\n\n    return t;\n}\n\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\t\n\tvec3 objColor=tex_$name(p,dS.y);\n\t\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=tex_$name(p,dS.y);\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "SDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5.0,
								"min": -5.0,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5.0,
								"min": -5.0,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.0,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5.0,
								"min": -5.0,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5.0,
								"min": -5.0,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5.0,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5.0,
								"min": 0.0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5.0,
								"min": 0.0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1.0,
								"min": 0.0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1.0,
								"min": 0.0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32.0,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024.0,
								"min": 0.0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10.0,
								"min": -10.0,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10.0,
								"min": -10.0,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10.0,
								"min": -10.0,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1.0,
								"min": 0.0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1.0,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1.0,
								"min": 0.0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PF/TEX3D/Op/Paint Edges Example"
		},
		{
			"display_name": "Paint Edges Generic",
			"icon_data": "",
			"name": "TEX3D_Paint_Edges_Generic",
			"parameters": {
				"f": 0.5,
				"h": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$sdfa($uv.xyz);\nfloat $(name_uv)_sdfb=$sdfb($uv.xyz);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$f*100.,0.0,1.0));",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base SDF",
						"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "sdfa",
						"shortdesc": "Main SDF",
						"type": "sdf3d"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified SDF",
						"longdesc": "Modified SDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
						"name": "sdfb",
						"shortdesc": "Modified SDF",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0.7)",
						"function": true,
						"label": "Tex Bump ",
						"longdesc": "Bump Texture, where the SDF difference is negative",
						"name": "texa",
						"shortdesc": "Bump Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "Tex Surface",
						"longdesc": "Surface Texture, where the SDF difference is close to zero",
						"name": "texb",
						"shortdesc": "Surface Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.2)",
						"function": true,
						"label": "Tex Hole",
						"longdesc": "Hole Texture, where the SDF difference is positive",
						"name": "texc",
						"shortdesc": "Hole Texture",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Creates a TEX3D by comparing the base SDF and a modified version of the base SDF.\nTypically the modified version is a soft version of the base version, which can be done using the Node SDF Blur\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.\n\nCode - PauloFalcao",
				"name": "TEX3D Paint Edges Generic",
				"outputs": [
					{
						"tex3d": "$(name_uv)_tex",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Contrast",
						"max": 1.0,
						"min": 0.0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Color Shift",
						"max": 1.0,
						"min": -1.0,
						"name": "h",
						"shortdesc": "Shift  difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "TEX3D Paint Edges Generic"
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Op/Paint Edges Generic",
			"type": "shader"
		},
		{
			"display_name": "SDF3D to TEX3D",
			"icon_data": "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",
			"name": "SDF3D_to_TEX3D",
			"parameters": {

			},
			"shader_model": {
				"code": "float o_$name_uv=$in($uv.xyz);",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Converts a SDF3D to a grayscale TEX3D\n\nCode - PauloFalcao",
				"name": "SDF3D to TEX3D",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "vec3(o_$name_uv,o_$name_uv,o_$name_uv)",
						"type": "tex3d"
					}
				],
				"parameters": []
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Util/SDF3D to TEX3D",
			"type": "shader"
		},
		{
			"display_name": "Triplanar to TEX3D by SDF",
			"icon_data": "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",
			"name": "Triplanar_to_TEX3D_by_SDF",
			"parameters": {

			},
			"shader_model": {
				"code": "vec3 texx_$name_uv=$texx($uv.yz+0.5);\nvec3 texy_$name_uv=$texy($uv.xz+0.5);\nvec3 texz_$name_uv=$texz($uv.xy+0.5);",
				"global": "",
				"inputs": [
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "TexX",
						"name": "texx",
						"type": "rgb"
					},
					{
						"default": "vec3(0.0,1.0,0.0)",
						"function": true,
						"label": "TexY",
						"name": "texy",
						"type": "rgb"
					},
					{
						"default": "vec3(0.0,0.0,1.0)",
						"function": true,
						"label": "TexZ",
						"name": "texz",
						"type": "rgb"
					},
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"type": "sdf3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}",
				"longdesc": "Chooses a TEX3D based on normal\n\nCode - PauloFalcao",
				"name": "Triplanar to TEX3D by SDF",
				"outputs": [
					{
						"tex3d": "abs(normal_$name($uv.xyz))*mat3(vec3(texx_$name_uv.x,texy_$name_uv.x,texz_$name_uv.x),vec3(texx_$name_uv.y,texy_$name_uv.y,texz_$name_uv.y),vec3(texx_$name_uv.z,texy_$name_uv.z,texz_$name_uv.z))",
						"type": "tex3d"
					}
				],
				"parameters": []
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Util/Triplanar to TEX3D by SDF",
			"type": "shader"
		},
		{
			"display_name": "Code",
			"generic_size": 1.0,
			"icon_data": "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",
			"name": "TEX3D_Code",
			"parameters": {
				"code": "$in1($uv)"
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"label": "",
						"name": "in#",
						"shortdesc": "TEX3D #",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Executes the code in the parameter\nExamples:\n$in1($uv)\nvec3(uv.x,uv.y,uv.z)\n\nCode - PauloFalcao",
				"name": "TEX3D Code",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$code",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.5,
						"label": "",
						"longdesc": "Examples:\n$in1($uv)\nlength($uv)-0.4",
						"max": 1.0,
						"min": 0.0,
						"name": "code",
						"step": 0.1,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/TEX3D/Op/Code",
			"type": "shader"
		},
		{
			"display_name": "360 HDRI Nimitz Sky",
			"icon_data": "",
			"name": "4690",
			"parameters": {
				"cloudtime": 618.0,
				"sunPosX": 2.5,
				"sunPosY": 2.5,
				"sunPosZ": 2.5
			},
			"seed": -2939.0,
			"shader_model": {
				"code": "",
				"global": "// Day at the Lake by nimitz, 2020 (twitter: @stormoid)\n// https://www.shadertoy.com/view/wl3czN\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n//\n// Simple floor by PauloFalcao\n//\n// Modified for Material Maker by (twitter: @PauloFalcao)\n//\n\nmat3 nz_cloudrot_y(float a){\n\tfloat sa = sin(a);\n\tfloat ca = cos(a);\n\treturn mat3(vec3(ca,.0,sa),vec3(.0,1.,.0),vec3(-sa,.0,ca));\n}\n\nvec3 nz_cloudsIntcPlane(vec3 ro, vec3 rd, float plH){\n    ro.y += plH;\n    float t = -ro.y/rd.y;\n    if (t < 0.)\n        return vec3(1e6);\n    float u =  ro.x + rd.x*t;\n    float v =  ro.z + rd.z*t;\n    return vec3(t,u,v);\n}\n\nvec4 nz_cloudMap(vec3 p, float time){\n    p.xz += vec2(-time*1.0, time*0.25);\n    time *= 0.25;\n    p.y -= 9.0;\n    p *= vec3(0.19,0.3,0.19)*0.45;\n    vec3 bp = p;\n    float rz = 0.;\n    vec3 drv = vec3(0);\n    \n    float z = 0.5;\n    float trk= 0.9;\n    float dspAmp = 0.2;\n    \n    float att = clamp(1.31-abs(p.y - 5.5)*0.095,0.,1.);\n    float off = dot(sin(p*.52)*0.7+0.3, cos(p.yzx*0.6)*0.7+0.3)*0.75 - 0.2; //large structures\n    float ofst = 12.1 - time*0.1;\n    \n    for (int i = 0; i<6; i++){\n        p += sin(p.yzx*trk - trk*2.0)*dspAmp;\n        \n        vec3 c = cos(p);\n        vec3 s = sin(p);\n        vec3 cs = cos(p.yzx + s.xyz + ofst);\n        vec3 ss = sin(p.yzx + s.xyz + ofst);\n        vec3 s2 = sin(p + s.zxy + ofst);\n        vec3 cdrv = (c*(cs - s*ss) - s*ss.yzx - s.zxy*s2)*z;\n        \n        rz += (dot(s, cs) + off - 0.1)*z; //cloud density\n        rz *= att;\n        drv += cdrv;\n        \n        p += cdrv*0.09;\n        p.xz += time*0.1;\n        \n        dspAmp *= 0.7;\n        z *= 0.57;\n        trk *= 2.1;\n        p *= mat3(\n\t\t  vec3(0.33338, 0.56034, -0.71817),\n\t\t  vec3(-0.87887, 0.32651, -0.15323),\n\t\t  vec3(0.15162, 0.69596, 0.61339)\n\t\t)*2.01;\n    }\n    \n    return vec4(rz, drv);\n}\n\n//-----------------------------Sky rendering---------------------------\n// modified from an prototype public domain implementation by shadertoy user Jodie: https://www.shadertoy.com/view/ttSGzh\n// That version has some serious accuracy issues, I modified it to somewhat match the Hosek-Wilkie sky model visuals.\n\n\nvec3 nz_getThickness(vec3 rd){\n\n\tconst float earthRadius=6371000.;\n\tconst float atmoDepth=8228.;\n\tconst float mieDepth=1800.0;\n\tconst float ozoneHeight=30000.;\n\t\n    const vec4 cns = earthRadius + \n        \t\t\tvec4(atmoDepth, mieDepth, ozoneHeight, ozoneHeight + atmoDepth);\n    const float r2 = earthRadius * earthRadius;\n    float b = -rd.y*earthRadius;\n    vec4 z = sqrt( cns*cns + (b*b - r2) );\n    return vec3(b + z.xy, z.w - z.z);\n}\n\n\nvec3 nz_getSky(vec3 rd, vec3 lgt, float addDepth){\n\n\tconst vec3 rayleighCoefficient=vec3(5.6e-6  , 1.25e-5 , 2.9e-5 );\n\tconst float mieCoefficient=16e-6;// adjust for foggier look\n\tconst vec3 ozoneCoefficient=(vec3(3.426, 8.298,.356) * 6e-5 / 100.);\n\tconst vec3 sunColor=vec3(.95,.96,1.2 );\n\t\n    const vec3 addCol = vec3(1.,1.,1.);\n    const mat3 coeffs = mat3(rayleighCoefficient, vec3(mieCoefficient), ozoneCoefficient)/0.693147;\n    vec3 thickness = nz_getThickness(rd) + addDepth*addCol;\n    float rdl = max(dot(rd, lgt), 0.0);\n\n    vec3 rayleighScatter =(thickness.x * (0.4*rdl*rdl + 1.12))* rayleighCoefficient;\n    float g = 0.8 - lgt.y*0.15 - mieCoefficient*1500.;\n    float g2 = g*g;\n    float a = inversesqrt(g2 - (2.0*g*rdl - 1.0));\n    float phaseMie = (0.4 + lgt.y*0.1 + mieCoefficient*7000.)*(1.0 - g2)*a*a*a;\n    float mieScatter = thickness.y * phaseMie * mieCoefficient;\n\n    vec3 sunCoeff = coeffs*(nz_getThickness(lgt) + addDepth*addCol);\n    vec3 viewCoeff = coeffs*thickness;\n    vec3 absorption = (exp2(-viewCoeff) - exp2(-sunCoeff))/((sunCoeff - viewCoeff)*0.693147);\n\n    return vec3(clamp(sunColor*(rayleighScatter + mieScatter)*absorption*(0.6 + lgt.y*0.3), 0., 100.5));\n}\n\n\n\n//-------------------------End of sky rendering------------------------\n//---------------------------------------------------------------------\n\nvec3 nz_getSun(vec3 rd, float sunCoeff, vec3 lgt){\n    float rdl = max(dot(rd, lgt), 0.0);\n    float dcy = smoothstep(-0.05,0.2,lgt.y);\n    vec3 sun = 50.0*vec3(1.,1.,.4)*pow(rdl, 10000.)*clamp(1.0 - dcy*.7, 0.,1.);\n    sun += 60.0*vec3(1.,0.7,.5)*pow(rdl, 3500.);\n    sun *= clamp(1.0 - dcy*.6, 0.,1.);\n    sun *= exp2(-sunCoeff*0.45);\n    return sun;\n}\n\n\nvec4 nz_getClouds( in vec3 ro, in vec3 rd, float scnD, vec3 skyCol, float time, vec3 lgt){\n\tvec4 rez = vec4(0.);\n\tfloat t = min(nz_cloudsIntcPlane(ro, rd, -12.).x, 175.);\n    \n    float updl = dot(lgt, vec3(0, 1, 0));\n    float sunUp = max(updl, 0.);\n    float sunUp3 = clamp(sunUp*sunUp*sunUp*6., 0.0, 1.0);\n    float sunDw = 1.0 - sunUp;\n    sunDw = pow(sunDw, 6.0);\n    \n    float bsd = dot(lgt.xz, rd.xz);\n    float sd = max(bsd, 0.0);\n    float sd2 = max(bsd*0.55 + 0.53,0.);\n    \n    vec3 topSky = clamp(nz_getSky(vec3(0, 1, 0), lgt, 0.).xyz, 0.,1.);\n    vec3 baseCol = mix(topSky, vec3(0.05, 0.066, 0.09), clamp(sunUp3,0.0, 0.6))*0.2;\n    \n    float extraDepth = 14e4*((1.0-bsd)*0.2 + 0.9)*pow(1.0 - sunUp, 4.0);\n    vec3 hlitCol = clamp(nz_getSky(normalize((lgt-vec3(0,0.001,0))*nz_cloudrot_y(0.15)), lgt, extraDepth).xyz ,0.0, 1.0);\n    hlitCol = hlitCol*sd2*mix(sunDw, sunDw*sunDw, sd)*16.;\n    \n    vec3 bSkyCol = nz_getSky(rd, lgt, extraDepth*5.0*(sunUp*0.8 + 0.2)).xyz;\n    vec3 sunLCol = mix(vec3(1.0, 0.8, 0.75), vec3(.5), sunUp);\n    vec3 atmoCol = mix(bSkyCol*(sunUp*0.3+0.7), sunLCol*dot(bSkyCol, vec3(0.38)), sunUp3)*0.25;\n    \n\tfor(int i=0; i<85; i++){\n\t\tvec3 pos = ro + t*rd;\n        if(rez.a > 0.99 || t > 300.  || pos.y > 150.)break;\n        vec4 cld = nz_cloudMap(pos, time);\n\t\tfloat den = clamp(cld.x, 0., 1.)*1.02;\n\t\tfloat dn = clamp((cld.x + 1.9),0.0 , 3.0);\n        float fogT = 0.;\n        \n\t\tvec4 col = vec4(0);\n        \n        if (cld.x > 0.6){   \n            col = vec4(baseCol, 0.1);\n            float nl = max(dot(cld.yzw, -lgt), -1.2);\n            float dif = clamp((cld.x - nz_cloudMap(pos + lgt*8., time).x)*0.4 + 0.2, 0.11, 2.0 )*2.5;\n            dif += clamp((cld.x - nz_cloudMap(pos + lgt*15., time).x)*0.2 - 0.03, -0.02, 1. )*4.0;\n            \n            col.rgb += atmoCol*((nl*0.25 + 0.7)*dif*0.65); //atmosphere lighting\n            \n            float den2 = den*den;\n            float den4 = den2*den2;\n            col *= den4*den4;\n            col.rgb += col.a*clamp((nl*0.8 + 0.1)*dif,0.,1.)*hlitCol; //twi-lights\n            //col *= smoothstep(t-0.0, t+.1, scnD); //blend with scene\n        }\n        \n        float fogC = exp2(t*0.012/(rd.y + 0.35) - 11.7);\n        col.rgba += vec4(skyCol, 1.0)*clamp(fogC, 0.0, 1.0);\n\t\trez = rez + col*(1.0 - rez.a);\n        t += clamp(7. - dn*dn*.85, 1.2, 7.);\n\t}    \n\treturn clamp(rez, 0.0, 1.0);\n}\n\n\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat npxf_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat pxf_nz_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=npxf_hash12(v1);\n  float n01=npxf_hash12(v1+vec2(0,1));\n  float n10=npxf_hash12(v1+vec2(1,0));\n  float n11=npxf_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat pxf_nz_noiseOct(vec2 p){\n  return\n    pxf_nz_noise(p)*0.5+\n    pxf_nz_noise(p*2.0+13.0)*0.25+\n    pxf_nz_noise(p*4.0+23.0)*0.15+\n    pxf_nz_noise(p*8.0+33.0)*0.10+\n    pxf_nz_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 pxf_nz_floorColor(vec3 p){\n    vec3 v=(pxf_nz_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\n\n\nvec3 pxf_nz_renderHDR360( in vec3 rd, float time, vec3 lgt){\n\n    vec3 col;\n    if (rd.y>-0.35) {\n        //Sky\n        //Sky\n        float ldt = clamp(dot(lgt,rd),0.,1.);\n\n        vec3 skyCol = nz_getSky(rd, lgt, 0.);\n        col = skyCol.rgb;\n        vec3 bg= col;\n\n        float powerSun=1.0+pow(ldt,2.0);\n\n        col += (nz_getSun(rd,0.0,lgt)+0.05)*powerSun;\n\n        float powerCloud=1.0+pow(ldt,32.0)*3.5;\n\n        vec4 cld = nz_getClouds(vec3(0,0,0), rd, 10000., bg, time, lgt)*powerCloud;\n        col = col*(clamp(1.0-cld.w,0.0,1.0)) + cld.xyz;\n        //Floor\n        vec3 p=rd*(-10.0/rd.y);\n        if ((rd.y>-0.35)&&(rd.y<-0.0)){\n          col=mix(col,pxf_nz_floorColor(p),clamp(-rd.y*3.0,0.0,1.0));\n        }\n    } else{\n        vec3 p=rd*(-10.0/rd.y);\n        col=pxf_nz_floorColor(p);\n    }\n    return col;\n}\n\n\nvec3 pxf_nz_make360hdri(vec2 p,float t,vec3 sunPos){\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(3.14159265359,3.14159265359/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n\t\n    return max(pxf_nz_renderHDR360(rayDirection,t,sunPos),vec3(0.0));\n}",
				"inputs": [],
				"instance": "",
				"longdesc": "Nimitz HDRI Sky\n\nType - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
				"name": "Nimitz HDRI Sky",
				"outputs": [
					{
						"rgb": "pxf_nz_make360hdri(vec2($uv.x,-$uv.y+1.0),$cloudtime,normalize(vec3(-$sunPosX,$sunPosY,-$sunPosZ)))",
						"shortdesc": "Color Output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 30.0,
						"label": "Cloud Time",
						"max": 200.0,
						"min": 0.0,
						"name": "cloudtime",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Sun Pos X",
						"max": 1.0,
						"min": 0.0,
						"name": "sunPosX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Sun Pos Y",
						"max": 1.0,
						"min": 0.0,
						"name": "sunPosY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Sun Pos Z",
						"max": 1.0,
						"min": 0.0,
						"name": "sunPosZ",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PF/Image/Gen/360 HDRI Nimitz Sky",
			"type": "shader"
		},
		{
			"display_name": "Axis",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAI5JREFUeJzt0rENwCAQBME30H/LduAiNmBW+pjTiGetec/MVLfDt/87c3UAAACoJ7QBAACgntAGAACAekIbAAAA6gltAAAAqCe0AQAAoJ7QBgAAgHpCGwAAu57Q5gcAAFBPaAMAAEA9oQ0AAAD1hDYAAADUE9oAAABQT2gDAABAPaENAAAA9YQ2AAAuB/gAJZ4D97ubRUQAAAAASUVORK5CYII=",
			"name": "Image_Axis",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [],
				"instance": "",
				"longdesc": "Input Coordinates\n\nCode - PauloFalcao",
				"name": "Image Axis",
				"outputs": [
					{
						"rgba": "vec4($uv,0.0,1.0)",
						"shortdesc": "RGBA Output",
						"type": "rgba"
					}
				],
				"parameters": [],
				"shortdesc": "Axis"
			},
			"shortdesc": "",
			"tree_item": "PF/Image/Gen/Axis",
			"type": "shader"
		},
		{
			"display_name": "Smooth Axis Symmetry",
			"icon_data": "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",
			"name": "Image_Smooth_Axis_Symmetry",
			"parameters": {
				"mode": 0.0,
				"smooth": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,1.0)",
						"label": "",
						"name": "in",
						"shortdesc": "RGBA Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Transforms a RGBA making a mirror smooth symmetry using the chosen axis\n\nCode - PauloFalcao",
				"name": "Image Smooth Axis Symmetry",
				"outputs": [
					{
						"rgba": "$in($mode)",
						"shortdesc": "RGBA output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"default": 2.0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XY",
								"value": "vec2(sqrt(($uv.xy-0.5)*($uv.xy-0.5)+$smooth))+0.5"
							},
							{
								"name": "X",
								"value": "vec2(sqrt($uv.x*$uv.x+$smooth),$uv.y)+0.5"
							},
							{
								"name": "Y",
								"value": "vec2($uv.x,sqrt($uv.y*$uv.y+$smooth))+0.5"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Smooth",
						"max": 0.02,
						"min": 0.0,
						"name": "smooth",
						"step": 0.00001,
						"type": "float"
					}
				],
				"shortdesc": "Image Smooth Axis Symmetry"
			},
			"shortdesc": "",
			"tree_item": "PF/Image/Op/Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"display_name": "Smooth Polar Repeat",
			"icon_data": "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",
			"name": "Image_Smooth_Polar_Repeat",
			"parameters": {
				"Distance": 0.0,
				"Repetitions": 6.0,
				"Roundness": 0.0,
				"Smooth": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "vec2 smoothRot_XY(vec2 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p);\n  float x=asin(sin(atan(p.x,p.y)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec2(x/s,y/s-distance);\n}",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "RGBA Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "This is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions.\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh\n\nCode - PauloFalcao",
				"name": "Image Smooth Polar Repeat",
				"outputs": [
					{
						"rgba": "$in(smoothRot_XY($uv-0.5,$Repetitions,$Smooth,1.0-$Roundness, $Distance))",
						"shortdesc": "RGBA Output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 6.0,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32.0,
						"min": 1.0,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1.0,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5.0,
						"min": 0.0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1.0,
						"min": 0.0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "Roundness",
						"longdesc": "This is a correction to the smoothness.\n\n0 (default) - With correction, this way a flat object will no smoothess will be flat, the correction is not perfect with few repetions it's still possible to notice some distortion. \n\n1 - Without correction, using this setting a flat object will be rounded, even with smoothness at zero.",
						"max": 1.0,
						"min": 0.0,
						"name": "Roundness",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Image Smooth Polar Repeat"
			},
			"shortdesc": "",
			"tree_item": "PF/Image/Op/Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"display_name": "Fractal",
			"icon_data": "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",
			"name": "Image_Fractal",
			"parameters": {
				"blend_type": 0.0,
				"iterations": 8.0,
				"mode": 2.0,
				"opacity": 1.0
			},
			"shader_model": {
				"code": "",
				"global": "vec3 blendf_normal(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_multiply(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_screen( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blendf_overlay(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_overlay_f(c1.x, c2.x), blendf_overlay_f(c1.y, c2.y), blendf_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_hard_light(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blendf_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blendf_soft_light( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_soft_light_f(c1.x, c2.x), blendf_soft_light_f(c1.y, c2.y), blendf_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blendf_burn(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_burn_f(c1.x, c2.x), blendf_burn_f(c1.y, c2.y), blendf_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blendf_dodge(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_dodge_f(c1.x, c2.x), blendf_dodge_f(c1.y, c2.y), blendf_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_lighten(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_darken(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_difference(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Image",
						"longdesc": "The image that will be repeated",
						"name": "img",
						"shortdesc": "RGBA Image",
						"type": "rgba"
					},
					{
						"default": "vec4($uv,0.0,0.0)",
						"function": true,
						"label": "2D Transformation",
						"longdesc": "The transformation that will be applied each iteration, only transformations nodes can be used, like translate, scale, etc",
						"name": "trans2d",
						"shortdesc": "Image Transformaton",
						"type": "rgba"
					}
				],
				"instance": "vec4 for_blend_$name(vec2 p) {\n  vec2 t=p;\n  vec4 o=$img(t);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tvec4 no=$img(t);\n\to=vec4(blendf_$blend_type(o.xyz,no.xyz,$opacity),mix(o.w,no.w,$opacity));\n  }\n  return o;\n}\n\nvec4 for_avg_$name(vec2 p) {\n  vec2 t=p;\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tno=$img(t);\n\to+=vec4(no.xyz*$opacity,no.w);\n  }\n  return vec4(o/($iterations.0+1.0));\n}\n\nvec4 for_fold_$name(vec2 p) {\n  vec2 t=p;\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n  }\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  return o;\n}\n",
				"longdesc": "Repeats a shape x Iterations times, and for each iteration uses the transformation in 2D Transformation Node.\n\n2D Transformation nodes should start with the Image \"Axis\" node, operations should not use buffer, only coordinates transformations should be used, nodes that transform colors here will transform space.\n\nThere are 3 modes available:\n - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.\n\nCode - PauloFalcao, RodZilla  (Bending modes)",
				"name": "Image Fractal",
				"outputs": [
					{
						"rgba": "$mode",
						"shortdesc": "SDF3D Output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"default": 24.0,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "17",
								"value": "17"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "19",
								"value": "19"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "22",
								"value": "22"
							},
							{
								"name": "23",
								"value": "23"
							},
							{
								"name": "24",
								"value": "24"
							}
						]
					},
					{
						"default": 2.0,
						"label": "Mode",
						"longdesc": " - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Average",
								"value": "for_avg_$name($uv)"
							},
							{
								"name": "Blend",
								"value": "for_blend_$name($uv)"
							},
							{
								"name": "Fold",
								"value": "for_fold_$name($uv)"
							}
						]
					},
					{
						"default": 0.0,
						"label": "Blend Mode",
						"longdesc": "The algorithm used to blend the result of each iteration",
						"name": "blend_type",
						"shortdesc": "Blend mode",
						"type": "enum",
						"values": [
							{
								"name": "Normal",
								"value": "normal"
							},
							{
								"name": "Multiply",
								"value": "multiply"
							},
							{
								"name": "Screen",
								"value": "screen"
							},
							{
								"name": "Overlay",
								"value": "overlay"
							},
							{
								"name": "Hard Light",
								"value": "hard_light"
							},
							{
								"name": "Soft Light",
								"value": "soft_light"
							},
							{
								"name": "Burn",
								"value": "burn"
							},
							{
								"name": "Dodge",
								"value": "dodge"
							},
							{
								"name": "Lighten",
								"value": "lighten"
							},
							{
								"name": "Darken",
								"value": "darken"
							},
							{
								"name": "Difference",
								"value": "difference"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Opacity",
						"longdesc": "The opacity of the blend operation",
						"max": 1.0,
						"min": 0.0,
						"name": "opacity",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Image Fractal"
			},
			"shortdesc": "",
			"tree_item": "PF/Image/Op/Fractal",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sphere",
					"from_node": "node_sphere",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_2",
					"to_node": "node_pxflib_2",
					"to_port": 0.0
				},
				{
					"from": "pxflib",
					"from_node": "node_pxflib",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "translate",
					"to_node": "node_translate",
					"to_port": 0.0
				},
				{
					"from": "translate",
					"from_node": "node_translate",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "mirror_2",
					"to_node": "node_mirror_2",
					"to_port": 0.0
				},
				{
					"from": "mirror_2",
					"from_node": "node_mirror_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "mirror",
					"to_node": "node_mirror",
					"to_port": 0.0
				},
				{
					"from": "mirror",
					"from_node": "node_mirror",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "rotate",
					"to_node": "node_rotate",
					"to_port": 0.0
				},
				{
					"from": "rotate",
					"from_node": "node_rotate",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "scale_2",
					"to_node": "node_scale_2",
					"to_port": 0.0
				},
				{
					"from": "scale_2",
					"from_node": "node_scale_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "pxflib_2",
					"to_node": "node_pxflib_2",
					"to_port": 1.0
				},
				{
					"from": "pxflib_2",
					"from_node": "node_pxflib_2",
					"from_port": 0.0,
					"keep_alive": false,
					"to": "scale",
					"to_node": "node_scale",
					"to_port": 0.0
				}
			],
			"display_name": "Fractal Example",
			"icon_data": "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",
			"nodes": [
				{
					"color": {
						"a": 1.0,
						"b": 0.0,
						"g": 0.5,
						"r": 1.0,
						"type": "Color"
					},
					"name": "comment",
					"node_position": {
						"x": 77.922607421875,
						"y": 50.331298828125
					},
					"parameters": {

					},
					"seed": 57203.0,
					"size": {
						"x": 396.0,
						"y": 128.0
					},
					"text": "Remake of Basic Fractal Shader\nhttps://www.shadertoy.com/view/tltSWs\nUsing the Fractal node",
					"title": "Comment",
					"type": "comment"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -243.698364257812,
						"y": -192.05419921875
					},
					"parameters": {

					},
					"seed": 2605.0,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [],
						"instance": "",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
						"name": "Axis",
						"outputs": [
							{
								"rgba": "vec4($uv,0.0,1.0)",
								"shortdesc": "RGBA Output",
								"type": "rgba"
							}
						],
						"parameters": [],
						"shortdesc": "Axis"
					},
					"type": "shader"
				},
				{
					"generic_size": 1.0,
					"name": "translate",
					"node_position": {
						"x": -247.698364257812,
						"y": -122.054321289062
					},
					"parameters": {
						"translate_x": 0.5,
						"translate_y": 0.5
					},
					"seed": 34811.0,
					"type": "translate"
				},
				{
					"generic_size": 1.0,
					"name": "mirror_2",
					"node_position": {
						"x": -248.698364257812,
						"y": -43.05419921875
					},
					"parameters": {
						"direction": 1.0,
						"flip_sides": false,
						"offset": 0.0
					},
					"seed": 42699.0,
					"type": "mirror"
				},
				{
					"generic_size": 1.0,
					"name": "mirror",
					"node_position": {
						"x": -251.698364257812,
						"y": 34.9456787109375
					},
					"parameters": {
						"direction": 0.0,
						"flip_sides": false,
						"offset": 0.0
					},
					"seed": -1005.0,
					"type": "mirror"
				},
				{
					"generic_size": 1.0,
					"name": "scale_2",
					"node_position": {
						"x": -257.698364257812,
						"y": 214.945739746094
					},
					"parameters": {
						"cx": 0.0,
						"cy": 0.0,
						"scale_x": 0.51,
						"scale_y": 0.51
					},
					"seed": -48667.0,
					"type": "scale"
				},
				{
					"generic_size": 1.0,
					"name": "rotate",
					"node_position": {
						"x": -260.698364257812,
						"y": 115.94580078125
					},
					"parameters": {
						"cx": 0.0,
						"cy": 0.0,
						"rotate": "$time*45.0"
					},
					"seed": -7255.0,
					"type": "rotate"
				},
				{
					"name": "sphere",
					"node_position": {
						"x": -242.077392578125,
						"y": -329.668701171875
					},
					"parameters": {
						"cx": 0.5,
						"cy": 0.5,
						"r": 0.49
					},
					"seed": 26916.0,
					"type": "sphere"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": 87.922607421875,
						"y": -139.668701171875
					},
					"parameters": {
						"blend_type": 0.0,
						"iterations": 6.0,
						"mode": 2.0,
						"opacity": 1.0
					},
					"seed": -62335.0,
					"shader_model": {
						"code": "",
						"global": "vec3 blendf_normal(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_multiply(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_screen( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blendf_overlay(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_overlay_f(c1.x, c2.x), blendf_overlay_f(c1.y, c2.y), blendf_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_hard_light(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blendf_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blendf_soft_light( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_soft_light_f(c1.x, c2.x), blendf_soft_light_f(c1.y, c2.y), blendf_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blendf_burn(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_burn_f(c1.x, c2.x), blendf_burn_f(c1.y, c2.y), blendf_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blendf_dodge(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_dodge_f(c1.x, c2.x), blendf_dodge_f(c1.y, c2.y), blendf_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_lighten(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_darken(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_difference(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Image",
								"longdesc": "The image that will be repeated",
								"name": "img",
								"shortdesc": "RGBA Image",
								"type": "rgba"
							},
							{
								"default": "vec4($uv,0.0,0.0)",
								"function": true,
								"label": "2D Transformation",
								"longdesc": "The transformation that will be applied each iteration, only transformations nodes can be used, like translate, scale, etc",
								"name": "trans2d",
								"shortdesc": "Image Transformaton",
								"type": "rgba"
							}
						],
						"instance": "vec4 for_blend_$name(vec2 p) {\n  vec2 t=p;\n  vec4 o=$img(t);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tvec4 no=$img(t);\n\to=vec4(blendf_$blend_type(o.xyz,no.xyz,$opacity),mix(o.w,no.w,$opacity));\n  }\n  return o;\n}\n\nvec4 for_avg_$name(vec2 p) {\n  vec2 t=p;\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tno=$img(t);\n\to+=vec4(no.xyz*$opacity,no.w);\n  }\n  return vec4(o/($iterations.0+1.0));\n}\n\nvec4 for_fold_$name(vec2 p) {\n  vec2 t=p;\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n  }\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  return o;\n}\n",
						"longdesc": "Type - RGBA Generator\nCode - PauloFalcao, RodZilla  (Bending modes)\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 2D Transformation Node.\n\n2D Transformation nodes should start with the Image \"Axis\" node, operations should not use buffer, only coordinates transformations should be used, nodes that transform colors here will transform space.\n\nThere are 3 modes available:\n - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
						"name": "Fractal",
						"outputs": [
							{
								"rgba": "$mode",
								"shortdesc": "SDF3D Output",
								"type": "rgba"
							}
						],
						"parameters": [
							{
								"default": 24.0,
								"label": "Iterations",
								"longdesc": "Number of Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "0",
										"value": "0"
									},
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "17",
										"value": "17"
									},
									{
										"name": "18",
										"value": "18"
									},
									{
										"name": "19",
										"value": "19"
									},
									{
										"name": "20",
										"value": "20"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "22",
										"value": "22"
									},
									{
										"name": "23",
										"value": "23"
									},
									{
										"name": "24",
										"value": "24"
									}
								]
							},
							{
								"default": 2.0,
								"label": "Mode",
								"longdesc": " - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Average",
										"value": "for_avg_$name($uv)"
									},
									{
										"name": "Blend",
										"value": "for_blend_$name($uv)"
									},
									{
										"name": "Fold",
										"value": "for_fold_$name($uv)"
									}
								]
							},
							{
								"default": 0.0,
								"label": "Blend Mode",
								"longdesc": "The algorithm used to blend the result of each iteration",
								"name": "blend_type",
								"shortdesc": "Blend mode",
								"type": "enum",
								"values": [
									{
										"name": "Normal",
										"value": "normal"
									},
									{
										"name": "Multiply",
										"value": "multiply"
									},
									{
										"name": "Screen",
										"value": "screen"
									},
									{
										"name": "Overlay",
										"value": "overlay"
									},
									{
										"name": "Hard Light",
										"value": "hard_light"
									},
									{
										"name": "Soft Light",
										"value": "soft_light"
									},
									{
										"name": "Burn",
										"value": "burn"
									},
									{
										"name": "Dodge",
										"value": "dodge"
									},
									{
										"name": "Lighten",
										"value": "lighten"
									},
									{
										"name": "Darken",
										"value": "darken"
									},
									{
										"name": "Difference",
										"value": "difference"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Opacity",
								"longdesc": "The opacity of the blend operation",
								"max": 1.0,
								"min": 0.0,
								"name": "opacity",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Fractal"
					},
					"type": "shader"
				},
				{
					"generic_size": 1.0,
					"name": "scale",
					"node_position": {
						"x": 517.922607421875,
						"y": -119.668701171875
					},
					"parameters": {
						"cx": 0.0,
						"cy": 0.0,
						"scale_x": "sin($time)*0.5+1.0",
						"scale_y": "sin($time)*0.5+1.0"
					},
					"seed_int": 0.0,
					"type": "scale"
				}
			],
			"tree_item": "PF/Image/Op/Fractal Example"
		},
		{
			"display_name": "Juliaset Fold Z2",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAA+5JREFUeJztWc9LMlsYfr5Li1q1iNq2aRsEbYKggqAWbQL/hujHwk1Q0TIx2kXUwiLox6JyESQVUjSZSjGVYtkvbSzRCLNVSZhU8N7NvVI5o97Uef3uNw88ML7vOed9znPOmRn1FwDCH4y/uAVwQzOAWwA3NAO4BXBDM4BbADfYDRgbG2Ot/wvai9CfDVYD7HY7Z/kkiINnZ2csdb+TbQdUVlYCAO7u7gAAJpMJMzMzLFrYVwEA9ff3EwDq6elRuzbPhAVBUMxNTk7+/w2Q4/j4OEfdzI3sdvuPCwQCAXZji34HzM3NsdUu6Jvg8/MzysvLCzV8XqC9CislBEEAABgMhpRcLBbD8fHxl9jT05PsOPf397noUwW0u7srez7W19fp5uaG3G43XV9fEwCKxWLs94y88r9OyO/30+XlpWxuZWUlbd+1tTUCQB8fH2Qymfgn/8/x/xLQ6/XcgngNkGNfX59ibnt7OyU2ODhI8/PztLCwQN3d3VmLMRqNxWFAIpEgAFRRUSHbaWJiggCQJEnJmNlsplAoRDabjQRBoNvbWwqHw2SxWNIKWF1dLf4dIMfq6urktSRJZLPZSKfTkSiKZDabKRaL0fv7u+wOyYUejydjm4GBAQJAj4+PPzegtrY2J6Fut5ucTueX2N7eXtb9r66u0uanpqYUc4uLi4XfAZkYCoVSYktLS7JtHx4ecq63vLz8076FMcBgMGTVLh/3gEgk8uVzPB6n09NTdQw4PDxMXgeDQXI4HIqrI4oiuVyutOO1t7fLxre2ttLG/r1xA6DOzk51d8Db21ted0+2X78lSaLZ2dlc6+UmNhqN5nXyAKilpSWrdhaLhZqamngNkCSJHA4Heb3evBvxnZ9X2+v1Ujwep52dHV4DsuHm5qZiTulZ3dDQoNjHaDRSOBym19dX8vv9JAgCRSIRcrlcVFNTk2zndrszalPlZ/GOjg7FXFVVlWxcFEUAwMjISErO6/Xi/PwcFxcXCAaD8Pl8mJ6eRllZGQKBAADA4/Ggvr4+K30F3wHZ8uXlJeu2bW1t1NvbS62trSm5rq4uslqtxXMEcmFzc3Oha/BPUm2Ojo6S2WwmgPGvsXzD6XQq5jY2NgAAVqsVQ0NDiEaj0Ol0yTz7inDw01d5fjFqMxgMfv7MLyhbiqKYsc3JyUnavMzvCfwTy8Sjo6O8jufz+ZLX2h8j3AJ+ikQikZdxflsDSktLAQAHBwc5j8V+xuWo1+uprq6u4HWK8h5gt9tRUlKCxsZGVeqxr3Y6Dg8PF7oG/yS/c39/X7VaRXkE1MRv+xTIFzQDuAVwQzOAWwA3NAO4BXBDM4BbADc0A7gFcONvLg3QpK6FekEAAAAASUVORK5CYII=",
			"name": "Image_Juliaset_Fold_Z2",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "RGBA Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Transforms a RGBA making  the Juliaset fold Z^2 transformation\n\nCode - PauloFalcao",
				"name": "Image Juliaset Fold Z2",
				"outputs": [
					{
						"rgba": "$in(vec2($uv.x*$uv.x-$uv.y*$uv.y,2.0*$uv.x*$uv.y))",
						"shortdesc": "SDF3D output",
						"type": "rgba"
					}
				],
				"parameters": [],
				"shortdesc": "Image Juliaset Fold Z2"
			},
			"shortdesc": "",
			"tree_item": "PF/Image/Op/Juliaset Fold Z2",
			"type": "shader"
		},
		{
			"display_name": "Simple Scale",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAmlJREFUeJztmcFqo1AUQE8mKvoklhRDBLPpWmg+wh/oJ80n9Qf8iC5cZxUwm0AMPlOVzixKpJnp1ncLeQck4OYdDhe9khnwhzvml7SANDaAtIA0NoC0gDQ2gLSANDaAtIA0NoC0gDQ2gLSANDaAtIA0NoC0gDQ2gLSANDaAtIA0NoC0gDSOxKF5npMkCUopALTWVFVFURTGXWYY/GMkz3OyLCNJEqIowvM8ALquo65rqqqiLEujIYxNwMvLC9vtljRNeXx8JAxDXNcFoO97mqYhjmOWyyWLxYLX11cjXkYC5HnOdrvl6emJ9XrNw8MDSikc5/P4YRjQWhOG4TgV5/PZyCQYCZBlGWmasl6vieOYKIoIguAmQBAE40R0XUeWZUYCzIHfUx6Q5znPz89sNhtWq9U44kopfN/H8zwcx2E+nzObzfj4+GAYBt7f3wHY7XZT6k0/AdcHXhiGKKUIggDf9/F9/2YCrr9KKcIwJIoikiSZWm/6AEopPM/DdV0cx/nvGkW+3HNdF8/zxtfklNhFaOoDtNZ0XUff9wzDcHNd+fd+3/d0XYfWemq96QNUVUVd1zRNg9b65un/9RlwuVxo2xatNU3TjIvR1EweoCgKsiwjjuOb5WcYhpsAbdtS1zWn04nj8WhsNTayB5RlyXK5HJecvu+/XYROpxOHw4H9fk9ZlibUzAQoioLFYgF8LjlN03y7Ch+PR/b7PW9vb8a+B+7+Y8hogCt3+zn8E7n7RcgGkBaQxgaQFpDGBpAWkMYGkBaQxgaQFpDGBpAWkMYGkBaQxgaQFpDGBpAWkMYGkBaQxgaQFpDmL8T/AAT8pgt4AAAAAElFTkSuQmCC",
			"name": "Image_Simple_Scale",
			"parameters": {
				"scale": 1.0
			},
			"shader_model": {
				"code": "",
				"global": "vec2 scale(vec2 uv, vec2 center, vec2 scale) {\n\tuv -= center;\n\tuv /= scale;\n\tuv += center;\n    return uv;\n}",
				"inputs": [
					{
						"default": "vec4($uv, 0.0, 1.0)",
						"label": "",
						"longdesc": "The input image",
						"name": "i",
						"shortdesc": "Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Scales its input\n\nCode - PauloFalcao",
				"name": "Image Simple Scale",
				"outputs": [
					{
						"longdesc": "Shows the scaled image",
						"rgba": "$i((($uv-vec2(0.5))*$scale)+vec2(0.5))",
						"shortdesc": "Output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"control": "Scale1.x",
						"default": 1.0,
						"label": "Scale",
						"longdesc": "The scale amount",
						"max": 1.0,
						"min": 0.0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Image Simple Scale"
			},
			"shortdesc": "",
			"tree_item": "PF/Image/Op/Simple Scale",
			"type": "shader"
		},
		{
			"display_name": "Code",
			"generic_size": 1.0,
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAI5JREFUeJzt0rENwCAQBME30H/LduAiNmBW+pjTiGetec/MVLfDt/87c3UAAACoJ7QBAACgntAGAACAekIbAAAA6gltAAAAqCe0AQAAoJ7QBgAAgHpCGwAAu57Q5gcAAFBPaAMAAEA9oQ0AAAD1hDYAAADUE9oAAABQT2gDAABAPaENAAAA9YQ2AAAuB/gAJZ4D97ubRUQAAAAASUVORK5CYII=",
			"name": "Image_Code",
			"parameters": {
				"code": "$in1($uv)"
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec3($uv.x,$uv.y,0.0)",
						"label": "",
						"name": "in#",
						"shortdesc": "Image #",
						"type": "rgb"
					}
				],
				"instance": "",
				"longdesc": "Executes the code in the parameter\nExamples:\n$in1($uv)\nvec3(uv.x,uv.y,uv.z)\n\nCode - PauloFalcao",
				"name": "Image Code",
				"outputs": [
					{
						"rgb": "$code",
						"shortdesc": "Image Output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.5,
						"label": "",
						"longdesc": "Examples:\n$in1($uv)\nvec3($uv.x,$uv.y,0.0)",
						"max": 1.0,
						"min": 0.0,
						"name": "code",
						"step": 0.1,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/Image/Op/Code",
			"type": "shader"
		},
		{
			"display_name": "HDRI Subtract",
			"icon_data": "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",
			"name": "Image_HDRI_Subtract",
			"parameters": {
				"value": 0.0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "HDRI",
						"name": "hdri",
						"shortdesc": "Image Input",
						"type": "rgb"
					}
				],
				"instance": "",
				"longdesc": "Subtract a fixed RGB value from the image\n\nCode - PauloFalcao",
				"name": "Image HDRI Subtract",
				"outputs": [
					{
						"rgb": "$hdri($uv)-$value",
						"shortdesc": "Image Output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1.0,
						"label": "Value",
						"longdesc": "Value to be added or subtracted",
						"max": 32.0,
						"min": 0.0,
						"name": "value",
						"step": 0.1,
						"type": "float"
					}
				],
				"shortdesc": "ImageHDRI Subtract"
			},
			"shortdesc": "",
			"tree_item": "PF/Image/Util/HDRI Subtract",
			"type": "shader"
		},
		{
			"display_name": "Magic AA",
			"icon_data": "",
			"name": "Image_Magic_AA",
			"parameters": {
				"Gamma": 1.0,
				"Samples": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint magicaa_rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat magicaa_RandomFloat01(inout uint state){\n    uint r=magicaa_rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"type": "rgb"
					}
				],
				"instance": "vec3 randomAA_$name(vec2 uv){\n\tfloat dx = dFdx(uv.x);\n\tfloat dy = dFdy(uv.y);\n\t\n\t// Init random\n\tvec2 rndgen=vec2(\n\t\t\t\tfract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453),\n\t\t\t\tfract(sin(dot(uv, vec2(37.1235, 67.734))) * 73748.3423))*17243.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint($time*1000.0) * uint(26699)) | uint(1);\n\t\n\tvec2 xy;\n\t\n\tvec3 aa=vec3(0.0);\n\tfor(int i=0;i<$Samples;i++){\n\t\txy=((uv.xy+(vec2(magicaa_RandomFloat01(rngState),magicaa_RandomFloat01(rngState))-0.5)*vec2(dx,dy)));\n\t\taa+=$in(xy);\n\t}\n\treturn pow(aa/float($Samples),1.0/vec3($Gamma));\n}",
				"longdesc": "Generates an image anti-aliasing using random points in the pixel space.\n\nCode - PauloFalcao\n",
				"name": "Image Magic AA",
				"outputs": [
					{
						"rgb": "randomAA_$name($uv)",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"default": 18.0,
						"label": "",
						"name": "Samples",
						"shortdesc": "Number of samples",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "24",
								"value": "24"
							},
							{
								"name": "32",
								"value": "32"
							},
							{
								"name": "48",
								"value": "48"
							},
							{
								"name": "64",
								"value": "64"
							},
							{
								"name": "96",
								"value": "96"
							},
							{
								"name": "128",
								"value": "128"
							},
							{
								"name": "192",
								"value": "192"
							},
							{
								"name": "256",
								"value": "256"
							},
							{
								"name": "384",
								"value": "384"
							},
							{
								"name": "512",
								"value": "512"
							},
							{
								"name": "768",
								"value": "768"
							},
							{
								"name": "1024",
								"value": "1024"
							}
						]
					},
					{
						"control": "None",
						"default": 1.0,
						"label": "Gamma",
						"max": 3.0,
						"min": 0.0,
						"name": "Gamma",
						"step": 0.1,
						"type": "float"
					}
				]
			},
			"shortdesc": "Does not wotk with TAA Render",
			"tree_item": "PF/Image/Util/Magic AA",
			"type": "shader"
		},
		{
			"display_name": "TEX3D to Image",
			"icon_data": "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",
			"name": "TEX3D_to_Image",
			"parameters": {
				"Axis": 0.0,
				"f": 0.0
			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Util\nCode - PauloFalcao\n\nConvert a TEX3D to Image\n",
				"name": "TEX3D to Image",
				"outputs": [
					{
						"rgb": "$in(vec3($Axis)).rgb",
						"shortdesc": "Color",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"default": 0.0,
						"label": "",
						"name": "Axis",
						"shortdesc": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "$f,$uv.x,$uv.y"
							},
							{
								"name": "Y",
								"value": "$uv.x,$f,$uv.y"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,$f"
							}
						]
					},
					{
						"control": "None",
						"default": 0.0,
						"label": "",
						"max": 1.0,
						"min": 0.0,
						"name": "f",
						"shortdesc": "3º field position",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"shortdesc": "",
			"tree_item": "PF/Image/Util/TEX3D to Image",
			"type": "shader"
		},
		{
			"display_name": "RandomNoise2D",
			"icon_data": "",
			"name": "Greyscale_RandomNoise2D",
			"parameters": {
				"seed": 1.0
			},
			"seed_int": 0.0,
			"shader_model": {
				"code": "",
				"global": "float random2d1d(vec2 c,float seed) {\n\tc = fract(c*17.15)+5.0+seed;\n\tc += dot(c.x, c.y);\n\treturn fract(c.x*c.x*c.y);\n}\n",
				"inputs": [],
				"instance": "",
				"longdesc": "A simple 2d random noise\n\nCode - Paulo Falcao",
				"name": "Greyscale RandomNoise2D",
				"outputs": [
					{
						"f": "random2d1d($uv,$seed)",
						"shortdesc": "Greyscale Output",
						"type": "f"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.5,
						"label": "Seed",
						"max": 1.0,
						"min": 0.0,
						"name": "seed",
						"shortdesc": "Random Seed",
						"step": 0.0001,
						"type": "float"
					}
				],
				"shortdesc": "Greyscale RandomNoise2D"
			},
			"shortdesc": "",
			"tree_item": "PF/Greyscale/RandomNoise2D",
			"type": "shader"
		},
		{
			"display_name": "Axis",
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAD4ZJREFUeJydm12MJcdVx3+n750d7zi2cbLY3khkvctcCCaKkEgQNg8ISxEIE4giRMQLEbx5+lq8WwhZQuIVJG7vCwgeeIqElE2EI2NLjlHCR3AgBIjwzLBO9tP2fszMzt4796M/Dg/dVV1VXT07Sa3mdnV31anzP3W+qrpW/uFbVxWFrXSLyWQCAIot6ThF8B9nk6xtIOYijMep+wBBEIEsu2gpaEMoHactQYEsyzB8qCqobQ0KWTaxfS1vaVq3cZ4hcDHLWj6ckdPUYGnfyehTn1VVh7kGTJZluMjNQFvpVmdAQcguZu6jhsGx0wYQQcyNUgN1hBIDCcpWmnbaWx4jJU23PCwi0gjmouUnbWjK69+6pn7n1EfRvJ1kE4cx9dqrbV7/ZlnmaE6rETXIzJk1RR2aVmCAO7NWM2PtmwlwepFN6jHG6RgRrOBjApOf+vRvaRegFR/jhqm6s2GgvtbC0s6seQNJK5xW7TUQmjKZZB6RqKk4MCeTCelW6rSWVhtjmuFgcYUlb/zb9RB2t7H4CpFNQlV1bDvd6g6OtOrt9atv0jR1BCCddzVtf/Ynk7j6A4zHY/+BQzJrxrEm8tO/8DnraaJOLijpOA1A+Ex3nBK+9njqjyNoCWnCpHGMHnfNxZqqU0wb6wQbmq6megJQGF68mFnbyyYTPIcYeNzuUNh+BoQEM9j2bWfQs+/Q9IyDRNl6cavX0bmupe0k9qU0VRXf77gOEgV54+3rWttSC7rrneM2JUDqqJthxm1vnKGl7WjAZGIYC7Uj1LRWeDWw/gjg9XWAhnjMhMro07/Zapcqito43BnEcWjWT3RmvS2TzM8rDEBFSbfSFrzTxhR3bBPDfUfr+6HW25vwqyFJR/CTVqCv/cuVbjtVP947yY7naR3cvoelk0d4AlCtVTGYdVOs4PCF26qxmwCFEYUObwTv0zS1pidf+6fv+3nAOI3YcXvfVb3Qc8doeBBqRxQ4PXc2PYcXEWJosmHJssyaSji2KWOTv5z/uV/XtuPEaeKntOk4bcEHdunF+oh39iJMlnXSUa/dMflFq30TLx9x34HvA+IRrc0uh6pqVa52fg170tQVkEb1msQjln8Lddhyhdjx+tbDNzQjpWVeGgJOO5XGR7UDG29vBSCQSGKBvvTS2PP6Rmhm7SF//43L6usa3owapjyNbZvZ3z6v7Kqzt1gKWpnSxn4XKK5CEtY6PHsOutveZJIoyLlP/qp2KDlVV4XcdYI41L3EI44rvnILikmYbNeIlrkLrLD0OcLOmoRaQFk2Qc598tdC11MTiC55uw86oTBwWi2w+uFW6q8H3GLadbG1T/q1CE8L+nIXl1qajhm2DAviemk3BjpO2a2N0wgzsaxOK/u4Xdn5JU1Tn56viM5z8e+DwY3+qGs/pmvtfBofVLceTv5i0nY1MdZ29jNCt4zHvo0p2mVJ65mIRYtQUyRAHN6bNn6kcqH7FS+SWDK+ZkwmE+Qr/7hj24yjIaxrj8a+XD/QpVFvkphdoWOMNhg35txarfBDsc+ly2c8HHfHl0tvbeuDGHgQ+JhKWluVyPugOmlygzTIJi2TDZE2h+jxpYHTDV/E+gzTrTTgXTugOguQEFTU27phx1ie8Gc3v82T55+jUFiqMqsq9tKUqSS88O43eeG17xITVq+AwOPL8i/1zHXQhDHv0te3/VQ4TTu2KnYQXyB9YcaTfkP9a7Md+PAnOFquKBNhWVUstGIBLJIBi8GA/Txnv6zY2/svXrj0dgfosSYaPIjvL3aLXPr6O7F8w6t11NnZ3DQbojYNjewbvPnQaeaLORVCScVstWReFsyriqOq4qhS5knCau0Us8EaB1XFfpLwhb/5a49Zs8rr4Apu6kgW7G14qByUX37znWNl5INvryLuX03U7vw0fTc+/ywfO/eLLBcLkuGQQktyrViUBdPVimmeMy1LjlSZKyyGQ46SAYckHErCwSBhY32PL/7Vq4H6B0JwgWpdC3d+fEm1Ahh2o7sDvpNOhuANrbBFTenp88+xXCw4vfEwpRZAQl7kVCowHFCVBUVRUVQVOcKqyMmTiioZoINT5Mslt5MzpE3WBkYLgnkUZ8kiimjNmyJ17BfHFwTaMuyAb5YFJilpzb0Fbf6sKeBnewA/+Qe/gZx5hlOnT1MJJINTUBWURU4lCQVQDQboYEhFSVGW5KosFXKgoKAoKxaLBRcOti1/bR7gCt2d6bpuTVGdPq4wmmxIPvozz9t7s0634Bv05sOCO/theHLLxuef5ezTz5IgrJ9+CEmEKoFcK2arFfuzGdPVisPlkmlRMCtL7pclR8ARwlSEqQw4UGGRJJzeOM29K//Kn7y1EwYeRwR+pXfTVGm3/JRWA4Ta3rMsqz9lBTbf9QH1fqAEK1ZDK6+UtVNDdG2NSqBC2fzi73Pjq1/hzrvvkidCniTkIqyAMknIK2WJsiiVOcpKBpQoVVm16JqNTw0HDOoiERGp0NgEqiCiRgMCNfbA1g/c0Oe+S8djzyL/9MbbbD76KPL4M5ze2GD99AZFVbIqCwqB6XLBdLXkcLFkmq84WC6ZlSVzaLRAOKyUg1KZr62xNlxj7dQag4P/5YmzZ/m9v3y1M7Md8PTlDO7mq9UAB3wk/juxrwXfFPNpyk10Tkkd44fJgFwSVsslVSIUwHy1YpbnzPKijv8IeTIgV1hWFSsZsFRYUrESqKqKJBEGSQKq7O7utrMZQ+8t2rSVSK+0lKFIswkB3kwSeeJ6XXcT1G21UuX2bMaZJ4XlYsFwfZ1KhWVVsqpgQcKchCMtWUjCUhJWCeTJgFKhkoSyLKmKkkc2NlhbG1KWJfdmM0ajkWPbXSG4OEwOEPhKe7VxwcsEezK70Bw8AQRO6W837rEOHNw7ovzQ02iSIMMhBcKiLJjlOYuqYl6WTPOcudaJ0LQsWQ2G3K8qDsuSwdoaIvUCfTD9AXt33wdg72c/ExVAmBj56bHfyP3SnXgJDSasBeCDEktJjS/87vY2R6o89NgGq8UHzCvlcJVzvyiYK8yBWVUxq5RlMmA1WCMfDqnW11kkwgIYrp9iMBgAMFy+z0c+/AgAo9EItf/8ccMb2067fzTXbDJh2PmKQlcD3J1c98BETApPbW4yUyVR5fvXd3nszH2qRy+wWC1ZlBXVcMAKYX+xYIFSDIbMypJFIiwloUgEUaXUkrXZD3j88Ucs+d3dXXjmXDihHSbCnKDb2Pk22AUjwUU8dXeXpDH9+uZnP8XDInx8NGKmylM/9jDvv/cflOuPsvrQeZaqzIuCfG1IlSTM8oLVcMBKEpZVySAZwOFlJL/PnftHngCOh+1X/P3H/m8IQ2LzKYEWGPCdPfbADhUeunCBJwcD7qtydnOTqSrXDqcUTDn32AZ7711nlazVzlDhqKpYakVe5tybTj16o9HI8fxmjL6li/j8OIjD9YBLISEs0hWJRMH7TJns6uf//EvsVRXf3t7mUJV/397mqc1N7qvynZ0drh7OuHJwwLX9u1zfv8PDT3yEx584wxNnz1rQIXjz7PbHfyVq0za2NzjrjytbDW+uBNStgqq/GOq6vPqdd3pD2wjbNxffeOcdHk0SDqqKQ9X6r6rIgVyVj41G/M/ODk9vbrKzsxOlsbu7a4EbQfRtqIJJVdovU6q+tqj/Y6vyE5/4jJ9VdlLI/o8eDumONF79w99hvWFse3eXAihUWTVXwANoZjwEbe5/9+KXezkQ/wczS+k4JWox2n6A9QTg0WjKcarv0OsyBHzppd/m/3Z3UQeIW0L7NiUUwh+//t+dsTw2pVMB2k/qXRmofT6MvTNlkmXHpRu9xbRyZzYGNhRKnwbEHF+zmvVuBF/lbTboCcF3lMPYPnu79RR61RjM/qz75oVf4mYFv9ydfE8gYX00GjEajfjC5O8a+nHBi6e72grFZklOyuSGR5fGV9/ajlLvHk/zAbemEV+YhAnTR9/9ZyA+66a4s/9Hr/1njC1LP1YNi7sp0pcUBSagfsewvbptYsfh2mIcp6F14/yzAIy4EwUNNfCbF56DCz/uqL1E8B6nmb2M+0SaR8OwgQu+7R96gqhnsaX+HGZCaGhiflYm0q7d5fyZeiypQ5jZ2z8RXumuZcPWgcuofUCPe2iYDDO9cPi4+ne9QvCt3x1Tpf5G54SgWii+FvaFYttPnfj+gGIVQPA3Rc0qrzvD/inN3mwUvOMrfol545oVkVoQXr3RBFP6TqD6Y/tng2ot6rYzT7wwOHY3GvrAq5twBhilbe8VSy70xs0uUjt5Fvx4vBUl1VcMRldrRPyvWfUz/wyT0OME3ftuLPW1we3q2n6nRMJQTdpsvauddM8B9vLXaExNovUpzY9qs/GJWv+gqp0zTEPo+5RsEBvwvhA6/MTunRf9k9k6RUFQaQ83HLejZzlxDFpQe2+ihaXdSCacn+E42GNz7Vc71+a3g0abrPGEOhvDIo6QVbuLrT5pqFnCueBbQdbbeYqqNCfffGJeGPTV3TxzZ9uPEz8iXIeExqqOr3F4Vf/WvVNpeTTgjSCNJMX6VXFTSIbmyOhW2joe5/Bw5JnDjQem5/kDSutO6prZajdv/eOE0h4Id3s7AcMzgYZvc/rJFY6hN6zbqf1vJoYZlzGFzna0y1d9XP6HAx8C995o0M4mOTHzM+3EeNDGMTagFftByDWRmqDWJ0VrAnHwFmSW2fvQF9SHj49bG/ShP9Fjf9yeuO5qixp9V0Wl3mQ1z6wWNASH7gAx8CHYGPj22hMdeNCmSuhoTS2S3h5jatoIRxzexRECDXhzXK7OBA1oVxV7wBO9b733ceW4U1sTb0munXqcdGRvuhGOSqPmgQYYE3LrcunN76kHuLOP5t77QE9y/LUDwm3r78D3/keoEx15awi5u5rZxYt2r1CA1WpFXhRoVX9tHgwGtQZE2IxwGxYlpg2xfr1a228xXoO+w5Gm2C/Bxus3prD14ou8/PLLTKdT5vM5q9WKoizQql5p1gJwBzvBTJp6/6z88KHwuL4nia6TycTZNhDu3r3LrVu32Nvf45VXXuH555/n6OiI5XJJnudWUyRJ2jB4IiA/IrbjttD7iB+34uzrXpQlV65c4b33bnLr1m1u3bpFURS8/sbrRA974O4HnHj2H2STcbgmMh1H1zyKGNADS54XXL58mWvXrnLjxg329vdtiuwlAs1VpQ6J3S9D7qAnsO94EaJrcG93y6dj/geH74JPrgZXr17h2rVrXL16lb29vTYihFeHvKIxATTuUGP3XduX4I/O2245fpXXjnnScvfOXT744ANu377FvXv3HkhaHQf+/3er+A4OULyuAAAAAElFTkSuQmCC",
			"name": "V4V4_Axis",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [],
				"instance": "",
				"longdesc": "Input Coordinates\n\nCode - PauloFalcao",
				"name": "V4V4 Axis",
				"outputs": [
					{
						"shortdesc": "V4->V4 Coordinates Output",
						"type": "v4v4",
						"v4v4": "$uv"
					}
				],
				"parameters": [],
				"shortdesc": "V4V4 Axis"
			},
			"shortdesc": "",
			"tree_item": "PF/V4V4/Gen/Axis",
			"type": "shader"
		},
		{
			"display_name": "Coordinates Boolean",
			"icon_data": "",
			"name": "V4V4_Coordinates_Boolean",
			"parameters": {

			},
			"seed": 0.0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec4 coord_union(vec4 a, vec4 b) {\n    if(length(a.xyz)<length(b.xyz)){\n\t\treturn vec4(a);\n\t} else {\n\t\treturn vec4(b);\n\t}\n}",
				"inputs": [
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF A",
						"type": "v4v4"
					},
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF B",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean operation (union, intersection or difference) between two shapes",
				"name": "V4V4 Coordinates Boolean",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "coord_union($in1($uv), $in2($uv))"
					}
				],
				"parameters": [],
				"shortdesc": "V4V4 Coordinates Union"
			},
			"shortdesc": "",
			"tree_item": "PF/V4V4/Op/Coordinates Boolean",
			"type": "shader"
		}
	],
	"name": "PauloFalcaoRayMarching"
}