{
	"lib": [
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//code from blackle https://www.shadertoy.com/view/wtVyWK\n\nfloat blackle_sdf3d_generator_neural_stanford_bunny(vec3 p) {\n   p.xyz=vec3(-p.x,-p.z,p.y);\n   //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n    //neural networks can be really compact... when they want to be\n    vec4 f00=sin(p.y*vec4(-3.02,1.95,-3.42,-.60)+p.z*vec4(3.08,.85,-2.25,-.24)-p.x*vec4(-.29,1.16,-3.74,2.89)+vec4(-.71,4.50,-3.24,-3.50));\n    vec4 f01=sin(p.y*vec4(-.40,-3.61,3.23,-.14)+p.z*vec4(-.36,3.64,-3.91,2.66)-p.x*vec4(2.90,-.54,-2.75,2.71)+vec4(7.02,-5.41,-1.12,-7.41));\n    vec4 f02=sin(p.y*vec4(-1.77,-1.28,-4.29,-3.20)+p.z*vec4(-3.49,-2.81,-.64,2.79)-p.x*vec4(3.15,2.14,-3.85,1.83)+vec4(-2.07,4.49,5.33,-2.17));\n    vec4 f03=sin(p.y*vec4(-.49,.68,3.05,.42)+p.z*vec4(-2.87,.78,3.78,-3.41)-p.x*vec4(-2.65,.33,.07,-.64)+vec4(-3.24,-5.90,1.14,-4.71));\n    vec4 f10=sin(mat4(vec4(-.34,.06,-.59,-.76),vec4(.10,-.19,-.12,.44),vec4(.64,-.02,-.26,.15),vec4(-.16,.21,.91,.15))*f00+\n        mat4(vec4(.01,.54,-.77,.11),vec4(.06,-.14,.43,.51),vec4(-.18,.08,.39,.20),vec4(.33,-.49,-.10,.19))*f01+\n        mat4(vec4(.27,.22,.43,.53),vec4(.18,-.17,.23,-.64),vec4(-.14,.02,-.10,.16),vec4(-.13,-.06,-.04,-.36))*f02+\n        mat4(vec4(-.13,.29,-.29,.08),vec4(1.13,.02,-.83,.32),vec4(-.32,.04,-.31,-.16),vec4(.14,-.03,-.20,.39))*f03+\n        vec4(.73,-4.28,-1.56,-1.80))/1.0+f00;\n    vec4 f11=sin(mat4(vec4(-1.11,.55,-.12,-1.00),vec4(.16,.15,-.30,.31),vec4(-.01,.01,.31,-.42),vec4(-.29,.38,-.04,.71))*f00+\n        mat4(vec4(.96,-.02,.86,.52),vec4(-.14,.60,.44,.43),vec4(.02,-.15,-.49,-.05),vec4(-.06,-.25,-.03,-.22))*f01+\n        mat4(vec4(.52,.44,-.05,-.11),vec4(-.56,-.10,-.61,-.40),vec4(-.04,.55,.32,-.07),vec4(-.02,.28,.26,-.49))*f02+\n        mat4(vec4(.02,-.32,.06,-.17),vec4(-.59,.00,-.24,.60),vec4(-.06,.13,-.21,-.27),vec4(-.12,-.14,.58,-.55))*f03+\n        vec4(-2.24,-3.48,-.80,1.41))/1.0+f01;\n    vec4 f12=sin(mat4(vec4(.44,-.06,-.79,-.46),vec4(.05,-.60,.30,.36),vec4(.35,.12,.02,.12),vec4(.40,-.26,.63,-.21))*f00+\n        mat4(vec4(-.48,.43,-.73,-.40),vec4(.11,-.01,.71,.05),vec4(-.25,.25,-.28,-.20),vec4(.32,-.02,-.84,.16))*f01+\n        mat4(vec4(.39,-.07,.90,.36),vec4(-.38,-.27,-1.86,-.39),vec4(.48,-.20,-.05,.10),vec4(-.00,-.21,.29,.63))*f02+\n        mat4(vec4(.46,-.32,.06,.09),vec4(.72,-.47,.81,.78),vec4(.90,.02,-.21,.08),vec4(-.16,.22,.32,-.13))*f03+\n        vec4(3.38,1.20,.84,1.41))/1.0+f02;\n    vec4 f13=sin(mat4(vec4(-.41,-.24,-.71,-.25),vec4(-.24,-.75,-.09,.02),vec4(-.27,-.42,.02,.03),vec4(-.01,.51,-.12,-1.24))*f00+\n        mat4(vec4(.64,.31,-1.36,.61),vec4(-.34,.11,.14,.79),vec4(.22,-.16,-.29,-.70),vec4(.02,-.37,.49,.39))*f01+\n        mat4(vec4(.79,.47,.54,-.47),vec4(-1.13,-.35,-1.03,-.22),vec4(-.67,-.26,.10,.21),vec4(-.07,-.73,-.11,.72))*f02+\n        mat4(vec4(.43,-.23,.13,.09),vec4(1.38,-.63,1.57,-.20),vec4(.39,-.14,.42,.13),vec4(-.57,-.08,-.21,.21))*f03+\n        vec4(-.34,-3.28,.43,-.52))/1.0+f03;\n    f00=sin(mat4(vec4(-.72,.23,-.89,.52),vec4(.38,.19,-.16,-.88),vec4(.26,-.37,.09,.63),vec4(.29,-.72,.30,-.95))*f10+\n        mat4(vec4(-.22,-.51,-.42,-.73),vec4(-.32,.00,-1.03,1.17),vec4(-.20,-.03,-.13,-.16),vec4(-.41,.09,.36,-.84))*f11+\n        mat4(vec4(-.21,.01,.33,.47),vec4(.05,.20,-.44,-1.04),vec4(.13,.12,-.13,.31),vec4(.01,-.34,.41,-.34))*f12+\n        mat4(vec4(-.13,-.06,-.39,-.22),vec4(.48,.25,.24,-.97),vec4(-.34,.14,.42,-.00),vec4(-.44,.05,.09,-.95))*f13+\n        vec4(.48,.87,-.87,-2.06))/1.4+f10;\n    f01=sin(mat4(vec4(-.27,.29,-.21,.15),vec4(.34,-.23,.85,-.09),vec4(-1.15,-.24,-.05,-.25),vec4(-.12,-.73,-.17,-.37))*f10+\n        mat4(vec4(-1.11,.35,-.93,-.06),vec4(-.79,-.03,-.46,-.37),vec4(.60,-.37,-.14,.45),vec4(-.03,-.21,.02,.59))*f11+\n        mat4(vec4(-.92,-.17,-.58,-.18),vec4(.58,.60,.83,-1.04),vec4(-.80,-.16,.23,-.11),vec4(.08,.16,.76,.61))*f12+\n        mat4(vec4(.29,.45,.30,.39),vec4(-.91,.66,-.35,-.35),vec4(.21,.16,-.54,-.63),vec4(1.10,-.38,.20,.15))*f13+\n        vec4(-1.72,-.14,1.92,2.08))/1.4+f11;\n    f02=sin(mat4(vec4(1.00,.66,1.30,-.51),vec4(.88,.25,-.67,.03),vec4(-.68,-.08,-.12,-.14),vec4(.46,1.15,.38,-.10))*f10+\n        mat4(vec4(.51,-.57,.41,-.09),vec4(.68,-.50,-.04,-1.01),vec4(.20,.44,-.60,.46),vec4(-.09,-.37,-1.30,.04))*f11+\n        mat4(vec4(.14,.29,-.45,-.06),vec4(-.65,.33,-.37,-.95),vec4(.71,-.07,1.00,-.60),vec4(-1.68,-.20,-.00,-.70))*f12+\n        mat4(vec4(-.31,.69,.56,.13),vec4(.95,.36,.56,.59),vec4(-.63,.52,-.30,.17),vec4(1.23,.72,.95,.75))*f13+\n        vec4(-.90,-3.26,-.44,-3.11))/1.4+f12;\n    f03=sin(mat4(vec4(.51,-.98,-.28,.16),vec4(-.22,-.17,-1.03,.22),vec4(.70,-.15,.12,.43),vec4(.78,.67,-.85,-.25))*f10+\n        mat4(vec4(.81,.60,-.89,.61),vec4(-1.03,-.33,.60,-.11),vec4(-.06,.01,-.02,-.44),vec4(.73,.69,1.02,.62))*f11+\n        mat4(vec4(-.10,.52,.80,-.65),vec4(.40,-.75,.47,1.56),vec4(.03,.05,.08,.31),vec4(-.03,.22,-1.63,.07))*f12+\n        mat4(vec4(-.18,-.07,-1.22,.48),vec4(-.01,.56,.07,.15),vec4(.24,.25,-.09,-.54),vec4(.23,-.08,.20,.36))*f13+\n        vec4(-1.11,-4.28,1.02,-.23))/1.4+f13;\n    return dot(f00,vec4(.09,.12,-.07,-.03))+dot(f01,vec4(-.04,.07,-.08,.05))+\n        dot(f02,vec4(-.01,.06,-.02,.07))+dot(f03,vec4(-.05,.07,.03,.04))-0.16;\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - Blackle\n\nGenerates a stanford bunny using a neural network using Blackle code from https://www.shadertoy.com/view/wtVyWK",
				"name": "SDF Neural Stanford Bunny",
				"outputs": [
					{
						"sdf3d": "blackle_sdf3d_generator_neural_stanford_bunny($uv)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [

				],
				"shortdesc": "SDF Neural Stanford Bunny"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/SDF Neural Standford Bunny",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//code from https://www.shadertoy.com/view/3lyfzw\n//Made with this wonderful tutorial https://www.youtube.com/watch?v=8pwXpfi-0bU\n//Using Ida Faber model - CC Attribution\n//https://sketchfab.com/3d-models/stylized-fox-92c2a35e54664974b8564c674cc712da\n\nfloat paulofalcao_sdf3d_generator_neural_fox(vec3 p) {\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n\tp.xyz=vec3(-p.x,-p.z,p.y);\n    p.y=-sqrt(p.y*p.y+0.001)+0.01;\n    //neural networks can be really compact... when they want to be\n\tvec4 f0_0=sin(p.y*vec4(1.627,-3.273,.822,-1.929)+p.z*vec4(4.114,.716,-3.074,2.185)+p.x*vec4(2.235,.937,3.908,-1.072)+vec4(6.915,3.461,-1.359,1.899));\n\tvec4 f0_1=sin(p.y*vec4(-.001,-3.255,1.831,.966)+p.z*vec4(-3.328,.890,1.475,-.323)+p.x*vec4(.290,-1.169,-4.054,3.146)+vec4(-4.517,-2.674,6.099,.070));\n\tvec4 f0_2=sin(p.y*vec4(3.113,-1.089,2.397,-.459)+p.z*vec4(-4.309,1.202,1.134,2.052)+p.x*vec4(-1.018,.550,-3.955,4.027)+vec4(-7.136,2.863,-1.640,-5.590));\n\tvec4 f0_3=sin(p.y*vec4(.343,1.509,4.401,-1.962)+p.z*vec4(1.198,1.852,2.207,-4.658)+p.x*vec4(2.067,.056,-.156,-.631)+vec4(-4.943,.051,7.095,3.128));\n\tvec4 f1_0=sin(mat4(vec4(.234,.264,-.181,.015),vec4(1.018,-.023,.417,-.338),vec4(.527,-.030,.056,-.005),vec4(-.843,.446,-.139,-.079))*f0_0+\n    \tmat4(vec4(-.512,.346,-.264,.380),vec4(.135,.249,.118,-.188),vec4(-.110,.210,.101,-.157),vec4(.126,.259,.262,.446))*f0_1+\n    \tmat4(vec4(.595,.318,.262,-.279),vec4(.802,.891,-.050,-.347),vec4(.131,-.369,.420,-.025),vec4(-.217,-.197,.152,.931))*f0_2+\n    \tmat4(vec4(.522,.906,-.530,.246),vec4(.685,.684,-.106,.175),vec4(.437,.507,-.459,.127),vec4(.342,-.398,-.243,.008))*f0_3+\n    \tvec4(.376,-.814,1.500,-1.007))/1.0+f0_0;\n\tvec4 f1_1=sin(mat4(vec4(.124,.489,-.159,-.094),vec4(.099,.611,-.257,-.614),vec4(-.108,.309,-.121,-.389),vec4(.049,-.606,.030,-.723))*f0_0+\n    \tmat4(vec4(.511,.456,-.645,-1.008),vec4(.009,-.461,-.198,-.754),vec4(.978,.413,-.641,-.412),vec4(-1.068,-.308,.291,-.170))*f0_1+\n    \tmat4(vec4(.428,-.220,-.163,-.356),vec4(.744,.548,.221,.563),vec4(.242,-.214,-.224,-.567),vec4(.391,.045,-.061,-.186))*f0_2+\n    \tmat4(vec4(-.001,-.252,.747,-.435),vec4(.539,.003,-.305,-.643),vec4(-.261,.164,-.336,.295),vec4(.383,-.395,-.136,-.008))*f0_3+\n    \tvec4(-1.007,-1.304,1.076,1.194))/1.0+f0_1;\n\tvec4 f1_2=sin(mat4(vec4(-.502,.308,-.174,.023),vec4(-.560,-.534,.624,-.555),vec4(.309,.630,-.122,.310),vec4(.368,.878,-.206,-.350))*f0_0+\n    \tmat4(vec4(.684,.334,-.702,.420),vec4(-.698,.960,-.053,-.676),vec4(-.272,.365,-.074,.407),vec4(-.375,.202,.532,-.207))*f0_1+\n    \tmat4(vec4(-.116,-.269,.153,-.453),vec4(-.530,.488,-.724,.065),vec4(.405,.667,-.642,.043),vec4(-.103,.430,-.562,.346))*f0_2+\n    \tmat4(vec4(.472,-.026,-.433,.070),vec4(-.210,-.057,-.253,.310),vec4(-.344,.047,.386,.552),vec4(.246,-.111,.331,.350))*f0_3+\n    \tvec4(-.725,-1.197,.825,-3.455))/1.0+f0_2;\n\tvec4 f1_3=sin(mat4(vec4(.027,.173,.253,-.822),vec4(-.478,.458,.101,.045),vec4(.025,.248,.759,.184),vec4(-.317,-.014,-.077,-.353))*f0_0+\n    \tmat4(vec4(-.283,-.201,.219,-.248),vec4(-.571,-.458,.401,-.226),vec4(.432,.245,-.160,-.065),vec4(-.421,-1.315,-.569,-.520))*f0_1+\n    \tmat4(vec4(.313,-.258,.291,-.284),vec4(-.732,.295,-.087,-.441),vec4(.836,-.701,.566,.889),vec4(-.116,-.252,-.542,-.396))*f0_2+\n    \tmat4(vec4(-.381,-.907,.516,.431),vec4(-.273,.257,.027,-.179),vec4(-.214,.077,-.130,-.282),vec4(-.368,-.270,.618,-.041))*f0_3+\n    \tvec4(2.580,-.950,1.416,.227))/1.0+f0_3;\n\tvec4 f2_0=sin(mat4(vec4(.288,.277,.179,.290),vec4(-.968,-1.492,.495,-.421),vec4(.153,-.177,.580,-.388),vec4(.971,-.335,.007,.032))*f1_0+\n\t    mat4(vec4(-.194,-.137,.202,.157),vec4(-.160,1.025,-.550,-.053),vec4(.485,.030,-.537,.065),vec4(.021,-.384,-.109,-.452))*f1_1+\n\t    mat4(vec4(-.748,.241,.386,-.441),vec4(-.620,-.869,.559,.681),vec4(.367,.256,-.459,-1.047),vec4(.260,.241,-.793,.494))*f1_2+\n\t    mat4(vec4(-.958,-.093,-.110,-.074),vec4(-.260,-.856,.521,.613),vec4(-.562,.079,.238,.056),vec4(-.413,-1.011,.118,-.104))*f1_3+\n\t    vec4(.980,1.564,-2.935,-.589))/1.4+f1_0;\n\tvec4 f2_1=sin(mat4(vec4(.181,.166,-.082,.469),vec4(.474,.703,.969,.559),vec4(.998,-.016,.193,-.363),vec4(.452,.152,.543,-.394))*f1_0+\n\t    mat4(vec4(-.711,-.586,.015,.459),vec4(.404,.538,.575,-.249),vec4(-.562,-.484,.549,.673),vec4(-1.160,.144,-.010,-.093))*f1_1+\n\t    mat4(vec4(.663,.424,.164,.089),vec4(1.168,.000,.636,-.309),vec4(.088,-.779,.352,-.722),vec4(-1.071,-.059,-.089,.310))*f1_2+\n\t    mat4(vec4(-.156,-.515,.176,-.125),vec4(.034,.431,.367,.228),vec4(.394,.263,.039,.195),vec4(1.077,.460,-.456,-.031))*f1_3+\n\t    vec4(.495,.756,-2.986,-1.239))/1.4+f1_1;\n\tvec4 f2_2=sin(mat4(vec4(-.586,-.569,-.492,-.407),vec4(-.224,-.624,.373,-.080),vec4(-.216,.279,.704,.072),vec4(-.780,-.607,.575,.568))*f1_0+\n\t    mat4(vec4(.070,-.760,.980,.566),vec4(-.124,-.326,.463,.559),vec4(-.297,.161,-.449,-.236),vec4(-.369,-.591,-.190,-.548))*f1_1+\n\t    mat4(vec4(.054,.276,-.894,-.120),vec4(.795,1.111,-.473,.031),vec4(.387,.292,.974,1.024),vec4(.150,.184,.253,-.287))*f1_2+\n\t    mat4(vec4(.435,1.658,.294,-.403),vec4(-.377,.175,-.493,.204),vec4(-.499,-.614,.119,-.557),vec4(-.799,-.168,-.481,-.192))*f1_3+\n\t    vec4(-2.130,-2.233,-.605,-3.251))/1.4+f1_2;\n\tvec4 f2_3=sin(mat4(vec4(.884,.369,.064,-.009),vec4(.434,.437,-.618,.117),vec4(.046,-.601,-.376,-.182),vec4(1.130,-.913,-.029,.602))*f1_0+\n\t    mat4(vec4(.314,-1.064,.861,-.572),vec4(-.633,.111,-.122,-.179),vec4(.277,-.615,-.069,.678),vec4(.109,.024,-1.124,-.553))*f1_1+\n\t    mat4(vec4(.243,.009,.461,.333),vec4(-.624,-.670,.328,.350),vec4(1.132,-.523,-.099,.402),vec4(.183,.245,-.232,.186))*f1_2+\n\t    mat4(vec4(-.057,.076,.660,-.139),vec4(.729,.450,.109,-.177),vec4(.088,-.111,.020,-.546),vec4(-.487,-1.286,.100,.117))*f1_3+\n\t    vec4(.529,-2.910,3.311,2.936))/1.4+f1_3;\n\treturn dot(f2_0,vec4(.021,-.057,.076,-.038))+\n\t    dot(f2_1,vec4(-.022,-.081,.064,-.063))+\n\t    dot(f2_2,vec4(-.049,-.057,.048,.076))+\n\t    dot(f2_3,vec4(.014,-.049,.060,.071))+\n\t    -0.010;\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao, Blackle\n\nGenerates a fox using a neural network using PauloFalcao code from https://www.shadertoy.com/view/3lyfzw\nModel trained by PauloFalcao\nMade using Blackle https://www.shadertoy.com/view/wtVyWK\nAnd this wonderful tutorial https://www.youtube.com/watch?v=8pwXpfi-0bU\nUsing Ida Faber model\nhttps://sketchfab.com/3d-models/stylized-fox-92c2a35e54664974b8564c674cc712da\n",
				"name": "SDF Neural Fox",
				"outputs": [
					{
						"sdf3d": "paulofalcao_sdf3d_generator_neural_fox($uv)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [

				],
				"shortdesc": "SDF Neural Fox"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/SDF Neural Fox",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"RepX": 4,
				"RepY": 1,
				"RepZ": 4,
				"X": 1,
				"Y": 1,
				"Z": 1
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec3 opRepLim(vec3 p,vec3 c,vec3 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor(p/c+0.5),vec3(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - IQ\n\nRepeats its input shape",
				"name": "SDF Repeat",
				"outputs": [
					{
						"sdf3d": "$in(opRepLim($uv,vec3($X,$Y,$Z)*2.0,vec3($RepX-1.0,$RepY-1.0,$RepZ-1.0)))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128,
						"min": 1,
						"name": "RepZ",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "SDF Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"Iterations": 2,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "//From https://www.shadertoy.com/view/wlyBWm by @paulofalcao\n\nvec3 smoothrepeat_$name(vec3 p,vec3 smooth_size,vec3 size){\n    size.$Axis/=2.0;\n    float w=pow(2.0,float($Iterations));\n\tfor(int i=0;i<$Iterations;i++){\n        p.$Axis=sqrt(p.$Axis*p.$Axis+smooth_size.$Axis);//smooth abs\n\t\tp.$Axis-=size.$Axis*w;//translate\n\t\tw=w/2.0;\n\t}\n\treturn p;\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "SDF Smooth Repeat",
				"outputs": [
					{
						"sdf3d": "$in(smoothrepeat_$name($uv,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 3,
						"label": "Axis",
						"longdesc": "Repetition axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"default": 2,
						"label": "Repetitions",
						"longdesc": "Repetitions in the X axis",
						"name": "Iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "0"
							},
							{
								"name": "2",
								"value": "1"
							},
							{
								"name": "4",
								"value": "2"
							},
							{
								"name": "8",
								"value": "3"
							},
							{
								"name": "16",
								"value": "4"
							},
							{
								"name": "32",
								"value": "5"
							},
							{
								"name": "64",
								"value": "6"
							},
							{
								"name": "128",
								"value": "7"
							},
							{
								"name": "256",
								"value": "8"
							},
							{
								"name": "512",
								"value": "9"
							},
							{
								"name": "1024",
								"value": "10"
							},
							{
								"name": "2048",
								"value": "11"
							},
							{
								"name": "4096",
								"value": "12"
							},
							{
								"name": "8192",
								"value": "13"
							},
							{
								"name": "16384",
								"value": "14"
							},
							{
								"name": "32768",
								"value": "15"
							},
							{
								"name": "65536",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Smooth Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "float blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return $in(p);\n}",
				"longdesc": "Type - SDF3D Operator\nCode - Blackle\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "SDF Smooth Repeat V2",
				"outputs": [
					{
						"sdf3d": "blakle_smoothrepeat_asin_sin_$name($uv,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)*0.635)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Repeat V2"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Smooth Repeat V2",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"RepX": 3,
				"RepY": 3,
				"RepZ": 3,
				"SmoothB": 0,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "//Uses shapes from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm by iq\n//And Smooth Repetition in https://www.shadertoy.com/view/wlyBWm by blakle\n\nfloat iq_sdRoundBox(in vec3 p,in vec3 b, float r ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0)-r;\n}\n\nfloat iq_opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\n\n",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "vec3 blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return p;\n}\n\nfloat Blackle_SDF3D_Smooth_Repeat_$name(vec3 p,vec3 size,vec3 rep,vec3 smooth_,float smoothb){\n  float b=iq_sdRoundBox(p,size*rep,smoothb);\n  p=blakle_smoothrepeat_asin_sin_$name(p,smooth_,size);\n  return iq_opSmoothIntersection($in(p),b,smoothb);\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - Blackle, PauloFalcao\n\nRepeats its input shape with smoothness using reflection symmetry with a smooth box limit",
				"name": "SDF Smooth Repeat V2 Limited ",
				"outputs": [
					{
						"sdf3d": "Blackle_SDF3D_Smooth_Repeat_$name($uv,vec3($X,$Y,$Z)*0.635,vec3($RepX,$RepY,$RepZ)+1.5,vec3($SmoothX,$SmoothY,$SmoothZ),$SmoothB)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128,
						"min": 1,
						"name": "RepZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.01,
						"label": "SmoothB",
						"longdesc": "Smoothness on the boundary. Uses smooth intersection with a box",
						"max": 1,
						"min": 0,
						"name": "SmoothB",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Repeat V2 Limited"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Smooth Repeat V2 Limited",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "//by IQ\n//from https://www.shadertoy.com/view/3ltSW2\nvec3 iq_2dsdf_coloring( in float c )\n{\n    vec3 col = vec3(1.0) - sign(c)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(c));\n\tcol *= 0.8 + 0.2*cos(128.0*abs(c));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(c)) );\n\n\treturn col;\n}",
				"inputs": [
					{
						"default": "length($uv)-0.5",
						"label": "SDF2D",
						"name": "c",
						"shortdesc": "SDF2D input",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - Image Generator from SDF2D\nCode - IQ\n\nIQ SDF 2D distance coloring from https://www.shadertoy.com/view/3ltSW2",
				"name": "SDF2D Distance Coloring",
				"outputs": [
					{
						"rgb": "iq_2dsdf_coloring($c($uv*2.0-1.0))",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [

				],
				"shortdesc": "SDF2D Distance Coloring"
			},
			"tree_item": "PauloFalcao/SDF2D/Render/SDF2D Distance Coloring",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "buffer_2",
					"from_port": 0,
					"to": "gen_outputs",
					"to_port": 0
				},
				{
					"from": "4690",
					"from_port": 0,
					"to": "buffer_2",
					"to_port": 0
				}
			],
			"icon_data": "",
			"label": "Image 360 HDRI Nimitz Sky",
			"longdesc": "Type - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
			"name": "graph_2",
			"nodes": [
				{
					"name": "buffer_2",
					"node_position": {
						"x": -126,
						"y": 347.5
					},
					"parameters": {
						"size": 11
					},
					"seed": -20507,
					"seed_locked": false,
					"type": "buffer",
					"version": 1
				},
				{
					"name": "4690",
					"node_position": {
						"x": -461,
						"y": 424.5
					},
					"parameters": {
						"cloudtime": 575.5,
						"sunPosX": -1,
						"sunPosY": 1,
						"sunPosZ": -1
					},
					"seed": -2939,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "// Day at the Lake by nimitz, 2020 (twitter: @stormoid)\n// https://www.shadertoy.com/view/wl3czN\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n//\n// Simple floor by PauloFalcao\n//\n// Modified for Material Maker by (twitter: @PauloFalcao)\n//\n\nmat3 nz_cloudrot_y(float a){\n\tfloat sa = sin(a);\n\tfloat ca = cos(a);\n\treturn mat3(vec3(ca,.0,sa),vec3(.0,1.,.0),vec3(-sa,.0,ca));\n}\n\nvec3 nz_cloudsIntcPlane(vec3 ro, vec3 rd, float plH){\n    ro.y += plH;\n    float t = -ro.y/rd.y;\n    if (t < 0.)\n        return vec3(1e6);\n    float u =  ro.x + rd.x*t;\n    float v =  ro.z + rd.z*t;\n    return vec3(t,u,v);\n}\n\n// Clouds cyclic noise\nconst mat3 nz_cloudMapm3x=mat3(\n\t  vec3(0.33338, 0.56034, -0.71817),\n\t  vec3(-0.87887, 0.32651, -0.15323),\n\t  vec3(0.15162, 0.69596, 0.61339)\n\t)*2.01;\n\nvec4 nz_cloudMap(vec3 p, float time){\n    p.xz += vec2(-time*1.0, time*0.25);\n    time *= 0.25;\n    p.y -= 9.0;\n    p *= vec3(0.19,0.3,0.19)*0.45;\n    vec3 bp = p;\n    float rz = 0.;\n    vec3 drv = vec3(0);\n    \n    float z = 0.5;\n    float trk= 0.9;\n    float dspAmp = 0.2;\n    \n    float att = clamp(1.31-abs(p.y - 5.5)*0.095,0.,1.);\n    float off = dot(sin(p*.52)*0.7+0.3, cos(p.yzx*0.6)*0.7+0.3)*0.75 - 0.2; //large structures\n    float ofst = 12.1 - time*0.1;\n    \n    for (int i = 0; i<6; i++){\n        p += sin(p.yzx*trk - trk*2.0)*dspAmp;\n        \n        vec3 c = cos(p);\n        vec3 s = sin(p);\n        vec3 cs = cos(p.yzx + s.xyz + ofst);\n        vec3 ss = sin(p.yzx + s.xyz + ofst);\n        vec3 s2 = sin(p + s.zxy + ofst);\n        vec3 cdrv = (c*(cs - s*ss) - s*ss.yzx - s.zxy*s2)*z;\n        \n        rz += (dot(s, cs) + off - 0.1)*z; //cloud density\n        rz *= att;\n        drv += cdrv;\n        \n        p += cdrv*0.09;\n        p.xz += time*0.1;\n        \n        dspAmp *= 0.7;\n        z *= 0.57;\n        trk *= 2.1;\n        p *= nz_cloudMapm3x;\n    }\n    \n    return vec4(rz, drv);\n}\n\n//-----------------------------Sky rendering---------------------------\n// modified from an prototype public domain implementation by shadertoy user Jodie: https://www.shadertoy.com/view/ttSGzh\n// That version has some serious accuracy issues, I modified it to somewhat match the Hosek-Wilkie sky model visuals.\n\n\nvec3 nz_getThickness(vec3 rd){\n\n\tconst float earthRadius=6371000.;\n\tconst float atmoDepth=8228.;\n\tconst float mieDepth=1800.0;\n\tconst float ozoneHeight=30000.;\n\t\n    const vec4 cns = earthRadius + \n        \t\t\tvec4(atmoDepth, mieDepth, ozoneHeight, ozoneHeight + atmoDepth);\n    const float r2 = earthRadius * earthRadius;\n    float b = -rd.y*earthRadius;\n    vec4 z = sqrt( cns*cns + (b*b - r2) );\n    return vec3(b + z.xy, z.w - z.z);\n}\n\n\nvec3 nz_getSky(vec3 rd, vec3 lgt, float addDepth){\n\n\tconst vec3 rayleighCoefficient=vec3(5.6e-6  , 1.25e-5 , 2.9e-5 );\n\tconst float mieCoefficient=16e-6;// adjust for foggier look\n\tconst vec3 ozoneCoefficient=(vec3(3.426, 8.298,.356) * 6e-5 / 100.);\n\tconst vec3 sunColor=vec3(.95,.96,1.2 );\n\t\n    const vec3 addCol = vec3(1.,1.,1.);\n    const mat3 coeffs = mat3(rayleighCoefficient, vec3(mieCoefficient), ozoneCoefficient)/0.693147;\n    vec3 thickness = nz_getThickness(rd) + addDepth*addCol;\n    float rdl = max(dot(rd, lgt), 0.0);\n\n    vec3 rayleighScatter =(thickness.x * (0.4*rdl*rdl + 1.12))* rayleighCoefficient;\n    float g = 0.8 - lgt.y*0.15 - mieCoefficient*1500.;\n    float g2 = g*g;\n    float a = inversesqrt(g2 - (2.0*g*rdl - 1.0));\n    float phaseMie = (0.4 + lgt.y*0.1 + mieCoefficient*7000.)*(1.0 - g2)*a*a*a;\n    float mieScatter = thickness.y * phaseMie * mieCoefficient;\n\n    vec3 sunCoeff = coeffs*(nz_getThickness(lgt) + addDepth*addCol);\n    vec3 viewCoeff = coeffs*thickness;\n    vec3 absorption = (exp2(-viewCoeff) - exp2(-sunCoeff))/((sunCoeff - viewCoeff)*0.693147);\n\n    return vec3(clamp(sunColor*(rayleighScatter + mieScatter)*absorption*(0.6 + lgt.y*0.3), 0., 100.5));\n}\n\n\n\n//-------------------------End of sky rendering------------------------\n//---------------------------------------------------------------------\n\nvec3 nz_getSun(vec3 rd, float sunCoeff, vec3 lgt){\n    float rdl = max(dot(rd, lgt), 0.0);\n    float dcy = smoothstep(-0.05,0.2,lgt.y);\n    vec3 sun = 50.0*vec3(1.,1.,.4)*pow(rdl, 10000.)*clamp(1.0 - dcy*.7, 0.,1.);\n    sun += 60.0*vec3(1.,0.7,.5)*pow(rdl, 3500.);\n    sun *= clamp(1.0 - dcy*.6, 0.,1.);\n    sun *= exp2(-sunCoeff*0.45);\n    return sun;\n}\n\n\nvec4 nz_getClouds( in vec3 ro, in vec3 rd, float scnD, vec3 skyCol, float time, vec3 lgt){\n\tvec4 rez = vec4(0.);\n\tfloat t = min(nz_cloudsIntcPlane(ro, rd, -12.).x, 175.);\n    \n    float updl = dot(lgt, vec3(0, 1, 0));\n    float sunUp = max(updl, 0.);\n    float sunUp3 = clamp(sunUp*sunUp*sunUp*6., 0.0, 1.0);\n    float sunDw = 1.0 - sunUp;\n    sunDw = pow(sunDw, 6.0);\n    \n    float bsd = dot(lgt.xz, rd.xz);\n    float sd = max(bsd, 0.0);\n    float sd2 = max(bsd*0.55 + 0.53,0.);\n    \n    vec3 topSky = clamp(nz_getSky(vec3(0, 1, 0), lgt, 0.).xyz, 0.,1.);\n    vec3 baseCol = mix(topSky, vec3(0.05, 0.066, 0.09), clamp(sunUp3,0.0, 0.6))*0.2;\n    \n    float extraDepth = 14e4*((1.0-bsd)*0.2 + 0.9)*pow(1.0 - sunUp, 4.0);\n    vec3 hlitCol = clamp(nz_getSky(normalize((lgt-vec3(0,0.001,0))*nz_cloudrot_y(0.15)), lgt, extraDepth).xyz ,0.0, 1.0);\n    hlitCol = hlitCol*sd2*mix(sunDw, sunDw*sunDw, sd)*16.;\n    \n    vec3 bSkyCol = nz_getSky(rd, lgt, extraDepth*5.0*(sunUp*0.8 + 0.2)).xyz;\n    vec3 sunLCol = mix(vec3(1.0, 0.8, 0.75), vec3(.5), sunUp);\n    vec3 atmoCol = mix(bSkyCol*(sunUp*0.3+0.7), sunLCol*dot(bSkyCol, vec3(0.38)), sunUp3)*0.25;\n    \n\tfor(int i=0; i<85; i++){\n\t\tvec3 pos = ro + t*rd;\n        if(rez.a > 0.99 || t > 300.  || pos.y > 150.)break;\n        vec4 cld = nz_cloudMap(pos, time);\n\t\tfloat den = clamp(cld.x, 0., 1.)*1.02;\n\t\tfloat dn = clamp((cld.x + 1.9),0.0 , 3.0);\n        float fogT = 0.;\n        \n\t\tvec4 col = vec4(0);\n        \n        if (cld.x > 0.6){   \n            col = vec4(baseCol, 0.1);\n            float nl = max(dot(cld.yzw, -lgt), -1.2);\n            float dif = clamp((cld.x - nz_cloudMap(pos + lgt*8., time).x)*0.4 + 0.2, 0.11, 2.0 )*2.5;\n            dif += clamp((cld.x - nz_cloudMap(pos + lgt*15., time).x)*0.2 - 0.03, -0.02, 1. )*4.0;\n            \n            col.rgb += atmoCol*((nl*0.25 + 0.7)*dif*0.65); //atmosphere lighting\n            \n            float den2 = den*den;\n            float den4 = den2*den2;\n            col *= den4*den4;\n            col.rgb += col.a*clamp((nl*0.8 + 0.1)*dif,0.,1.)*hlitCol; //twi-lights\n            //col *= smoothstep(t-0.0, t+.1, scnD); //blend with scene\n        }\n        \n        float fogC = exp2(t*0.012/(rd.y + 0.35) - 11.7);\n        col.rgba += vec4(skyCol, 1.0)*clamp(fogC, 0.0, 1.0);\n\t\trez = rez + col*(1.0 - rez.a);\n        t += clamp(7. - dn*dn*.85, 1.2, 7.);\n\t}    \n\treturn clamp(rez, 0.0, 1.0);\n}\n\n\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat npxf_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat pxf_nz_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=npxf_hash12(v1);\n  float n01=npxf_hash12(v1+vec2(0,1));\n  float n10=npxf_hash12(v1+vec2(1,0));\n  float n11=npxf_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat pxf_nz_noiseOct(vec2 p){\n  return\n    pxf_nz_noise(p)*0.5+\n    pxf_nz_noise(p*2.0+13.0)*0.25+\n    pxf_nz_noise(p*4.0+23.0)*0.15+\n    pxf_nz_noise(p*8.0+33.0)*0.10+\n    pxf_nz_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 pxf_nz_floorColor(vec3 p){\n    vec3 v=(pxf_nz_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\n\n\nvec3 pxf_nz_renderHDR360( in vec3 rd, float time, vec3 lgt){\n\n    vec3 col;\n    if (rd.y>-0.35) {\n        //Sky\n        //Sky\n        float ldt = clamp(dot(lgt,rd),0.,1.);\n\n        vec3 skyCol = nz_getSky(rd, lgt, 0.);\n        col = skyCol.rgb;\n        vec3 bg= col;\n\n        float powerSun=1.0+pow(ldt,2.0);\n\n        col += (nz_getSun(rd,0.0,lgt)+0.05)*powerSun;\n\n        float powerCloud=1.0+pow(ldt,32.0)*3.5;\n\n        vec4 cld = nz_getClouds(vec3(0,0,0), rd, 10000., bg, time, lgt)*powerCloud;\n        col = col*(clamp(1.0-cld.w,0.0,1.0)) + cld.xyz;\n        //Floor\n        vec3 p=rd*(-10.0/rd.y);\n        if ((rd.y>-0.35)&&(rd.y<-0.0)){\n          col=mix(col,pxf_nz_floorColor(p),clamp(-rd.y*3.0,0.0,1.0));\n        }\n    } else{\n        vec3 p=rd*(-10.0/rd.y);\n        col=pxf_nz_floorColor(p);\n    }\n    return col;\n}\n\n\nvec3 pxf_nz_make360hdri(vec2 p,float t,vec3 sunPos){\n    float PI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(PI,PI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n\t\n    return max(pxf_nz_renderHDR360(rayDirection,t,sunPos),vec3(0.0));\n}",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Nimitz HDRI Sky\n\nType - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
						"name": "Nimitz HDRI Sky",
						"outputs": [
							{
								"rgb": "pxf_nz_make360hdri(vec2($uv.x,-$uv.y+1.0),$cloudtime,normalize(vec3(-$sunPosX,$sunPosY,-$sunPosZ)))",
								"shortdesc": "Color Output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 30,
								"label": "Cloud Time",
								"max": 200,
								"min": 0,
								"name": "cloudtime",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Sun Pos X",
								"max": 1,
								"min": 0,
								"name": "sunPosX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Sun Pos Y",
								"max": 1,
								"min": 0,
								"name": "sunPosY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Sun Pos Z",
								"max": 1,
								"min": 0,
								"name": "sunPosZ",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -454,
						"y": 300
					},
					"parameters": {

					},
					"ports": [

					],
					"seed": -12758,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": 97,
						"y": 342
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0,
							"longdesc": "",
							"name": "port0",
							"shortdesc": "Image Output",
							"type": "rgba"
						}
					],
					"seed": 52201,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -35,
						"y": 99.5
					},
					"parameters": {
						"par1": 11,
						"par2": -1,
						"par3": 1,
						"par4": -1,
						"param0": 575.5
					},
					"seed": -16736,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Resolution",
							"linked_widgets": [
								{
									"node": "buffer_2",
									"widget": "size"
								}
							],
							"name": "par1",
							"type": "linked_control"
						},
						{
							"label": "Sun Pos X",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "sunPosX"
								}
							],
							"name": "par2",
							"type": "linked_control"
						},
						{
							"label": "Sun Pos Y",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "sunPosY"
								}
							],
							"name": "par3",
							"type": "linked_control"
						},
						{
							"label": "Sun Pos Z",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "sunPosZ"
								}
							],
							"name": "par4",
							"type": "linked_control"
						},
						{
							"label": "Cloud Time",
							"linked_widgets": [
								{
									"node": "4690",
									"widget": "cloudtime"
								}
							],
							"name": "param0",
							"type": "linked_control"
						}
					]
				},
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment",
					"node_position": {
						"x": -818.233337,
						"y": -69.649994
					},
					"parameters": {

					},
					"seed": 29001,
					"seed_locked": false,
					"size": {
						"x": 681,
						"y": 323
					},
					"text": "Nimitz HDRI Sky\n\nType - Image Generator\nCode - Nimitz, Paulo Falcao\n\nBased on a Day at the Lake by nimitz, 2020 (twitter: @stormoid)\nhttps://www.shadertoy.com/view/wl3czN\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\nContact the author for other licensing options\n\nSimple floor by @PauloFalcao\n\nModified for Material Maker by (twitter: @PauloFalcao)\n\nIf you can, use real HDRIs like the ones\nfrom https://hdrihaven.com/hdris/?c=outdoor in reflections it makes a huge difference!",
					"title": "",
					"type": "comment"
				}
			],
			"parameters": {
				"par1": 11,
				"par2": -1,
				"par3": 1,
				"par4": -1,
				"param0": 575.5
			},
			"seed": 0,
			"seed_locked": false,
			"shortdesc": "Image 360 HDRI Nimitz Sky",
			"tree_item": "PauloFalcao/Image/Generator/Image 360 HDRI Nimitz Sky",
			"type": "graph"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"value": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "HDRI",
						"name": "hdri",
						"shortdesc": "Image Input",
						"type": "rgb"
					}
				],
				"instance": "",
				"longdesc": "Type - Image operation\nCode - PauloFalcao\n\nSubtract a fixed RGB value from the image",
				"name": "Image HDRI Subtract",
				"outputs": [
					{
						"rgb": "$hdri($uv)-$value",
						"shortdesc": "Image Output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Value",
						"longdesc": "Value to be added or subtracted",
						"max": 32,
						"min": 0,
						"name": "value",
						"step": 0.1,
						"type": "float"
					}
				],
				"shortdesc": "ImageHDRI Subtract"
			},
			"tree_item": "PauloFalcao/Image/Util/Image HDRI Subtract",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABAlJREFUeJztm01IVFEUx3/mEwIHoohACTc11KIwRIgYjBa5MGhlLaKCwYW0KHER2aJFC6GPRYS0aTO4EUsojCAiYmjXooWKBdYmmGrRpxU5JebU4mZY3Pvkf3vOE26/1cy95//ucJg599xz7tS8hx84uA3kF73fAjwAal0C4BQwuOj9SeBipUKpVIpRpUcEcFQUvQaOiJpisUhX10lRtfxECy/uiMIJr+U+eKmWk1Vpf4C0Cd4BkW2w3+NBhUJBVDR7rpQsVgcAnI4RvbOMZbNZcrmcuPxOICNqkiW6HTN5WXxYuVwmkzkrqqaAC6ImOaL8Egb6xjUO3Bc11+VVkiL4IBi8A6ItgvFeryXyHpo+r5V8iB6IgtEvX0TFNuC4qNkHtIoaP6JaTG7/N7atboGxsTF1GWBU1HwGRkSNTgTmYKPm9m1tbaJiCjgjaq4BD0WNRvBBMHgHOFPh5afRQ5N8YLQ6oFAokM1mxUdNivY7gAFRcxDoFDXxOL8BuVyOcrksPm69Y/ytY3wt8Mox51o7g0m3kyE6FTNpDjbqYntE+xfAAVFzD7gkauxEg0uaqAcbgKei/VePNZIh+F0geAdE2nk/j8ntFQZF+zpgWNR0AN2ixhBdrFREyXHcm4cr2qtb10agwTE36xjfDMyI60BUKpUoFouibBST2yuotaWP6MfiCdTcIgJ+dWzUpoV6sAG4Kto/Bl6KmieSdfBBMHgHOKJZs/iYRkxur5AX7QF6Rft64ESshcMB/ZimhcIAJrdXOBcz98YytgloF9doATY4Z2OOwxn0SP8Kk9sr3BLtvwNDouYNcNM6s0Q94AJ60+IAem5/TLR/BtwQNXcxW+ufBB8Eg3dAFUpidaJ9k8caLR6a3YDsgD5M00JhGJPbqxqFLNAVM//JMrYL2O7zDWjFNC1suMpYDdgCkH2rW2BaHF+NXpes+P4ERjBNC4U+TG6vsF+0fwmclxT/EAN8OjbqwQZirjEmQvC7QPAOSGgbbMU0LRR6Mbm9whXRvgnoibVIMA/oxH3jy1XGasfk9jZc0d7VsfrmGF8DzDvmykknQuOYpoXCECa3V1CrUdO4vj3LkAn6dGzUgw3AI9He3oILPggG74AqHIY6RPsW3IHOhfqPB4BDQFUc0I1pWih0YXJ7G65oH+do25WvdUBjtW6IzKBfw5pET53V8tpsNa/IDKA2LdSDjUEr4QUfBIN3QIq3xOo9NGq5bOuSFik64AR6La8Hk9srHI6Zm0vTAWA6NraymK2Gt8A89oNS3O3m586ZlB0ApmNzV9RcwX29zoX9T10rwAFgL5hWh/+7QNofIB1qfr9agQ7YjWlaKBzC5PYK5nbqCnQAwHbAdXvN1XxpxF56m4tZp4afE5e0ibv6TscAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {
				"NStairs": 5,
				"Size": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D A",
						"name": "in1",
						"shortdesc": "SDF2D A",
						"type": "sdf2d"
					},
					{
						"default": "$uv.y",
						"label": "SDF2D B",
						"name": "in2",
						"shortdesc": "SDF2D B",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - Mercury\n\nMakes SDF2D stairs with 2 objects using Mercury fOpUnionStairs from https://mercury.sexy/hg_sdf/",
				"name": "SDF2D Union Stairs",
				"outputs": [
					{
						"longdesc": "SDF2D stairs generated by the boolean operation",
						"sdf2d": "fOpUnionStairs($in1($uv), $in2($uv), $Size, $NStairs)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5,
						"label": "Size",
						"longdesc": "The size of the stairs",
						"max": 10,
						"min": 0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "NStairs",
						"longdesc": "The number of the stairs",
						"max": 10,
						"min": 0,
						"name": "NStairs",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "SDF2D Union Stairs"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/SDF2D Union Stairs",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"NStairs": 6,
				"Size": 1
			},
			"shader_model": {
				"code": "",
				"global": "//based on fOpUnionStairs from https://mercury.sexy/hg_sdf/\n\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n}",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF3D A",
						"name": "in1",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "$uv.y",
						"label": "SDF3D B",
						"name": "in2",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - Mercury\n\nMakes SDF3D stairs with 2 objects using Mercury fOpUnionStairs from https://mercury.sexy/hg_sdf/",
				"name": "SDF Union Stairs",
				"outputs": [
					{
						"sdf3d": "fOpUnionStairs($in1($uv), $in2($uv), $Size, $NStairs)",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 5,
						"label": "Size",
						"longdesc": "The size of the stairs",
						"max": 10,
						"min": 0,
						"name": "Size",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "NStairs",
						"longdesc": "The number of the stairs",
						"max": 10,
						"min": 0,
						"name": "NStairs",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "SDF Union Stairs"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Union Stairs",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAADy9JREFUeJztW8tuHNUWXfV+P/vh2G7FVggJSSSEADFEDPgB/oRPuCMmDJjwAQwQTJD4BSSY8hggSCQUJXFD7Ha7u6u66/26A2vvW0ZXJHYcfKVLSS07TrvrnLX3XnvtdcoCgA7/x5d41Qu46usfAK56AVd9/QPAVS/gqi/5qm58/fp1yLIMWZYhiiLu379/JesQ8De0Qc/zYNs2FEUBAHRdh7Zt0bYtuq6DIAiQJAmiKEIQBAiCAAB4+PDhy17aywNgOByiKAoYhgHf96FpGuq6RlmW6LrTW9Z1jbZtIYoiVFWFpmmQJAmyLENVVUiShDRNkWXZS8uQSwdgb28PcRyjLEvYtg3XdSHLMoqiQJZlqOuaI07RliQJuq7Dtm3oug7gFJyu6yBJEmdM0zT44YcfLnO5lwfA9evXIYoiiqKAIAjQNA2apgEAR74sSzRNA0mSYJomHMfh91ApyLIMQRBQliWiKMJqtUKe51BVlUupaRr8/PPPl7HsywHgxo0bKMsSiqLAMAzoug5ZltE0DaqqQlVVaJqG3y/LMhzH4dJomgZZliFNUxRFwZEXRRFlWSJNU5RlCQAwTROapiHLMjx48OBFl/5iXWAymUAUReR5DsMwoGkaEx1Fu+s6/jmRHKU8RZsuAqIoCgYpCALs7e3BMAwAwGazQZ7nKMsSbdvCsiz89NNPF97DhTPg5s2bXNeU7sTsACCKInRdh2VZsG0bqqpCEAQGRRRFiKLI9U0ArNdrrFYr1HUN27YRhiHCMIRt2xAEAUmSYLVa8e8fHBzAMAz8+OOPfx8Ar776KqqqQhzHkCQJqqpyunddB0VRmAA9z4NlWVAUhd/Tti0EQUDXdUyKtm3DNE2UZYmTkxOsVit0XQfHcWDbNjRNQ1mWWC6XWCwWAIDt7W2oqorj42NIkoTvv//+3ABIAP51nl/Y39+HIAjIsgyCIEBRFI48pbZlWTAMg1uZKJ4KToq8oihQVZVLgtqgaZqwLAu6rkNRFGiaxt+3bYuyLJEkCeI4RpIk6LoOpmlClmUoigLf93F0dHQuAM7NAdSWSME1TcPpbhgGFEXhVCfyKooCuq7zi/o9lUOSJMiyDEmScLbYtg3HcSBJEtq2RZqmEEURtm1ztyEeKcsSm80GW1tb593O+TLg1q1b3L+7ruPWpes6XNflPk5trCgKFjtUKgQAAZXnOVarFRaLBTabDeq6hiiK0DQNlmVxhKuqQpZlaNsWmqbBcRzuJLquY7VaYb1e47XXXsPjx4+fG4DnHob29vb45lVVMcurqsq17nkeXNflVqWqKr8URWHwiMD6JNiXxP0yIsBUVQUAVFWFoii4vXZdh+FwiBs3bvD/37lz57kBeO4SEEURhmGgrmu+uaqqMAwDtm3Dtm0YhoG2bc/0ck3TmA+AU6av65rBUBQFpmny18FggMFgwJlEHYLkMUlpItA0TWHbNra3t1FVFY6OjuD7/uUCsLu7C0mSAIAZvK/fKcqCICBNUywWC6zXa6iqyhNf13WoqorBpGhTBgGA67oIggCmaaLrOuR5zlGWJAm2bfNn9YNC3+/s7HCnuXv3Ln755ZfLAYAiKwjCmc0ahsGKL89ztG2L+XyOxWKBruu4hnVd57Lpa4C+cJIkiTdDA1Caplx2iqJwzQuCwMA4jgNd15mMwzBkvnie65kkeO3aNWbiPisbhgHTNAEARVGwKEqSBG3bwvd9bG9vYzwec0TruubNkngiNUhckOc5oijCYrFAkiQ8O8iyDMMw4LouXNeFKIpo2xamaSIIAui6zuVJgAVBgIODg78E4JkZ4Ps+FosFZwEAbnmiKGKz2SBJEu7tuq7D8zyMx2Ncu3YNtm2fqVuKqGma/Jn9jkEpTEOVLJ9dImVOXddYr9fYbDZnCJMycjKZ4LfffnvW9p4NQF3XKIoCqqoiz3MoigLLsmBZFoqi4MX32dt1XYxGIwRBwP2eBqWu6/h9iqIgyzLu41VVcXlQ16Bokv5omoYHq7quWYrTuEyzCSnRZ11/2QZ3d3eRJAkA8A1UVYVlWdA0jSNKQsjzPIxGI4zHYziOwyInjmOkacp1SyQKgOuVJkHgNMMcx4HruqwMKetIQRJImqZBEAQURYE8zyEIAgOzvb2Nd9999+IZoCgKp7eiKNB1nXs81a0syxx13/cRBAEsy4IoikjTFMvlElEUsYihdkgyuSxLng+ICF3XhaZpEEWRZa5hGAwGcNpOPc/j+9OmVVVF13WYzWbsNVwYAFpUX5pS5GmIsSyLR1dd11n0kAmSpiniOMZms2HypDLq38MwDBiGgcFgwBvrt7v+XECAUaYYhsFSWVVVzOdzzOdzJsYXAoAEimmaUFWVhQ6xMwEgSRK3uj8vngRN0zRnWimxO23OdV0Mh0NYlsWpTNYY/ZtATdOUM4PcJsoWWZax2WyQZRnW6/XFASCxQmKHxAxtjtQZaf84jpnVqc0Nh0PeZFVVTJCO47DL01eEpBvo50R81OLSNEUURSjLktWirusoigKmabL73LYt6rpmDjs3ADs7O2dGWcoIEjJ9ImvbFlVVsXKr6xrD4RDD4RCapmEwGGA+nyPLMti2jcFgAEmSWD9QNB3H4Qmxf3Vdx1FerVZYrVb8PipFapdN0zDgJLk/+OADfP311+cDgAiIejLVLklb2nh/kVRv1OPDMIRlWewSk3okA6UsS3aAqJ7LsuSsIsD7rvCfh6YgCHgMprSXJAmu66IoCniexzL+XAAAp4qN/DdifJK/FJW+2UlZQUKHUjTPc8RxzPVIeoAygNQbZVx/QqSokoAKwxC6rqNtW4RhiPF4jJ2dHYiiiKdPn7JLNRqNcHx8DN/3WW6fGwAyNgjB/hBDUQf+4+FT+tH7CLzDw0McHh6ytjdNkyU1tTHf9xGGIYsXMj2p/kVRZMYvy5KNWAoGvcipGo1GWCwWTKjnBmA6neLWrVsMRJ+MCAQaaYlwiNTyPMdms2ETczabcd0SR5CQIW0/Go0wGo1gGAarQ7LTKfrUivM855IjA1UQBB7EaESndX7xxRcXywAAnJYUDdosiRpi7CzLuEvQUCRJErIsQ1VVZ7wByiAahXVdx2AwYLlN5UIaod8qRVHkexRFwUALgoD1eo2joyNsbW2dsez+6nouAPoDCREhSWCq3T+fA9BRF+l0krCWZaFpGp4j6DNEUUSSJNhsNoiiCEVRcCslUiUzlsguz3POKhrM4jhGEASo65r9wgsDQITUt7Boc32BoqoqHMfhWgvDEMPhEIPBAE3T8PCT5znqukYURUiSBHVdnyG/tm2x2Wx48+PxGEEQcABI71NH6XcjGpjoAIYGt7+q/2cCQEzdT1vaMHWIPM+5NZJf4LouExS9X9M07vk0HzRNA8dx+PPonq7rYmdnB3t7e7Btm12mOI65nPrtlPiEQKSjMyq7CwPw4MEDDIdD1HXNSpCiI4oiDyCUGTQHUKpSryfbm9I+z3N2bPqih0pkNBrhlVdewe7uLkeYvvYtefqePEVSoXTEJooivvzyy4sDAICHD9M0WYpSVInt6YDCcRwoioI8z3FycsJWGaVsX1qT3R0EATzPY21A8wVxBwFGgoyMEjqMIVeJAOlPnX0Ve2EAADChyLKM9XrNs31fCPXnfJLF9Oq67oyXSHVv2zbG4zE8z0PXdVz/JycnUBSFJ8goijCfzzGbzZAkCZuh/bmhqip2iOjE+Vn1/1wAPH36FNvb28jzHJ7nsU9HmybyoUNQsspI4ZHgIZeX+rssy9wpTNPk3h9FEeI4RhzHCMMQmqYhjmMcHBzg4OAASZLA8zzs7OywyKFOAIBBSdMUn3/++YsDAJzW3nK5ZAlKr75RQociRH50bpAkCYufNE2xXq95kvuz7U2qrv87hmFguVziyZMnePz4MVtqlPY0Bmuahq2tLWiahtVq9cwp8FwAHB0dseFBYyk95UHHYVSLZFMRKVEqUiZQzyZ9TlKbMkcQBFZ3JIcptZum4WnSNE224nVdRxiGzAGPHj3CN998c3kAAODZmtofqULS9WRYUISpG9DmLctiXUBRJ/3Qt9TIcI3jmHnFcRxMJhN2iyaTCWRZxnK55ExUVRVRFOHJkyfPVfvnBuDRo0e4ffs2LMuCqqrc1oggSQ3SsbXneVyPZKSSf98/PCWQyFiluaN//kDPFtCw1Sdj4FSbLBYLzGYzTKdTfPvtt5cPAHCqC+7du8fGJc0FlMaUgiRCgiDgqFPGkG9HMnW5XGK5XML3fXiex61LFEXOnCAIoKrqmXMD4FQZUplR6z3P5s8NAABEUcSjKRmk8/mczQ4aiKqqgmEY2N3dRdd1ePr0KQ4PDzGdTllURVGE2WyGuq4xGAwwmUwQBAHba0VRsIiyLOvMXEIzh6ZpcF0XURQ91znACwMwnU5h2zaiKMK1a9eg6zrW6zUePnwI3/d5gRQt6v/L5RLr9Rq///47Z8N6vWZAm6aB7/twHAdFUXDflyQJYRhiNBphOBzC932OuuM4CMOQy+GTTz45NwAXelj6/v37EEUR0+kUsixjPB5DkiQcHR1hsVigKApEUYTpdIqDgwMcHx+z9CXFRo4vAUVaoa5r5HnOzi+ZKL7vY3d3l0+byBE+OjrCr7/+io8++ugiW3mx5wRff/11tG2L27dvQ9d1HB8fY7PZ8EZt28bW1haboKQcaWhZrVY4Pj5G0zQYDAbY2tqCYRhYr9eYz+eoqgphGOLmzZvY39+HYRg4OTnBdDrFarVCVVU4PDzEV199ddEtXM6Dkm+//TbL2j67kyagIYlOcj3P41mCngSl0iFQsiyD7/vY29vjp8HiOMZ0OsXjx4+xv7+PTz/99EWXfnmPyr7zzjuYzWa4c+cOdnZ22EIDTnU6HX6apslega7rZzTEcrnEdDrFbDaDIAiYTCbY29tjnjk4OMB6vcb777+PDz/88DKWffkPS+/v7+PevXt48803kaYpDg8Pecihp8Z0XedzRHqIsmkadnTatsV4POYnUSntJ5MJPv7448tc7st7XP6tt97CG2+8gbZt8ccff6CqKgwGAwRBcMZLoOGKDl77Bxw0SY5Go0tJ9/92/S1/MHH37l1sbW1xxLuuQxzHXP+GYWA0GsHzvDPniJ999tnLXtrfA8B/u9577z2Wsqqq4rvvvruKZVwdAP8r1//9X439A8BVL+Cqr38AuOoFXPX1bzMeveN7Gst+AAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"scale": 16,
				"scale_x": 1,
				"scale_y": 1,
				"scale_z": 1
			},
			"shader_model": {
				"code": "",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_F3 =  0.3333333;\nconst float XsX3zB_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_random3(s), x);\n\t d.y = dot(XsX3zB_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise using nikat code from https://www.shadertoy.com/view/XsX3zB",
				"name": "TEX3D Simplex Noise",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "vec3(XsX3zB_simplex3d($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale))*0.5+0.5",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16,
						"min": 0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16,
						"min": 0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16,
						"min": 0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "TEX3D Simplex Noise"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/TEX3D Simplex Noise",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"brightness": 0,
				"clamp": 1,
				"contrast": 2,
				"iterations": 5,
				"persistence": 0.5,
				"scale": 4,
				"scale_x": 1,
				"scale_y": 1,
				"scale_z": 1,
				"transx": 0,
				"transy": 0,
				"transz": 0
			},
			"shader_model": {
				"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [

				],
				"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
				"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB",
				"name": "TEX3D Simplex Noise Octaves",
				"outputs": [
					{
						"shortdesc": "TEX3D output",
						"tex3d": "$clamp",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16,
						"min": 0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16,
						"min": 0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16,
						"min": 0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate X",
						"longdesc": "Noise X translate",
						"max": 100,
						"min": 0,
						"name": "transx",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Y",
						"longdesc": "Noise Y translate",
						"max": 100,
						"min": 0,
						"name": "transy",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Z",
						"longdesc": "Noise Z translate",
						"max": 100,
						"min": 0,
						"name": "transz",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 12,
						"label": "Iterations",
						"longdesc": "Noise iterations / octaves",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Persistence",
						"longdesc": "How higher octaves affect the output",
						"max": 1,
						"min": 0,
						"name": "persistence",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Brightness",
						"longdesc": "Overall brightness",
						"max": 1,
						"min": 0,
						"name": "brightness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Contrast",
						"longdesc": "Overall Contrast",
						"max": 1,
						"min": 0,
						"name": "contrast",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "Clamp",
						"longdesc": "Makes the output restricted between 0 and 1",
						"name": "clamp",
						"type": "enum",
						"values": [
							{
								"name": "false",
								"value": "$(name_uv)_out"
							},
							{
								"name": "true",
								"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
							}
						]
					}
				],
				"shortdesc": "TEX3D Simplex Noise Octaves"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/TEX3D Simplex Noise Octaves",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Correction": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D A",
						"name": "in1",
						"shortdesc": "SDF2D A",
						"type": "sdf2d"
					},
					{
						"default": "$uv.y",
						"label": "SDF2D B",
						"name": "in2",
						"shortdesc": "SDF2D B",
						"type": "sdf2d"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"label": "SDF2D Custom Union",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "joinSDF2D",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nThe union between SDF2D A and SDF2D B is defined by a custom SDF2D",
				"name": "SDF2D Custom Union",
				"outputs": [
					{
						"sdf2d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF2D Custom Union"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/SDF2D Custom Union",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAQhJREFUeJztkKFNgwEUBi80BEFq8CV4LKKKAVgAVHcAA2ELdsAjMJWVHQLxLwH2w5K3wAm+S575nrkcy7IELgL8uc/AT+B+7M+B78Db2G8CX4H92Al8BI6B67G/BA6Bh7HfBt4Dj2NfB14DT4Gz8bsL7AKXY78KbAObsZ8GzgOrnPDPaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsGsAWsGkAW8CmAWwBmwawBWwawBawaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsGsAWsGkAW8CmAWwBmwawBWwawBawaQBbwKYBbAGbBrAFbBrAFrBpAFvApgFsAZsGsAVsfgH3UU+JzCgMYwAAAABJRU5ErkJggg==",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
				"name": "SDF2D Axis",
				"outputs": [
					{
						"sdf2d": "$mode",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Mode",
						"longdesc": "SDF2D made using the distance to axis X / Y at 0",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "$uv.x"
							},
							{
								"name": "Y",
								"value": "$uv.y"
							}
						]
					}
				],
				"shortdesc": "SDF2D Distance to Axis"
			},
			"tree_item": "PauloFalcao/SDF2D/Generator/SDF2D Axis",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "paulofalcao_sdf2d_input_3",
					"from_port": 0,
					"to": "sdsmoothboolean",
					"to_port": 0
				},
				{
					"from": "paulofalcao_sdf2d_input_4",
					"from_port": 0,
					"to": "sdsmoothboolean",
					"to_port": 1
				},
				{
					"from": "sdsmoothboolean",
					"from_port": 0,
					"to": "sdboolean_3",
					"to_port": 0
				},
				{
					"from": "sdcircle_2",
					"from_port": 0,
					"to": "sdboolean_3",
					"to_port": 1
				},
				{
					"from": "sdboolean_3",
					"from_port": 0,
					"to": "paulofalcao_sdf2d_operator_custom_union_3",
					"to_port": 2
				},
				{
					"from": "sdbox",
					"from_port": 0,
					"to": "paulofalcao_sdf2d_operator_custom_union_3",
					"to_port": 0
				},
				{
					"from": "sdbox_2",
					"from_port": 0,
					"to": "paulofalcao_sdf2d_operator_custom_union_3",
					"to_port": 1
				}
			],
			"icon_data": "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",
			"nodes": [
				{
					"name": "sdcircle_2",
					"node_position": {
						"x": -222.004883,
						"y": 128.290039
					},
					"parameters": {
						"cx": -0.35,
						"cy": -0.35,
						"r": 0.06
					},
					"type": "sdcircle"
				},
				{
					"name": "sdsmoothboolean",
					"node_position": {
						"x": -50.192383,
						"y": 19.727539
					},
					"parameters": {
						"k": 0.15,
						"op": 0
					},
					"type": "sdsmoothboolean"
				},
				{
					"name": "sdboolean_3",
					"node_position": {
						"x": 157.995117,
						"y": 56.290039
					},
					"parameters": {
						"op": 0
					},
					"type": "sdboolean"
				},
				{
					"name": "paulofalcao_sdf2d_input_4",
					"node_position": {
						"x": -221.004883,
						"y": 69.790039
					},
					"parameters": {
						"mode": 1
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdbox_2",
					"node_position": {
						"x": -221.004883,
						"y": -147.709961
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"h": 0.5,
						"w": 0.1
					},
					"type": "sdbox"
				},
				{
					"name": "paulofalcao_sdf2d_input_3",
					"node_position": {
						"x": -221.004883,
						"y": 9.290039
					},
					"parameters": {
						"mode": 0
					},
					"seed_value": 34667,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdbox",
					"node_position": {
						"x": -223.004883,
						"y": -277.709961
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"h": 0.1,
						"w": 0.5
					},
					"type": "sdbox"
				},
				{
					"name": "paulofalcao_sdf2d_operator_custom_union_2",
					"node_position": {
						"x": 194.22168,
						"y": -194.967773
					},
					"parameters": {
						"Correction": 0
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "$uv.x",
								"label": "SDF2D A",
								"name": "in1",
								"shortdesc": "SDF2D A",
								"type": "sdf2d"
							},
							{
								"default": "$uv.y",
								"label": "SDF2D B",
								"name": "in2",
								"shortdesc": "SDF2D B",
								"type": "sdf2d"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"label": "SDF2D Custom Union",
								"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
								"name": "joinSDF2D",
								"shortdesc": "SDF2D Custom Union",
								"type": "sdf2d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nThe union between SDF2D A and SDF2D B is defined by a custom SDF2D",
						"name": "Custom Union",
						"outputs": [
							{
								"sdf2d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10,
								"min": 0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Custom Union"
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/SDF2D/Operator/SDF2D Custom Union Example"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror symmetry using the chosen axis",
				"name": "SDF Axis Symmetry",
				"outputs": [
					{
						"sdf3d": "$in(vec3($mode))",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "SDF Axis Symmetry"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAhhJREFUeJztmrFKw0AYx38txaE49hW6OLSDL6CzgoM+gBQEFzdxc+omPoAghD6ADgV1tS/g0sGlbyBOIg5Scg5JIW01McnlPu19fzhoc7n8jj+5S5vvXwMMdIA+sA00gXfgE7taA9aBD+AROAfGcZ8cvwYdA9fAJvAMDIER8Gp5Ai1gC9gDNoAn4CjuE+UPDUwNPBhoG6Di1o5ZUxOxpfm8GRg7gicnMTYRW5Zfj9bcEJh8c9tUpUnMbCLNb0QbzmjhhB2CYN8qste7Be4TR0bASeKzGP/FQHfuFgmCwIRhaLUFQbBwG3ZNxJblN9JcO6vXrbh/EYaFxrngpxoAcFkSflpyfNV8Oxb/Y3lvQOYSSOrwl+cNck9Djp/LAICrjP7jvBcU5uc2AODuh+O7RS4mzC9kAMDBwvebohcS5nu/CaoB0hOQVuE9wPWar4pfyABXu70Lfm4Dqn7Ou+bnMmBgGZ5XVfC93wS9NyBzCZT9P19WVfNTDSj6JseWXPAbUcWkNXcweoFoV8vXbBGxZ5/F+FMDfYfv5GetHxcnpPmeF0aQL03J8r0vjtYA43N53PsfQt4vAaQ3IXm++GNI8wGifM0HSNfnpfmaD8garPmAFZf3Bmg+IO8kNB+A5gMAzQesjNQA6QlIS/MBRQZpPkBQmg+wLO83Qe8N0HxAWqfmAyxK8wFLTfMB5i8URpAvTWk+AM0HCPK/ANfkGNbiPqw8AAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "$uv.x",
						"label": "SDF2D",
						"name": "in",
						"shortdesc": "SDF2D",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nTransforms a SDF2D making a mirror symmetry using the chosen axis",
				"name": "SDF2D Axis Symmetry",
				"outputs": [
					{
						"sdf2d": "$in($mode)",
						"shortdesc": "SDF2D output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XY",
								"value": "abs($uv.xy-vec2(0.5))+vec2(0.5)"
							},
							{
								"name": "X",
								"value": "vec2(abs($uv.x-0.5)+0.5,$uv.y)"
							},
							{
								"name": "Y",
								"value": "vec2($uv.x,abs($uv.y-0.5)+0.5)"
							}
						]
					}
				],
				"shortdesc": "SDF2D Axis Symmetry"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/SDF2D Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 5
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from MaterialMaker\n\nvec3 circle_repeat_transform_X(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.y, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Y(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.z*s;\n\trv.y = p.y;\n\trv.z = -p.x*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Z(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.y);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c-distance;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - Paulo Falcao, RodZilla\n\nRepeats its input shape around a axis",
				"name": "SDF Polar Repeat",
				"outputs": [
					{
						"sdf3d": "$in(circle_repeat_transform_$Axis($uv, $Repetitions, $Distance))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 4,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the circle",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Polar Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"RepX": 3,
				"RepY": 3,
				"X": 0.1,
				"Y": 0.1
			},
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec2 opRepLim2D(vec2 p,vec2 c,vec2 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor(p/c+0.5),vec2(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - IQ\n\nRepeats its input shape",
				"name": "SDF2D Repeat",
				"outputs": [
					{
						"sdf2d": "$in(opRepLim2D($uv-vec2(0.5),vec2($X,$Y)*2.0,vec2($RepX-1.0,$RepY-1.0))+vec2(0.5))",
						"shortdesc": "SDF2D Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "SDF2D Repeat"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/SDF2D Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Correction": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D A",
						"name": "in1",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "0.0",
						"label": "SDF3D B",
						"name": "in2",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"label": "SDF2D Custom Union",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "joinSDF2D",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThe union between SDF3D A and SDF3D B is defined by a custom SDF2D",
				"name": "SDF Custom Union",
				"outputs": [
					{
						"sdf3d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Custom Union",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdcircle_2",
					"from_port": 0,
					"to": "sdboolean_3",
					"to_port": 1
				},
				{
					"from": "paulofalcao_sdf2d_input_3",
					"from_port": 0,
					"to": "sdboolean_4",
					"to_port": 0
				},
				{
					"from": "paulofalcao_sdf2d_input_4",
					"from_port": 0,
					"to": "sdboolean_4",
					"to_port": 1
				},
				{
					"from": "sdboolean_4",
					"from_port": 0,
					"to": "sdboolean_3",
					"to_port": 0
				},
				{
					"from": "sdf3d_box_4",
					"from_port": 0,
					"to": "sdf3d_smoothboolean_3",
					"to_port": 0
				},
				{
					"from": "sdf3d_box_3",
					"from_port": 0,
					"to": "sdf3d_smoothboolean_3",
					"to_port": 1
				},
				{
					"from": "sdboolean_3",
					"from_port": 0,
					"to": "sdf3d_smoothboolean_3",
					"to_port": 2
				},
				{
					"from": "sdf3d_smoothboolean_3",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 0
				}
			],
			"icon_data": "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",
			"nodes": [
				{
					"name": "sdf3d_smoothboolean_2",
					"node_position": {
						"x": 13.971497,
						"y": -204.775681
					},
					"parameters": {
						"Correction": 0
					},
					"seed": -51977,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "SDF3D A",
								"name": "in1",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "0.0",
								"label": "SDF3D B",
								"name": "in2",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"label": "SDF2D Custom Union",
								"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
								"name": "joinSDF2D",
								"shortdesc": "SDF2D Custom Union",
								"type": "sdf2d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nThe union between SDF3D A and SDF3D B is defined by a custom SDF2D",
						"name": "Custom Union",
						"outputs": [
							{
								"sdf3d": "$joinSDF2D(vec2($in1($uv),$in2($uv)))/(1.0+$Correction)",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10,
								"min": 0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "sdboolean",
					"node_position": {
						"x": 56.940613,
						"y": 35.341629
					},
					"parameters": {
						"op": 0
					},
					"seed": 1491,
					"seed_locked": false,
					"type": "sdboolean"
				},
				{
					"name": "sdcircle",
					"node_position": {
						"x": -288.059357,
						"y": 114.341629
					},
					"parameters": {
						"cx": -0.3,
						"cy": -0.3,
						"r": 0.18
					},
					"seed": -52182,
					"seed_locked": false,
					"type": "sdcircle"
				},
				{
					"name": "paulofalcao_sdf2d_input",
					"node_position": {
						"x": -288.059357,
						"y": 1.341629
					},
					"parameters": {
						"mode": 0
					},
					"seed": -52131,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -287.059357,
						"y": -135.658371
					},
					"parameters": {
						"r": 0.01,
						"sx": 0.07,
						"sy": 1,
						"sz": 0.5
					},
					"seed": 44278,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "sdboolean_2",
					"node_position": {
						"x": -129.059387,
						"y": 14.341629
					},
					"parameters": {
						"op": 0
					},
					"seed": -30577,
					"seed_locked": false,
					"type": "sdboolean"
				},
				{
					"name": "paulofalcao_sdf2d_input_2",
					"node_position": {
						"x": -289.059357,
						"y": 54.841629
					},
					"parameters": {
						"mode": 1
					},
					"seed": -60041,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Generator\nCode - PauloFalcao\n\nSDF2D Distance to Axis\nUsed in more complex operations like Custom Union",
						"name": "Axis",
						"outputs": [
							{
								"sdf2d": "$mode",
								"shortdesc": "SDF2D output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "SDF2D made using the distance to axis X / Y at 0",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "$uv.x"
									},
									{
										"name": "Y",
										"value": "$uv.y"
									}
								]
							}
						],
						"shortdesc": "Distance to Axis"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -280.059357,
						"y": -262.658386
					},
					"parameters": {
						"r": 0.01,
						"sx": 2.5,
						"sy": 0.1,
						"sz": 2.5
					},
					"seed": 53834,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": 477.444061,
						"y": -224.115829
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2,
						"CamZ": 3,
						"CamZoom": 1,
						"LookAtX": 0,
						"LookAtY": 0,
						"LookAtZ": 0,
						"Pow": 64,
						"Reflection": 0.2,
						"Shadow": 1,
						"Specular": 0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D A",
								"name": "sdf_a",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.1,0.1)",
								"function": true,
								"label": "TEX3D A",
								"name": "tex3d_a",
								"shortdesc": "TEX3D A",
								"type": "tex3d"
							},
							{
								"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
								"function": true,
								"label": "SDF3D B",
								"name": "sdf_b",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
								"function": true,
								"label": "TEX3D B",
								"name": "tex3d_b",
								"shortdesc": "TEX3D B",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "SDF Render 2 Objs",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1,
								"min": 0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024,
								"min": 0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Custom Union Example"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"mode": 0,
				"smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "SDF3D",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror smooth symmetry using the chosen axis",
				"name": "SDF Smooth Axis Symmetry",
				"outputs": [
					{
						"sdf3d": "$in(vec3($mode))",
						"shortdesc": "SDF3D output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
							},
							{
								"name": "XY",
								"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
							},
							{
								"name": "XZ",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
							},
							{
								"name": "X",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"max": 1,
						"min": 0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Axis Symmetry"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Correction": 0,
				"DirX": 1,
				"DirY": 1,
				"DirZ": 1,
				"Distort": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nfloat distort_$name(vec3 uv){\n\tvec3 s=$tex3d(vec4(uv,0.0));\n\treturn $sdf(uv-s*vec3($DirX,$DirY,$DirZ)*$Distort);\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nDisplace a 3DSDF based on a TEX3D in a direction",
				"name": "SDF Displace by Direction",
				"outputs": [
					{
						"sdf3d": "distort_$name($uv)/(1.0+$Distort*$Correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.1,
						"label": "Amount",
						"longdesc": "Displace amount",
						"max": 1,
						"min": 0,
						"name": "Distort",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Dir X",
						"longdesc": "Displace X",
						"max": 1,
						"min": 0,
						"name": "DirX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Dir Y",
						"longdesc": "Displace Y",
						"max": 1,
						"min": 0,
						"name": "DirY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Dir Z",
						"longdesc": "Displace Z",
						"max": 1,
						"min": 0,
						"name": "DirZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Displace by Direction",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Bound": 0,
				"Correction": 0,
				"Distort": 0
			},
			"shader_model": {
				"code": "vec4 $(name_uv)_d = distortHeighByNormal_$name($uv.xyz);\n$(name_uv)_d.w = $(name_uv)_d.w/(1.0+$Distort*$Correction);",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D Displace",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.01,-0.01,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\n//By pauloFalcao\nvec4 distortHeighByNormal_$name(vec3 uv){\n    float d=$sdf(uv);\n\tif (d<=abs($Distort*($Bound+1.0))+0.01){\n\t\tvec3 n=normal_$name(uv);\n\t\tvec3 s=$tex3d(vec4(uv-d*n,0.0));\n\t    return vec4(s,$sdf(uv-n*s*$Distort));\n\t} else {\n\t\treturn vec4(vec3(0.0),d);\n\t}\n\n}",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nDisplace the height of a 3DSDF based on a TEX3D",
				"name": "SDF Displace Height",
				"outputs": [
					{
						"sdf3d": "$(name_uv)_d.w",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					},
					{
						"longdesc": "TEX3D at the original SDF3D surface before the displace",
						"shortdesc": "TEX3D Output",
						"tex3d": "$(name_uv)_d.xyz",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Displace",
						"max": 1,
						"min": 0,
						"name": "Distort",
						"shortdesc": "Displace amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 50,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Bound",
						"longdesc": "Keep this value as low as possible!\nOutside of the displacement the SDF is just the original SDF.\nThis value controls that bound.\nIncrease this correction value if the resulting SDF is not perfect on the edges.\nA higher value will increase ray marching loop iterations and will result in higher render times",
						"max": 1,
						"min": 0,
						"name": "Bound",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Displace Height"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Displace Height",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 6,
				"Smooth": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec3 sdf_smoothRot_X(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.y,p.z)*s)/(m+1.0))/s;\n  return vec3(p.x,sin(x)*length(p.yz),cos(x)*length(p.yz)-distance);\n}\n\nvec3 sdf_smoothRot_Y(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.x,p.z)*s)/(m+1.0))/s;\n  return vec3(sin(x)*length(p.xz),p.y,cos(x)*length(p.xz)-distance);\n}\n\nvec3 sdf_smoothRot_Z(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.x,p.y)*s)/(m+1.0))/s;\n  return vec3(sin(x)*length(p.xy),cos(x)*length(p.xy)-distance,p.z);\n}\n\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao, Gaz\n\nThis is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions. The technique was later improved by gaz.\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh\nGaz improvement https://www.shadertoy.com/view/7sKGzR",
				"name": "SDF Smooth Polar Repeat",
				"outputs": [
					{
						"sdf3d": "$in(sdf_smoothRot_$Axis($uv,$Repetitions,$Smooth,$Distance))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Polar repetition axis, objects will be repeated around this axis.",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 6,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1,
						"min": 0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Smooth Polar Repeat"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"mode": 5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror symmetry using the chosen axis",
				"name": "TEX3D Axis",
				"outputs": [
					{
						"shortdesc": "V4->V4 output",
						"tex3d": "vec3($mode)",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": 1,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "$uv.xyz"
							},
							{
								"name": "XY",
								"value": "$uv.xy,0.0"
							},
							{
								"name": "XZ",
								"value": "$uv.x,0.0,$uv.z"
							},
							{
								"name": "YZ",
								"value": "0.0,$uv.yz"
							},
							{
								"name": "X",
								"value": "$uv.x"
							},
							{
								"name": "Y",
								"value": "$uv.y"
							},
							{
								"name": "Z",
								"value": "$uv.z"
							}
						]
					}
				],
				"shortdesc": "TEX3D Axis"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/TEX3D Axis",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABRNJREFUeJztWr9P8lwYPS2lFMTww93/wUEJMUbjYCIkxsDCYOLE5GRCwsbioonGCScX42BMjJMBJv1j2AiDYCiBlvYbvtx+pbRwW25t3u/lJE/qW25Pn3Puc2/vbV8OgI6/GHzQCQSNlQFBJxA0VgYEnUDQWBkQdAJBY2UAa8JsNou9vT3WtMjn8zg+PmbOK7AiymQyCIfDCIVC4Hn2hZVMJqGqKk5PTzEej9FoNJjwMsk0m81CFEUIgmAEayQSCSSTSWxsbCCdTqNQKDDh5eDTXiCXy4HjOIRCIYiiiHA4DEEQ8Pz8PPe6arUKjuPAcZxxTtd1XF9f+5EmuyFgBc/zEEUR7+/vrq67ubmZ+vfV1RXLtGbgWwX8KfDlMVgqlZhz1ut15pwA4yFQKBQgSRJEUWRJCwCQJAmPj4/QdR3lcpkZr6sKyGazjr8Vi0VEo1FEIhFIkrR0YlZIkmTE09OTY7tKpeKKl9qATCbj+HgrFouQJMkQH4lEXCVBA8JN4uXlxbZdKpXC5eUlNS+1AWSRYwUp+0gkMhWsYeYmJry9vc20i8fjSKfT1LxUBmSzWYRCIVsDyJgnyYmi6MscQLitRlgRi8Wwvr6OWq1GxUtlgCAI4Hl+ZolbKpWMpIhwvwyw3of83Wq1ptpFo1Gsra0hkUhQ8bpeB+RyOfA8j4+Pj7nt7u7uplaA5EiCVJQ5iMkcxxlHsiLc3d2de79mswlFUXBycuJGjvvHIMdxVD1MxJMwiycGkCPP81MGmMVbl8VOiEQinjZhrq8IhUJUy1uz+HlBqmNRLMLh4aGnoee6AmhvYhZGMwTMVWAdAjQV4Ca3qTzdXkDTG6QdEet1CJAjLX7FANq9vlUwMYIIN1eBnQFeKsDLewjfdoOvr69LTYJWAzY3N/1I07/3AXYVQPsY9DoEPOXpF7GdQLNwqwnW3vcyBLzAVwPsyn1e71sXQ6QK/ITvFUCELYr/pQFm8ebSXmSA13WAF/zKHGAn2jre502Cf6QB88TZVUJQk6DrAVatVumIbQQtEzTodDpu5XjbDdK2s5azUzj97rYCfmU36CYZ80xuZ4jT7162w17h2xxgFWAn2Ol36zk/4ekhS/O5yirGLpx629rzNCb0ej0vUtwboOv0eyc7IXaiFomnMUDXdVe5GfcGxW4wn88jmUwikUjg4eHBOF+v141X1Oa3taIo4uDgwHUy80DEEaG6rkPTNEwmE0SjUaNdu92GLMvo9/vY3t5eyEtVAZqmQVVVTCaTqfMXFxczznvpBVpY76Pr+pR4AFBVFYqiQJZlKk4qA5rNJkajEVRVtU3KHNZEWcGpAqxQVRWj0Qj7+/tUvNRzwHg8xmg0mjlfLpehaRo0TZsxgiWswjVNm+l9ABiNRvj5+aHmpTag0Wg4ltX5+bmRFDGCNczCNU1z/AAry7Kr+YfpK7G3tzfjU9nR0RErWgD/ViAxwa7nl4HOOlqtFnPO4XDInBOAvvovMn4RN5tNfH5+Ls3T6/Xw/f3NICN7+LYXUBQFPM/j6+vL+KIrCAK2trbmXtfpdKZ2dYqi+Lq2YDIEKpUKUqkU4vE4YrEYotEozs7OGKT3H9rtNlRVNZ7zsixjZ2dnaV4mQ+D29hbdbhf9fh+DwQDD4ZAF7RRkWcZgMEC/30e322UiHmA4BO7v7wEAtVptZsnMAv1+H7IsU6/waLF6CgSdQNBYGRB0AkFjZUDQCQSNlQFBJxA0/noD/gFzEtfh4gFJUgAAAABJRU5ErkJggg==",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "TEX3D",
						"name": "in",
						"shortdesc": "SDF3D",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nTransforms a TEX3D making a mirror symmetry using the chosen axis",
				"name": "TEX3D Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "SDF3D output",
						"tex3d": "$in(vec3($mode))",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "TEX3D Axis Symmetry"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/TEX3D Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Scale": 1
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec3(0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nScales the TEX3D texture",
				"name": "TEX3D Scale",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$in($uv*$Scale)",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Scale",
						"longdesc": "Scale factor",
						"max": 10,
						"min": 0,
						"name": "Scale",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "TEX3D Scale"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/TEX3D Scale",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"brightness": 0,
				"clamp": 0,
				"contrast": 1
			},
			"shader_model": {
				"code": "vec3 $(name_uv)_bc = vec3($in($uv)*$contrast+vec3($brightness)+0.5-$contrast*0.5);",
				"global": "",
				"inputs": [
					{
						"default": "vec3(0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nChanges TEX3D brightness and contrast",
				"name": "TEX3D Brightness and Contrast",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$clamp",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Brightness",
						"longdesc": "Brightness amount",
						"max": 1,
						"min": -1,
						"name": "brightness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Contrast",
						"longdesc": "Contrast amount",
						"max": 2,
						"min": 0,
						"name": "contrast",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "Clamp",
						"longdesc": "Clamp values between 0 and 1",
						"name": "clamp",
						"type": "enum",
						"values": [
							{
								"name": "true",
								"value": "clamp($(name_uv)_bc,vec3(0),vec3(1))"
							},
							{
								"name": "false",
								"value": "$(name_uv)_bc"
							}
						]
					}
				]
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/TEX3D Brightness and Contrast",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAA+BJREFUeJztWttuozAQHcDY/aAIRPrQVqpUqb/cx/5NqjwhIe7sw2roxNjGyTZmss2RLAgQ7HPmeDyQRAAwwS9GvPUAtsZdgK0HsDXuAmw9gK3x6wUQITrZ7/eQJAnEcQxRFM1bbCZ8fHyEGNr1BCiKApIkmYlT0rgPAE4RQuDHBSiKAoQQM2naaNSpGPr5kPgxAfI8hzRNTyJuIy+EACHEiUOSJFmdFtfAjwiAUdctT+d8HMeQpulMnl5vyg+h8E8C7HY7UEotiFDySZKAlHImjy4xCbDFNLhYgCzLZlI28lLKmTw2Gn3MFabvhsJFAmRZBlJKa+SFEDN5kwAuB7AXYLfbndhYj2CapqCUMpLXHXCTAiilZgI6eSklPDw8OKNvSoL6fdgKQIsbPXsrpWby6IA0TRcJ8GanQJ7n1oSH5JVSC/tLKU/I36wDcN7r5NH2SN42/89xQByHe0bzEsBU12PCo7an5F0JcC0JshPAVNsLIWbCOvH/ygFFURjrehNhnbwpAdocwDYHuCo8m9UpedcSaFtOWTlAjwzW9pSgS4g1AZA8SwH2+/3C/jaiaHPTZ58pQF3AZgro0cfMbyNv2rpqAPZTQH+R4Yq0jTxt9BnCVQixEUB/feUi59N08jfhAHSBaeC2Y/ScSwxXMRQKVgEeHx+N7/HWiJqKHGz0OPtCiL6awuXPNnhbcznEtQqwEgCzv2mwPs33WnYCIOhb3bWBu8hTe6/dJ2QdYJX68/Pz+yJDlqZkTOfXXGC7D+6HgpfXbL/k+DaXeFsnwbMEoBXhtVsoePdk+l1v7Xc+076pmc6HgrOncRwXx1zE9WM256ydDylABEz/Jte27cmKEEURTNPfoU7TBNM0wTiOMI4jDMMAwzBA13XQdR00TQNVVUFZlpDnubOfIH+QuAR6IUa3+jX0OBWn67rVflgLgFudIAUSpg0dUdf1aj+s/yPkWxBR8jgl2raF19fX1e+yFsAUbbpvIt73PXRdB1VVefXBdgpQ2IhjEqTJsO97aJoGnp6evO7NVgA9+vS4jTiuAGVZevdzUwKYIk/Jt20LVVXB8/Ozdz+sBZimabECUPJInJLPsuysftgKgFWoXgDRyOuFz+FwOLsftgIMwwAA3wLYsj2SPx6P8Pb2dnY/bAXo+362vz739Tl/PB7h5eXlon5YC4DQKzxK/nA4XBR5BFsBsI6n0e/7fl7nL0l4JrAVoGkaAIBF5HGdP2epc4GtAHVdn2R8tLxvhecLtgKUZTk/0tZ17fVgcwnYCvD19QXv7+9X74ftG6FQYP04HAJ3AbYewNa4C7D1ALbGrxfgD7hpBE5IUx6AAAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"x": 0,
				"y": 0,
				"z": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nTranslates the input TEX3D",
				"name": "TEX3D Translate",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$in($uv-vec4($x, $y, $z,0.0))",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 0,
						"label": "X",
						"max": 1,
						"min": -1,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "P1.y",
						"default": 0,
						"label": "Y",
						"max": 1,
						"min": -1,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"max": 1,
						"min": -1,
						"name": "z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "TEX3D Translate"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/TEX3D Translate",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"color": {
					"a": 1,
					"b": 0,
					"g": 0,
					"r": 1,
					"type": "Color"
				}
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
				"name": "TEX3D Color",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "$color.xyz",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"default": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1
						},
						"label": "Color",
						"name": "color",
						"type": "color"
					}
				],
				"shortdesc": "TEX3D Color"
			},
			"tree_item": "PauloFalcao/TEX3D/Generator/TEX3D Color",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"angle": 0,
				"axis": 1,
				"correction": 0
			},
			"shader_model": {
				"code": "",
				"global": "vec2 twist_rot(vec2 v, float a) {\n\ta=a*0.01745329251;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(vec2(c, -s),vec2(s, c));\n\treturn m * v;\n}\n\nvec3 twistX(vec3 v, float a){\n\tv.yz=twist_rot(v.yz,v.x*a);\n\treturn v;\n}\n\nvec3 twistY(vec3 v, float a){\n\tv.xz=twist_rot(v.xz,v.y*a);\n\treturn v;\n}\n\nvec3 twistZ(vec3 v, float a){\n\tv.xy=twist_rot(v.xy,v.z*a);\n\treturn v;\n}\n\n",
				"inputs": [
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTwist a SDF3D on the specified axis by an angle.",
				"name": "SDF Twist",
				"outputs": [
					{
						"sdf3d": "$in(twist$axis($uv,$angle))/(1.0+$correction)",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "Angle1.a",
						"default": 0,
						"label": "Angle",
						"max": 360,
						"min": -360,
						"name": "angle",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 5,
						"min": 0,
						"name": "correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Twist"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Twist",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"iterations": 4,
				"mode": 1
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "SDF3D",
						"longdesc": "The object that will be repeated",
						"name": "obj3d",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					},
					{
						"default": "vec4(0.0)",
						"function": true,
						"label": "V4->V4 3D Transformation",
						"longdesc": "The transformation that will be applied each iteration",
						"name": "trans3d",
						"shortdesc": "V4->V4 Transformation",
						"type": "v4v4"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"function": true,
						"label": "SDF2D Custom Boolean",
						"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
						"name": "custombool",
						"shortdesc": "SDF2D Join",
						"type": "sdf2d"
					}
				],
				"instance": "float for_fold_$name(vec4 p) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  return $obj3d(p.xyz)/p.w;\n}\n\nfloat for_min_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=min(999999.0,d);\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=min(m,d/p.w);\n  }\n  return m;\n}\n\nfloat for_custom_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=$custombool(vec2(999999.0,d));\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=$custombool(vec2(m,d/p.w));\n  }\n  return m;\n}",
				"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
				"name": "SDF Fractal",
				"outputs": [
					{
						"sdf3d": "$mode",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 24,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "17",
								"value": "17"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "19",
								"value": "19"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "22",
								"value": "22"
							},
							{
								"name": "23",
								"value": "23"
							},
							{
								"name": "24",
								"value": "24"
							}
						]
					},
					{
						"default": 0,
						"label": "Mode",
						"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Fold",
								"value": "for_fold_$name(vec4($uv,1.0))"
							},
							{
								"name": "Min",
								"value": "for_min_$name(vec4($uv,1.0))"
							},
							{
								"name": "Custom",
								"value": "for_custom_$name(vec4($uv,1.0))"
							}
						]
					}
				],
				"shortdesc": "SDF Fractal"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Fractal",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
				"name": "V4V4 Axis",
				"outputs": [
					{
						"shortdesc": "V4->V4 Coordinates Output",
						"type": "v4v4",
						"v4v4": "$uv"
					}
				],
				"parameters": [

				],
				"shortdesc": "V4V4 Axis"
			},
			"tree_item": "PauloFalcao/V4->V4/Generator/V4V4 Axis",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"x": 0,
				"y": 0,
				"z": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTranslates the input V4->V4 Coordinates",
				"name": "MFSDF Translate",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4($uv.xyz-vec3($x, $y, $z),$uv.w))"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 0,
						"label": "X",
						"max": 1,
						"min": -1,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "P1.y",
						"default": 0,
						"label": "Y",
						"max": 1,
						"min": -1,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"max": 1,
						"min": -1,
						"name": "z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Translate"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Translate",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"mode": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror symmetry using the chosen axis",
				"name": "MFSDF Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "SDF3D output",
						"type": "v4v4",
						"v4v4": "$in(vec4(vec3($mode),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "abs($uv.xyz)"
							},
							{
								"name": "XY",
								"value": "abs($uv.xy),$uv.z"
							},
							{
								"name": "XZ",
								"value": "abs($uv.x),$uv.y,abs($uv.z)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,abs($uv.yz)"
							},
							{
								"name": "X",
								"value": "abs($uv.x),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,abs($uv.y),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,abs($uv.z)"
							}
						]
					}
				],
				"shortdesc": "MFSDF Axis Symmetry"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"mode": 0,
				"smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "V4->V4",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror smooth symmetry using the chosen axis",
				"name": "MFSDF Smooth Axis Symmetry",
				"outputs": [
					{
						"shortdesc": "V4->V4 output",
						"type": "v4v4",
						"v4v4": "$in(vec4(vec3($mode),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XYZ",
								"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
							},
							{
								"name": "XY",
								"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
							},
							{
								"name": "XZ",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							},
							{
								"name": "YZ",
								"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
							},
							{
								"name": "X",
								"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
							},
							{
								"name": "Y",
								"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smooth amount",
						"max": 1,
						"min": 0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Axis Symmetry"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAAEXtJREFUaIGFWk2TZMdVPedmvqqe77YlOYwt7AEZs2MhLCwh2YMlI4LgI4IIIliw5ZfwW9ixIAgWDtsIg/GXWLDRgiBsbGksCWk0mpFmpqe76mXew+Jm5nvVMzIvKrqrq97LvJ/nnnuz+bd/85ckzSybFXdJtbrLS3USBOdaCbq8lOoCiWRGEkCpdT+X6g5AgruDSGYAALg7SQHGWAlTTlNOieZQMktmkqacppwlkZTkEgRAZpaSefV9qaXWuMH717X6bp5dyLGfuz/Y7Uv1uZa51JBMghnj7rY0SMJIEBDMOJcKQJKZSaheASRLJAAkM0GJ5lJKhlly5ZymnLZTJklQUOk2iqfcRaKWsp8BwmhGiqzugowWRjQzQfnDew8kVff9XKoLaEIns/1cyJTM0tSMGkYKoc0oKKdk5DRlAmaMP80MUHVJIgBSUvgt3kxTCh+CoLib51I9PJmM4RAzgySh+BzuIhCGK+4AcjKSuZQqyIX4yIwEq3upHgtFJIQCOdsmpwvbTSxFMwJTTmY0GiCjmVECiHku1eXyEV0RCXMpu7kFbc5GMKeUUyIhtdgDaaRLAFJKORkEyyk+ZGVo6678cLeXFNbtP0XQ3Z0gSCJbyslohCBAUk4pnEDSyJxSMnMpYouEpJTMVSnSAFj7wmgtckCyFM85uXupLoigGaecYtlKSm21Wr1Ud6npAGymbMack4WDUrKULIIy4j5CJedkZK1OMoIkfBeP5GQACbhkQKQKQYAAUjIzGVsEIm4FJJRaBSS2rXOWpFJd0tl+DlMa2QMPNCaYSQAMJOESHPmp46sud5d19Ci1ujdwMGOLPwJgMsvJwIY5pdazUgUYkVKKu91DB1hsSkpNOHevgSMCAEFVqu4sGBAUj0eqIJmX2sJAAgKfIIhkMrqU7z08DThrRg1QkiIt6EQKvSRhDnxUu/ZzjWxLRhCSAriyJQZYID6UkSBdcvcQEVKV1MW1gAuzKaXUlyKYcvgVLoFMfc1IgAihNOU0wDssYWQEXDikeoNRIyPuJbg3c5Raq7f0IakKqJroZFjNXfF4y1F5hFDAQEMqo5lNOeWUCEQhqu4utxauzZDGlq0pmZE54jughmhGiluMdPe5uoAoRVVOoyS2nJfRQIF0D/CIT6JSgER1xJpRgYhWBzdTrvEMmkS1Vnc/0z5iIVKIYGAcBDKqkKVkyQhQUt7NM4AA3RrZAERS1oZDLQgJmBkVcEKIxuY1Iy0la7UGpbibBriRzDlBcCmEaOolg1kZahjNbAQeiFI9/rT2nCjCRHepKZl3+xKw01Il6i66jYlEs+5oAc2YLS1gAYu9UCyR5oyqmRIjvmO/KJoSqjuBMHaD/HAUGW+DgwQGwEGwg55cCPsTyI15CPHUEK6LBJe8Vvb3AdXdM3CX2KqsyyH0YojERpncPbB8lJpkzGnB1gCfQJoouBACBsIiUYZpzeocwE3mudQwYTJDmKLrMG6t7pHIUQroHCUsWUsmM0s2dREB8Pq/vYWeKxHnEs7c9/X+nZPb9uffaIoCBjF1GJVC1nDoKAXh6ubG7u1aPQcENRh2RXx3HVgbcINkNut8hGY0s8T2xvqb3T++9uVrX4oIhy3ahJMBXDA7smtXj6/h+zdH4AHYnO2S2cdTfu/GF8eHIzhDeYfkTtIIFyCByKHHUIsMVtOiUGKHGSazMEPEiNSAU9L22z/4/KXrIHj8pZXvFvmA8WfU6XblWi+WeiQdQbnMv747+63X/uetlN688UUIooYa7Dnq8rpC5DwqV2ggocobeDdJENYd2wbOpmRXvvXvn7v2mwBx+XrIvIjapV87AQRhwSg3Jw8vm22lDZRrTe4JMODo9PS3L17cfP/mT7/+BfQ8Zo9AcAnvWC+3BOhWamAqT6kFnzevRZQbgOPv/OAzl68DxPEzOLdej/iVyQdPBAB7eHbZeOS+NeZaUq1JCtENCISfSvk8+f63Xj/9s9/vBX1ZrWkDyVXdc84pTB30KHqubGlAI82iq3jquz968spvAMLl6xLIhhVDykXaBaWGatienF4ybuSbqlSayVN4GEg5kQYzkC5crP70hc/+PKUoTCQTG1oMcgVDkuVe1JqmgcfBmdWshmd/+M7VZOX4mULOQEnp4W7fvmtwvdDxETctyk/PLhmP3DdQmufsSpIBBlkQiJRA0FKILqFKKvVCyGU2UtkbFW2lO/AyR4xZZxiJFokyTPqNH759cTM54UAVqlS8lpz2tRZwJjyl/UDerhX3u4vCBWgrz7PnESpS8G+jWTKQtCTASQeqVCU3w3Yy8oO///Zn/+qPY9lhpYjnaMNJ5k3OPb2iwYIkKoViz3/vF8ekOssRGTu5VI1VqFBxL+6zFK8sHZlt3Cf37DVVT0C3OkhwEd1cEM2l6qqCJ8NmKsB8dvvs9C7INOqdmpACekUyd8+pRRDXIRGI9OQ/fPepa88kMhgEHBGjAhwQ6JSLTlQzB+i+nfdWq7vvhSS3bnJDsxyTgQZSpMyqq7pXAVPylApZTm/tzu7NRKVlqJderKMIgCBJ1ZWjBkXArEgNAH5hugihlkrCgs1qlBIqqFG8SPN6tN/Zw9OgTXvXPiV0/hgoBhqMAkWrkhevBKZcyWI2P3h3P58Us4ZXRK5DXKz5wcjPZIy2HWYwS50UtHKb5zO/bJQkyD1iLtJFnYqN1S+d7bbzPgBRwB7YQ6eWGM2OEWaCxXSkenUzbDeVKGQ5eXe3O5lj2067KaW10CO/Qp72A5lGgj2H0Uc+AOTwszs/S5uL+cI1pEvB/ugOYZQXuVM4quUCtE0pR39ATK4M0OzMDGaiuVDcHZAZj7bFVY3l5J3d/uFeK8RdIVkmjBTkrhhDLCESIE7kKSX2UpcWugeSD4AM5fKQHz3IZmm6kI+uIF+FO4PQulOi2dZtY7ZNNpkZKWMqVaUWYGdpFmqtTioZNpsiVXI+uTn7vG8NzSPBARqZWto2HqElATBwO0+5I2kbSAGtGeB7YKI2QDaafCqnvHcy2QdM27y9jM1xMPcLZjlpStvJOCXLOdXqztkEloqqPaGcsZkqUMj54zf3PpdhdPUWf6EdUQWV2RtXNc7vcg48IATkdZC5++ovfEh+RpgFgpNxAjNt7579NM2nOX1ITml7WenTTEnunKY0TdunP1c+vLP7+J6Ki2JKPuUKeLm3e3B7lhcsMg1rHsylEKmlBEaHGNKz94JjNgMojwZP0Y9075B84q//FH/3T+GRGZghABuzicgAq2fu7OFus3tQrn3Rk83udNd779fq3G6NTNVRq5d7Zye3d17LARPDMPXyu6dfKJGI6lqT2sFMxwK5EzCKC9Eda+2g7SD0AIgdFDnXfYLTsju6+9M8XUhXnpRfmfezgNl95352/93Ts3unxMNh67HzAVE6VKlHQQLKwon7PGKEXswIA7Rsxb2ivYTkrhNye7D6eJh7YB91ymwj53xWPvzlJqeUcy21EKdzOSNrMgQKQwsWHggtgNBoFBZFUx/VjNRAa/nbAgSyu8xiZtE7HzSMre4fkk8c0pxz2jh4ChzBUGshi7vt5xYVyUwwgi21+PglHmOdrkALIfU6i5Ho7JS9kT1BLnn10l415ln2F394fsfx6kIVoBJqi/TZBtoeHPwxWHYvIOBKHy4WPthE2s/zfi6lxOxKLo/RT+u3pOxSq7V9KLKemwCYgenQ22PTeF9jHAZ4L5BAn0FIcBlHWj5yccSCVqZvn5lrLjVYn/mKWLfhO0jmNlBRG2KuhhLtwxPi+DHocXBVQEbV3ml0QOdotaINXyReDBKwszZL/0LWh97uENtYDABjAEgCygP7YzizMmGkMe4Ax4+z3foqoEMuKeolgxAxph2UjNTS5bQ5M4eph1WaQs2IfUTU7owYic/cGdM68xZWYxIYRTB4p+Q6+ZMbj0rcx+PNcQXyVRCMiMSYs69o5YImQ/qVXuvLWpy3eZF7G9BXV0vUUnN1tz604BjR4WC85cAyRjvQYXgAFZHHfUzZqyslI2zpT8893by9UqDZIPSyNmlUbecm8aT3WS9zhGoPmujruwX7JifCVZ7feX0VwAEPBeRQ6rAiAwl1/UeId2p8sGKjPKMas0/w25i+O0TDOmTu9wKAr1BI/TTEpbvEVQwRHqODgBIeaAmAYC30nsdaxQkPV+Ei47CQoAreSVZi6NbnDIuwnU8ERkf/EHEfkR+Q67V6KX7r1RfXsj72qtErRyFcwSkhC0BdB6f6OVPP2nPLn7hukf8pVI9jjiWkB1+IKzci1A97VoK246pD+3ziVQEnJKrVAHZaDiNNoHXp9IlWAFCA+8CdKd80e+qVF9oZBZaKsaQrAKmNFquLoihocS9JIyS6+wlw6ZP2FAAUwluzv5AeEtH6RDXwxzhwsE8AOKl+P6VbyX5R/dOvfLV3YSHxwKvV4Wv0A+fiD73KMoorBPDuJynQH5mFCopr8FJMc1opEOq5Z8ZFVNd94G7O7ySrN547bkceTZTEblG0It9hUu1UtNOMVawNW0oA3n/1xYfn9tWBJA5UNEKxcE61jDXSRrVXS5TxOil+m3gn2RvE/PWvOJYb0XKexv5qjIJGkMzjBHJFgboTguESBgn8rz968env/OhYvn0sq4k8lnQQFgoPGGlY+t3xtUv3gY+y/a+lB1979iLoEsPwS+8VWbhkQodiQrIufUeJrjfGWLv3QCTffvXFn5vdIQoObQgBqoCjz4u0VH92TnHoO526fwC8m+wN8v5Lz3aUb04fb5oGK5rRUjR8uwanR4ldK6zNZTTi9NUXX5dumn0MjA46rgI6FyQdnjTCelVqhVS4J3yQ7GZO/119+7WvDMcPkEFvTVzyHssLzeh350X+CBp1/w7cXeI5jKGnXn3ptvs7r/34OvAp1+UeUHt5d8JCHAI+Qoe4zoT7wB2ztwi+9LuXeqfCfp67kI5elN0B+ggGtuNaAsid+S5uCOEbDC11/UAlGjevvPC2++1//Y9fc78mXCAqUAURcUyLHuwhWYyX70H3aLfIX0qXbjw3THTYqh/ARRzwOobcoW3Lz2zGwRxGj7LkDg991x1niIGt7V9+/k3p+HuvP1n9KlBX0kcSjIHfHrgL3DZ7m/Qbz13G/3Ot2J/aIXUUgBBUIAUxxz8qOd0i2QdErPJhXcnH1XUVwI9e/uqbr/3kywBdiUhtwi0R++ontd4jb5vdJN4Cr/zB79nw92OK/NB+TfXW+Di+IaFsbZhO73Ay8MhXCbN28BgyCS2RCRy/8vwt4b1/+cnvVH9SukROgIC9/IS8a/Ym8NHLz1/runf2rkEcD8zfQHj1VUBjOKFjKMZkjujs4kDlhqeGg/Bcp/i4rVWMl59/A/jUP//4iVqPJJI74C7wM+nKN18YcDyCNeYJ7Tx1gOWYjBwodiADFTGE3KNl7TwCMkCwFnFrwxxy+DgoWLmXEj765gt3OhCHAy8tc52RhUOutocieZZu5FcRyKFDHv3fgQiMXkoNPRebxycNY9oge2G4o9wsZH1Ma7lUxvPStHBgP7g7J3xs3LbVuefzuYXWvwfji4SKGHMoju6F5sQufQtLB9DuaRg0DL+egK76rgNBgUfMv64KXQ+y+S1jhZ5rgzY86icm47KgnGprjXgaTjS01qz3LCs+vELnxt2H39bEoVnkQJ61Q8SFq+TeGwzoXzTR+iEQ8d/BvQGSApTV/NNVbdIvJElcBoNj6dCAPshBB1QdGqwF8XkdRkAgnwspDpOsZ2ZqmYGW4VA0X7GQoOX0pFM40l39fzjXZmwtydoLwqpQdnesPMGhw+qL5r28rN1Ne874A3wPTYioJP0h+nBU/xn/wjv+EWaRoRtiYayLRF3EvkUvWVgN/7FezgYR4Sj6o8pi+WCMZtfO6tT8EVjphQUdfw6tdwDE4/mDVRbpAZzPwwUywbxukJcqHRr3rOp2xqoChlF+NVijV9uOyYftXofcYQ2g40zXqMffORP1R0j8H6VqnIU/OiY7AAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"ax": 0,
				"ay": 0,
				"az": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nRotates a V4->V4\nAdapted from RodZilla TEX3D Rotate",
				"name": "MFSDF Rotate",
				"outputs": [
					{
						"shortdesc": "V4->V4 Ouput",
						"type": "v4v4",
						"v4v4": "$in(vec4(v4v4_rotate($uv.xyz, -vec3($ax, $ay, $az)*0.01745329251), $uv.w))"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "X",
						"longdesc": "The rotation around the X axis",
						"max": 180,
						"min": -180,
						"name": "ax",
						"shortdesc": "Rotate.x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Y",
						"longdesc": "The rotation around the Y axis",
						"max": 180,
						"min": -180,
						"name": "ay",
						"shortdesc": "Rotate.y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"longdesc": "The rotation around the Z axis",
						"max": 180,
						"min": -180,
						"name": "az",
						"shortdesc": "Rotate.z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Rotate"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Rotate",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_sphere",
					"from_port": 0,
					"to": "pxflib_18",
					"to_port": 0
				},
				{
					"from": "pxflib_10",
					"from_port": 0,
					"to": "pxflib_9",
					"to_port": 0
				},
				{
					"from": "pxflib_9",
					"from_port": 0,
					"to": "pxflib_8",
					"to_port": 0
				},
				{
					"from": "pxflib_8",
					"from_port": 0,
					"to": "pxflib_7",
					"to_port": 0
				},
				{
					"from": "sdsmoothboolean",
					"from_port": 0,
					"to": "pxflib_18",
					"to_port": 2
				},
				{
					"from": "pxflib_7",
					"from_port": 0,
					"to": "pxflib_18",
					"to_port": 1
				},
				{
					"from": "pxflib_18",
					"from_port": 0,
					"to": "sdf3d_rotate_2",
					"to_port": 0
				},
				{
					"from": "pxflib_11",
					"from_port": 0,
					"to": "pxflib_10",
					"to_port": 0
				},
				{
					"from": "sdf3d_rotate_2",
					"from_port": 0,
					"to": "pxflib_12",
					"to_port": 0
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"name": "sdf3d_sphere",
					"node_position": {
						"x": -333.484985,
						"y": -293.11499
					},
					"parameters": {
						"r": 0.45
					},
					"type": "sdf3d_sphere"
				},
				{
					"name": "sdsmoothboolean",
					"node_position": {
						"x": 16.514984,
						"y": 43.88501
					},
					"parameters": {
						"k": 0.01
					},
					"shader_model": {
						"code": "",
						"global": "float sdSmoothXYUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - SDF2D Operator\nCode - IQ, RodZilla\n\nReturns a 2D SDF of a smooth boolean operation (union, intersection and difference) between the X axis and the Y axis\n\nBased of the original sdSmoothBoolean with X axis and Y axis for input",
						"name": "Smooth Union XY",
						"outputs": [
							{
								"longdesc": "The shape generated by the boolean operation",
								"sdf2d": "sdSmoothXYUnion($uv.x, $uv.y, $k)",
								"shortdesc": "Output",
								"type": "sdf2d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "The smoothness of the boolean operation",
								"max": 1,
								"min": 0,
								"name": "k",
								"shortdesc": "Smoothness",
								"step": 0.0001,
								"type": "float"
							}
						],
						"shortdesc": "Smooth Union XY"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_rotate_2",
					"node_position": {
						"x": 441.514954,
						"y": -148.115005
					},
					"parameters": {
						"ax": "$time*13.0",
						"ay": "$time*23.0",
						"az": "$time*17.0"
					},
					"type": "sdf3d_rotate"
				},
				{
					"name": "pxflib_4",
					"node_position": {
						"x": -332.484985,
						"y": 216.88501
					},
					"parameters": {
						"mode": 0,
						"smooth": "sin($time*0.2)*0.1+0.1"
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "V4->V4",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTransforms a V4->V4 making a mirror smooth symmetry using the chosen axis",
						"name": "Smooth Axis Symmetry",
						"outputs": [
							{
								"shortdesc": "V4->V4 output",
								"type": "v4v4",
								"v4v4": "$in(vec4(vec3($mode),$uv.w))"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Axis",
								"longdesc": "Axis",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "XYZ",
										"value": "sqrt($uv.xyz*$uv.xyz+$smooth)"
									},
									{
										"name": "XY",
										"value": "sqrt($uv.xy*$uv.xy+$smooth),$uv.z"
									},
									{
										"name": "XZ",
										"value": "sqrt($uv.x*$uv.x+$smooth),$uv.y,sqrt($uv.z*$uv.z+$smooth)"
									},
									{
										"name": "YZ",
										"value": "$uv.x,sqrt($uv.yz*$uv.yz+$smooth)"
									},
									{
										"name": "X",
										"value": "sqrt($uv.x*$uv.x+$smooth),$uv.yz"
									},
									{
										"name": "Y",
										"value": "$uv.x,sqrt($uv.y*$uv.y+$smooth),$uv.z"
									},
									{
										"name": "Z",
										"value": "$uv.x,$uv.y,sqrt($uv.z*$uv.z+$smooth)"
									}
								]
							},
							{
								"control": "None",
								"default": 0,
								"label": "Smooth",
								"longdesc": "Smooth amount",
								"max": 1,
								"min": 0,
								"name": "smooth",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Smooth Axis Symmetry"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -336.484985,
						"y": 114.88501
					},
					"parameters": {
						"ax": -20,
						"ay": 30,
						"az": -20
					},
					"shader_model": {
						"code": "",
						"global": "vec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nRotates a V4->V4\nAdapted from RodZilla TEX3D Rotate",
						"name": "Rotate",
						"outputs": [
							{
								"shortdesc": "V4->V4 Ouput",
								"type": "v4v4",
								"v4v4": "$in(vec4(v4v4_rotate($uv.xyz, -vec3($ax, $ay, $az)*0.01745329251), $uv.w))"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"longdesc": "The rotation around the X axis",
								"max": 180,
								"min": -180,
								"name": "ax",
								"shortdesc": "Rotate.x",
								"step": 1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"longdesc": "The rotation around the Y axis",
								"max": 180,
								"min": -180,
								"name": "ay",
								"shortdesc": "Rotate.y",
								"step": 1,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"longdesc": "The rotation around the Z axis",
								"max": 180,
								"min": -180,
								"name": "az",
								"shortdesc": "Rotate.z",
								"step": 1,
								"type": "float"
							}
						],
						"shortdesc": "V4->V4 Rotate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -335.484985,
						"y": 13.88501
					},
					"parameters": {
						"x": 0.5,
						"y": 0.5,
						"z": 0.5
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "vec4(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nTranslates the input V4->V4 Coordinates",
						"name": "Translate",
						"outputs": [
							{
								"shortdesc": "V4->V4 Output",
								"type": "v4v4",
								"v4v4": "$in(vec4($uv.xyz-vec3($x, $y, $z),$uv.w))"
							}
						],
						"parameters": [
							{
								"control": "P1.x",
								"default": 0,
								"label": "X",
								"max": 1,
								"min": -1,
								"name": "x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "P1.y",
								"default": 0,
								"label": "Y",
								"max": 1,
								"min": -1,
								"name": "y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 1,
								"min": -1,
								"name": "z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Translate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_8",
					"node_position": {
						"x": -335.484985,
						"y": -135.115005
					},
					"parameters": {
						"mode": 1,
						"x": 1,
						"xyz": 0.327,
						"y": 1,
						"z": 1
					},
					"shader_model": {
						"code": "vec4 o_$name_uv=$in(vec4($uv.xyz/vec3($x, $y, $z)/$xyz,$uv.w));",
						"global": "",
						"inputs": [
							{
								"default": "vec4(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nScales the input V4->V4 Coordinates",
						"name": "Scale",
						"outputs": [
							{
								"shortdesc": "V4->V4 Output",
								"type": "v4v4",
								"v4v4": "$mode"
							}
						],
						"parameters": [
							{
								"control": "P1.x",
								"default": 1,
								"label": "XYZ",
								"longdesc": "Scales all axis",
								"max": 1,
								"min": -1,
								"name": "xyz",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "X",
								"longdesc": "Scale X axis",
								"max": 1,
								"min": -1,
								"name": "x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Y",
								"longdesc": "Scale Y axis",
								"max": 1,
								"min": -1,
								"name": "y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Z",
								"longdesc": "Scale Z axis",
								"max": 1,
								"min": -1,
								"name": "z",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1,
								"label": "Mode",
								"longdesc": "- Multi-Field SDF mode is the default mode used for scaling Multi-Field SDF objecta.\n- Coordinates Transformation is the mode that should be used for coordinates transformations operations, like in the fractal node input V4->V4 3D Transformation",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Multi-Field SDF (def. mode)",
										"value": "vec4(o_$name_uv.xyz,o_$name_uv.w*min(min($x, $y), $z)*$xyz)"
									},
									{
										"name": "Coordinates Transformation",
										"value": "vec4(o_$name_uv.xyz,$uv.w/min(min($x, $y), $z)/$xyz)"
									}
								]
							}
						],
						"shortdesc": "Translate"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -334.484985,
						"y": -183.115005
					},
					"parameters": {

					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
						"name": "Axis",
						"outputs": [
							{
								"shortdesc": "V4->V4 Coordinates Output",
								"type": "v4v4",
								"v4v4": "$uv"
							}
						],
						"parameters": [

						],
						"shortdesc": "Axis"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_18",
					"node_position": {
						"x": 41.86496,
						"y": -179.465012
					},
					"parameters": {
						"iterations": 6,
						"mode": 2
					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "SDF3D",
								"longdesc": "The object that will be repeated",
								"name": "obj3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							},
							{
								"default": "vec4(0.0)",
								"function": true,
								"label": "V4->V4 3D Transformation",
								"longdesc": "The transformation that will be applied each iteration",
								"name": "trans3d",
								"shortdesc": "V4->V4 Transformation",
								"type": "v4v4"
							},
							{
								"default": "min($uv.x,$uv.y)",
								"function": true,
								"label": "SDF2D Custom Boolean",
								"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
								"name": "custombool",
								"shortdesc": "SDF2D Join",
								"type": "sdf2d"
							}
						],
						"instance": "float for_fold_$name(vec4 p) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  return $obj3d(p.xyz)/p.w;\n}\n\nfloat for_min_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=min(999999.0,d);\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=min(m,d/p.w);\n  }\n  return m;\n}\n\nfloat for_custom_$name(vec4 p) {\n  float d=$obj3d(p.xyz);\n  float m=$custombool(vec2(999999.0,d));\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(p.xyz);\n\tm=$custombool(vec2(m,d/p.w));\n  }\n  return m;\n}",
						"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "Fractal",
						"outputs": [
							{
								"sdf3d": "$mode",
								"shortdesc": "SDF3D Output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 24,
								"label": "Iterations",
								"longdesc": "Number of Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "0",
										"value": "0"
									},
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "17",
										"value": "17"
									},
									{
										"name": "18",
										"value": "18"
									},
									{
										"name": "19",
										"value": "19"
									},
									{
										"name": "20",
										"value": "20"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "22",
										"value": "22"
									},
									{
										"name": "23",
										"value": "23"
									},
									{
										"name": "24",
										"value": "24"
									}
								]
							},
							{
								"default": 0,
								"label": "Mode",
								"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Fold",
										"value": "for_fold_$name(vec4($uv,1.0))"
									},
									{
										"name": "Min",
										"value": "for_min_$name(vec4($uv,1.0))"
									},
									{
										"name": "Custom",
										"value": "for_custom_$name(vec4($uv,1.0))"
									}
								]
							}
						],
						"shortdesc": "Fractal"
					},
					"type": "shader"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": 395.515015,
						"y": -34.114998
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 0.199,
						"CamD": 1.5,
						"CamX": "sin(sin($time*0.3)*0.5+0.5)*4.0",
						"CamY": 1.974,
						"CamZ": "cos(cos($time*0.2)*0.5+0.5)*4.0",
						"CamZoom": 1.003,
						"LookAtX": 0,
						"LookAtY": 0,
						"LookAtZ": 0,
						"Pow": 64,
						"Reflection": 0.2,
						"Shadow": 1,
						"Specular": 0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1
					},
					"shader_model": {
						"code": "",
						"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D A",
								"name": "sdf_a",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.1,0.1)",
								"function": true,
								"label": "TEX3D A",
								"name": "tex3d_a",
								"shortdesc": "TEX3D A",
								"type": "tex3d"
							},
							{
								"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
								"function": true,
								"label": "SDF3D B",
								"name": "sdf_b",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
								"function": true,
								"label": "TEX3D B",
								"name": "tex3d_b",
								"shortdesc": "TEX3D B",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "Ray Marching 360 HDRI Image",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1,
								"min": 0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024,
								"min": 0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Fractal Example"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"mode": 0,
				"x": 1,
				"xyz": 1,
				"y": 1,
				"z": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "vec4 o_$name_uv=$in(vec4($uv.xyz/vec3($x, $y, $z)/$xyz,$uv.w));",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nScales the input V4->V4 Coordinates",
				"name": "MFSDF Scale",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$mode"
					}
				],
				"parameters": [
					{
						"control": "P1.x",
						"default": 1,
						"label": "XYZ",
						"longdesc": "Scales all axis",
						"max": 1,
						"min": -1,
						"name": "xyz",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "X",
						"longdesc": "Scale X axis",
						"max": 1,
						"min": -1,
						"name": "x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Y",
						"longdesc": "Scale Y axis",
						"max": 1,
						"min": -1,
						"name": "y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Z",
						"longdesc": "Scale Z axis",
						"max": 1,
						"min": -1,
						"name": "z",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "Mode",
						"longdesc": "- Multi-Field SDF mode is the default mode used for scaling Multi-Field SDF objects.\n- Coordinates Transformation is the mode that should be used for coordinates transformations operations, like in the fractal node input V4->V4 3D Transformation",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "MFSDF",
								"value": "vec4(o_$name_uv.xyz,o_$name_uv.w*min(min($x, $y), $z)*$xyz)"
							},
							{
								"name": "Transformation",
								"value": "vec4(o_$name_uv.xyz,$uv.w/min(min($x, $y), $z)/$xyz)"
							}
						]
					}
				],
				"shortdesc": "MFSDF Scale"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Scale",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"k": 0
			},
			"shader_model": {
				"code": "",
				"global": "float sdSmoothXYUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF2D Operator\nCode - IQ, RodZilla\n\nReturns a 2D SDF of a smooth boolean operation (union, intersection and difference) between the X axis and the Y axis\n\nBased of the original sdSmoothBoolean with X axis and Y axis for input",
				"name": "SDF2D Smooth Union XY",
				"outputs": [
					{
						"longdesc": "The shape generated by the boolean operation",
						"sdf2d": "sdSmoothXYUnion($uv.x, $uv.y, $k)",
						"shortdesc": "Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "The smoothness of the boolean operation",
						"max": 1,
						"min": 0,
						"name": "k",
						"shortdesc": "Smoothness",
						"step": 0.0001,
						"type": "float"
					}
				],
				"shortdesc": "SDF2D Smooth Union XY"
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/SDF2D Smooth Union XY",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"r": 0.5,
				"x": 0
			},
			"shader_model": {
				"code": "",
				"global": "float iq_sdOctahedron( vec3 p, float s){\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - IQ\n\nGenerates a Octahedron as a signed distance function\nCode from www.iquilezles.org/www/articles/distfunctions/distfunctions.htm",
				"name": "SDF Octahedron",
				"outputs": [
					{
						"sdf3d": "iq_sdOctahedron($uv,$r)-$x",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "Radius1.r",
						"default": 0.5,
						"label": "Size",
						"longdesc": "The size of the Octahedron",
						"max": 1,
						"min": 0,
						"name": "r",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Rounding",
						"longdesc": "Roundness of the object",
						"max": 1,
						"min": 0,
						"name": "x",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Octahedron"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/SDF Octahedron",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Correction": 2,
				"Distance": 0,
				"scale": 1,
				"scale_x": 1,
				"scale_y": 1,
				"scale_z": 1,
				"translate_x": 0,
				"translate_y": 0,
				"translate_z": 0
			},
			"shader_model": {
				"code": "",
				"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_F3 =  0.3333333;\nconst float XsX3zB_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_random3(s), x);\n\t d.y = dot(XsX3zB_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - SDF3D Generator\nCode - Nikat\n\nMakes a non periodic noise using nikat code from https://www.shadertoy.com/view/XsX3zB",
				"name": "SDF Simplex Noise",
				"outputs": [
					{
						"sdf3d": "(XsX3zB_simplex3d(($uv.xyz+vec3($translate_x,$translate_y,$translate_z))*vec3($scale_x,$scale_y,$scale_z)*$scale))/(1.0+$Correction*$scale)-$Distance",
						"shortdesc": "TEX3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 8,
						"label": "Scale",
						"longdesc": "Noise scale",
						"max": 32,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale X",
						"longdesc": "Noise X scale",
						"max": 16,
						"min": 0,
						"name": "scale_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Y",
						"longdesc": "Noise Y scale",
						"max": 16,
						"min": 0,
						"name": "scale_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Scale Z",
						"longdesc": "Noise Z scale",
						"max": 16,
						"min": 0,
						"name": "scale_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate X",
						"longdesc": "Noise X Translation",
						"max": 100,
						"min": 0,
						"name": "translate_x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Y",
						"longdesc": "Noise Y Translation",
						"max": 100,
						"min": 0,
						"name": "translate_y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Translate Z",
						"longdesc": "Noise Z Translation",
						"max": 100,
						"min": 0,
						"name": "translate_z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Distance",
						"longdesc": "Distance to surface",
						"max": 0.5,
						"min": -0.5,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Simplex Noise"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/SDF Simplex Noise",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "float o_$name_uv=$in($uv.xyz);",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D to TEX3D\nCode - PauloFalcao\n\nConverts a SDF3D to a grayscale TEX3D",
				"name": "SDF3D to TEX3D",
				"outputs": [
					{
						"shortdesc": "TEX3D Output",
						"tex3d": "vec3(o_$name_uv,o_$name_uv,o_$name_uv)",
						"type": "tex3d"
					}
				],
				"parameters": [

				]
			},
			"tree_item": "PauloFalcao/TEX3D/Util/SDF3D to TEX3D",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"blend_type": 0,
				"iterations": 8,
				"mode": 2,
				"opacity": 1
			},
			"shader_model": {
				"code": "",
				"global": "vec3 blendf_normal(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_multiply(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_screen( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blendf_overlay(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_overlay_f(c1.x, c2.x), blendf_overlay_f(c1.y, c2.y), blendf_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_hard_light(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blendf_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blendf_soft_light( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_soft_light_f(c1.x, c2.x), blendf_soft_light_f(c1.y, c2.y), blendf_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blendf_burn(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_burn_f(c1.x, c2.x), blendf_burn_f(c1.y, c2.y), blendf_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blendf_dodge(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_dodge_f(c1.x, c2.x), blendf_dodge_f(c1.y, c2.y), blendf_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_lighten(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_darken(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_difference(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Image",
						"longdesc": "The image that will be repeated",
						"name": "img",
						"shortdesc": "RGBA Image",
						"type": "rgba"
					},
					{
						"default": "vec4($uv,0.0,0.0)",
						"function": true,
						"label": "2D Transformation",
						"longdesc": "The transformation that will be applied each iteration, only transformations nodes can be used, like translate, scale, etc",
						"name": "trans2d",
						"shortdesc": "Image Transformaton",
						"type": "rgba"
					}
				],
				"instance": "vec4 for_blend_$name(vec2 p) {\n  vec2 t=p;\n  vec4 o=$img(t);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tvec4 no=$img(t);\n\to=vec4(blendf_$blend_type(o.xyz,no.xyz,$opacity),mix(o.w,no.w,$opacity));\n  }\n  return o;\n}\n\nvec4 for_avg_$name(vec2 p) {\n  vec2 t=p;\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tno=$img(t);\n\to+=vec4(no.xyz*$opacity,no.w);\n  }\n  return vec4(o/($iterations.0+1.0));\n}\n\nvec4 for_fold_$name(vec2 p) {\n  vec2 t=p;\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n  }\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  return o;\n}\n",
				"longdesc": "Type - RGBA Generator\nCode - PauloFalcao, RodZilla  (Bending modes)\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 2D Transformation Node.\n\n2D Transformation nodes should start with the Image \"Axis\" node, operations should not use buffer, only coordinates transformations should be used, nodes that transform colors here will transform space.\n\nThere are 3 modes available:\n - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
				"name": "Image Fractal",
				"outputs": [
					{
						"rgba": "$mode",
						"shortdesc": "SDF3D Output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"default": 24,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "17",
								"value": "17"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "19",
								"value": "19"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "22",
								"value": "22"
							},
							{
								"name": "23",
								"value": "23"
							},
							{
								"name": "24",
								"value": "24"
							}
						]
					},
					{
						"default": 2,
						"label": "Mode",
						"longdesc": " - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Average",
								"value": "for_avg_$name($uv)"
							},
							{
								"name": "Blend",
								"value": "for_blend_$name($uv)"
							},
							{
								"name": "Fold",
								"value": "for_fold_$name($uv)"
							}
						]
					},
					{
						"default": 0,
						"label": "Blend Mode",
						"longdesc": "The algorithm used to blend the result of each iteration",
						"name": "blend_type",
						"shortdesc": "Blend mode",
						"type": "enum",
						"values": [
							{
								"name": "Normal",
								"value": "normal"
							},
							{
								"name": "Multiply",
								"value": "multiply"
							},
							{
								"name": "Screen",
								"value": "screen"
							},
							{
								"name": "Overlay",
								"value": "overlay"
							},
							{
								"name": "Hard Light",
								"value": "hard_light"
							},
							{
								"name": "Soft Light",
								"value": "soft_light"
							},
							{
								"name": "Burn",
								"value": "burn"
							},
							{
								"name": "Dodge",
								"value": "dodge"
							},
							{
								"name": "Lighten",
								"value": "lighten"
							},
							{
								"name": "Darken",
								"value": "darken"
							},
							{
								"name": "Difference",
								"value": "difference"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Opacity",
						"longdesc": "The opacity of the blend operation",
						"max": 1,
						"min": 0,
						"name": "opacity",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Image Fractal"
			},
			"tree_item": "PauloFalcao/Image/Operator/Image Fractal",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAI5JREFUeJzt0rENwCAQBME30H/LduAiNmBW+pjTiGetec/MVLfDt/87c3UAAACoJ7QBAACgntAGAACAekIbAAAA6gltAAAAqCe0AQAAoJ7QBgAAgHpCGwAAu57Q5gcAAFBPaAMAAEA9oQ0AAAD1hDYAAADUE9oAAABQT2gDAABAPaENAAAA9YQ2AAAuB/gAJZ4D97ubRUQAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [

				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
				"name": "Image Axis",
				"outputs": [
					{
						"rgba": "vec4($uv,0.0,1.0)",
						"shortdesc": "RGBA Output",
						"type": "rgba"
					}
				],
				"parameters": [

				],
				"shortdesc": "Axis"
			},
			"tree_item": "PauloFalcao/Image/Generator/Image Axis",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAmlJREFUeJztmcFqo1AUQE8mKvoklhRDBLPpWmg+wh/oJ80n9Qf8iC5cZxUwm0AMPlOVzixKpJnp1ncLeQck4OYdDhe9khnwhzvml7SANDaAtIA0NoC0gDQ2gLSANDaAtIA0NoC0gDQ2gLSANDaAtIA0NoC0gDQ2gLSANDaAtIA0NoC0gDSOxKF5npMkCUopALTWVFVFURTGXWYY/GMkz3OyLCNJEqIowvM8ALquo65rqqqiLEujIYxNwMvLC9vtljRNeXx8JAxDXNcFoO97mqYhjmOWyyWLxYLX11cjXkYC5HnOdrvl6emJ9XrNw8MDSikc5/P4YRjQWhOG4TgV5/PZyCQYCZBlGWmasl6vieOYKIoIguAmQBAE40R0XUeWZUYCzIHfUx6Q5znPz89sNhtWq9U44kopfN/H8zwcx2E+nzObzfj4+GAYBt7f3wHY7XZT6k0/AdcHXhiGKKUIggDf9/F9/2YCrr9KKcIwJIoikiSZWm/6AEopPM/DdV0cx/nvGkW+3HNdF8/zxtfklNhFaOoDtNZ0XUff9wzDcHNd+fd+3/d0XYfWemq96QNUVUVd1zRNg9b65un/9RlwuVxo2xatNU3TjIvR1EweoCgKsiwjjuOb5WcYhpsAbdtS1zWn04nj8WhsNTayB5RlyXK5HJecvu+/XYROpxOHw4H9fk9ZlibUzAQoioLFYgF8LjlN03y7Ch+PR/b7PW9vb8a+B+7+Y8hogCt3+zn8E7n7RcgGkBaQxgaQFpDGBpAWkMYGkBaQxgaQFpDGBpAWkMYGkBaQxgaQFpDGBpAWkMYGkBaQxgaQFpDmL8T/AAT8pgt4AAAAAElFTkSuQmCC",
			"name": "pxflib",
			"parameters": {
				"scale": 1
			},
			"shader_model": {
				"code": "",
				"global": "vec2 scale(vec2 uv, vec2 center, vec2 scale) {\n\tuv -= center;\n\tuv /= scale;\n\tuv += center;\n    return uv;\n}",
				"inputs": [
					{
						"default": "vec4($uv, 0.0, 1.0)",
						"label": "",
						"longdesc": "The input image",
						"name": "i",
						"shortdesc": "Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Scales its input",
				"name": "Image Simple Scale",
				"outputs": [
					{
						"longdesc": "Shows the scaled image",
						"rgba": "$i((($uv-vec2(0.5))*$scale)+vec2(0.5))",
						"shortdesc": "Output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"control": "Scale1.x",
						"default": 1,
						"label": "Scale",
						"longdesc": "The scale amount",
						"max": 1,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Image Simple Scale"
			},
			"tree_item": "PauloFalcao/Image/Operator/Image Simple Scale",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sphere",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 0
				},
				{
					"from": "pxflib",
					"from_port": 0,
					"to": "translate",
					"to_port": 0
				},
				{
					"from": "translate",
					"from_port": 0,
					"to": "mirror_2",
					"to_port": 0
				},
				{
					"from": "mirror_2",
					"from_port": 0,
					"to": "mirror",
					"to_port": 0
				},
				{
					"from": "mirror",
					"from_port": 0,
					"to": "rotate",
					"to_port": 0
				},
				{
					"from": "rotate",
					"from_port": 0,
					"to": "scale_2",
					"to_port": 0
				},
				{
					"from": "scale_2",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 1
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "scale",
					"to_port": 0
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"color": {
						"a": 1,
						"b": 0,
						"g": 0.5,
						"r": 1,
						"type": "Color"
					},
					"name": "comment",
					"node_position": {
						"x": 73.115967,
						"y": 164.396667
					},
					"parameters": {

					},
					"size": {
						"x": 396,
						"y": 128
					},
					"text": "Remake of Basic Fractal Shader\nhttps://www.shadertoy.com/view/tltSWs\nUsing the Fractal node",
					"title": "Comment",
					"type": "comment"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -206.884033,
						"y": -221.603333
					},
					"parameters": {

					},
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nInput Coordinates",
						"name": "Axis",
						"outputs": [
							{
								"rgba": "vec4($uv,0.0,1.0)",
								"shortdesc": "RGBA Output",
								"type": "rgba"
							}
						],
						"parameters": [

						],
						"shortdesc": "Axis"
					},
					"type": "shader"
				},
				{
					"name": "translate",
					"node_position": {
						"x": -210.884033,
						"y": -151.603394
					},
					"parameters": {
						"translate_x": 0.5,
						"translate_y": 0.5
					},
					"type": "translate"
				},
				{
					"name": "mirror_2",
					"node_position": {
						"x": -211.884033,
						"y": -72.603333
					},
					"parameters": {
						"direction": 1,
						"offset": 0
					},
					"type": "mirror"
				},
				{
					"name": "mirror",
					"node_position": {
						"x": -214.884033,
						"y": 5.396667
					},
					"parameters": {
						"direction": 0,
						"offset": 0
					},
					"type": "mirror"
				},
				{
					"name": "scale_2",
					"node_position": {
						"x": -220.884033,
						"y": 185.396667
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"scale_x": 0.51,
						"scale_y": 0.51
					},
					"type": "scale"
				},
				{
					"name": "rotate",
					"node_position": {
						"x": -223.884033,
						"y": 86.396667
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"rotate": "$time*45.0"
					},
					"type": "rotate"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": 123.457153,
						"y": -156.570435
					},
					"parameters": {
						"blend_type": 0,
						"iterations": 6,
						"mode": 2,
						"opacity": 1
					},
					"shader_model": {
						"code": "",
						"global": "vec3 blendf_normal(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_multiply(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blendf_screen( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blendf_overlay(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_overlay_f(c1.x, c2.x), blendf_overlay_f(c1.y, c2.y), blendf_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_hard_light(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blendf_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blendf_soft_light( vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_soft_light_f(c1.x, c2.x), blendf_soft_light_f(c1.y, c2.y), blendf_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blendf_burn(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_burn_f(c1.x, c2.x), blendf_burn_f(c1.y, c2.y), blendf_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blendf_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blendf_dodge(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blendf_dodge_f(c1.x, c2.x), blendf_dodge_f(c1.y, c2.y), blendf_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_lighten(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_darken(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blendf_difference(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Image",
								"longdesc": "The image that will be repeated",
								"name": "img",
								"shortdesc": "RGBA Image",
								"type": "rgba"
							},
							{
								"default": "vec4($uv,0.0,0.0)",
								"function": true,
								"label": "2D Transformation",
								"longdesc": "The transformation that will be applied each iteration, only transformations nodes can be used, like translate, scale, etc",
								"name": "trans2d",
								"shortdesc": "Image Transformaton",
								"type": "rgba"
							}
						],
						"instance": "vec4 for_blend_$name(vec2 p) {\n  vec2 t=p;\n  vec4 o=$img(t);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tvec4 no=$img(t);\n\to=vec4(blendf_$blend_type(o.xyz,no.xyz,$opacity),mix(o.w,no.w,$opacity));\n  }\n  return o;\n}\n\nvec4 for_avg_$name(vec2 p) {\n  vec2 t=p;\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n\tno=$img(t);\n\to+=vec4(no.xyz*$opacity,no.w);\n  }\n  return vec4(o/($iterations.0+1.0));\n}\n\nvec4 for_fold_$name(vec2 p) {\n  vec2 t=p;\n  for(int i=0;i<$iterations;i++){\n    t=$trans2d(t).xy;\n  }\n  vec4 no=$img(t);\n  vec4 o=vec4(no.xyz*$opacity,no.w);\n  return o;\n}\n",
						"longdesc": "Type - RGBA Generator\nCode - PauloFalcao, RodZilla  (Bending modes)\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 2D Transformation Node.\n\n2D Transformation nodes should start with the Image \"Axis\" node, operations should not use buffer, only coordinates transformations should be used, nodes that transform colors here will transform space.\n\nThere are 3 modes available:\n - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
						"name": "Fractal",
						"outputs": [
							{
								"rgba": "$mode",
								"shortdesc": "SDF3D Output",
								"type": "rgba"
							}
						],
						"parameters": [
							{
								"default": 24,
								"label": "Iterations",
								"longdesc": "Number of Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "0",
										"value": "0"
									},
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									},
									{
										"name": "17",
										"value": "17"
									},
									{
										"name": "18",
										"value": "18"
									},
									{
										"name": "19",
										"value": "19"
									},
									{
										"name": "20",
										"value": "20"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "22",
										"value": "22"
									},
									{
										"name": "23",
										"value": "23"
									},
									{
										"name": "24",
										"value": "24"
									}
								]
							},
							{
								"default": 2,
								"label": "Mode",
								"longdesc": " - Average\n     Transforms space each iteration.\n     The input image is evaluated for each iteration, and at the end the average of all evaluations is returned.\n     Using operators like Mirror is possible to repeat space.\n - Blend\n     Transforms space each iteration.\n     The input image is evaluated for each iteration.\n     Each iteration the previous image is combined with the current only using the specified blending mode.\n     Using operators like Mirror is possible to repeat space.\n - Fold\n     Transforms space each iteration.\n     The input image is evaluated only at the end.\n     Using operators like Mirror is possible to repeat space.",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "Average",
										"value": "for_avg_$name($uv)"
									},
									{
										"name": "Blend",
										"value": "for_blend_$name($uv)"
									},
									{
										"name": "Fold",
										"value": "for_fold_$name($uv)"
									}
								]
							},
							{
								"default": 0,
								"label": "Blend Mode",
								"longdesc": "The algorithm used to blend the result of each iteration",
								"name": "blend_type",
								"shortdesc": "Blend mode",
								"type": "enum",
								"values": [
									{
										"name": "Normal",
										"value": "normal"
									},
									{
										"name": "Multiply",
										"value": "multiply"
									},
									{
										"name": "Screen",
										"value": "screen"
									},
									{
										"name": "Overlay",
										"value": "overlay"
									},
									{
										"name": "Hard Light",
										"value": "hard_light"
									},
									{
										"name": "Soft Light",
										"value": "soft_light"
									},
									{
										"name": "Burn",
										"value": "burn"
									},
									{
										"name": "Dodge",
										"value": "dodge"
									},
									{
										"name": "Lighten",
										"value": "lighten"
									},
									{
										"name": "Darken",
										"value": "darken"
									},
									{
										"name": "Difference",
										"value": "difference"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Opacity",
								"longdesc": "The opacity of the blend operation",
								"max": 1,
								"min": 0,
								"name": "opacity",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Fractal"
					},
					"type": "shader"
				},
				{
					"name": "scale",
					"node_position": {
						"x": 157.115967,
						"y": 14.396667
					},
					"parameters": {
						"cx": 0,
						"cy": 0,
						"scale_x": "sin($time)*0.5+1.5",
						"scale_y": "sin($time)*0.5+1.5"
					},
					"shader_model": {
						"code": "",
						"global": "vec2 scale(vec2 uv, vec2 center, vec2 scale) {\n\tuv -= center;\n\tuv /= scale;\n\tuv += center;\n    return uv;\n}",
						"inputs": [
							{
								"default": "vec4($uv, 0.0, 1.0)",
								"label": "",
								"longdesc": "The input image",
								"name": "i",
								"shortdesc": "Input",
								"type": "rgba"
							}
						],
						"instance": "",
						"longdesc": "Scales its input",
						"name": "Scale",
						"outputs": [
							{
								"longdesc": "Shows the scaled image",
								"rgba": "$i(scale($uv, vec2(0.5+$cx, 0.5+$cy), vec2($scale_x, $scale_y)))",
								"shortdesc": "Output",
								"type": "rgba"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "Center X:",
								"longdesc": "The position of the scale center",
								"max": 1,
								"min": -1,
								"name": "cx",
								"shortdesc": "Center.x",
								"step": 0.005,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Center Y:",
								"longdesc": "The poisition of the scale center",
								"max": 1,
								"min": -1,
								"name": "cy",
								"shortdesc": "Center.y",
								"step": 0.005,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale X:",
								"longdesc": "The scale amount along the X axis",
								"max": 50,
								"min": 0,
								"name": "scale_x",
								"shortdesc": "Scale.x",
								"step": 0.005,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Y:",
								"longdesc": "The scale amount along the Y axis",
								"max": 50,
								"min": 0,
								"name": "scale_y",
								"shortdesc": "Scale.y",
								"step": 0.005,
								"type": "float"
							}
						],
						"shortdesc": "Scale"
					},
					"type": "shader"
				},
				{
					"name": "sphere",
					"node_position": {
						"x": -209.884033,
						"y": -363.603333
					},
					"parameters": {
						"cx": 0.5,
						"cy": 0.5,
						"r": 0.49
					},
					"type": "sphere"
				}
			],
			"tree_item": "PauloFalcao/Image/Operator/Image Fractal Example"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "vec3 texx_$name_uv=$texx($uv.yz+0.5);\nvec3 texy_$name_uv=$texy($uv.xz+0.5);\nvec3 texz_$name_uv=$texz($uv.xy+0.5);",
				"global": "",
				"inputs": [
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "TexX",
						"name": "texx",
						"type": "rgb"
					},
					{
						"default": "vec3(0.0,1.0,0.0)",
						"function": true,
						"label": "TexY",
						"name": "texy",
						"type": "rgb"
					},
					{
						"default": "vec3(0.0,0.0,1.0)",
						"function": true,
						"label": "TexZ",
						"name": "texz",
						"type": "rgb"
					},
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"type": "sdf3d"
					}
				],
				"instance": "//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$sdf(p+e.xyy);\n  float v2=$sdf(p+e.yyx);\n  float v3=$sdf(p+e.yxy);\n  float v4=$sdf(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}",
				"name": "Triplanar to TEX3D by SDF",
				"outputs": [
					{
						"tex3d": "abs(normal_$name($uv.xyz))*mat3(vec3(texx_$name_uv.x,texy_$name_uv.x,texz_$name_uv.x),vec3(texx_$name_uv.y,texy_$name_uv.y,texz_$name_uv.y),vec3(texx_$name_uv.z,texy_$name_uv.z,texz_$name_uv.z))",
						"type": "tex3d"
					}
				],
				"parameters": [

				]
			},
			"tree_item": "PauloFalcao/TEX3D/Util/Triplanar to TEX3D by SDF",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"mode": 0,
				"smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,1.0)",
						"label": "",
						"name": "in",
						"shortdesc": "RGBA Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Type - RGBA Operator\nCode - PauloFalcao\n\nTransforms a RGBA making a mirror smooth symmetry using the chosen axis",
				"name": "Image Smooth Axis Symmetry",
				"outputs": [
					{
						"rgba": "$in($mode)",
						"shortdesc": "RGBA output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "Axis",
						"longdesc": "Axis",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "XY",
								"value": "vec2(sqrt(($uv.xy-0.5)*($uv.xy-0.5)+$smooth))+0.5"
							},
							{
								"name": "X",
								"value": "vec2(sqrt($uv.x*$uv.x+$smooth),$uv.y)+0.5"
							},
							{
								"name": "Y",
								"value": "vec2($uv.x,sqrt($uv.y*$uv.y+$smooth))+0.5"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"max": 0.02,
						"min": 0,
						"name": "smooth",
						"step": 0.00001,
						"type": "float"
					}
				],
				"shortdesc": "Image Smooth Axis Symmetry"
			},
			"tree_item": "PauloFalcao/Image/Operator/Image Smooth Axis Symmetry",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAA+5JREFUeJztWc9LMlsYfr5Li1q1iNq2aRsEbYKggqAWbQL/hujHwk1Q0TIx2kXUwiLox6JyESQVUjSZSjGVYtkvbSzRCLNVSZhU8N7NvVI5o97Uef3uNw88ML7vOed9znPOmRn1FwDCH4y/uAVwQzOAWwA3NAO4BXBDM4BbADfYDRgbG2Ot/wvai9CfDVYD7HY7Z/kkiINnZ2csdb+TbQdUVlYCAO7u7gAAJpMJMzMzLFrYVwEA9ff3EwDq6elRuzbPhAVBUMxNTk7+/w2Q4/j4OEfdzI3sdvuPCwQCAXZji34HzM3NsdUu6Jvg8/MzysvLCzV8XqC9CislBEEAABgMhpRcLBbD8fHxl9jT05PsOPf397noUwW0u7srez7W19fp5uaG3G43XV9fEwCKxWLs94y88r9OyO/30+XlpWxuZWUlbd+1tTUCQB8fH2Qymfgn/8/x/xLQ6/XcgngNkGNfX59ibnt7OyU2ODhI8/PztLCwQN3d3VmLMRqNxWFAIpEgAFRRUSHbaWJiggCQJEnJmNlsplAoRDabjQRBoNvbWwqHw2SxWNIKWF1dLf4dIMfq6urktSRJZLPZSKfTkSiKZDabKRaL0fv7u+wOyYUejydjm4GBAQJAj4+PPzegtrY2J6Fut5ucTueX2N7eXtb9r66u0uanpqYUc4uLi4XfAZkYCoVSYktLS7JtHx4ecq63vLz8076FMcBgMGTVLh/3gEgk8uVzPB6n09NTdQw4PDxMXgeDQXI4HIqrI4oiuVyutOO1t7fLxre2ttLG/r1xA6DOzk51d8Db21ted0+2X78lSaLZ2dlc6+UmNhqN5nXyAKilpSWrdhaLhZqamngNkCSJHA4Heb3evBvxnZ9X2+v1Ujwep52dHV4DsuHm5qZiTulZ3dDQoNjHaDRSOBym19dX8vv9JAgCRSIRcrlcVFNTk2zndrszalPlZ/GOjg7FXFVVlWxcFEUAwMjISErO6/Xi/PwcFxcXCAaD8Pl8mJ6eRllZGQKBAADA4/Ggvr4+K30F3wHZ8uXlJeu2bW1t1NvbS62trSm5rq4uslqtxXMEcmFzc3Oha/BPUm2Ojo6S2WwmgPGvsXzD6XQq5jY2NgAAVqsVQ0NDiEaj0Ol0yTz7inDw01d5fjFqMxgMfv7MLyhbiqKYsc3JyUnavMzvCfwTy8Sjo6O8jufz+ZLX2h8j3AJ+ikQikZdxflsDSktLAQAHBwc5j8V+xuWo1+uprq6u4HWK8h5gt9tRUlKCxsZGVeqxr3Y6Dg8PF7oG/yS/c39/X7VaRXkE1MRv+xTIFzQDuAVwQzOAWwA3NAO4BXBDM4BbADc0A7gFcONvLg3QpK6FekEAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {

			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "RGBA Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Type - RGBA Operator\nCode - PauloFalcao\n\nTransforms a RGBA making  the Juliaset fold Z^2 transformation",
				"name": "Image Juliaset Fold Z2",
				"outputs": [
					{
						"rgba": "$in(vec2($uv.x*$uv.x-$uv.y*$uv.y,2.0*$uv.x*$uv.y))",
						"shortdesc": "SDF3D output",
						"type": "rgba"
					}
				],
				"parameters": [

				],
				"shortdesc": "Image Juliaset Fold Z2"
			},
			"tree_item": "PauloFalcao/Image/Operator/Image Juliaset Fold Z2",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Distance": 0,
				"Repetitions": 6,
				"Roundness": 0,
				"Smooth": 0
			},
			"shader_model": {
				"code": "",
				"global": "vec2 smoothRot_XY(vec2 p,float s,float m,float c,float distance){\n  s*=0.5;\n  float d=length(p);\n  float x=asin(sin(atan(p.x,p.y)*s)*(1.0-m))*d;\n  float ds=d*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec2(x/s,y/s-distance);\n}",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "RGBA Input",
						"type": "rgba"
					}
				],
				"instance": "",
				"longdesc": "Type - RGBA Operator\nCode - PauloFalcao\n\nThis is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions.\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh",
				"name": "Image Smooth Polar Repeat",
				"outputs": [
					{
						"rgba": "$in(smoothRot_XY($uv-0.5,$Repetitions,$Smooth,1.0-$Roundness, $Distance))",
						"shortdesc": "RGBA Output",
						"type": "rgba"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 6,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1,
						"min": 0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Roundness",
						"longdesc": "This is a correction to the smoothness.\n\n0 (default) - With correction, this way a flat object will no smoothess will be flat, the correction is not perfect with few repetions it's still possible to notice some distortion. \n\n1 - Without correction, using this setting a flat object will be rounded, even with smoothness at zero.",
						"max": 1,
						"min": 0,
						"name": "Roundness",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Image Smooth Polar Repeat"
			},
			"tree_item": "PauloFalcao/Image/Operator/Image Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAACbFJREFUaIHtmr+LZMt1xz/nnLr37jy9jQRGVuDs4cAGBzYGBfor/Bc4k14mBMKRA6FIqUCRE+f2X6BQBhmMjDGSZYNskB6SHFgjdmZ3uvveqnMcVNXt29M9s7PrXQnDFsWleqZ3+vup87OqFz6MD+PD+DB+l0Pe55+eFFFQ4sDhvX3KuxwfQQIFBRHEQBElKoYSSlHKNS/f1Ue+E4CPYADr0hUEVJt6tP0urDG44kpRll9y+7sF+FyXbhsAqc+q3hBFNu8I6wBCVrIw/4yb3z7AFYyX1FcAAVPUUEP6xCARhlcGowiLsMAc7H/6VtZ4O4DnMECC1KVvAeoPG0BCDE1gSCISGJFwoxhFuxHg4Ox/zK/fN8AIV6fqtwBD2+UGYOkIIKn9m+izWJtZWYSDcHB2e178iN17AngGzzbqt9u//WEDMMzQhCZ0gMowNAZPeKIkipGNRZmFWdgV7vbc/PDJ7pTeUP14TyVUVcMlBhVMUEWkx3RNqTUMVoBENgZlEBKkZ9iXkB88LbKfCDBu1G/9pOoeNwDDhs3ABBVEGkO1V1gL5WKUgWIsicEYlCQY6Ih8mfJ9Xr0rgKtL+sbNPDfCql7pDD3MQ3suqhYYGIwlkQxTFGSEkeAJAPYE9c9P97iKm2CCZzDB2F9OWypjVEZjNMbEUPc4MSRSIg2kRErYQErogA4t6HVAasD8IcNPXhcMrwW4gul0g20j91z3cd3VN92bZ1M/kBKW0AEbuvRVfY37T+DfuHtE32td6Dxqt1qnjQuNGzezzfv1LAyODcWaSa3DJLS2T4IPeGKG/3lrC3yub//KMG48ZzrFmO5Fhbb9HhNp6zx17wcsYQkbmhF0aOVi3X4SbsQfo//ycPP3uAXudQqp7/QFh+m/2gZ6ElSaEU4yqRzjuG7/WjQagBGKQ04synP41VtY4KONV9Q5nW38Re9vubVa4N7ep7733QKasKEFrqYWA2vNdsON/CfIPz1ghEcssN1+28TxNvHfM8i2Gpgcy9kaBmuzWo1QFDey9bZv7TWqcZQFFuMKPn5I5SMA93rMdMownHrO5TiulXgTx0gL0DWOi2LaOr+1aY3eYkwwJybh6hGVF8c9/9mG6XT28p4F2sJI1sI3GZZanmn+M2DVbQZk6Am008faLxmuZGX5c/iHSzXhIQukzd5rT4ub9HASG8PZ3Bbje5kUIfo0pSiq5LVIry1GIhuLtHAarx4wwkMA26NJemCetw/3AWTTUGwBNqVAtSX+6rKhx9SUjKQMMCjjxPSmAGvIrXGcNqa4tz7vRleGtrkbgGoElwaw7ZFq7K6+NygJkpNGhjcCOFd/PtOlxX2A3lQLZwCKCy49LymphnUPHjNMSUJyUjwg9dJPZQJBVox6NF/PLrY5o3f1su017KheTroJQBBpWUilZaHj9msTbevCop4ozLFvxuf/Ot8/c14CWD8Lmnnb09olw5ZBzqj6QvrL7kVnQSzSt98V0zDF5FS9oYJGaAodwshPsUD9LPonSi9BosduYEXqe3wC1o8ugkkznQja/uoxBlpACya4tIBWRTV6cIdIaCDqYi7np+WLAIFEA1A56tYzku1LztiO91oqcjSrSAVgY42mW1ANaUfQkA5ABOpQyrnYSwCHAx89bym0nqhEji4g25SoxzZZtNXZBrCewETarzYuJAhapQu+abZFYlWPhEjdzAhx/8ZnF/rqB7JQNcKaALfdwBbg/tTjmk3rIFKzUPNMenwd33H8tQYK0j4/xNEI98D9otKHAbQD2EqyvTusQjcLWf1jZYAap3WBtKiV1Xk276P7VSCExDodd/FCPovfRwFKY0iBgfbnCcO95xbj6Oxtv9cF0bd/21McQ4KqG2/Sw8WLl+I6vymAY3VGm80amymcLKTbvslpa6nrlVFCCGjeDSEEUYuaSzixPgueo+Qo8/LAdd0DANcv+b2rxpAqQ4epiteFnC7W5+mUTWlBAhw5bj+44IRTn+FEIQqe8Rxl8Tx/5R//600AmhGqHQqpdIA+1RveZQxHHFWkrmtBbA5Oq2IFHAoUoYATBYpElsh4JpbwHGWJMueHLyYeAViQjJU2U8Uolxi8oWpBDK3qHXE5Bkb04A5pztPU95mJQmTI4Tkihy/hs+eD592hPHg79DDAL2/5gwlZ0HwCkMqRSvuzMRhaeoNcedZI0B7Wq/dvpNcZC7FELMSMz+FzlEPoPvPqq9/7zzcHAGTuAH0OBcukgq3GyWjCMmpoPpbUY4KK7kjSeE4AqvqlqocFXyLm8EOUfSm7kFf7/OIRjY8C/OyGTyZkRhdsIWVsYRiwhZQ6lWG5nWlN0dyLd024jlgrcApIMwiOrABLxAJzxBxxCD+EH9z3UnYsd8VvP/37/3hbACD2MCJju/9LA7a0WxJLvWlfMEV1c3pZS6H1aD5WicARB6/bH5yo99h72XnZhd5F3O7nx67lngDw01v+aEC2DNs7nrV7lzbblzWBJtRDDdEOIL1EeOBBCUqwBEtTH3uPnfudl7ucXwo3Wa6/9reXs+eTAYAfX/NnY7sy09Qu0ZKS6mlJMD0egFuJqKmp3vesneyajur2l2jbv0QcPA7hO/c797ssLzVuPf/m69/919eqe9r3A/sXTAb1+67u7itAktZx1HpXS4cWzOr7QyVEauMfRFQLSIYcsTiLxyF8X9WXchtxQ7l+NX/2FGlPA/jRjj+94Vk7mvTWXTbH4MCC5D291lvDboHa8CnUBo0G4JGDOWL2OBTfFb+T/DLiRuT6MP/iW9/573cHAPzwli8JozDSTswaxzYp+aZE5H7taZiFKiKhtXMIxEM8KE6OyM7scXDfF9/l/DL0tnA9H37x7W///Im6ngwA/OCGLxfGwGsedCR6MS4tq6bcr97qfXNzoXYbKt1/KMHisXjMJfZFdhp3yE3238yvPvvOt560928OAHz/FbziL77I4AzeErlkdMEmbMEWrN5AG7oeyiVE0NbdhxQne2SPucShlN3CXcSt5Ovvfv31UXtvPOU7srPxk1s+gSE2Xar3Nil3L8pqOdliNpvNpgfTOenedG+yM9mp3AkvJW7xF5Gvl92v/uZr//4WWv5v/9njL3+fj59zdcV0xTQxTAzj+v3dYDqZjqqTMgmTxoRPUsbIUyxjzEPZpfzK9i/+7tPHau37BKjj0y/w8cc8u2KaGEeGsQEkG00nlVGZJEaJScoYZYx59DnlOzvcfu+rD3Zpv0WAdfzVF7mqGANDGsyGpGMD8BEfyKPPadn981deU1+fPt7jfzlL3/z8MNhgMlB+/Y3XtDQfxofxYXwY/0/H/wI9X5QdO6wM4gAAAABJRU5ErkJggg==",
			"name": "pxflib",
			"parameters": {

			},
			"seed": -5947,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "MFSDF",
						"name": "MFSDF",
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nDecompose the MFSDF into the most used attributes",
				"name": "MFSDF Object Attributes",
				"outputs": [
					{
						"shortdesc": "BaseColor",
						"tex3d": "$MFSDF(vec4($uv.xyz,1.0)).xyz",
						"type": "tex3d"
					},
					{
						"shortdesc": "Metallic",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,2.0)).x",
						"type": "tex3d_gs"
					},
					{
						"shortdesc": "Specular",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,4.0)).x",
						"type": "tex3d_gs"
					},
					{
						"shortdesc": "Roughness",
						"tex3d_gs": "$MFSDF(vec4($uv.xyz,5.0)).x",
						"type": "tex3d_gs"
					},
					{
						"shortdesc": "Emission",
						"tex3d": "$MFSDF(vec4($uv.xyz,13.0)).xyz",
						"type": "tex3d"
					},
					{
						"sdf3d": "$MFSDF(vec4($uv.xyz,0.0)).w",
						"shortdesc": "Object",
						"type": "sdf3d"
					}
				],
				"parameters": [

				],
				"shortdesc": "MFSDF Object Attributes"
			},
			"tree_item": "PauloFalcao/MFSDF/Generator/MFSDF Object Attributes",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "tex3d_pattern_2",
					"from_port": 0,
					"to": "tex3d_colorize_3",
					"to_port": 0
				},
				{
					"from": "tex3d_colorize_3",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 0
				},
				{
					"from": "pxflib_4",
					"from_port": 0,
					"to": "gen_outputs",
					"to_port": 0
				},
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 5
				}
			],
			"icon_data": "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",
			"label": "Checkerboard",
			"longdesc": "",
			"name": "graph_2",
			"nodes": [
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -1041.340088,
						"y": -203.449951
					},
					"parameters": {
						"r": 0,
						"sx": 6,
						"sy": 0.5,
						"sz": 6
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "tex3d_pattern_2",
					"node_position": {
						"x": -1106.340088,
						"y": -381.449951
					},
					"parameters": {
						"mix": 4,
						"x_scale": "$checkersize",
						"x_wave": 2,
						"y_scale": 0,
						"y_wave": 2,
						"z_scale": "$checkersize",
						"z_wave": 2
					},
					"seed": 0,
					"seed_locked": false,
					"type": "tex3d_pattern"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -1341.340088,
						"y": -277.949951
					},
					"parameters": {

					},
					"ports": [

					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": -171.340027,
						"y": -302.949951
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0,
							"name": "port0",
							"type": "v4v4"
						}
					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -1055.590088,
						"y": -653.449951
					},
					"parameters": {
						"checkersize": 2,
						"param0": 6,
						"param1": -1,
						"param2": {
							"interpolation": 1,
							"points": [
								{
									"a": 1,
									"b": 0.808594,
									"g": 0.808594,
									"pos": 0,
									"r": 0.808594
								},
								{
									"a": 1,
									"b": 0.53125,
									"g": 0.53125,
									"pos": 1,
									"r": 0.53125
								}
							],
							"type": "Gradient"
						},
						"param3": 0,
						"param4": 0.5,
						"param5": 0
					},
					"seed": 0,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Board Size",
							"linked_widgets": [
								{
									"node": "sdf3d_box",
									"widget": "sx"
								},
								{
									"node": "sdf3d_box",
									"widget": "sz"
								}
							],
							"name": "param0",
							"type": "linked_control"
						},
						{
							"default": 1,
							"label": "Checker Size",
							"max": 20,
							"min": 0,
							"name": "checkersize",
							"step": 0.001,
							"type": "named_parameter"
						},
						{
							"label": "Position",
							"linked_widgets": [
								{
									"node": "pxflib_4",
									"widget": "TranlateY"
								}
							],
							"name": "param1",
							"type": "linked_control"
						},
						{
							"label": "Color",
							"linked_widgets": [
								{
									"node": "tex3d_colorize_3",
									"widget": "g"
								}
							],
							"name": "param2",
							"type": "linked_control"
						},
						{
							"label": "Metallic",
							"linked_widgets": [
								{
									"node": "pxflib_4",
									"widget": "Metallic"
								}
							],
							"name": "param3",
							"type": "linked_control"
						},
						{
							"label": "Specular",
							"linked_widgets": [
								{
									"node": "pxflib_4",
									"widget": "Specular"
								}
							],
							"name": "param4",
							"type": "linked_control"
						},
						{
							"label": "Roughness",
							"linked_widgets": [
								{
									"node": "pxflib_4",
									"widget": "Roughness"
								}
							],
							"name": "param5",
							"type": "linked_control"
						}
					]
				},
				{
					"name": "tex3d_colorize_3",
					"node_position": {
						"x": -850,
						"y": -377.021362
					},
					"parameters": {
						"g": {
							"interpolation": 1,
							"points": [
								{
									"a": 1,
									"b": 0.808594,
									"g": 0.808594,
									"pos": 0,
									"r": 0.808594
								},
								{
									"a": 1,
									"b": 0.53125,
									"g": 0.53125,
									"pos": 1,
									"r": 0.53125
								}
							],
							"type": "Gradient"
						}
					},
					"seed": 0,
					"seed_locked": false,
					"type": "tex3d_colorize"
				},
				{
					"name": "pxflib_4",
					"node_position": {
						"x": -591.953735,
						"y": -359.458862
					},
					"parameters": {
						"BaseColor": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 0,
						"Specular": 0.5,
						"TranlateX": 0,
						"TranlateY": -1,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				}
			],
			"parameters": {
				"checkersize": 2,
				"param0": 6,
				"param1": -1,
				"param2": {
					"interpolation": 1,
					"points": [
						{
							"a": 1,
							"b": 0.808594,
							"g": 0.808594,
							"pos": 0,
							"r": 0.808594
						},
						{
							"a": 1,
							"b": 0.53125,
							"g": 0.53125,
							"pos": 1,
							"r": 0.53125
						}
					],
					"type": "Gradient"
				},
				"param3": 0,
				"param4": 0.5,
				"param5": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shortdesc": "",
			"tree_item": "PauloFalcao/MFSDF/Objects/MFSDF Checkerboard",
			"type": "graph"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"RepX": 4,
				"RepY": 1,
				"RepZ": 4,
				"X": 1,
				"Y": 1,
				"Z": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "//Adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm - Finite Repetition\n\nvec3 opRepLim(vec3 p,vec3 c,vec3 l){\n    p+=(c*l)/2.0;\n    return p-c*clamp(floor(p/c+0.5),vec3(0.0),l);\n}",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - IQ\n\nRepeats its input shape",
				"name": "MFSDF Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(opRepLim($uv.xyz,vec3($X,$Y,$Z)*2.0,vec3($RepX-1.0,$RepY-1.0,$RepZ-1.0)),$uv.w))"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep X",
						"longdesc": "Repetitions in the X axis",
						"max": 128,
						"min": 1,
						"name": "RepX",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Y",
						"longdesc": "Repetitions in the Y axis",
						"max": 128,
						"min": 1,
						"name": "RepY",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Rep Z",
						"longdesc": "Repetitions in the Z axis",
						"max": 128,
						"min": 1,
						"name": "RepZ",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Repeat"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"Iterations": 2,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "//From https://www.shadertoy.com/view/wlyBWm by @paulofalcao\n\nvec3 smoothrepeat_$name(vec3 p,vec3 smooth_size,vec3 size){\n    size.$Axis/=2.0;\n    float w=pow(2.0,float($Iterations));\n\tfor(int i=0;i<$Iterations;i++){\n        p.$Axis=sqrt(p.$Axis*p.$Axis+smooth_size.$Axis);//smooth abs\n\t\tp.$Axis-=size.$Axis*w;//translate\n\t\tw=w/2.0;\n\t}\n\treturn p;\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "MFSDF Smooth Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$in(vec4(smoothrepeat_$name($uv.xyz,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 3,
						"label": "Axis",
						"longdesc": "Repetition axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"default": 2,
						"label": "Repetitions",
						"longdesc": "Repetitions in the X axis",
						"name": "Iterations",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "0"
							},
							{
								"name": "2",
								"value": "1"
							},
							{
								"name": "4",
								"value": "2"
							},
							{
								"name": "8",
								"value": "3"
							},
							{
								"name": "16",
								"value": "4"
							},
							{
								"name": "32",
								"value": "5"
							},
							{
								"name": "64",
								"value": "6"
							},
							{
								"name": "128",
								"value": "7"
							},
							{
								"name": "256",
								"value": "8"
							},
							{
								"name": "512",
								"value": "9"
							},
							{
								"name": "1024",
								"value": "10"
							},
							{
								"name": "2048",
								"value": "11"
							},
							{
								"name": "4096",
								"value": "12"
							},
							{
								"name": "8192",
								"value": "13"
							},
							{
								"name": "16384",
								"value": "14"
							},
							{
								"name": "32768",
								"value": "15"
							},
							{
								"name": "65536",
								"value": "16"
							}
						]
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 0.1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Repeat"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Smooth Repeat",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Axis": 4,
				"SmoothX": 0,
				"SmoothY": 0,
				"SmoothZ": 0,
				"X": 0.5,
				"Y": 0.5,
				"Z": 0.5
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "vec3 blakle_smoothrepeat_asin_sin_$name(vec3 p,vec3 smooth_size,vec3 size){\n    vec3 t=p.xyz;\n    t.$Axis/=size.$Axis;\n    t.$Axis=(asin(sin(t.$Axis)*(1.0-smooth_size.$Axis)))*size.$Axis;\n\tp.$Axis=t.$Axis;\n    return p;\n}",
				"longdesc": "Type - SDF3D Operator\nCode - Blackle\n\nRepeats its input shape with smoothness using reflection symmetry",
				"name": "MFSDF Smooth Repeat V2",
				"outputs": [
					{
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4",
						"v4v4": "$in(vec4(blakle_smoothrepeat_asin_sin_$name($uv.xyz,vec3($SmoothX,$SmoothY,$SmoothZ),vec3($X,$Y,$Z)*0.635),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 6,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "x"
							},
							{
								"name": "Y",
								"value": "y"
							},
							{
								"name": "Z",
								"value": "z"
							},
							{
								"name": "XY",
								"value": "xy"
							},
							{
								"name": "XZ",
								"value": "xz"
							},
							{
								"name": "YZ",
								"value": "yz"
							},
							{
								"name": "XYZ",
								"value": "xyz"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size X",
						"longdesc": "Size of the grid in the X axis",
						"max": 4,
						"min": 0,
						"name": "X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Y",
						"longdesc": "Size of the grid in the Y axis",
						"max": 4,
						"min": 0,
						"name": "Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Size Z",
						"longdesc": "Size of the grid in the Z axis",
						"max": 4,
						"min": 0,
						"name": "Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothX",
						"longdesc": "Smoothness on the X axis",
						"max": 1,
						"min": 0,
						"name": "SmoothX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothY",
						"longdesc": "Smoothness on the Y axis",
						"max": 1,
						"min": 0,
						"name": "SmoothY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SmoothZ",
						"longdesc": "Smoothness on the Z axis",
						"max": 1,
						"min": 0,
						"name": "SmoothZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Repeat V2"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Smooth Repeat V2",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"angle": 0,
				"axis": 1,
				"correction": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "vec4 $(name_uv)_o=$in(vec4(twist$axis($uv.xyz,$angle),$uv.w));",
				"global": "vec2 twist_rot(vec2 v, float a) {\n\ta=a*0.01745329251;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(vec2(c, -s),vec2(s, c));\n\treturn m * v;\n}\n\nvec3 twistX(vec3 v, float a){\n\tv.yz=twist_rot(v.yz,v.x*a);\n\treturn v;\n}\n\nvec3 twistY(vec3 v, float a){\n\tv.xz=twist_rot(v.xz,v.y*a);\n\treturn v;\n}\n\nvec3 twistZ(vec3 v, float a){\n\tv.xy=twist_rot(v.xy,v.z*a);\n\treturn v;\n}\n\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "MFSDF",
						"name": "in",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTwist a SDF3D on the specified axis by an angle.",
				"name": "MFSDF Twist",
				"outputs": [
					{
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4",
						"v4v4": "vec4($(name_uv)_o.xyz,$(name_uv)_o.w/(1.0+$correction))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "Angle1.a",
						"default": 0,
						"label": "Angle",
						"max": 360,
						"min": -360,
						"name": "angle",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 5,
						"min": 0,
						"name": "correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Twist"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Twist",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 5
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "//Adapted from MaterialMaker\n\nvec3 circle_repeat_transform_X(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.y, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Y(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.z);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.z*s;\n\trv.y = p.y;\n\trv.z = -p.x*s+p.z*c-distance;\n\treturn rv;\n}\n\nvec3 circle_repeat_transform_Z(vec3 p, float count, float distance) {\n\tfloat r = 6.28/count;\n\tfloat pa = atan(p.x, p.y);\n\tfloat a = mod(pa+0.5*r, r)-0.5*r;\n\tvec3 rv;\n\tfloat c = cos(a-pa);\n\tfloat s = sin(a-pa);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c-distance;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Generator\nCode - Paulo Falcao, RodZilla\n\nRepeats its input shape around a axis",
				"name": "MFSDF Polar Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(circle_repeat_transform_$Axis($uv.xyz, $Repetitions, $Distance),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 4,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the circle",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Polar Repeat"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Axis": 1,
				"Distance": 1,
				"Repetitions": 6,
				"Smooth": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec3 MFSDF_smoothRot_X(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.y,p.z)*s)/(m+1.0))/s;\n  return vec3(p.x,sin(x)*length(p.yz),cos(x)*length(p.yz)-distance);\n}\n\nvec3 MFSDF_smoothRot_Y(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.x,p.z)*s)/(m+1.0))/s;\n  return vec3(sin(x)*length(p.xz),p.y,cos(x)*length(p.xz)-distance);\n}\n\nvec3 MFSDF_smoothRot_Z(vec3 p,float s,float m,float distance){\n  s*=0.5;\n  float x=asin(sin(atan(p.x,p.y)*s)/(m+1.0))/s;\n  return vec3(sin(x)*length(p.xy),cos(x)*length(p.xy)-distance,p.z);\n}",
				"inputs": [
					{
						"default": "vec2(100, 0.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao, Gaz\n\nThis is a Smooth Polar Repeat based in a technique I create based on the Blackle Mori asinsin smooth repetition but for polar repetitions. The technique was later improved by gaz.\n\nA shadertoy with the technique is here https://www.shadertoy.com/view/NdS3Dh\nGaz improvement https://www.shadertoy.com/view/7sKGzR",
				"name": "MFSDF Smooth Polar Repeat",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(MFSDF_smoothRot_$Axis($uv.xyz,$Repetitions,$Smooth,$Distance),$uv.w))"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Axis",
						"longdesc": "Polar repetition axis, objects will be repeated around this axis.",
						"name": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "X"
							},
							{
								"name": "Y",
								"value": "Y"
							},
							{
								"name": "Z",
								"value": "Z"
							}
						]
					},
					{
						"control": "None",
						"default": 6,
						"label": "Repetitions",
						"longdesc": "The number of repetitions of the input shape around the axis",
						"max": 32,
						"min": 1,
						"name": "Repetitions",
						"shortdesc": "Count",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Distance",
						"longdesc": "Object distance from the center",
						"max": 5,
						"min": 0,
						"name": "Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Smooth",
						"longdesc": "Smoothness between objects",
						"max": 1,
						"min": 0,
						"name": "Smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Polar Repeat"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Smooth Polar Repeat",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAABUdJREFUaIHtmc2KXEUUx3/3oz9kIPgI6jILVxMmGRRRcOVb5BncunIb0FVeQVfuTDAQBAk+gZCFTxBJIgrTk+mP2y6KKk+dU1Vdt2c6gvShGO7ce7vq/z//c059XDja0Y52tP/SmsN1fQ6NH+DZwUa5SQLn0PrWxC3YFrbw9OYGvQECd6EX0JPo1TCOxgBPrj36tQg46J2BrjjIpxL9BgYY4PHbJ3DmoefQu6dOmS4mgKfhOKzgClbw6K0RuGccH/A50BPo8wylDhvYwBqWsIAfDk3gFKYZ9C1MYSLQWwKtSIltHEsrWMIlvIYfD0TgTgZ9AzOYeAK9IdAZBVQyDLAWOrwaI0UtAYleEuhh6qFP4/jJKSALqxRh7XVYwEv4/gYJnMIsBchBl+5X6INcnUcvo4hYhMDhDVzAC/iuAltfQ0D5vvPoZ7sIdMU0cATwBEIghX5qbLcC93x3AX0Dc5h5AlOB3irQxj9s4xDC01AiXMEl/AUPrkngLOX+mWiKgK2hlWkQMsFVpBBIL+HbIsIdQtmaM/XQ5zF6m8E26gppIEXovXSNj7GCdYVnd2ESO3IKcxE/M5EGKpCCGpMUMUnPaqXmvjvwy34KKPf3wuVT434LtEtFUU0abMRP3Gy9jwLK/a33/TyfAJaMzWxJTNVlG2yB5Bn8PFYBtUKexUCn8YXFqmLDrprkmgKTBq3IgQFu5RXIElBDTgxiC30/AojZYGsIuPsneQLpEDoXpaD1NUfVfhUzKlRkSnQmhJKJm6xUeFYfw0/1Ckg/daaqTAzE5CTQG4gqie1W02FVmwc3Q+dE2EGgNVj74nUyWXO7giYOoZADkoCrQq58jyMQXJXDV27JONlJIOSAjJ8NTGA2ikDovRKrLIsy6OtDKCigHg0ibnO+1nYuerH5Z6u49Xr55S5+v091ZdsEHlYq0MQKWBy5VYCN+zCXl9dzVoFwRxJLirCDQGswdZmbhVZPQCWG7aqKAL4LObC86FL/JonJdyR6uxzapghs498mLXH/mefQmtbF152502bIqPu2z9xTSft+vQKBXLLlxkgqZv+1WwKpwOCvy/FWRUBmgv27dysQGPzTrZkxcjubNAH5tspp6xgLzpJsUj+UC9LGz8HEyRDQ53YFVQQwPTZ50Eo0dT85kTXe5YOhF8RZZQikk/upF1SJYDVpMsgKZGqadKVz/xejFMATCItECb0gy9gWxirDWOdfyJXXf8/vFYdgjbnAgLNYk25W/0roDv3lHgSeiC32Nm7WLGgMpiRKa/aUZQWf70EAGGAlvqNI9IrJztObpFwWdBL9othzicBjuIK14DDEQRXW8cT/Wj7b4oVqm/iM8ZMigdJEhj/vXhkadlQFy2INc62ipxy/EYekS/i7jK+sAPAIFrD058ZKCkkmySoZGypOBhEwyvcX8OkuAsklamTP4bY/+izsFTszbbUmuRE5YIltvJvcye4CTneC2xlCzl77M5WVkCI0q8nglwayaA6mTEka8mvfFSzgjxpkNQoAv8N7MBcitGYtrebd8syqomhtIudVsXSOJgA8hw88h3ro1mz0b8QXvjce/WeVsOoJAL/B+zBPobdrTGeh5uTK/Fp823Nx/6La986qciCY++r2pXB5ecPh9oTb+M1gcrZawgWcjUIDjFIg2K/wIXTG2Qq6dXnB8X/CR3tAqVueZO0reBdO4B1x9CvPT2WpDUIFSmu/UijPtQck4OxruAUn/gRbfW/t4vgJRdOtMUeF+6EIBPvG05jFIkj0LuJzu5M97CYJKHvoP1KRORE52tGOdrT/gf0Dkkzv5XDnUYIAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {
				"Correction": 0,
				"iterations": 3,
				"mode": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4((($uv.w>0.5&&$uv.w<1.5)||($uv.w>3.5&&$uv.w<4.5))?1.0:0.0,0.0,0.0,length($uv)-0.4)",
						"function": true,
						"label": "SDF3D",
						"longdesc": "The object that will be repeated",
						"name": "obj3d",
						"shortdesc": "V4->V4",
						"type": "v4v4"
					},
					{
						"default": "$uv",
						"function": true,
						"label": "V4->V4 3D Transformation",
						"longdesc": "The transformation that will be applied each iteration",
						"name": "trans3d",
						"shortdesc": "V4->V4 Transformation",
						"type": "v4v4"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"function": true,
						"label": "SDF2D Custom Boolean",
						"longdesc": "(opcional) The combine operation, defined as a SDF2D.\nWill be applied after each SDF3D evaluation to combine with the previous result.",
						"name": "custombool",
						"shortdesc": "SDF2D Join",
						"type": "sdf2d"
					}
				],
				"instance": "\nvec4 for_fold_$name(vec4 p,float mfsdftype) {\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n  }\n  vec4 o=$obj3d(vec4(p.xyz,mfsdftype));\n  return vec4(o.xyz,o.w/p.w);\n}\n\nvec4 for_min_$name(vec4 p,float mfsdftype) {\n  vec4 d=$obj3d(vec4(p.xyz,mfsdftype));\n  vec4 m=d;\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(vec4(p.xyz,mfsdftype));\n\td.w=d.w/p.w;\n\tm=m.w<d.w?m:d;\n  }\n  return m;\n}\n\nvec4 for_custom_$name(vec4 p,float mfsdftype) {\n  vec4 d=$obj3d(vec4(p.xyz,mfsdftype));\n  vec4 m=d;\n  for(int i=0;i<$iterations;i++){\n    p=$trans3d(p);\n\td=$obj3d(vec4(p.xyz,mfsdftype));\n\tfloat a=m.w;\n\tfloat b=d.w/p.w;\n\tfloat v=$custombool(vec2(a,b));\n    float e=0.001;\n\tvec2 n=normalize(vec2($custombool(vec2(a+e,b))-$custombool(vec2(a-e,b)),\n                          $custombool(vec2(a,b+e))-$custombool(vec2(a,b-e))));\t\t\t\t\n\tm=vec4(mix(m.xyz,d.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),v);\n  }\n  return vec4(m.xyz,m.w/(1.0+$Correction));\n}\n",
				"longdesc": "Type - SDF3D Generator\nCode - PauloFalcao\n\nRepeats a shape x Iterations times, and for each iteration uses the transformation in 3D Transformation Node.\n\n3D transformation node uses the generic V4->V4 Type\n\nThere are 3 modes available:\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
				"name": "MFSDF Fractal",
				"outputs": [
					{
						"shortdesc": "V4->V4 Output",
						"type": "v4v4",
						"v4v4": "$mode"
					}
				],
				"parameters": [
					{
						"default": 24,
						"label": "Iterations",
						"longdesc": "Number of Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "0",
								"value": "0"
							},
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "11",
								"value": "11"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "15",
								"value": "15"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "17",
								"value": "17"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "19",
								"value": "19"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "22",
								"value": "22"
							},
							{
								"name": "23",
								"value": "23"
							},
							{
								"name": "24",
								"value": "24"
							}
						]
					},
					{
						"default": 1,
						"label": "Mode",
						"longdesc": "Iteration combine mode.\n - Fold\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated only once after the last iteration.\n     Using operators like Axis Symmetry is possible to repeat space.\n - Min\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the min operation.\n - Custom\n     Transforms space x Iterations times.\n     The object SDF3D is evaluated for each iteration,\n     and combined with the previous result using the custom SDF2D operation.",
						"name": "mode",
						"type": "enum",
						"values": [
							{
								"name": "Fold",
								"value": "for_fold_$name(vec4($uv.xyz,1.0),$uv.w)"
							},
							{
								"name": "Min",
								"value": "for_min_$name(vec4($uv.xyz,1.0),$uv.w)"
							},
							{
								"name": "Custom",
								"value": "for_custom_$name(vec4($uv.xyz,1.0),$uv.w)"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Only used for Mode Custom.\nKeep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Fractal"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Fractal",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Gamma": 1,
				"Samples": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint magicaa_rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat magicaa_RandomFloat01(inout uint state){\n    uint r=magicaa_rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"type": "rgb"
					}
				],
				"instance": "vec3 randomAA_$name(vec2 uv){\n\tfloat dx = dFdx(uv.x);\n\tfloat dy = dFdy(uv.y);\n\t\n\t// Init random\n\tvec2 rndgen=vec2(\n\t\t\t\tfract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453),\n\t\t\t\tfract(sin(dot(uv, vec2(37.1235, 67.734))) * 73748.3423))*17243.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint($time*1000.0) * uint(26699)) | uint(1);\n\t\n\tvec2 xy;\n\t\n\tvec3 aa=vec3(0.0);\n\tfor(int i=0;i<$Samples;i++){\n\t\txy=((uv.xy+(vec2(magicaa_RandomFloat01(rngState),magicaa_RandomFloat01(rngState))-0.5)*vec2(dx,dy)));\n\t\taa+=$in(xy);\n\t}\n\treturn pow(aa/float($Samples),1.0/vec3($Gamma));\n}",
				"longdesc": "Type - Image operation\nCode - PauloFalcao\n\nGenerates an image anti-aliasing using random points in the pixel space.",
				"name": "Magic AA",
				"outputs": [
					{
						"rgb": "randomAA_$name($uv)",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"default": 18,
						"label": "",
						"name": "Samples",
						"shortdesc": "Number of samples",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "24",
								"value": "24"
							},
							{
								"name": "32",
								"value": "32"
							},
							{
								"name": "48",
								"value": "48"
							},
							{
								"name": "64",
								"value": "64"
							},
							{
								"name": "96",
								"value": "96"
							},
							{
								"name": "128",
								"value": "128"
							},
							{
								"name": "192",
								"value": "192"
							},
							{
								"name": "256",
								"value": "256"
							},
							{
								"name": "384",
								"value": "384"
							},
							{
								"name": "512",
								"value": "512"
							},
							{
								"name": "768",
								"value": "768"
							},
							{
								"name": "1024",
								"value": "1024"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "Gamma",
						"max": 3,
						"min": 0,
						"name": "Gamma",
						"step": 0.1,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/Image/Util/Magic AA",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Axis": 0,
				"f": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Util\nCode - PauloFalcao\n\nConvert a TEX3D to Image\n",
				"name": "TEX3D to Image",
				"outputs": [
					{
						"rgb": "$in(vec3($Axis)).rgb",
						"shortdesc": "Color",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "",
						"name": "Axis",
						"shortdesc": "Axis",
						"type": "enum",
						"values": [
							{
								"name": "X",
								"value": "$f,$uv.x,$uv.y"
							},
							{
								"name": "Y",
								"value": "$uv.x,$f,$uv.y"
							},
							{
								"name": "Z",
								"value": "$uv.x,$uv.y,$f"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "f",
						"shortdesc": "3º field position",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/TEX3D/Util/TEX3D to Image",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec4 coord_union(vec4 a, vec4 b) {\n    if(length(a.xyz)<length(b.xyz)){\n\t\treturn vec4(a);\n\t} else {\n\t\treturn vec4(b);\n\t}\n}",
				"inputs": [
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF A",
						"type": "v4v4"
					},
					{
						"default": "vec2(0.0)",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF B",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean operation (union, intersection or difference) between two shapes",
				"name": "V4V4 Coordinates Union",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "coord_union($in1($uv), $in2($uv))"
					}
				],
				"parameters": [

				],
				"shortdesc": "V4V4 Coordinates Union"
			},
			"tree_item": "PauloFalcao/V4->V4/Operator/V4V4 Coordinates Union",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"s": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "1.0",
						"label": "",
						"longdesc": "The input object as a signed distance function",
						"name": "in",
						"shortdesc": "Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Folds space by inverting the coordinates of space outside the box ",
				"name": "SDF Box Folding",
				"outputs": [
					{
						"longdesc": "The scaled object",
						"sdf3d": "$in(clamp($uv,-$s,$s)*2.0-$uv)",
						"shortdesc": "Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "",
						"max": 5,
						"min": 0,
						"name": "s",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Box Folding"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Box Folding",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"s": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "vec4(0.0)",
						"label": "",
						"longdesc": "The input object as a signed distance function",
						"name": "in",
						"shortdesc": "Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Folds space by inverting the coordinates of space outside the box ",
				"name": "MFSDF Box Folding",
				"outputs": [
					{
						"longdesc": "The scaled object",
						"shortdesc": "Output",
						"type": "v4v4",
						"v4v4": "$in(vec4(clamp($uv.xyz,-$s,$s)*2.0-$uv.xyz,$uv.w)) "
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "",
						"max": 5,
						"min": 0,
						"name": "s",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Box Folding"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Box Folding",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"blur": 0,
				"iterations": 4
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"name": "in",
						"shortdesc": "SDF2D Input",
						"type": "sdf2d"
					}
				],
				"instance": "float blursdf_$name(in vec2 p,in float r){\n\tfloat a=0.0;\n\t//fibonacci angle\n\tfor(int i=0;i<$iterations;i++){\n\t\tfloat g=float(i)*2.39996322973;\n\t\tfloat v=r*sqrt(float(i))*0.01;\n\t\ta+=$in(p+vec2(v*cos(g),v*sin(g))*(1.0/sqrt($iterations.0)));\n\t}\n\n\treturn a/$iterations.0;\n}",
				"longdesc": "Type - SDF2D Operator\nCode - PauloFalcao\n\nBlurs a SDF2D sampling fibonacci points on a disc",
				"name": "SDF2D Blur",
				"outputs": [
					{
						"sdf2d": "blursdf_$name($uv,$blur)",
						"shortdesc": "SDF2D Output",
						"type": "sdf2d"
					}
				],
				"parameters": [
					{
						"default": 4,
						"label": "Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							},
							{
								"name": "89",
								"value": "89"
							},
							{
								"name": "144",
								"value": "144"
							},
							{
								"name": "233",
								"value": "233"
							},
							{
								"name": "377",
								"value": "377"
							},
							{
								"name": "610",
								"value": "610"
							},
							{
								"name": "987",
								"value": "987"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Blur",
						"max": 5,
						"min": 0,
						"name": "blur",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF2D/Operator/SDF2D Blur",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"blur": 0,
				"bound": 1,
				"iterations": 3
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "",
						"longdesc": "SDF3D Input",
						"name": "in",
						"type": "sdf3d"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$in(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$in(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nBlurs a SDF3D sampling fibonacci points on a sphere surface",
				"name": "SDF Blur",
				"outputs": [
					{
						"longdesc": "SDF3D Output",
						"sdf3d": "blursdf3d_$name($uv,$blur,$bound)",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"default": 3,
						"label": "Iterations",
						"name": "iterations",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							},
							{
								"name": "89",
								"value": "89"
							},
							{
								"name": "144",
								"value": "144"
							},
							{
								"name": "233",
								"value": "233"
							},
							{
								"name": "377",
								"value": "377"
							},
							{
								"name": "610",
								"value": "610"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Blur",
						"max": 5,
						"min": 0,
						"name": "blur",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Bound",
						"max": 10,
						"min": 0,
						"name": "bound",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Blur",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"Bound": 0.01,
				"Correction": 0,
				"Distort": 0.02
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D",
						"name": "sdf",
						"shortdesc": "SDF3D Input",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0)",
						"function": true,
						"label": "TEX3D",
						"name": "tex3d",
						"shortdesc": "TEX3D Input",
						"type": "tex3d"
					}
				],
				"instance": "\nfloat distort_$name(vec3 uv){\n    float sdf=$sdf(uv);\n\tif (abs(sdf)>(abs($Distort)+$Bound)){\n\t\treturn sdf;\n\t} else {\n\t\tvec3 s=$tex3d(vec4(uv,0.0));\n\t    return sdf-s.x*$Distort;\n\t}\n}\n",
				"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nDisplace a 3DSDF based on a TEX3D in a direction",
				"name": "SDF Displace",
				"outputs": [
					{
						"sdf3d": "distort_$name($uv)/(1.0+abs($Distort*$Correction))",
						"shortdesc": "SDF3D Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.1,
						"label": "Amount",
						"longdesc": "Displace amount",
						"max": 1,
						"min": 0,
						"name": "Distort",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
						"max": 10,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.1,
						"label": "Bound",
						"max": 10,
						"min": 0,
						"name": "Bound",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Displace",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAAENJJREFUaIHNWluMXtdV/tba+1z+mfFcMr7LcVrnMm7lJtAGEpO2CcRSU0RCH4CKSkBFRhGqorYPVV/SdxwEEg+YpGRaCRU1FZCCaFGqigiFtnGkmrbEiZ3xJbFTx/VtPJ7L///nnL3XWjxsz+/xZMbYnkHwPYzO/Jdz1u371tp7//S5xz9f5h5AEyKAKKqmufdEiKKiSkCReccMAECnroOoqYHgHefeZ44BNFHSBzLHuffOsZkBUDNVI4KoRRFRYyI1E1UCgQBDEAEgak2MTRADmIgIZZ6pGgBiKrwvcm8GM1MzgIgAkJ+ZuThHUDMC8sznznmmUHUBOGZnFqK0a2Mix+Sd82aewBk1ITaV1KoiGkWbKHWIRebKPMu9UwMBzrFjShYzkQG5d0E09w5qUZQITFwQHHOeu1bRp2aduqlDnGlX3XbHDN5xnnnAi7GZ1UFUFUQhCgC/LlMmMjNR1RhiRB1jFI0iqsZMntnMDPDMZZ6JqogQUeadJ2rqRlRNrWQucyMyizFEeOeiSDdK5p0ZQBBRZiKiJkQDCOSYhvpbPvNRRAB4X3fNABFVswEPeDIYk0WpY13Vao6JQJ6QO285gqhvqnnHVHifMYmpmhKpyxlwBIhqiJEdqZohWgiOwICpaYM6iqq28owYBhE1FW2iEJESmiBMxJR5x0QwhzxzZeaJPGBqgFmQWuo6RgkiwTlVrYM4R8ycOeeYc+/IQDCNkVS9931lXmQ+c6xmauznZi+JKhNljg2IIkzkmNUUBgNClCjimDPHzCRqapp7x0SqpmYzXVVTJjaYiALwjpmpdN5gFoIpMzOAOlrTBUC5d0SUCl1EGWgxEZQc+jwxURMjm5jAjJm5ICIWIzOT+bnuPFBkXlTrID5HKMss8847NrMQ4R17xzBjoqgqymZZiDGKqio5AqAWVMwTvHOckSiJihnABiKRCEUTazMFyDt2TKIWRVNNds1ClJQaA8yMmaNokfnEFu9ciNKpm9z7PPO5d0WeuctcgpqRxILZefMb1hUAMs8iagTvESXWUdOnQxRRCyKOucy8L3ImElUARBAxNTUzYhTei6qIRZG6aZJGRVE1a4Kpmqg2MRLIOWYigxEo946ZkqQwUYQZwN4xqPDkOWMix6jqamZ+nghmYKZWljFToqWvQyRCHaKZXX5eFFXNnFNYunfmnarVIc5XNZCEDJljIvKORa3MffJQDYCNrOtzzFE0aUMS08w577iJIqp1iJ2qWVBeUtOmETMrcl9kWYgCWIhahyCJuERRNCmhYz9X1aqaee+Z/aV2t8h8EiIAquYdKwEEB44qDHJMee4I1Md5EijnmEBE8I6JyMxUrY7imYnw0A8OGkBYiq7ZKx/d5ZgHymKwr4yiKS5qxkypXSCxLiZeETkyQ1JMdqyGqgkpKICYM3ry0Y8DBlATIjH1JDUlKz2YiFTVDGqWyFc1IYj8zmtvYzlDrx8GFMBLD96TelwUSXkDKGrSZ1MzW7gAcIU2RLl3PvMsYpZiYNZEASFGTWRqoqipqv3eGyd5FYauBAIa4GMv/9fiFyuzHz6wqw6USjq1wijapLwklnuXOWcA/eHDvyJqTRQRDSJ/cvS0Awhop5L6f4Np1ZfvvYuJmC53llRy9Nh9u0BgYjP7+tvnZsyC2buqm5gvqCqgZpf+73xxgAMyomDWAA7Y4f2/1fWRj34oiaQnJgKY8LW3zs2ZjRBFotucO6s66v2sakF0UbUBOmaVWed/2RkHFETBbJi5axaBGdUWMMp8UXXO7MWqergojjFl5DLn3I7N6xNr3n9h9oLqHADglGoGBOB93kdgiHmU2QPDzACGiBhwRGGNLC6JMiIDNjDvcG4d89EYS6LXY8yBttmY9wq8I9LPDKBr9s6xU2H7xqhGL7zwQrqRHx/fwDxjdgvzIBGAQaKCCMAA0XnVGbOSKJrNmJXAoRhHmRXomBVE1XVnhoGSqDLrIxJgu3MXVI/EeKf3DIwy//n8/GdaLQccF/l2Vd3j/SWzX82yAyHs8v6oyJsxDhC91GoBcJ/+9KcBjI+P36eKFFezaTMmuqR6VORdVQccFlnP7Im2OXcghJ1Zdqf3o8y3e39CpAY2MgPIibL3ZIYABlpECowwDxEpcLv3FdBH9O2qui/PR5gPx7iR+YdN44gc8NedTgA2OfdmjG2zM6oBmBTpmA0wn1E9m+cAaGRkBMDExET9+OMp3ljgTQn0EXXM1jMrcFp1I/Mg0cEYS6LfyPOzqrc6F8wumY0QHYxxA/OxGAeZ581awDsim5wbZQ5md3r/4xCGiL5f158oiinVwzFuce57VfVHfX1HYvyHqnowz+fNFDga4wjzeZGtzrXNHDBnFswqIHWDCni9vx+A78XpzRjvybJ0LYCYVUDHrEV0RtUDG5lHmM+JbHNuu3M/bJp7suykyEZmBv6pqn67LA2I3ptZH9EbIXwwy9TszRhHiM6rvto0v57nJVEAftQ036/rz/X3DzN/u6oKgICfhXALMwEzqhlgwM9FFAhX16cAX3z++cvp7XFg/RNPXLjcolekWm3WT7SeedYsJ5pX3ZVlHbNgJoACJ0Tu8b5ttnd+fsz7TxYFAT8J4ZjImPdHY0wi85bIKPPPQrjb+4tmJUBAClMN1Gapwa3UihoAwOeffz4xCokD3WuyUIC2WQRq4BeqHbPGrEV0MIRzqgasZ54325PnLaINzE8PDr4R40mRt0VKov9omvc7dzjGf2+aFtHxGBm41bljItOqF82OiVRm02Zzqo1ZbXbtRvpaf//4+Dh6HEiYuMY3rgYBOZEDBBggYuCc6g7nTolcNLs/yzYy/0W7PUB0h/f/2O3e6lzbbN5s3qxvYZiZMSNAgXiDvaUBXuvvn5iYwOISAmDj4zc6mfFC6/FAi4iAAeYzIgp8ZW7uywMDp0ROiVxQ9cCUmQdST5WVK+Q6HUjXV1RofHz8b3oldePgpKELf79X158qy6fn57c4966IAl0zXdCQVaIGvvBeEgOoHn+8pNVMx5dTUZmdUS2JzonMmb0Z46WV5eEm0NNQJBlNbADwV6u+dVt1q3Opxb5Y19uY58zm13p8YiARAEtKZt3qwg+gRXRCJE0yW5k3OTejOrDq2y7BB/3l9jU+Pn7FgYmJifOrTnQD7PR+iHkd0YN5TsAvVPM1dUCAQzGm64mJiatk9BtE9erS7YDZhZnvrOoW5r/rdgeIptaOA81CC0ugkZGRXj0d+exn7/J+hS9eFwqiYSIAh2J8qa7v9P61EPrW2oGehmKJCgHAAqFvDh7IiIaIBJhSfSPGV5tmiPmcyGpuuxg9B1Lc/fjVFj+3ul2GjIiAn4uk5V80+6UsOxjWZOWzPK7KwPj4+LNmfhWc88CU6h3evysypTpt9qOmuYX5/NploAu8saiErpLRiYkJWrViDDJ74E7vKyCYbXNubfdjGOh2uyGEy3vyWNTIADxj5lbhAwMEHBc5HGMObHfutRhXJQvLPeK+++5L19u3b79KRgF8OcbVCJEDRpiHiTpmJ0S+2unc7lwDnFlTEmP37v3796d/l9q6yqbPQG12QvWUyMEYP1EUM2ZHF/rO6hGA/QAWrEci8fj4eK8VAKtS0rR+Z2Ad83er6u4se7GqAKxVH0jhT9cpCVdK6IoPq3DAAQHomL1YVb/bah2P8UAIJdEv1qiEFjuQcEUhxsfHx1fXxQAQMES0mfmLAwObmA+EcKtz2SpvugjuPa9c4UAvA8tu7V8nEoVaRJuZX6zrHd6fEWlu9m7vxeI87t+/3znnr6p+AIAu5+gN4azqU3Nzv99qRTMHrHJAXIJU+rt37waQZdkyimlmuNlWQEDXbJT5j1uttGF4h/en106FCqLd99+frp988skHHnhgmS65Gr0QoAFerutvVdVDRfGhLJtWba3demDx3vi9996LJX0gkfhPzTbc7CM9kAEPFsXDRTGreijGHc5dWKMM2KLa/vCHP1wUBXrrgcX68zxR+2arloCCqJ+oRfSV2dkvDAx8p6rOq86tRR9IYrAfIKJvfvObl5/Ym0aTD2ZmZl/rne/dIFJF7vL++3U9zPzTEH4awkbma2xaXj+a1IaBVquVjv4nJiaucOC5555TVREJIbwVY7jZJCjw9W73Q1k2zHxG9eN5Xq3edgCLxhzmK2ZfvjKzubm5L33pSzHGu++++2+3bz8pcv1nFosxRPTZVuvVpvm5yBbmC6rNWshoBGZVVbXVaqUtvcsrsvR20zQzMzN79+41swMHDoyNjf1lu/1Qnu8pimG+gXnegBmzsyF8NM9/1DRbnftB0/QTrcaHtK88Zzan6vNcRJ5++uneBHR5PZBKn4iIiJknJyfHPvCB14Dq+PFHimKY6DqXaQQMEFVmEZg3m1PtJ7rpc0EDamBedc7s/MDA1q1bNw8M3H777VNTU3me53lORFeGOTPTBYiIiIyNjQHYefz4L2fZDueK6/Ah7VqvZ/77brdj9ptFMdHphBvffwaQQjCr2kf0Vn//tm3bJicn3QKY+dlnn83z/KoFTcpDz4Hkw+Tk5LDqbxXFw0XR9z/5QEAE7nQuJ5o3e77bbRH9uGluSNMUaJvVZjNmUwMD27ZtA3DkyBFmTqYnpNWva7VaVx6ffke3gEcffbTdbp85c6Yi+mkI51Xv8L685qqZgH6if63rX8vzfe324RhvYbarO+g1YEAAplVPql5Q7a5blwI/PT3tvV8c/p4VS2chItq3b1+3252amjp//rz3vizL6enpycnJ/ar3xzjKfJtzK+0WJjP/oNX6TlV9qiy/2umcErnO0VCAWbOO2WmRGcA5N7ZtW57nPaOT3Qm9b12VgYmJiccee8x7z8zpm2VZOudijK1Wa2pq6lWRwgxEI8zZCj4okAEdgIBR5o7ZRdVrzxLp9GDOLACHRAIzM4+NjW3evHnHjh179ux55JFHXnnllcWV04NPc8SSobooiiRHyfssy9LgMTk5+aJIBM6IfCzP1y3XsAnomM2qdonOqvYRFUQrHcDZAlnnzS6qnjdzzo2NjRVFcdttt23ZsmXDhg3Dw8NDQ0PPPPNMURTvXXIt3Znr4bJIESUfvPdZljnnROQd4B3g7aNHHyvLrcxLFPYW5h+H8ImiOCnyeozFyusBAebNGrNLZidVnXMOGBsb27Jly5YtWzZt2jQ6Ojo8PNzf358KAQvNa7HNy62JFyHGWFXV7Ozs9PT03r17k0Dddddd6d2x48d3eb/T+8UKG8y2O/eNbvcD3r/Pue/W9bsiSxpZr2YicFoEg4OJrB/5yEe2bt26efPmXuDLsizLcln/U+FcfUq5nA8i8sQTT6jqYoU1s9Ql7jh2bMz7XVnWv+BDOtz/zxAGif6lqh4qisMxzi8Mc7ZA1gGi4zHOrVuXVHJycrKnkk899dTQ0NDAwEBZln6FTapeEpZubC32YXGmei2i1+lUNflw+tChz7Rad2fZCHP6sdQgUTrqez3G71ZVSXRRFYAAHbO22bsiMjgIIAU+Fepigd+3b19ZrqjYy5fQYh+WJcY1fADwyRMn1jPf5tw6ZjMbYv7nqtrp/be63RHmS6o1MKvaNrugmmomBX6J6WnSTKYvWxFLbFs+Aysx2xbQc6DXrQF8jHl3nt/j/TBzbdY2+0kIJdFPQjirOm+WAwdFdu7cmcYtvhrv1fjFJq1k1Yokvh4fVHXPnj2nT5/udrvJhz3O3Z9lW51LPwvZ6f2ftdunRKLZGdVZIIkJgCWBX8n6nm0r2fPfod+2LibS7YUAAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {
				"r": 0.1,
				"sx": 1,
				"sy": 1,
				"sz": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "float box3d(vec3 uv, vec3 s) {\n\tvec3 q = abs(uv) - s;\n\treturn length(max(q, 0.0))+min(max(q.x, max(q.y, q.z)), 0.0);\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "Distortion",
						"name": "t",
						"type": "tex3d_gs"
					}
				],
				"instance": "",
				"longdesc": "Generates a rounded box as a signed distance function",
				"name": "SDF Box with Distortion",
				"outputs": [
					{
						"longdesc": "Shows the rounded box",
						"sdf3d": "(box3d($uv, vec3($sx, $sy, $sz)-$r/2.0)-$r/2.0)+$t($uv)*((box3d($uv, vec3($sx, $sy, $sz)-$r)-$r)-(box3d($uv, vec3($sx, $sy, $sz)-$r/2.0)-$r/2.0))",
						"shortdesc": "Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "Rect1.x",
						"default": 0.5,
						"label": "Size X",
						"longdesc": "The size of the box along the X axis",
						"max": 1,
						"min": 0,
						"name": "sx",
						"shortdesc": "Size.x",
						"step": 0.01,
						"type": "float"
					},
					{
						"control": "Rect1.y",
						"default": 0.5,
						"label": "Size Y",
						"longdesc": "The size of the box along the Y axis",
						"max": 1,
						"min": 0,
						"name": "sy",
						"shortdesc": "Size.y",
						"step": 0.01,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Size Z",
						"longdesc": "The size of the box along the Z axis",
						"max": 1,
						"min": 0,
						"name": "sz",
						"shortdesc": "Size.z",
						"step": 0.01,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Radius",
						"longdesc": "The radius of the rounded box",
						"max": 1,
						"min": 0,
						"name": "r",
						"shortdesc": "Radius",
						"step": 0.01,
						"type": "float"
					}
				],
				"shortdesc": "SDF Box with Distortion"
			},
			"tree_item": "PauloFalcao/SDF3D/Generator/SDF Box with Distortion",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"ax": 0,
				"ay": 0,
				"az": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec3 rotate3d_with_modulation(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "xt",
						"shortdesc": "TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "0.0",
						"label": "",
						"name": "yt",
						"shortdesc": "TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "0.0",
						"label": "",
						"name": "zt",
						"shortdesc": "TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "0.0",
						"label": "",
						"longdesc": "The input object as signed distance function",
						"name": "in",
						"shortdesc": "Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Rotates its input 3D object described as a signed distance function.",
				"name": "Rotate with TEX3D modulation",
				"outputs": [
					{
						"longdesc": "The rotated object",
						"sdf3d": "$in(rotate3d_with_modulation($uv, -vec3($xt($uv)*$ax, $yt($uv)*$ay, $zt($uv)*$az)*0.01745329251))",
						"shortdesc": "Output",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "X",
						"longdesc": "The rotation around the X axis",
						"max": 180,
						"min": -180,
						"name": "ax",
						"shortdesc": "Rotate.x",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Y",
						"longdesc": "The rotation around the Y axis",
						"max": 180,
						"min": -180,
						"name": "ay",
						"shortdesc": "Rotate.y",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"longdesc": "The rotation around the Z axis",
						"max": 180,
						"min": -180,
						"name": "az",
						"shortdesc": "Rotate.z",
						"step": 1,
						"type": "float"
					}
				],
				"shortdesc": "Rotate"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Rotate with TEX3D modulation",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"MaxDistance": 200,
				"MaxRayLoop": 5,
				"MaxRefIte": 4,
				"Precision": 2,
				"Samples": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "\n//MATH\nconst float pathtracing_PI=3.14159265359;\nconst float pathtracing_TAU=6.28318530718;\n\nvoid pathtracing_Onb(in vec3 N, inout vec3 T, inout vec3 B){\n    vec3 UpVector=abs(N.z)<0.999?vec3(0,0,1):vec3(1,0,0);\n    T=normalize(cross(UpVector,N));\n    B=cross(N,T);\n}\n\nvec2 pathtracing_equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*pathtracing_PI,pathtracing_PI);\n}\n\n// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint pathtracing_rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat pathtracing_RandomFloat01(inout uint state){\n    uint r=pathtracing_rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n// SAMPLING START\n\nvec3 pathtracing_uniformSampleSphere(float r1,float r2){\n    float z=1.0-2.0*r1;\n    float r=sqrt(max(0.0,1.0-z*z));\n    float phi=pathtracing_TAU*r2;\n    return vec3(r*cos(phi),r*sin(phi),z);\n}\n\nvec3 pathtracing_cosineSampleHemissphere(inout uint state,vec3 n){\n    float u1=pathtracing_RandomFloat01(state);\n    float u2=pathtracing_RandomFloat01(state);\n    return normalize(n+pathtracing_uniformSampleSphere(u1,u2)); \n}\n\n// Adapted from \"Sampling the GGX Distribution of Visible Normals\",\n// http://jcgt.org/published/0007/04/01/\nvec3 pathtracing_SampleGGXVNDF(inout uint state,vec3 Ve,float alpha_x,float alpha_y){\n    float U1=pathtracing_RandomFloat01(state);\n    float U2=pathtracing_RandomFloat01(state);\n    \n    //transforming the view direction to the hemisphere configuration\n    vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));\n\n    //orthonormal basis\n    vec3 T1;vec3 T2;\n    pathtracing_Onb(Vh,T1,T2);\n\n    //parameterization of the projected area\n    float r = sqrt(U1); \n    float phi = 2.0 * pathtracing_PI * U2;    \n    float t1 = r * cos(phi);\n    float t2 = r * sin(phi);\n    float s = 0.5 * (1.0 + Vh.z);\n    t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;\n\n    //reprojection onto hemisphere\n    vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2))*Vh;\n\n    //transforming the normal back to the ellipsoid configuration\n    vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0f, Nh.z))); \n\n    return Ne;\n}\n\nfloat pathtracing_schlickWeight(float cosTheta) {\n    float m=clamp(1.-cosTheta,0.,1.);\n    float m2=m*m;\n    return m2*m2*m;\n}\n\n// SAMPLING END\n\n",
				"inputs": [
					{
						"default": "vec4(1.0,0.0,0.0,length($uv)-0.4)",
						"function": true,
						"label": "MFSDF",
						"name": "mfsdf",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					},
					{
						"default": "vec3(0.0)",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "\n//tetrahedron normal by PauloFalcao\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.$Precision,-0.$Precision,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid raymarch_$name(in vec3 o,in vec3 v,out vec3 p,inout float d){\n  float s;\n  for(int i=0;i<$MaxRayLoop;i++){\n    p=o+v*d;\n    s=$mfsdf(vec4(p,0.0)).w;\n    if (abs(s)<0.0$Precision) break;\n    d+=s;\n    if (d>$MaxDistance) break;\n  } \n}\n\nvec3 pathtracing_$name(vec2 uv) {\n\n\tfloat dx = dFdx(uv.x);\n\tfloat dy = dFdy(uv.y);\n\t\n\t// Init random\n\tvec2 rndgen=(uv+100.0)*10000.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint(TIME*100000.0)*uint(26699));\n\n\tvec3 o=vec3($CamX,$CamY,$CamZ)*$CamZoom; \n    vec3 t=vec3($LookAtX,$LookAtY,$LookAtZ);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 c=normalize(t-o);\n    vec3 cx=normalize(cross(u,c));\n    vec3 cy=normalize(cross(cx,c));\n\n    vec3 AAColor=vec3(0.0);\n\t\n    for(int AALoop=0;AALoop<$Samples;AALoop++){\n\t    \n\t    vec2 xy=((uv.xy+(vec2(pathtracing_RandomFloat01(rngState),pathtracing_RandomFloat01(rngState))-0.5)*vec2(dx,dy)))-0.5;\n\n\t    vec3 v=normalize(c*$CamD+cx*xy.x+cy*xy.y);\n\n\t    vec3 p;\n\t    float d=0.01;\n\t    vec3 rgb=vec3(1.0);\n\t    vec3 io=o;\n\t    int i;\n\n\t    for(i=0;i<$MaxRefIte;i++){\n\t    \n\t        raymarch_$name(io,v,p,d);\n\t        \n\t        vec3 n=normal_$name(p);\n\t        \n\t        //View direction to tangent space\n\t        vec3 ot;vec3 ob;pathtracing_Onb(n,ot,ob);\n\t        vec3 vt=vec3(dot(-v,ot),dot(-v,ob),dot(-v,n));\n\t\t\n\t        if (d<$MaxDistance){\t\n\t        //if (length(p-o)<$MaxDistance){\n\t        vec3 obj_Emission=$mfsdf(vec4(p,13.0)).rgb;\n\t        \n\t        if ((obj_Emission.x+obj_Emission.y+obj_Emission.z)>0.001){\n\t            rgb=obj_Emission*rgb;\n\t            break;\n\t        } else {\n\t            float s=pathtracing_RandomFloat01(rngState);\n\t\t\t\t\n\t            vec3 obj_BaseColor=$mfsdf(vec4(p,1.0)).rgb; // 1 - BaseColor  (r,g,b,sdf)\n\t            float obj_Metallic=clamp($mfsdf(vec4(p,2.0)).x,0.0,1.0);   // 2 - Metallic   (v,0,0,sdf)\n\t            float obj_Specular=clamp(max($mfsdf(vec4(p,4.0)).x,obj_Metallic),0.0,1.0);   // 4 - Specular   (v,0,0,sdf)\n\t            float obj_Roughness=$mfsdf(vec4(p,5.0)).x;  // 5 - Roughness  (v,0,0,sdf)\n\n\t            if (s>obj_Specular*obj_Specular*0.5){\n\t                rgb=(obj_BaseColor-obj_BaseColor*obj_Metallic)*rgb;\n\t                v=pathtracing_cosineSampleHemissphere(rngState,n);\n\t            } else {\n\n\t                float r2=obj_Roughness*obj_Roughness*0.5;\n\t                vec3 vndf=pathtracing_SampleGGXVNDF(rngState,vt,r2,r2);\n\t                vec3 nv=reflect(-vt,vndf);\n\n\t                //Sample direction back to camera space\n\t                nv=nv.x*ot+nv.y*ob+nv.z*n;\n\n\t                float FH=pathtracing_schlickWeight(dot(n,nv));\n\t\t\t\t\tvec3 Cspec0=mix(vec3(obj_Specular*0.25),obj_BaseColor,obj_Metallic);\n\t                vec3 Fs=mix(Cspec0,vec3(1.0),FH);\n\t                rgb=Fs*rgb;\n\t                \n\t                v=nv;\n\t            }\n\t            io=p;\n\t            d=0.01;\n\t        }\n\t        } else {\n\t        rgb*=$hdri(pathtracing_equirectangularMap(v.xzy)).xyz;\n\t        break;\n\t        }\n\t    }//for(int i\n\t    if (i==$MaxRefIte) rgb=vec3(0.0);//did not hit any light source\n\n\t\tAAColor+=max(rgb,vec3(0));\n\t}\n\n\treturn AAColor/floor($Samples);\n\t\n}\n\n",
				"longdesc": "Type - MFSDF Render\nCode - PauloFalcao\n\nPath tracing ray marching node for MFSDF objects using a environment 360 HDRI image\n\n",
				"name": "MFSDF Render Path Tracing",
				"outputs": [
					{
						"rgb": "pathtracing_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 50,
						"label": "MaxDistance",
						"longdesc": "Maximum render distance",
						"max": 500,
						"min": 1,
						"name": "MaxDistance",
						"step": 0.01,
						"type": "float"
					},
					{
						"default": 2,
						"label": "MaxRefIte",
						"longdesc": "Maximum reflection iterations",
						"name": "MaxRefIte",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "6",
								"value": "6"
							},
							{
								"name": "7",
								"value": "7"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "9",
								"value": "9"
							},
							{
								"name": "10",
								"value": "10"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "14",
								"value": "14"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "18",
								"value": "18"
							},
							{
								"name": "20",
								"value": "20"
							},
							{
								"name": "25",
								"value": "25"
							},
							{
								"name": "30",
								"value": "30"
							},
							{
								"name": "40",
								"value": "40"
							},
							{
								"name": "50",
								"value": "50"
							}
						]
					},
					{
						"default": 2,
						"label": "MaxRayLoop",
						"name": "MaxRayLoop",
						"type": "enum",
						"values": [
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "32",
								"value": "32"
							},
							{
								"name": "64",
								"value": "64"
							},
							{
								"name": "128",
								"value": "128"
							},
							{
								"name": "256",
								"value": "256"
							},
							{
								"name": "512",
								"value": "512"
							},
							{
								"name": "1024",
								"value": "1024"
							},
							{
								"name": "2048",
								"value": "2048"
							},
							{
								"name": "4096",
								"value": "4096"
							}
						]
					},
					{
						"default": 6,
						"label": "Precision",
						"name": "Precision",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "01"
							},
							{
								"name": "2",
								"value": "005"
							},
							{
								"name": "3",
								"value": "001"
							},
							{
								"name": "4",
								"value": "0005"
							},
							{
								"name": "5",
								"value": "0001"
							},
							{
								"name": "6",
								"value": "00005"
							},
							{
								"name": "7",
								"value": "00001"
							}
						]
					},
					{
						"default": 0,
						"label": "Samples",
						"name": "Samples",
						"type": "enum",
						"values": [
							{
								"name": "1",
								"value": "1"
							},
							{
								"name": "2",
								"value": "2"
							},
							{
								"name": "4",
								"value": "4"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "12",
								"value": "12"
							},
							{
								"name": "16",
								"value": "16"
							},
							{
								"name": "24",
								"value": "24"
							},
							{
								"name": "32",
								"value": "32"
							},
							{
								"name": "48",
								"value": "48"
							},
							{
								"name": "64",
								"value": "64"
							},
							{
								"name": "96",
								"value": "96"
							},
							{
								"name": "128",
								"value": "128"
							}
						]
					}
				],
				"shortdesc": "MFSDF Render Path Tracing"
			},
			"tree_item": "PauloFalcao/MFSDF/Render/MFSDF Render Path Tracing",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAAEC1JREFUaIF1WsuObclRXSsyT9V9drvbdtsSWEYMAIOhjUFu25IHxgwYIBgxQHwCQ76CD+AvMBIICTAwAYRtCQlb8gBoJrZ4mJYfdPe9davO3hmLQUTkzlO3OVLde6r2PpnxWLFiRe7DP/z93yNpZs1suEvah7t8DAdBcB+DgEvbPiSBaNaMBLQPP2/7cAcgyV0AWjMAANwdJACSBEieejv1ZjRJrZmZQeq9nXqXRBKSSxIAtTJp28c2RtzgLkkkxvDbbZPUzQzAcL+9O+/Dt7Fv+9j3cd53CWYEMMIzCQABMwMBwYzbPsJ6M5MUzjSzsKa1Ni81s3Cy93bV29WpGwlQ0L4PklKEDMOd5Nh3CCCMZqRIdwfUjCDNzIwS+o/eexYbz1gaDUQzO287ac2snXoElaSkbd8BmlFQb83I06kRNGP8amaCfLhDBONT4ZXLu7XTqTGTAwh3+z6Gj7TPeu+Qh9tybRrNrJuNiJ+QYWrNyL7tQ8joxvYkd/cxxqk3CcNlFEAAvfPU+8Prq/DHjABP+TEDZMzAkDhvu3ukLrfcx5C07eN2YyCkNyPZm/XWwpmAA0gjhwSym7VmEE69kXSJI7IBd+8v7u6kjC6gDAzoLodIkGzWWmtmjA0CwQDDXSN7axGwsIHMeyRRoAEwAEbC2EmC8es+vPfmrjGGoExjzzimuYSkMXwfrvoV4NWpN2PvLcrJWrNuhorDGB747q3R6MPJAIlF7ppZa9aahTWRxCoVBjrCL6MhHAsMABL2MQCcaGbWm6nLpX04pLvzFgENNKa3xg5ziciXS3D0j3zolUh0MxMAYIzhrlNvp96NtMZmLYJWxkOCu29jbPuIvEUgTmZDkiuMPbFFAbgUKPfhsXfEaUjDfduzuqLKIwrNDGbDBwmCiuwDLsSORkrq79+8CH4g2cyCdlyKkJM8oQEeaQOSUsOmbdtdaMZmBkIuAWaxjgV7xp1WeHD3aaJLyW6xe7Nm7K01WJQlid4aIBfkafTMtlwMCJ16a2Yrz5Acgy4B2MagDwkuNTIMK9Yn4PtI9gyHNQQhjJYgHFYGwUdZB4Sy4tNtnnrvrUV1Dvfhcu0R2fh7QQsAmxmN3chIbvGduytaGEl3H8MFRTg3gcYIBglBRgZTRmhJWdFAsGRYPzyiIcbG5NWpDZeX59ltfHuhc0EfZkEVZqQyQLDMlRF0qd9tGwCrLhOxjDQNd9bysUczoyiIYhBUXIkaCDcE7GOw1kkcRlyVngeme6PMhnu6YWZmnYlhVEeLRBlrX6O7olEA6HfnXRCECirGCP5N0wI2kmJXeXV7AlKBneU1JuIFGa03BpQjqFEGktyDqjIhkhCXquiDZxPSA1EkvZkgV+5GoIe8iaLxEiJBggACzT6CvBTskaUeoXJ3sDUzMj4dGUf0+7xHg55qJ0Bs1hrSaSCCEuQWn4VAY62pWNEsoRVknEW8jRGONqOZeYG1AJDiJORQ8ABds9FENygGS3mD7GVwJef4PoxMv4kevDxTZwIy8BHBsFORTLM0jwzYqFC+D++nFtQexOJQ7J0J2GN/gEQ3i89nEowRkQg5jY3G5NCkKbJHHUdtRBXN9JFJ6mYtSH14BpAH4WTEJTkg92RnIHk2ujSA6BSRuFlGFGCgQMbeZgeTFm9KIsL67NDRA2a9TgqtF0kkSQiiXIMzq4KQ/lJeNJDsKfiRJ4Q0tKy+0jlDCuCmSwE+WpS4EPIOgftIa0+1lJDI8IQJpRQhCNXvoxOpeh9JYM/4q8gqOS6JK2XWGgcQ7DbTlJlCMHprwQ/waoFm1iztY2m41pKw804rfiC5xGFmYOewiQui98Yq7T5786xAHHUSreCgJkiu4d5DM4e6cJfgJHtPIgFAU04V8VPLzTqb3BIpqowluuDu1QelgLKHhdkP0qwMQREdzSwAM3m5R0TB4EMYmiz+GAijAPkk2aOYVtHSDpmDbJnFYDNmAaGQdFn4y1IqHLMYU9LQAGhESWlAyNKqJEQdG0HSaqme1lde2Xq0lNqxOtoy2taCaXdCXzkJAFC9E6LNTCSILgAuuivSTiuBX/sFqsU1veCUN6SRXkDtp97q6sIqsljoMDbc0IU/dQNy1Yv6oiEDHCwaqq4SmaVUojA50MisCcJAxvCNYn4eaSRoNIen+is7qxfWYBXmmWWvBSrAS2YgEJyCIqybrjsmv00gkZY6Ki/UMHDEC7QZnkLmBHZBXO7emR3/KETW9DQ7Zy0yEVsBmW4QLrEWjzTe/f13+9UbDtyd33n6pU8OVwzuR6YYlGKoFBzwxwpHzDlyGh/XzayHrjJDNysq54qGDGQQyNFSc6HQ3kbGWQbJ7//J137+p3/90d3Z9qc8P3Np5+Nnf/PD7cMf+ue3//pTv/MbayAPsqq9ViTqntEzCVKRM3rqpGk1jwgd8AcaAVAyt+hmqCVmZcPI9o3vf+6TX35yd9tvbvT8RtsuYJg9MDsbfvXjX3znm+88+twbh9piujH/UBYnJ1jNdCNlzmVwgX5qbQI2hM1hfdV9/QUSrJabDdYFAwBuf/aPn/j4Z1/f96ubm/Hjd23bgi93oV31Ll29/lrzJ2//+Tc++ptvxf4TeHOXhEfxyowjeYzFmHcAvfceOA4ZE7G9pJ8MTEpL19SYUX8EHPiPP/7LL/7Ur324t/7uu6e7uwdB140yDmCjXTW7O58/8uqj24+++a0//dtP/fZXcuBcxG+OR2DMeUdaSow4HGKczQUL9DVjcxxDRWUO0TmGBw/G3aFn6tDxF558+PEYdne+Frr79fVVe3gd9bjt4wxEbrcXL56Anzg9aWYxaC9WoubTxOik2/whmDKZpbbUWfQ656DiLAIp7HKhGG5mBaGKSRLwyqPXHgDXvV2jn/jg4fWpxaRqPJ833m0SBq1tuw1/7clHRmxQLXeWph+jCKecwVqWPPAGsF+UhQ7kYZapp2r04cM1T6hCkAQp3f3F31298sbpcT8R3ezho4dXjVe9P3j6+Oa998V2duB21+4En37o6fMffe9bX/2rn/2trxzwWCPIA7c5OixUcXgDuMuUjZ9cBEUu5x4HFjGR7XXUsY+x7fvdtp+3fR9jH/7QDDc/NDO4aNaur0+Pn5yePH341T96+rGP8XQtdrRGs+tXHhPQ+++c4phI8lxwbGOEoA5VHaq06jOLo0aJo5l2dxkhw9JCJnOpTmcL/aWOp7wLb7vRgfGfX9dPfGGMcfvi7ur62smb3/0DH356+vhBb9r2sY+tte17/7BLAzhv++yOx/F9WhxiFO4o4C+kslBUXyVAdSutVZuQB5A3eJy+RLRi4Q24db24e3Z6+2vXH/0E3/jFzV3bHkm7O2/DbCf93X+9ffe/NuBMAtj3nTUoo2g6i4pjOC/9iWal8MgyG+pZi34Efp3rJz8UQLVmILoBAL715vOvf+vV69N5227f/x9//50zeP3wUbt+MIa79pvnz56fz9vV6U64kZ4Z3/jy52Nxj1ORhS6L5vJlpJmbHzKeoFt28V6pO2JfixyZnY7VYf8FfoJMf9ztFeB0dfX+eXtAXpltL57z9gZGN94B+9XpvfP23hjvkj/o7ZUSBQvTxMyDaUTAxgE5RK8DQZAwmAhCvdQsJtCnUvBCPJaQTKTe8/nf9/GI1ozemkvD2CQzjjGE9mLfnm37c/J/hR9f9WfDH/tAynAh2V2LTLjU5jg2V45kHp2sj0OclWUKfjjMD4fyhGeGJ5JZhd1+5dPf/c6/6e78uvTE7FrqAMcYru283Wz7C+NN7z9o+G+z17/02X14MKMvPZ/zAUvGv8IUfLr0bJKDINjd/aI7CH4fhIklX2p64bg4YaagZ5/+mbe//S8/uW1Pz9tjsw6YNKQduO3tudmPgHfMnnz+M8Pdkrcv2s4c5mqOZLXLiBoXEMRt1nHMFdVW882awxquoOO4vMbmKSUN3N/8ubf/6TuvXV89vjtfuZsE8gzekD9wueHVL/7y7P1higMsTTUXS2M5cVutf0EzCaUWEoIIFhZSids0t7gVxTuo52mq/k1RANtbv3QL3hIvvvnt0jN89IXPPArASBExgjanaKYSmm1eoWI8bZjmh9PLyBJaaKL5oJqiyxphJhdlu1+4Yk7cMePOzD18680jXlGoipOnNMIBo7SM3gQpkYskmtU5sVBdK85kenxQy7F5feZ4ao4ClUqGzkaBki6HIL7YWKEZVR4c1AuBcNDyaKJQP9G6YHf575BEYUmPGcA9kKA5NcStRsjhkSAd7MB8cjylQAncWRBHIS1TYTB6ZSWZw0myKH7qnQntGp3rPKCkfgaj18oVsctMzcBNpLGO3zDlakV1Bq7epP0LAGbt58QYhUjC0gXWRIW5O+NweR0OSxwA6KMgP89sVggcZxAxnhIzD2X9y5HGNIVxJr6yx7pBpCTOHevQ8EL+R1XUyGurmqtXL+3qpWuULaUoomb9CygU21bJ4/AhBkLUAFSEuxZ9IblsnH4lw8woLD145mxpc5TUs7l69RFhPhGcBs2lF7I7RPm9sq56vRfti1dV7UVkjgIvVpwHJEospR8rbfRcIy6uuqeMm/o73geLumbMMK/Xcx0tBAUhBcKUUGvLOlJQ909KXQMgQMkvZXmt0uca9SFeWLD8YOJfS8xi0K6fexKkYnAgZ6WYC+atGl0cO3wIdMdDhzyzqAGthx/CgjbwXuq5VGnSa56lZ2tSwQxEyfssDFZmluOlyIaWFHyQ7asPJA7RFk+pk596nG4fT24uD4Nm7R0itOrDzAr/IbmyqgqM2XMPyl/OCw6qWZvOS5nDkfrjXDGfd2fXYjea4CD83ueLW3whkCUnwPHYR0iUKzvebDNIEihsvxTeI7lLzdYWuse6R+M8Sr+b0d1oboLXYDlJfpLkwnkV7LjXl5CKKSxr26DjWZmTkYtEWbFZMTwBOMm1goSiBWi+STGXSrLUiiYnpemc6ReOlXH8s8SGAmiAX1Bq9aR7gOfUf4fqw1RcSzqWNpcGkBDYX5b+s1tYmL+ktlC9wuM+LiK7jhLznERbkZ9O1G5HP0HMU9G6l4B90Csw19PbRVrGlfhe1uxOtY5Q7JMFwPmHCEumkPVdoOn+VM0vVwLjuwEXKvrS8FXLXi7Q57vZFqfUTDCX/rmgbQt0rynFWrtxPU+kjgqeyK+grJW72C68FPtLPT7d6BUCZCHNOou0VkevjpuCZGqHmf3JngIEKr9AUwVU0KkSxDRnqhAlQo+qBS7Id4nVEaoYaMSYhD4IeBdipWRmibQofkjHJME6YJtH9ZP3M/zI7y6lD6V4KxhH98i4674Pmt5Bncuq1VCPfkpNJtRKRIruF8dSBX0FbBafpya5R/CVyntycE3qPXOnmTMN+U/PvM5aXLpQ5Tl73hKIDF51g2WvxVQDPJz/QFEalbv68IHWZ1YvVl4RYkeJ/f96pJjvYpG1K136kJ/JKWreUOSoCwOW22u9ucrRpHWBqsUsdJuqqoJf/ANk86vbE+2zk3N5QPoBXnMm9kjrakhNFBcSqQaXl+rw5V8iRP8HBjV1jH/Gu40AAAAASUVORK5CYII=",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"Gamma": 1.4,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"Shadow": 1,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 2.5
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec2 Simple360HDR_equirectangularMap(vec3 dir) {\n    const float PI=3.14159265359;\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
				"inputs": [
					{
						"default": "vec4((($uv.w>0.5&&$uv.w<1.5)||($uv.w>3.5&&$uv.w<4.5))?1.0:0.0,0.0,0.0,length($uv)-0.4)",
						"function": true,
						"label": "MFSDF",
						"name": "mfsdf",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					},
					{
						"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = $mfsdf(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = $mfsdf(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t    vec3 p=ro + rd*t;\n\t\tfloat h = $mfsdf(vec4(p,0.0)).w;\n\t\tfloat isLight=$mfsdf(vec4(p,13.0)).x;\n\t\tif (isLight>0.0) h=999999.0;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=$mfsdf(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1)\n\tfloat objMetallic=clamp($mfsdf(vec4(p,2.0)).x,0.0,1.0);  // 2 - Metallic  (v,0,0,sdf)\n\tfloat objSpecular=clamp(max($mfsdf(vec4(p,4.0)).x*0.2,objMetallic),0.0,1.0);  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=$mfsdf(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 objEmission=$mfsdf(vec4(p,13.0)).xyz; // 13 - Emission (r,g,b,sdf)\n\tobjColor=max(objColor,objEmission);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tif (objEmission.x>0.0){\n\t\t\tcolor=objEmission;\n\t\t} else {\n\t\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*((1.0-objMetallic)*objColor)+\n\t\t\tpow(r,pow(256.0,(1.0-objRoughness)))*objSpecular*mix(vec3(1.0),objColor,objMetallic)*(1.0-objRoughness)*16.0;\n\t\t}\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tvec3 objEmissionRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=$mfsdf(vec4(p,1.0)).xyz;\n\t\t\tobjEmissionRef=$mfsdf(vec4(p,13.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tif (objEmissionRef.x>0.0){\n\t\t\t  objColorRef=objEmissionRef;\n\t\t\t} else {\n\t\t\t  objColorRef=max(l,$AmbLight)*objColorRef;\n\t\t\t}\n\t\t} else {\n\t\t\tobjColorRef=$hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular*mix(vec3(1.0),objColor,objMetallic));\n\t} else {\n\t\tcolor=$hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
				"longdesc": "Type - MFSDF Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
				"name": "MFSDF Render",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2.2,
						"label": "Gamma",
						"longdesc": "Gamma Correction",
						"max": 3,
						"min": 0,
						"name": "Gamma",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/MFSDF/Render/MFSDF Render",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"BaseColor": {
					"a": 1,
					"b": 1,
					"g": 1,
					"r": 1,
					"type": "Color"
				},
				"Emission": 0,
				"Metallic": 0,
				"RotateX": 0,
				"RotateY": 0,
				"RotateZ": 0,
				"Roughness": 0,
				"Specular": 0.5,
				"TranlateX": 0,
				"TranlateY": 0,
				"TranlateZ": 0,
				"scale": 1
			},
			"seed": -5947,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"function": true,
						"label": "BaseColor",
						"name": "BaseColor_tex3d",
						"shortdesc": "TEX3D",
						"type": "tex3d"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Metallic",
						"name": "Metallic_tex3d",
						"shortdesc": "Grayscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Specular",
						"name": "Specular_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "1.0",
						"function": true,
						"label": "Roughness",
						"name": "Roughness_tex3d",
						"shortdesc": "Greyscale TEX3D",
						"type": "tex3d_gs"
					},
					{
						"default": "vec3(1.0)",
						"function": true,
						"label": "Emission",
						"name": "Emission_tex3d",
						"type": "tex3d"
					},
					{
						"default": "length($uv)-0.4 ",
						"function": true,
						"label": "Object",
						"name": "sdf3d",
						"shortdesc": "SDF3D",
						"type": "sdf3d"
					}
				],
				"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
				"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
				"name": "MFSDF Object",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF ",
						"type": "v4v4",
						"v4v4": "PBRObjectMaker_$name($uv)"
					}
				],
				"parameters": [
					{
						"default": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1
						},
						"label": "",
						"name": "BaseColor",
						"type": "color"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Metallic",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"max": 1,
						"min": 0,
						"name": "Roughness",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "Emission Scale",
						"max": 500,
						"min": 0,
						"name": "Emission",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "S",
						"longdesc": "Object scale",
						"max": 4,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "X",
						"max": 10,
						"min": -10,
						"name": "TranlateX",
						"shortdesc": "Translate X",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Y",
						"max": 10,
						"min": -10,
						"name": "TranlateY",
						"shortdesc": "Translate Y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"max": 10,
						"min": -10,
						"name": "TranlateZ",
						"shortdesc": "Translate Z",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Rx",
						"max": 180,
						"min": -180,
						"name": "RotateX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Ry",
						"max": 180,
						"min": -180,
						"name": "RotateY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Rz",
						"max": 180,
						"min": -180,
						"name": "RotateZ",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Object"
			},
			"tree_item": "PauloFalcao/MFSDF/Generator/MFSDF Object",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "sdf3d_translate_3_2",
					"to_port": 0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0,
					"to": "sdf3d_rotate_2",
					"to_port": 0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 0
				},
				{
					"from": "pxflib",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 1
				},
				{
					"from": "sdf3d_rotate_2",
					"from_port": 0,
					"to": "sdf3d_translate_3_3",
					"to_port": 0
				},
				{
					"from": "sdf3d_translate_3_3",
					"from_port": 0,
					"to": "pxflib",
					"to_port": 0
				},
				{
					"from": "sdf3d_boolean",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 8
				},
				{
					"from": "pxflib_5",
					"from_port": 0,
					"to": "pxflib_3",
					"to_port": 0
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "pxflib_3",
					"to_port": 1
				},
				{
					"from": "sdf3d_box_2",
					"from_port": 0,
					"to": "sdf3d_smoothboolean",
					"to_port": 0
				},
				{
					"from": "sdf3d_translate_3_4",
					"from_port": 0,
					"to": "sdf3d_smoothboolean",
					"to_port": 1
				},
				{
					"from": "sdf3d_smoothboolean",
					"from_port": 0,
					"to": "pxflib_5",
					"to_port": 8
				},
				{
					"from": "sdf3d_box_3",
					"from_port": 0,
					"to": "sdf3d_translate_3_4",
					"to_port": 0
				},
				{
					"from": "pxflib_3",
					"from_port": 0,
					"to": "gen_outputs",
					"to_port": 0
				}
			],
			"icon_data": "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",
			"label": "Stage",
			"longdesc": "",
			"name": "graph",
			"nodes": [
				{
					"name": "sdf3d_translate_3_4",
					"node_position": {
						"x": -726,
						"y": 1007.5
					},
					"parameters": {
						"x": 0,
						"y": 0,
						"z": -3.77
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_smoothboolean",
					"node_position": {
						"x": -709,
						"y": 881.5
					},
					"parameters": {
						"k": 2.35,
						"op": 0
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_smoothboolean"
				},
				{
					"name": "sdf3d_box_3",
					"node_position": {
						"x": -975,
						"y": 966.5
					},
					"parameters": {
						"r": 0.01,
						"sx": 6.22,
						"sy": 5.59,
						"sz": 0.37
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -974,
						"y": 794.5
					},
					"parameters": {
						"r": 0.01,
						"sx": 6.1,
						"sy": 0.47,
						"sz": 6.76
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -519.164001,
						"y": 641.947998
					},
					"parameters": {
						"Alpha": 0,
						"AmbientOcclusion": 0,
						"BaseColor": {
							"a": 1,
							"b": 0.378906,
							"g": 0.378906,
							"r": 0.378906,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"Normal": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 1,
						"Specular": 0,
						"TranlateX": 0,
						"TranlateY": -1,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0,1.0,1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.0,1.0,0.0)",
								"function": true,
								"label": "Normal",
								"name": "Normal_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Alpha",
								"name": "Alpha_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "AO",
								"longdesc": "Fake Ambient Occlusion",
								"name": "AmbientOcclusion_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*6.28318530718)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object Maker",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Clearcoat Normal Scale",
								"max": 1,
								"min": 0,
								"name": "Normal",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Alpha",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "AmbientOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 1,
								"min": 0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 1,
								"min": 0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 1,
								"min": 0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Maker with Rot Scale Trans"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -135.480026,
						"y": 649.5
					},
					"parameters": {
						"op": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "vec4 sdf3dc1_union(vec4 a, vec4 b) {\n\treturn vec4((a.w<b.w)?vec4(a):vec4(b));\n}\n",
						"inputs": [
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in1",
								"shortdesc": "V4->V4 MFSDF A",
								"type": "v4v4"
							},
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in2",
								"shortdesc": "V4->V4 MFSDF B",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean operation (union, intersection or difference) between two shapes",
						"name": "Boolean",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF",
								"type": "v4v4",
								"v4v4": "$op($in1($uv), $in2($uv))"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "",
								"name": "op",
								"type": "enum",
								"values": [
									{
										"name": "Union",
										"value": "sdf3dc1_union"
									}
								]
							}
						],
						"shortdesc": "Boolean"
					},
					"type": "shader"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -893,
						"y": 634.5
					},
					"parameters": {
						"mode": 4
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "SDF3D",
								"name": "in",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror symmetry using the chosen axis",
						"name": "Axis Symmetry",
						"outputs": [
							{
								"sdf3d": "$in(vec3($mode))",
								"shortdesc": "SDF3D output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 6,
								"label": "Axis",
								"longdesc": "Axis",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "XYZ",
										"value": "abs($uv.xyz)"
									},
									{
										"name": "XY",
										"value": "abs($uv.xy),$uv.z"
									},
									{
										"name": "XZ",
										"value": "abs($uv.x),$uv.y,abs($uv.z)"
									},
									{
										"name": "YZ",
										"value": "$uv.x,abs($uv.yz)"
									},
									{
										"name": "X",
										"value": "abs($uv.x),$uv.yz"
									},
									{
										"name": "Y",
										"value": "$uv.x,abs($uv.y),$uv.z"
									},
									{
										"name": "Z",
										"value": "$uv.x,$uv.y,abs($uv.z)"
									}
								]
							}
						],
						"shortdesc": "Axis Symmetry"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_translate_3_3",
					"node_position": {
						"x": -847,
						"y": 491.5
					},
					"parameters": {
						"x": 2.95,
						"y": 1.36,
						"z": 1.36
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": -536,
						"y": 227.5
					},
					"parameters": {
						"op": 0
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_boolean"
				},
				{
					"name": "sdf3d_rotate_2",
					"node_position": {
						"x": -830,
						"y": 283.5
					},
					"parameters": {
						"ax": 0,
						"ay": -39,
						"az": 65
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_rotate"
				},
				{
					"name": "sdf3d_translate_3_2",
					"node_position": {
						"x": -1031,
						"y": 220.5
					},
					"parameters": {
						"x": 0,
						"y": 3.23,
						"z": 0
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -1269,
						"y": 253.5
					},
					"parameters": {
						"r": 1,
						"sx": 0.89,
						"sy": 0.05,
						"sz": 0.81
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -351,
						"y": 218
					},
					"parameters": {
						"Alpha": 0,
						"AmbientOcclusion": 0,
						"BaseColor": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"Emission": 3,
						"Metallic": 0,
						"Normal": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 0,
						"Specular": 0.5,
						"TranlateX": 0,
						"TranlateY": 0,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0,1.0,1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.0,1.0,0.0)",
								"function": true,
								"label": "Normal",
								"name": "Normal_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Alpha",
								"name": "Alpha_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "AO",
								"longdesc": "Fake Ambient Occlusion",
								"name": "AmbientOcclusion_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*6.28318530718)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object Maker",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Clearcoat Normal Scale",
								"max": 1,
								"min": 0,
								"name": "Normal",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Alpha",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "AmbientOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 1,
								"min": 0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 1,
								"min": 0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 1,
								"min": 0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Maker with Rot Scale Trans"
					},
					"type": "shader"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -1769,
						"y": 559.265259
					},
					"parameters": {

					},
					"ports": [

					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": 164.519974,
						"y": 559.265259
					},
					"parameters": {

					},
					"ports": [
						{
							"name": "unnamed",
							"type": "v4v4"
						}
					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -953.511108,
						"y": -82
					},
					"parameters": {
						"param0": 3
					},
					"seed": 0,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Emission",
							"linked_widgets": [
								{
									"node": "pxflib_2",
									"widget": "Emission"
								}
							],
							"name": "param0",
							"type": "linked_control"
						}
					]
				}
			],
			"parameters": {
				"param0": 3
			},
			"seed": 0,
			"seed_locked": false,
			"shortdesc": "",
			"tree_item": "PauloFalcao/MFSDF/Objects/MFSDF Stage grey with lights",
			"type": "graph"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"Gamma": 1.5,
				"IPD": 0.1,
				"IS3D": 0,
				"Shadow": 1,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 2.5
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "const float r360_PI=3.14159265359;\n\nvec2 r360_equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*r360_PI,r360_PI);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(r360_PI,r360_PI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
				"inputs": [
					{
						"default": "vec4((($uv.w>0.5&&$uv.w<1.5)||($uv.w>3.5&&$uv.w<4.5))?1.0:0.0,0.0,0.0,length($uv)-0.4)",
						"function": true,
						"label": "MFSDF",
						"name": "mfsdf",
						"shortdesc": "V4->V4 Multi-Field SDF",
						"type": "v4v4"
					},
					{
						"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = $mfsdf(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = $mfsdf(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = $mfsdf(vec4( ro + rd*t ,0.0)).w;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n\n\tvec3 ro=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\t\n    // VR stuff from https://developers.google.com/vr/jump/rendering-ods-content.pdf  \n\tvec2 ouv=uv;\n\tif ($IS3D) {\n    \tuv.y=1.0-uv.y;\n\t\tuv.y=mod((1.0-uv.y)*2.0,1.0);\n\t}\n    float theta=uv.x*2.0*r360_PI-r360_PI;\n    float phi=r360_PI/2.0-uv.y*r360_PI;\n    float scale=cos(phi)*(-$IPD/2.0);\n    if ($IS3D){\n\t\tif (ouv.y>0.5) {scale=-scale;}\n\t} \n    ro=vec3(cos(theta),0.0,sin(theta))*scale+ro;\n    vec3 rd=vec3(sin(theta)*cos(phi),sin(phi),-cos(theta)*cos(phi));\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=$mfsdf(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1) \n\tfloat objSpecular=$mfsdf(vec4(p,4.0)).x*0.2;  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=$mfsdf(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+4.0*pow(r,pow(256.0,(1.0-objRoughness)))*objSpecular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=$mfsdf(vec4(p,1.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(r360_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular);\n\t} else {\n\t\tcolor=$hdri(r360_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
				"longdesc": "Type - MFSDF Render\nCode - PauloFalcao, IQ\n\n360 Camera Ray marching node for MFSDF objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
				"name": "MFSDF Render 360",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1.2,
						"label": "Gamma",
						"longdesc": "Gamma Correction",
						"max": 3,
						"min": 0,
						"name": "Gamma",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.1,
						"label": "IPD",
						"max": 1,
						"min": 0,
						"name": "IPD",
						"shortdesc": "Interpupillary Distance",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 0,
						"label": "3D",
						"longdesc": "3D",
						"name": "IS3D",
						"type": "enum",
						"values": [
							{
								"name": "true",
								"value": "true"
							},
							{
								"name": "false",
								"value": "false"
							}
						]
					}
				]
			},
			"tree_item": "PauloFalcao/MFSDF/Render/MFSDF Render 360",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"op": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec4 mfsdf_boolean_union(vec4 a, vec4 b) {\n\treturn vec4((a.w<b.w)?vec4(a):vec4(b));\n}\nvec4 mfsdf_boolean_sub(vec4 a, vec4 b) {\n\treturn vec4((-a.w>b.w)?vec4(a.xyz,-a.w):vec4(b));\n}\nvec4 mfsdf_boolean_inter(vec4 a, vec4 b) {\n\treturn vec4((a.w>b.w)?vec4(a):vec4(b));\n}",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF A",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF B",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao\n\nPerforms a boolean operation (union, intersection or difference) between two shapes",
				"name": "MFSDF Boolean",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$op($in1($uv), $in2($uv))"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "",
						"name": "op",
						"type": "enum",
						"values": [
							{
								"name": "Union",
								"value": "mfsdf_boolean_union"
							},
							{
								"name": "Subtraction",
								"value": "mfsdf_boolean_sub"
							},
							{
								"name": "Intersection",
								"value": "mfsdf_boolean_inter"
							}
						]
					}
				],
				"shortdesc": "MFSDF Boolean"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Boolean",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec4 MFSDF_Union_8(vec4 in1,vec4 in2,vec4 in3,vec4 in4,vec4 in5,vec4 in6,vec4 in7,vec4 in8){\n    vec4 t=(in1.w<in2.w)?vec4(in1):vec4(in2);\n    t=(t.w<in2.w)?vec4(t):vec4(in2);\n    t=(t.w<in3.w)?vec4(t):vec4(in3);\n    t=(t.w<in4.w)?vec4(t):vec4(in4);\n    t=(t.w<in5.w)?vec4(t):vec4(in5);\n    t=(t.w<in6.w)?vec4(t):vec4(in6);\n    t=(t.w<in7.w)?vec4(t):vec4(in7);\n    t=(t.w<in8.w)?vec4(t):vec4(in8);\n    return t;\n}\n\n",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF 1",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF 2",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in3",
						"shortdesc": "V4->V4 MFSDF 3",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in4",
						"shortdesc": "V4->V4 MFSDF 4",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in5",
						"shortdesc": "V4->V4 MFSDF 5",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in6",
						"shortdesc": "V4->V4 MFSDF 6",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in7",
						"shortdesc": "V4->V4 MFSDF 7",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in8",
						"shortdesc": "V4->V4 MFSDF 8",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean union operation between eight shapes",
				"name": "MFSDF Union 8",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "MFSDF_Union_8($in1($uv),$in2($uv),$in3($uv),$in4($uv),$in5($uv),$in5($uv),$in7($uv),$in8($uv))"
					}
				],
				"parameters": [

				]
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Union 8",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {

			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "vec4 MFSDF_Union_4(vec4 in1,vec4 in2,vec4 in3,vec4 in4){\n    vec4 t=(in1.w<in2.w)?vec4(in1):vec4(in2);\n    t=(t.w<in2.w)?vec4(t):vec4(in2);\n    t=(t.w<in3.w)?vec4(t):vec4(in3);\n    t=(t.w<in4.w)?vec4(t):vec4(in4);\n    return t;\n}\n\n",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF 1",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF 2",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in3",
						"shortdesc": "V4->V4 MFSDF 3",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,9999999.0)",
						"label": "",
						"name": "in4",
						"shortdesc": "V4->V4 MFSDF 4",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean union operation between 4 shapes",
				"name": "MFSDF Union 4",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "MFSDF_Union_4($in1($uv),$in2($uv),$in3($uv),$in4($uv))"
					}
				],
				"parameters": [

				]
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Union 4",
			"type": "shader"
		},
		{
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAADkNJREFUaIGdWkuvJMlV/r5zIrNu3X7Nw23Pw2wQBgTCLEGsvGDLj2FhS6DZoBFCSMhCrFhYXsDekn8AYLYgFjAgwQJZlmaGgXnQ09N9763KjPOxiIh8VGVdzxBdNzsrMzLiO+d85xGRxXf+5K+S22EYcwjAVZeSW3IzUpCb5Yicg+RhGM3oZkaSMNKMRgLIoTHnMceYw41jaMxxvevcOOYgKGjfdyQkvLg7DDmc3HUpJYckYYzo3A/DOOY45ty5mVkZ3MukxpxlxuTWuYckaciRLN8muJRBXO964zjk6GghQTrkuDsOADr33g0ZeYgAO7cARilHJLPjmEPKERLg7N0TMNzeZXLIOUeMOb4g++TJLLmZlLNuDgGg6MjIGwXAZPYgOQEEcohA6hwZd2PedUmjbnK4EUCXPOdIGG6OA4yWI39+9wICCQEEjmNOblUBYB6RI37p138Z9zcBZRTgP977987sOrn3dtUnNxsjnDqOOTPkOA5jzro7HAlmhYSBvAH65GWwIUdEFGPcgFHMlbNZpUn61q99q0KGtsHc23jemfPlX/mNX4XUrurSmGzXf/ree2bMOYdGAHfHcRjGUKEfk5sAkuxAKLlCSgLaHP+fdgnN3MxQ5+Cyw9RtGoHAL37722h4dD4U2wVVxP/wk5+kSfpplK8mjU71uhxq2WGevnUjAPIUZevJhSTnHSgA+q3vfCe1+WvXr4geIPC9d1bYufq2MXc7EcA/fXfZjYsxNm2r5RcQQNJX5M9KYSSI9+PTbwKvAA+BK6AXnvjXXo1x/PyLu4ghArvduOvvHjx8fvjoFngJfA58DPwU+B1paZlzMy7bUj9Th/QVofOEmNyy28v8yR3Ax2UmBo4jjsPhxQagLQbd32bKEgBSNenSDmeDTkY/J+VXZl175PTBRfDdCInncrYLadWj8EnC2lJzQBDOh49NQCfYtjoEoIh5qqYgniPeCEmTABec4CSS3RNtv4wRTsg9CzwDXXvC+Vza5nCKLVgbbnWGsvWhFnd1brSzNnWICx0uNZWDFrOT206s1ZnO5Z4bK4WwpeaTi+efzTSwmvpyh3LjQhQqZiGXdcHJk9PQm8i08KJzjt3vM4tpOAedM0m0EmDhnRM3Lg/L5de89uNzl70kIe5P/CcFxQVSTlFo8XcZ7plknCi0lCEWyGJxsRxP+m8OPvn3ho8vpsacB7Cm+6Ky4KZRFlLF2WdCjAugL6HH+uIi/7Q7Z9pMnIxT/koPXrDGlgB5Swae+cCmnPe0ladtuWIVYDMQbDLn8lQUIGkJDoA1AfKZkALEZtrzibbofglSOsd/XqkDi7h0jt9s0UuTD0wUOvfdefypNj1H8OU0mC4R42xQTknkhKZG3hfOtxolw5xuT+Lyl2rNS9O2DqZuiwcu+VwyI3kyvTYtKbG5B6UuYtXn/prgRLxWOCW0inzj6UsLovX1ZMYiwxruRj6eVC65lBaw+HPXJRfES/UeW8zQKfV/zrhA8mmvaAX9EghKBCyiv3/4SU33UmvKxLqI+2zVe9I6d28WyBnJk8xgXswSEkKIHBERmcyUTHKynwZfFvNbkpw4yVKgtAR6WYalHCsf/ps/+u5v9r2ZRVikHvvHImEmUmYgJChCCuWAlCUNz2M4uEcP/Pid3/+9d79fIS41vV5gbU1d+19YE68tMJmghaGZ51/rus5d6Hj9akVgBncQMKv9whABZEiIUP/EevDwWY+jR5yoaLmQ2hCm3WX7z5b95ra8coq+HsrnYUopJbt+ncnhzpTkJqM8sevYdUiJyeWG0sHd3M3Nrl53do9T+uCDD6HZ87ZLDGn+zN0EaWtFpsXf+sr8rY277zrunjqNJRK4mXuxg9wlFef2iDyOFmERFjKFU+n66YO7/zYzlZLrDPiW87YCuy2ebRP9rIZqhKWQ8+m//vkfd+m6Sx2MTM7kTEk0dp31Pbvkux37nn0nd3Qdu05mMHpKKaU+pV334F9++BdFlxt6XxqkpJopj7Tb6wXNSeA/deu5R/n3ZLfr+lfN2HnnQHKPnGHGvqfX5BA5ABiN48gIhiKO5sktUrDnK6/hWIi6qpzP0uIci9ZatEKsifpaf0X7FiUKRuQxj+M4DsO//eWf7fbf6LvU9b2l5Lse7tZ1drVjl9j37Dp0ne16uQUZZJZk9L4PyMyS+y6lq+s3/vb77w7DMAxDHsfIJeBGs/2GQZZqTWc6brmzSgIpQlIoFJHzOI6IyMP45OpRn1Iy85TcrGRDL4pPCe4gzSznLJTwk+VeFMycS9bou26f86tXj148e5a63twsJSuNxlJm1dp+e11+siauRqg6lyIi5xzjGGMex+Hu5nY4HofDwf/p7x89eHpF9mZdSlbtSySnO9xhRrenb7/90fsftGAaYKY7I0gY2JkNEfvd7uiv/+eP/vrRb//u1X7f73ZX+713yVPylMzdyMJGkpMYE80WmVioil7gzuMYY755+SIfh8Pd3fj8w88++ujrh8P1o7d2QmfsUjKSEkkj6Q43mYm2e/zoF/7gu5997w+HCEnoEjIhIczdc+SOaScB2JtFevP5P/7dB9fXT996q3/yzav91W6/3+33npJ3nSV395VNyBL3EpYqD0VErrjHPI63L1+Ow/F4e5e/+K+Xz57Z7e0b5NWDN3bkznzn81KAJM1gFC2MLOns/Q+zMdwgB0AzRpQ6IkUE0IUCuCqMT2/58OlnP/tZevDJ49de6x6/vbve7/b7apCuM3dvBJu4lYq7VB9t0GPMw+HucHs7Ho7D4aAXH8Xt7UMgPXxzD+zN9mY9YDWmqdA0yDAzMxlFe3m4++cf/OAwjkoO0tyYzUKMMMDBJIUU035mhO/etFCOZ8fnzzWOMb6Vj8c8HHdX+27XW0qRkhVqNTlSVOx5Qq+ch8PhcHsbx0HDwGGkPUlXD7uIXton34GdZBAFZ1lyq5aN7iJFhpnIFze3QYa7zJTZLICQDDDJhTSFjQiTEnDQN0YzMMXhOBa6hxTR7XpFWA5FeEpyl1nKOUeju3LWmGMc4jhgzBpHj3ASZp2xJ3uwJzoyhVzhze1LCBIp9yAAqtk4QjKTAmaKQAQkSpCKHWoSoJGwHA4kYASylaBG5hzDkMuLPhWTSZJLck8FfeSsHMqBnJHDSbrnlEiamXcpSQnoyI60HIxscESQ1YdgBC1IEAJr0iRhRX0mC4RJgRAgqq7LjHRBQGfOHh6yiGQWZjKTGUgvK57IMdbStDiAhKQcilAEWworujGzlBLNTDKpAxLpkkUYYSIlk9XYSwiMdbyeInhIQYUYJqimzlIQmBCAAYkcwWRmpAPHHEGGUebyulpSDiFXs0aOTENOULVphU6wZCXAjCaY5IBLRRKLbDJTEbjm6pL+pv0SzhtLtQhQEUAKteRe2EdQMEKiEaCBTGbskIVctv3MYFaVMlUcITFkLOtSgqQRsGp4MyoYYsPtkEmMYNAAFiYoauKbN7PmqmbKnK1PiTmIqWZpEbiuHGsoNpCglcQiMkgRomFat0qSWMrpugFNigaiHEhBNBOioqeECJD0wgFDSAq0OGil0i1sarXY9MZIVfGIuUZZVTWsAkBFipqzTCsxaqqZCwwgVcXXcF4YoGJ1hkhZIUlBX1EKIVgoKKks0jXlBM2Y0DaT1HCf72O3zpV4LKckzLwsTRdiqP7KpPWpO3NFMgpBKEghRJGMAu4EvUIwISiSkqaQMnN0VUNW9PW4+sRq34ErAUgU2lQxKBL1aDQrUSJV9BILLIESIEIU67mxxqgSc0yQYIZS5CikU/Sc0QOTAO2KSvJb1GXFCJpKtYaVZqDRTgSoJiJtsblrYAmhEbA6E+uOokqoLDxgxYMSPhCGtiJZLEqW66Iqy2QBTBTiiQwQ2muhwvPm04X6ArmSgW1ztxR3ISJgVt28AiUo1lVY25WocYB1Waq2yF6GFaxEqOYTVM1EVFMQC1LVTMLq1aU6LMKo1aGod4FCoXkeA2SUoKhoxfqGQ9MRLYTNJ/MqUyDw6PjMUKhYlR1ABr7oX5muYCZS25SYVFlCSSEM2gkXJ2CLOUzk6j0pajyxqhGqxphSs3Gm9HTa6C4C6e6zHSCzkJa7pcVZ9+PzIzDuXl2yaCZVc+VqAVJNzZNXlBuaMiWZigcr2s95SsHU6q3C/ZI55uXQbIdZ8LIt4mRNauut0ulDKdzRUvTkCSsZKno03O1klqdWfySTkQJlRYipFdZPLlsEKw7R3L44bsuoJLqbT8pu3KTgyRmiIQZph//N+9eXZl9Rv7zvKVcar04E46JVC0AoZVbFUzMTp/KuzcXmhOCSVJBUEnh9d7RE34iugoNSmC1IO+u19a/+PY2+hD4l4sKhVKlU+E7Nbeaj5giCQn5xKsWarOnmYzRYUQecW0FfRiHJ20/jwdOmkWXym/L4QoBG9wX0KVK1l3y1fBFKBJj3VFiXG2UFXZVYSdVIAQKwibhn2/kTy4uZIBmZOW8KLkBz+QgmttS4OiuerUN7zUoWggKtHtIc+9VyaV0/cVF0UhL85f9U9i8RnMgwqaaMfvOxHnx9hX4C3erjpabPoZe7i32hWoNq+oFEzWAUJwLN2Wg6IyifnK9R+cQKWn8AOHlsi4YCyE7wLVCeQZ/tvN7YWgRKTQO0LFMJNB0rNAng+hXT4nQxdg0PJOpbJi9lQp25Tr/Etzo5u7slwNIaaPF+Ol9MVkg23zVjed/adL9hAZJAANZUYAsBVo/MoOev85X1I+mErGsxWkhDWyuouiNXXWb7FgE29D9F5jnzcXpDftp/gX/r1tx0768WV6JVWUqAnlJXxaRJZxORzmVoeaS+8jhhwmWQ91+tAjSs95ljUh5bRTQN28bmBbUtH29Z/AKercdO2ypG/B+/yThbVI/9CQAAAABJRU5ErkJggg==",
			"name": "pxflib",
			"parameters": {
				"k": 0.2,
				"op": 0
			},
			"seed": 53575,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "float mfsdf3d_smooth_union_f(float a,float b,float k){\n\tfloat h = max( k-abs(a-b), 0.0 )/k;\n\treturn min(a,b)-h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_union(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n    float h=mfsdf3d_smooth_union_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_union_f(a.w+e,b.w,k)-mfsdf3d_smooth_union_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_union_f(a.w,b.w+e,k)-mfsdf3d_smooth_union_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),h);\n}\n\nfloat mfsdf3d_smooth_subtraction_f(float a,float b,float k){\n\tfloat h = max( k-abs(-a-b), 0.0 )/k;\n\treturn max(-a,b)+h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_subtraction(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n\tfloat h=mfsdf3d_smooth_subtraction_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_subtraction_f(a.w+e,b.w,k)-mfsdf3d_smooth_subtraction_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_subtraction_f(a.w,b.w+e,k)-mfsdf3d_smooth_subtraction_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),h);\n}\n\nfloat mfsdf3d_smooth_intersection_f(float a,float b,float k){\n\tfloat h = max( k-abs(a-b), 0.0 )/k;\n\treturn max(a,b)+h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_intersection(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n\tfloat h=mfsdf3d_smooth_intersection_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_intersection_f(a.w+e,b.w,k)-mfsdf3d_smooth_intersection_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_intersection_f(a.w,b.w+e,k)-mfsdf3d_smooth_intersection_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),h);\n}",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,999999.0)",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF A",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,999999.0)",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF B",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a smooth boolean operation (union, intersection or difference) between two shapes",
				"name": "MFSDF Smooth Boolean",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "$op($in1($uv), $in2($uv),$k)"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "",
						"name": "op",
						"type": "enum",
						"values": [
							{
								"name": "Union",
								"value": "mfsdf3d_smooth_union"
							},
							{
								"name": "Subtraction",
								"value": "mfsdf3d_smooth_subtraction"
							},
							{
								"name": "Intersection",
								"value": "mfsdf3d_smooth_intersection"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "",
						"longdesc": "The smoothness of the boolean operation",
						"max": 1,
						"min": 0,
						"name": "k",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Smooth Boolean"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Smooth Boolean",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"Correction": 0,
				"boolmode": 0,
				"colormode": 0,
				"mixshift": 0,
				"mixspread": 1,
				"smooth": 0.25
			},
			"seed": 53575,
			"seed_locked": true,
			"shader_model": {
				"code": "",
				"global": "float Custom_Bool_sdSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat Custom_Bool_sdSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat Custom_Bool_sdSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }",
				"inputs": [
					{
						"default": "vec4(0.0,0.0,0.0,999999.0)",
						"label": "MFSDF A",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF A",
						"type": "v4v4"
					},
					{
						"default": "vec4(0.0,0.0,0.0,999999.0)",
						"label": "MFSDF B",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF B",
						"type": "v4v4"
					},
					{
						"default": "min($uv.x,$uv.y)",
						"function": true,
						"label": "Custom Boolean",
						"longdesc": "The union between A and B is defined by this SDF2D\nX is the distance to A\nY is the distance to B",
						"name": "sdf2d",
						"shortdesc": "SDF2D Custom Union",
						"type": "sdf2d"
					},
					{
						"default": "vec4(1.0,0.0,0.0,0.0)",
						"function": true,
						"label": "MFSDF Union Tex",
						"longdesc": "MFSDF material used in the transition beetween MFSDF A and MFSDF B",
						"name": "in3",
						"shortdesc": "V4->V4 MFSDF Mix",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "TEX3D Color Shift",
						"longdesc": "Color transition deformation between MFSDF A and MFSDF B, using a Grayscale TEX3D",
						"name": "shift_tex3d",
						"shortdesc": "Grayscale TEX3D",
						"type": "tex3d_gs"
					}
				],
				"instance": "\nfloat normal_$name(float a, float b) {\n  return $boolmode;\n}\n\nvec4 mfsdf3d_custom_boolean_$name(vec4 a, vec4 b, vec4 uv) {\n    float e=0.001;\n\tfloat h=normal_$name(a.w,b.w);\n\tfloat d=h/(1.0+$Correction);\n\t$colormode\n    return vec4(o);\n}",
				"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a custom boolean operation between two shapes.\nThe union is defined by a custom SDF2D",
				"name": "MFSDF Advanced Boolean",
				"outputs": [
					{
						"shortdesc": "V4->V4 MFSDF",
						"type": "v4v4",
						"v4v4": "mfsdf3d_custom_boolean_$name($in1($uv), $in2($uv),$uv)"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Correction",
						"max": 1,
						"min": 0,
						"name": "Correction",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 5,
						"label": "Color Mode",
						"name": "colormode",
						"type": "enum",
						"values": [
							{
								"name": "Mix Color",
								"value": "vec4 o=vec4(mix(a.xyz,b.xyz,clamp((abs(a.w)-abs(b.w)+$shift_tex3d(uv)+$mixshift+$mixspread/2.0)*(1.0/$mixspread),0.0,1.0)),d);"
							},
							{
								"name": "A Color",
								"value": "vec4 o=a;if (abs(b.w)<abs(o.w)) o=b;if (abs(d+0.00001)<abs(o.w))o.xyz=a.xyz;o.w=d;"
							},
							{
								"name": "B Color",
								"value": "vec4 o=b;if (abs(a.w)<abs(o.w)) o=a;if (abs(d+0.00001)<abs(o.w))o.xyz=b.xyz;o.w=d;"
							},
							{
								"name": "Normal",
								"value": "vec2 n=normalize(vec2(normal_$name(a.w+e,b.w)-normal_$name(a.w-e,b.w),normal_$name(a.w,b.w+e)-normal_$name(a.w,b.w-e)));vec4 o=vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),d);"
							},
							{
								"name": "Tex",
								"value": "vec4 o=b;if (abs(a.w)<abs(o.w)) o=a;if (abs(d+0.00001)<abs(o.w)) o.xyz=$in3(vec4(uv)).xyz;o.w=d;"
							},
							{
								"name": "Tex Mix",
								"value": "vec4 o;o.xyz=mix($in3(vec4(uv)).xyz,a.xyz,clamp((abs(b.w)-abs(a.w)+($shift_tex3d(uv)+$mixshift-0.5)+$mixspread/2.0)*(1.0/$mixspread),0.0,1.0));o.xyz=mix(o.xyz,b.xyz,clamp((abs(a.w)-abs(b.w)+($shift_tex3d(uv)+$mixshift-0.5)+$mixspread/2.0)*(1.0/$mixspread),0.0,1.0));o.w=d;"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Mix Color Shift",
						"max": 5,
						"min": -5,
						"name": "mixshift",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Mix Color Spread",
						"max": 5,
						"min": 0,
						"name": "mixspread",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 0,
						"label": "Boolean Mode",
						"name": "boolmode",
						"type": "enum",
						"values": [
							{
								"name": "Union",
								"value": "Custom_Bool_sdSmoothUnion(a,b,$smooth)"
							},
							{
								"name": "Subtraction",
								"value": "Custom_Bool_sdSmoothSubtraction(a,b,$smooth)"
							},
							{
								"name": "Intersection",
								"value": "Custom_Bool_sdSmoothIntersection(a,b,$smooth)"
							},
							{
								"name": "Custom",
								"value": "$sdf2d(vec2(a,b))"
							}
						]
					},
					{
						"control": "None",
						"default": 0.1,
						"label": "Smooth",
						"max": 1,
						"min": 0,
						"name": "smooth",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Advanced Boolean"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Advanced Boolean",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"Pow": 64,
				"Reflection": 0.2,
				"Shadow": 1,
				"Specular": 0,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D A",
						"name": "sdf_a",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.1,0.1)",
						"function": true,
						"label": "TEX3D A",
						"name": "tex3d_a",
						"shortdesc": "TEX3D A",
						"type": "tex3d"
					},
					{
						"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
						"function": true,
						"label": "SDF3D B",
						"name": "sdf_b",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
						"function": true,
						"label": "TEX3D B",
						"name": "tex3d_b",
						"shortdesc": "TEX3D B",
						"type": "tex3d"
					},
					{
						"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
						"function": true,
						"label": "360 HDRI Image",
						"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
						"name": "hdri",
						"shortdesc": "Image 360 HDRI",
						"type": "rgb"
					}
				],
				"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
				"name": "SDF Render 2 Objs",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Reflection",
						"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
						"max": 1,
						"min": 0,
						"name": "Reflection",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024,
						"min": 0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				]
			},
			"tree_item": "PauloFalcao/SDF3D/Render/SDF Render 2 Objs",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"AmbLight": 0.25,
				"AmbOcclusion": 1,
				"CamD": 1.5,
				"CamX": 2.5,
				"CamY": 2,
				"CamZ": 3,
				"CamZoom": 1,
				"LookAtX": 0,
				"LookAtY": 0,
				"LookAtZ": 0,
				"MatCapMode": 0,
				"MatCapRef": 1,
				"Pow": 64,
				"Shadow": 1,
				"SkyColor": {
					"interpolation": 3,
					"points": [
						{
							"a": 1,
							"b": 0.979167,
							"g": 0.864656,
							"pos": 0,
							"r": 0.793357
						},
						{
							"a": 1,
							"b": 1,
							"g": 0.6984,
							"pos": 0.118182,
							"r": 0.510612
						},
						{
							"a": 1,
							"b": 0.557292,
							"g": 0.329521,
							"pos": 0.411598,
							"r": 0.287342
						},
						{
							"a": 1,
							"b": 0.416667,
							"g": 0.209503,
							"pos": 0.945455,
							"r": 0.17114
						}
					],
					"type": "Gradient"
				},
				"Specular": 1,
				"SunX": 2.5,
				"SunY": 2.5,
				"SunZ": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "length($uv)-0.4",
						"function": true,
						"label": "SDF3D A",
						"name": "sdf_a",
						"shortdesc": "SDF3D A",
						"type": "sdf3d"
					},
					{
						"default": "vec3(1.0,0.1,0.1)",
						"function": true,
						"label": "TEX3D A",
						"name": "tex3d_a",
						"shortdesc": "TEX3D A",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.0,0.0,1.0)",
						"function": true,
						"label": "MatCap A",
						"longdesc": "MapCap image for object A\nMatCap (Material Capture, also known as LitSphere) are complete materials, including lighting and reflections\nDownload MapCaps from https://github.com/nidorx/matcaps",
						"name": "matcap_a",
						"shortdesc": "Image MapCap",
						"type": "rgb"
					},
					{
						"default": "$uv.y+1.0",
						"function": true,
						"label": "SDF3D B",
						"name": "sdf_b",
						"shortdesc": "SDF3D B",
						"type": "sdf3d"
					},
					{
						"default": "(vec3(mod(floor($uv.x)+floor($uv.z),2.0))*0.25+0.5)",
						"function": true,
						"label": "TEX3D B",
						"name": "tex3d_b",
						"shortdesc": "TEX3D B",
						"type": "tex3d"
					}
				],
				"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tfloat fog=max(1.0-(d/50.0),0.0);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tfloat r=clamp(dot(reflect(rd,-n),light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\tif (dS.y<0.5){\n\t    \tvec3 mc=$matcap_a((n*mat3(cX,cY,ray)).xy*0.5+0.5);\n\t\t\tfloat mcf=$MatCapRef;\n\t\t\t$MatCapMode\n\t\t}\n\t} else {\n\t    color=$SkyColor(rd.y).xyz;\n\t}\n    return color*(fog)+$SkyColor(rd.y).xyz*(1.0-fog);\n}\n\n\n\n",
				"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a matcap image for reflections",
				"name": "SDF Render MatCap",
				"outputs": [
					{
						"rgb": "raymarch_$name($uv)",
						"shortdesc": "Image output",
						"type": "rgb"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "CamX",
						"longdesc": "Camera position X",
						"max": 5,
						"min": -5,
						"name": "CamX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamY",
						"longdesc": "Camera position Y",
						"max": 5,
						"min": -5,
						"name": "CamY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 2,
						"label": "CamZ",
						"longdesc": "Camera position Z",
						"max": 5,
						"min": -5,
						"name": "CamZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtX",
						"longdesc": "Look at position with coordinate X",
						"max": 5,
						"min": -5,
						"name": "LookAtX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtY",
						"longdesc": "Look at position with coordinate Y",
						"max": 5,
						"min": -5,
						"name": "LookAtY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "LookAtZ",
						"longdesc": "Look at position with coordinate Z",
						"max": 5,
						"min": -5,
						"name": "LookAtZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 5,
						"label": "CamDistance",
						"longdesc": "Camera distance to the view plane, used to define the Field Of View",
						"max": 5,
						"min": 0,
						"name": "CamD",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "CamZoom",
						"longdesc": "Camera zoom",
						"max": 5,
						"min": 0,
						"name": "CamZoom",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.4,
						"label": "Specular",
						"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
						"max": 1,
						"min": 0,
						"name": "Specular",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 32,
						"label": "Pow",
						"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
						"max": 1024,
						"min": 0,
						"name": "Pow",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "MatCapRef",
						"longdesc": "MatCap image reflection strength",
						"max": 1,
						"min": 0,
						"name": "MatCapRef",
						"shortdesc": "MatCapRef",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": 1,
						"label": "MatCapMode",
						"longdesc": "Matcap Mode",
						"name": "MatCapMode",
						"type": "enum",
						"values": [
							{
								"name": "None",
								"value": ""
							},
							{
								"name": "Direct",
								"value": "color=mc;"
							},
							{
								"name": "Mix",
								"value": "color=mix(color,mc,mcf);"
							},
							{
								"name": "Add",
								"value": "color+=mc*mcf;"
							}
						]
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunX",
						"longdesc": "Sun position coordinate X",
						"max": 10,
						"min": -10,
						"name": "SunX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunY",
						"longdesc": "Sun position coordinate Y",
						"max": 10,
						"min": -10,
						"name": "SunY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "SunZ",
						"longdesc": "Sun position coordinate Z",
						"max": 10,
						"min": -10,
						"name": "SunZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"default": {
							"interpolation": 3,
							"points": [
								{
									"a": 1,
									"b": 1,
									"g": 0.6984,
									"pos": 0.009091,
									"r": 0.510612
								},
								{
									"a": 1,
									"b": 0.317708,
									"g": 0.187858,
									"pos": 1,
									"r": 0.163812
								}
							],
							"type": "Gradient"
						},
						"label": "SkyColor",
						"longdesc": "A gradient that tries to simulate a sky",
						"name": "SkyColor",
						"type": "gradient"
					},
					{
						"control": "None",
						"default": 0.2,
						"label": "AmbLight",
						"longdesc": "Strength of ambient light",
						"max": 1,
						"min": 0,
						"name": "AmbLight",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "AmbOcclusion",
						"longdesc": "Strength of ambient occlusion",
						"max": 1,
						"min": 0,
						"name": "AmbOcclusion",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Shadow",
						"longdesc": "Shadow strength",
						"max": 1,
						"min": 0,
						"name": "Shadow",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Ray Marching MatCap"
			},
			"tree_item": "PauloFalcao/SDF3D/Render/SDF Render MatCap",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"RotateX": 0,
				"RotateY": 0,
				"RotateZ": 0,
				"TranslateX": 0,
				"TranslateY": 0,
				"TranslateZ": 0,
				"scale": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "vec4 o_$name_uv=$in(vec4(V4V4_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale, $uv.w));\n\n",
				"global": "vec3 V4V4_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "vec3(1.0)",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a V4->V4\nAdapted from RodZilla Rotate",
				"name": "MFSDF Transform",
				"outputs": [
					{
						"shortdesc": "V4->V4 Ouput",
						"type": "v4v4",
						"v4v4": "vec4(o_$name_uv.xyz,o_$name_uv.w*$scale)"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "S",
						"max": 4,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "X",
						"max": 10,
						"min": -10,
						"name": "TranslateX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Y",
						"max": 10,
						"min": -10,
						"name": "TranslateY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"max": 10,
						"min": -10,
						"name": "TranslateZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Rx",
						"longdesc": "The rotation around the X axis",
						"max": 180,
						"min": -180,
						"name": "RotateX",
						"shortdesc": "Rotate.x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Ry",
						"longdesc": "The rotation around the Y axis",
						"max": 180,
						"min": -180,
						"name": "RotateY",
						"shortdesc": "Rotate.y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Rz",
						"longdesc": "The rotation around the Z axis",
						"max": 180,
						"min": -180,
						"name": "RotateZ",
						"shortdesc": "Rotate.z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Transform"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Transform",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"RotateX": 0,
				"RotateY": 0,
				"RotateZ": 0,
				"TranslateX": 0,
				"TranslateY": 0,
				"TranslateZ": 0,
				"scale": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
				"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
				"inputs": [
					{
						"default": "0.0",
						"label": "",
						"name": "in",
						"shortdesc": "V4->V4 Input",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
				"name": "SDF Transform",
				"outputs": [
					{
						"sdf3d": "o_$name_uv*$scale",
						"shortdesc": "V4->V4 Ouput",
						"type": "sdf3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 1,
						"label": "S",
						"max": 4,
						"min": 0,
						"name": "scale",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "X",
						"max": 10,
						"min": -10,
						"name": "TranslateX",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Y",
						"max": 10,
						"min": -10,
						"name": "TranslateY",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Z",
						"max": 10,
						"min": -10,
						"name": "TranslateZ",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Rx",
						"longdesc": "The rotation around the X axis",
						"max": 180,
						"min": -180,
						"name": "RotateX",
						"shortdesc": "Rotate.x",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Ry",
						"longdesc": "The rotation around the Y axis",
						"max": 180,
						"min": -180,
						"name": "RotateY",
						"shortdesc": "Rotate.y",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Rz",
						"longdesc": "The rotation around the Z axis",
						"max": 180,
						"min": -180,
						"name": "RotateZ",
						"shortdesc": "Rotate.z",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Transform"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Transform",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "9999999.0",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF 1",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF 2",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in3",
						"shortdesc": "V4->V4 MFSDF 3",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in4",
						"shortdesc": "V4->V4 MFSDF 4",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF Operator\nCode - PauloFalcao\n\nPerforms a boolean union operation between 4 shapes",
				"name": "SDF Union 4",
				"outputs": [
					{
						"sdf3d": "min(min(min($in1($uv),$in2($uv)),$in3($uv)),$in4($uv))",
						"shortdesc": "SDF Output",
						"type": "sdf3d"
					}
				],
				"parameters": [

				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Union 4",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {

			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "",
				"global": "",
				"inputs": [
					{
						"default": "9999999.0",
						"label": "",
						"name": "in1",
						"shortdesc": "V4->V4 MFSDF 1",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in2",
						"shortdesc": "V4->V4 MFSDF 2",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in3",
						"shortdesc": "V4->V4 MFSDF 3",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in4",
						"shortdesc": "V4->V4 MFSDF 4",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in5",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in6",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in7",
						"type": "sdf3d"
					},
					{
						"default": "9999999.0",
						"label": "",
						"name": "in8",
						"type": "sdf3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF Operator\nCode - PauloFalcao\n\nPerforms a boolean union operation between 8 shapes",
				"name": "SDF Union 8",
				"outputs": [
					{
						"sdf3d": "min(min(min(min(min(min(min($in1($uv),$in2($uv)),$in3($uv)),$in4($uv)),$in5($uv)),$in6($uv)),$in7($uv)),$in8($uv))",
						"shortdesc": "SDF Output",
						"type": "sdf3d"
					}
				],
				"parameters": [

				]
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Union 8",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"f": 2.5,
				"g": 2.5,
				"h": 0,
				"m": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$sdfa($uv.xyz);\nfloat $(name_uv)_sdfb=$sdfb($uv.xyz);\nfloat $(name_uv)_mix=$texd(vec4($uv.xyz,1.0));\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.,0.0,1.0));",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base SDF",
						"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "sdfa",
						"shortdesc": "Main SDF",
						"type": "sdf3d"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified SDF",
						"longdesc": "Modified SDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
						"name": "sdfb",
						"shortdesc": "Modified SDF",
						"type": "sdf3d"
					},
					{
						"default": "0.2",
						"function": true,
						"label": "Surface Deform",
						"longdesc": "Surface deformation texture based on the difference between the two PDFs",
						"name": "texd",
						"shortdesc": "Surface Deform Texture",
						"type": "tex3d_gs"
					},
					{
						"default": "vec3(0.7)",
						"function": true,
						"label": "Tex Bump",
						"longdesc": "Bump Texture, where the SDF difference is negative",
						"name": "texa",
						"shortdesc": "Bump Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "Tex Surface",
						"longdesc": "Surface Texture, where the SDF difference is close to zero",
						"name": "texb",
						"shortdesc": "Surface Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.2)",
						"function": true,
						"label": "Tex Hole",
						"longdesc": "Hole Texture, where the SDF difference is positive",
						"name": "texc",
						"shortdesc": "Hole Texture",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - SDF Operator\nCode - PauloFalcao\n\nModifies an SDF by comparing the base SDF and a modified version of the base SDF.\nTypically the modified version is a soft version of the base version, which can be done using the Node SDF Blur\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.",
				"name": "SDF Deform Edges Generic",
				"outputs": [
					{
						"sdf3d": "$(name_uv)_modsdf",
						"type": "sdf3d"
					},
					{
						"tex3d": "$(name_uv)_tex",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Deform",
						"max": 4,
						"min": 0,
						"name": "g",
						"shortdesc": "SDF Deformation amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Select",
						"max": 1,
						"min": 0,
						"name": "m",
						"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Contrast",
						"max": 1,
						"min": 0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Shift",
						"max": 1,
						"min": -1,
						"name": "h",
						"shortdesc": "Shift  difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Deform Edges Generic"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Deform Edges Generic",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"f": 2.5,
				"g": 2.5,
				"h": 0,
				"m": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$mfsdfa(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfb=$mfsdfb(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_mix=$texd(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$(name_uv)_mix*$f*100.0,0.0,1.0));",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base MFSDF",
						"longdesc": "Main MFSDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "mfsdfa",
						"shortdesc": "Main MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified MFSDF",
						"longdesc": "Modified MFSDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
						"name": "mfsdfb",
						"shortdesc": "Modified MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Surface Deform",
						"longdesc": "Surface deformation texture based on the difference between the two PDFs",
						"name": "texd",
						"shortdesc": "Surface Deform Texture",
						"type": "tex3d_gs"
					}
				],
				"instance": "",
				"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao\n\nModifies an MFSDF by comparing the base SDF and a modified version of the base SDF.\nTypically the modified version is a soft version of the base version, which can be done using the Node SDF Blur",
				"name": "MFSDF Deform Edges Generic",
				"outputs": [
					{
						"type": "v4v4",
						"v4v4": "vec4($(name_uv)_tex,$(name_uv)_modsdf)"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Deform",
						"max": 4,
						"min": 0,
						"name": "g",
						"shortdesc": "SDF Deformation amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Select",
						"max": 1,
						"min": 0,
						"name": "m",
						"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Contrast",
						"max": 1,
						"min": 0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Shift",
						"max": 1,
						"min": -1,
						"name": "h",
						"shortdesc": "Shift difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Deform Edges Generic"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Deform Edges Generic",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"edgeb": 0.01,
				"edges": 0.04,
				"f": 2,
				"g": 2,
				"h": 0,
				"iterations": 3,
				"m": 0,
				"texdb": 0,
				"texdc": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=blursdf3d_$name($uv.xyz,$edgeb,1.01);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_mix =clamp($texd(vec4($uv.xyz,1.0))*$texdc+$texdb+0.5-$texdc*0.5,0.0,1.0);\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$(name_uv)_mix*$f*100.0,0.0,1.0));\n\n",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base MFSDF",
						"longdesc": "Main MFSDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "mfsdfa",
						"shortdesc": "Main MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified MFSDF",
						"longdesc": "Modified MFSDF goes here, only Material attibutes will be used the SDF is ignored",
						"name": "mfsdfb",
						"shortdesc": "Modified MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Surface Deform",
						"longdesc": "Surface deformation texture based on the difference between the two PDFs",
						"name": "texd",
						"shortdesc": "Surface Deform Texture",
						"type": "tex3d_gs"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$mfsdfa(vec4(p,0.0)).w;\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$mfsdfa(vec4(p+vec3(cos(t)*r,y,sin(t)*r)*b,0.0)).w;\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao\n\nModifies an MFSDF by comparing the base SDF and a modified blured version of the base SDF.",
				"name": "MFSDF Deform Edges",
				"outputs": [
					{
						"type": "v4v4",
						"v4v4": "vec4($(name_uv)_tex,$(name_uv)_modsdf)"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.04,
						"label": "Edge Size",
						"longdesc": "Blur amount applied to the original SDF generating a new SDF",
						"max": 0.1,
						"min": 0,
						"name": "edges",
						"shortdesc": "Edge Size",
						"step": 0.0001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.02,
						"label": "Obj Blur",
						"longdesc": "A small Blur applied to the original SDF",
						"max": 0.05,
						"min": 0,
						"name": "edgeb",
						"shortdesc": "Original SDF Blur",
						"step": 0.0001,
						"type": "float"
					},
					{
						"default": 3,
						"label": "Edge Precision",
						"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
						"name": "iterations",
						"shortdesc": "Edge Blur precision",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Deform",
						"max": 4,
						"min": 0,
						"name": "g",
						"shortdesc": "SDF Deformation amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Deform Brigh.",
						"max": 1,
						"min": -1,
						"name": "texdb",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Deform Cont.",
						"max": 2,
						"min": 0,
						"name": "texdc",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Select",
						"max": 1,
						"min": 0,
						"name": "m",
						"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Contrast",
						"max": 1,
						"min": 0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Shift",
						"max": 1,
						"min": -1,
						"name": "h",
						"shortdesc": "Shift difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Deform Edges"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Deform Edges",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"edgeb": 0,
				"edges": 0.04,
				"f": 2,
				"g": 2,
				"h": 0,
				"iterations": 3,
				"m": 0,
				"texdb": 0,
				"texdc": 1
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=blursdf3d_$name($uv.xyz,$edgeb,1.01);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_mix=clamp($texd(vec4($uv.xyz,1.0))*$texdc+$texdb+0.5-$texdc*0.5,0.0,1.0);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.,0.0,1.0));\n",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base SDF",
						"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "sdfa",
						"shortdesc": "Main SDF",
						"type": "sdf3d"
					},
					{
						"default": "0.5",
						"function": true,
						"label": "Surface Deform",
						"longdesc": "Surface deformation texture based on the difference between the two PDFs",
						"name": "texd",
						"shortdesc": "Surface Deform Texture",
						"type": "tex3d_gs"
					},
					{
						"default": "vec3(0.8,0.6,0.6)",
						"function": true,
						"label": "Tex Bump",
						"longdesc": "Bump Texture, where the SDF difference is negative",
						"name": "texa",
						"shortdesc": "Bump Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "Tex Surface",
						"longdesc": "Surface Texture, where the SDF difference is close to zero",
						"name": "texb",
						"shortdesc": "Surface Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.3,0.1,0.1)",
						"function": true,
						"label": "Tex Hole",
						"longdesc": "Hole Texture, where the SDF difference is positive",
						"name": "texc",
						"shortdesc": "Hole Texture",
						"type": "tex3d"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$sdfa(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$sdfa(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Type - SDF Operator\nCode - PauloFalcao\n\nModifies an SDF by comparing the base SDF and a modified blured version of the base SDF.\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.",
				"name": "SDF Deform Edges",
				"outputs": [
					{
						"sdf3d": "$(name_uv)_modsdf",
						"type": "sdf3d"
					},
					{
						"tex3d": "$(name_uv)_tex",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.04,
						"label": "Edge Size",
						"longdesc": "Blur amount applied to the original SDF generating a new SDF",
						"max": 0.1,
						"min": 0,
						"name": "edges",
						"shortdesc": "Edge Size",
						"step": 0.0001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.02,
						"label": "Obj Blur",
						"longdesc": "A small Blur applied to the original SDF",
						"max": 0.5,
						"min": 0,
						"name": "edgeb",
						"shortdesc": "Obj Blur",
						"step": 0.0001,
						"type": "float"
					},
					{
						"default": 6,
						"label": "Edge Precision",
						"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
						"name": "iterations",
						"shortdesc": "Edge Blur precision",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Deform",
						"max": 4,
						"min": 0,
						"name": "g",
						"shortdesc": "SDF Deformation amount",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Deform Brigh.",
						"max": 1,
						"min": -1,
						"name": "texdb",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 1,
						"label": "Deform Cont.",
						"max": 2,
						"min": 0,
						"name": "texdc",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Select",
						"max": 1,
						"min": 0,
						"name": "m",
						"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Contrast",
						"max": 1,
						"min": 0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Shift",
						"max": 1,
						"min": -1,
						"name": "h",
						"shortdesc": "Shift  difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "SDF Deform Edges"
			},
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Deform Edges",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"f": 0.5,
				"h": 0
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$sdfa($uv.xyz);\nfloat $(name_uv)_sdfb=$sdfb($uv.xyz);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$f*100.,0.0,1.0));",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base SDF",
						"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "sdfa",
						"shortdesc": "Main SDF",
						"type": "sdf3d"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified SDF",
						"longdesc": "Modified SDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
						"name": "sdfb",
						"shortdesc": "Modified SDF",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0.7)",
						"function": true,
						"label": "Tex Bump ",
						"longdesc": "Bump Texture, where the SDF difference is negative",
						"name": "texa",
						"shortdesc": "Bump Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "Tex Surface",
						"longdesc": "Surface Texture, where the SDF difference is close to zero",
						"name": "texb",
						"shortdesc": "Surface Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.2)",
						"function": true,
						"label": "Tex Hole",
						"longdesc": "Hole Texture, where the SDF difference is positive",
						"name": "texc",
						"shortdesc": "Hole Texture",
						"type": "tex3d"
					}
				],
				"instance": "",
				"longdesc": "Type - TEX3D Operator\nCode - PauloFalcao\n\nCreates a TEX3D by comparing the base SDF and a modified version of the base SDF.\nTypically the modified version is a soft version of the base version, which can be done using the Node SDF Blur\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.",
				"name": "TEX3D Paint Edges Generic",
				"outputs": [
					{
						"tex3d": "$(name_uv)_tex",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Color Contrast",
						"max": 1,
						"min": 0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Shift",
						"max": 1,
						"min": -1,
						"name": "h",
						"shortdesc": "Shift  difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "TEX3D Paint Edges Generic"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/TEX3D Paint Edges Generic",
			"type": "shader"
		},
		{
			"icon_data": "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",
			"name": "pxflib",
			"parameters": {
				"edges": 0.04,
				"f": 2,
				"h": 0,
				"iterations": 4
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$sdfa($uv.xyz);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$f*100.,0.0,1.0));\n",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base SDF",
						"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
						"name": "sdfa",
						"shortdesc": "Main SDF",
						"type": "sdf3d"
					},
					{
						"default": "vec3(0.8,0.6,0.6)",
						"function": true,
						"label": "Tex Bump ",
						"longdesc": "Bump Texture, where the SDF difference is negative",
						"name": "texa",
						"shortdesc": "Bump Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(1.0,0.0,0.0)",
						"function": true,
						"label": "Tex Surface",
						"longdesc": "Surface Texture, where the SDF difference is close to zero",
						"name": "texb",
						"shortdesc": "Surface Texture",
						"type": "tex3d"
					},
					{
						"default": "vec3(0.3,0.1,0.1)",
						"function": true,
						"label": "Tex Hole",
						"longdesc": "Hole Texture, where the SDF difference is positive",
						"name": "texc",
						"shortdesc": "Hole Texture",
						"type": "tex3d"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$sdfa(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$sdfa(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Type - Tex3D Operator\nCode - PauloFalcao\n\nModifies an SDF by comparing the base SDF and a modified blured version of the base SDF.\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.\n\n",
				"name": "Tex3D Paint Edges",
				"outputs": [
					{
						"tex3d": "$(name_uv)_tex",
						"type": "tex3d"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.04,
						"label": "Edge Size",
						"longdesc": "Blur amount applied to the original SDF generating a new SDF",
						"max": 0.1,
						"min": 0,
						"name": "edges",
						"shortdesc": "Edge Size",
						"step": 0.0001,
						"type": "float"
					},
					{
						"default": 6,
						"label": "Edge Precision",
						"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
						"name": "iterations",
						"shortdesc": "Edge Blur precision",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Contrast",
						"max": 1,
						"min": 0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Shift",
						"max": 1,
						"min": -1,
						"name": "h",
						"shortdesc": "Shift  difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "Tex3D Paint Edges"
			},
			"tree_item": "PauloFalcao/TEX3D/Operator/TEX3D Paint Edges",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"edges": 0.04,
				"f": 2,
				"h": 0,
				"iterations": 3
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$mfsdfa(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec4 $(name_uv)_tex=vec4(mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$f*100.0,0.0,1.0)),$(name_uv)_sdfa);\n\n",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base MFSDF",
						"longdesc": "Main MFSDF goes here",
						"name": "mfsdfa",
						"shortdesc": "Main MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified MFSDF",
						"longdesc": "Modified MFSDF goes here, only Material attibutes will be used the SDF is ignored",
						"name": "mfsdfb",
						"shortdesc": "Modified MFSDF",
						"type": "v4v4"
					}
				],
				"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$mfsdfa(vec4(p,0.0)).w;\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$mfsdfa(vec4(p+vec3(cos(t)*r,y,sin(t)*r)*b,0.0)).w;\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
				"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao\n\nModifies an MFSDF by comparing the base SDF and a modified blured version of the base SDF.\n\n\n",
				"name": "MFSDF Paint Edges",
				"outputs": [
					{
						"type": "v4v4",
						"v4v4": "$(name_uv)_tex"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0.04,
						"label": "Edge Size",
						"longdesc": "Blur amount applied to the original SDF generating a new SDF",
						"max": 0.1,
						"min": 0,
						"name": "edges",
						"shortdesc": "Edge Size",
						"step": 0.0001,
						"type": "float"
					},
					{
						"default": 3,
						"label": "Edge Precision",
						"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in greater rendering times. Keep this value as low as possible.",
						"name": "iterations",
						"shortdesc": "Edge Blur precision",
						"type": "enum",
						"values": [
							{
								"name": "3",
								"value": "3"
							},
							{
								"name": "5",
								"value": "5"
							},
							{
								"name": "8",
								"value": "8"
							},
							{
								"name": "13",
								"value": "13"
							},
							{
								"name": "21",
								"value": "21"
							},
							{
								"name": "34",
								"value": "34"
							},
							{
								"name": "55",
								"value": "55"
							}
						]
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Contrast",
						"max": 1,
						"min": 0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Shift",
						"max": 1,
						"min": -1,
						"name": "h",
						"shortdesc": "Shift difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Paint Edges"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Paint Edges",
			"type": "shader"
		},
		{
			"icon_data": "",
			"name": "pxflib",
			"parameters": {
				"f": 0.163,
				"h": -0.073
			},
			"seed": 0,
			"seed_locked": false,
			"shader_model": {
				"code": "float $(name_uv)_sdfa=$mfsdfa(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfb=$mfsdfb(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec4 $(name_uv)_tex=vec4(mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$f*100.0,0.0,1.0)),$(name_uv)_sdfa);",
				"global": "",
				"inputs": [
					{
						"default": "0.0",
						"function": true,
						"label": "Base MFSDF",
						"longdesc": "Main MFSDF goes here",
						"name": "mfsdfa",
						"shortdesc": "Main MFSDF",
						"type": "v4v4"
					},
					{
						"default": "0.0",
						"function": true,
						"label": "Modified MFSDF",
						"longdesc": "Modified MFSDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
						"name": "mfsdfb",
						"shortdesc": "Modified MFSDF",
						"type": "v4v4"
					}
				],
				"instance": "",
				"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao\n\nModifies an MFSDF by comparing the base SDF and a modified version of the base SDF, typically the Base SDF with Blur, using the SDF Blur node.\n\n\n",
				"name": "MFSDF Paint Edges Generic",
				"outputs": [
					{
						"type": "v4v4",
						"v4v4": "$(name_uv)_tex"
					}
				],
				"parameters": [
					{
						"control": "None",
						"default": 0,
						"label": "Color Contrast",
						"max": 1,
						"min": 0,
						"name": "f",
						"shortdesc": "Increases the difference between Textures",
						"step": 0.001,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Color Shift",
						"max": 1,
						"min": -1,
						"name": "h",
						"shortdesc": "Shift difference between Textures",
						"step": 0.001,
						"type": "float"
					}
				],
				"shortdesc": "MFSDF Deform Edges Generic"
			},
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Paint Edges Generic",
			"type": "shader"
		},
		{
			"connections": [
				{
					"from": "pxflib_6",
					"from_port": 0,
					"to": "graph_5",
					"to_port": 1
				},
				{
					"from": "image",
					"from_port": 0,
					"to": "graph_5",
					"to_port": 0
				},
				{
					"from": "pxflib_4",
					"from_port": 0,
					"to": "pxflib_6",
					"to_port": 0
				},
				{
					"from": "sdf3d_torus",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 5
				},
				{
					"from": "graph_2",
					"from_port": 0,
					"to": "pxflib_6",
					"to_port": 1
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"name": "pxflib_4",
					"node_position": {
						"x": -497.215149,
						"y": -247.223648
					},
					"parameters": {
						"BaseColor": {
							"a": 1,
							"b": 0,
							"g": 0,
							"r": 1,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 0.469,
						"Specular": 0.782,
						"TranlateX": 0,
						"TranlateY": 0,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_6",
					"node_position": {
						"x": -187.387146,
						"y": -17.641312
					},
					"parameters": {

					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "vec4 MFSDF_Union_4(vec4 in1,vec4 in2,vec4 in3,vec4 in4){\n    vec4 t=(in1.w<in2.w)?vec4(in1):vec4(in2);\n    t=(t.w<in2.w)?vec4(t):vec4(in2);\n    t=(t.w<in3.w)?vec4(t):vec4(in3);\n    t=(t.w<in4.w)?vec4(t):vec4(in4);\n    return t;\n}\n\n",
						"inputs": [
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in1",
								"shortdesc": "V4->V4 MFSDF 1",
								"type": "v4v4"
							},
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in2",
								"shortdesc": "V4->V4 MFSDF 2",
								"type": "v4v4"
							},
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in3",
								"shortdesc": "V4->V4 MFSDF 3",
								"type": "v4v4"
							},
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in4",
								"shortdesc": "V4->V4 MFSDF 4",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean union operation between 4 shapes",
						"name": "MFSDF Union 4",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF",
								"type": "v4v4",
								"v4v4": "MFSDF_Union_4($in1($uv),$in2($uv),$in3($uv),$in4($uv))"
							}
						],
						"parameters": [

						]
					},
					"type": "shader"
				},
				{
					"export_paths": {

					},
					"minimized": true,
					"name": "Material",
					"node_position": {
						"x": 1318.784912,
						"y": -179.223648
					},
					"parameters": {
						"albedo_color": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"ao": 1,
						"depth_scale": 0.5,
						"emission_energy": 1,
						"flags_transparent": true,
						"metallic": 0,
						"normal": 1,
						"roughness": 1,
						"size": 11,
						"sss": 1
					},
					"seed": 0,
					"seed_locked": false,
					"type": "material"
				},
				{
					"connections": [
						{
							"from": "tex3d_pattern_2",
							"from_port": 0,
							"to": "tex3d_colorize_3",
							"to_port": 0
						},
						{
							"from": "tex3d_colorize_3",
							"from_port": 0,
							"to": "pxflib_4",
							"to_port": 0
						},
						{
							"from": "pxflib_4",
							"from_port": 0,
							"to": "gen_outputs",
							"to_port": 0
						},
						{
							"from": "sdf3d_box",
							"from_port": 0,
							"to": "pxflib_4",
							"to_port": 5
						}
					],
					"label": "Checkerboard",
					"longdesc": "",
					"name": "graph_2",
					"node_position": {
						"x": -501.399963,
						"y": 149.583908
					},
					"nodes": [
						{
							"name": "sdf3d_box",
							"node_position": {
								"x": -1041.340088,
								"y": -203.449951
							},
							"parameters": {
								"r": 0,
								"sx": 6,
								"sy": 0.5,
								"sz": 6
							},
							"seed": 0,
							"seed_locked": false,
							"type": "sdf3d_box"
						},
						{
							"name": "tex3d_pattern_2",
							"node_position": {
								"x": -1106.340088,
								"y": -381.449951
							},
							"parameters": {
								"mix": 4,
								"x_scale": "$checkersize",
								"x_wave": 2,
								"y_scale": 0,
								"y_wave": 2,
								"z_scale": "$checkersize",
								"z_wave": 2
							},
							"seed": 0,
							"seed_locked": false,
							"type": "tex3d_pattern"
						},
						{
							"name": "gen_inputs",
							"node_position": {
								"x": -1341.340088,
								"y": -277.949951
							},
							"parameters": {

							},
							"ports": [

							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_outputs",
							"node_position": {
								"x": -171.340027,
								"y": -302.949951
							},
							"parameters": {

							},
							"ports": [
								{
									"group_size": 0,
									"name": "port0",
									"type": "v4v4"
								}
							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_parameters",
							"node_position": {
								"x": -1055.590088,
								"y": -653.449951
							},
							"parameters": {
								"checkersize": 2,
								"param0": 6,
								"param1": -1,
								"param2": {
									"interpolation": 1,
									"points": [
										{
											"a": 1,
											"b": 0.808594,
											"g": 0.808594,
											"pos": 0,
											"r": 0.808594
										},
										{
											"a": 1,
											"b": 0.53125,
											"g": 0.53125,
											"pos": 1,
											"r": 0.53125
										}
									],
									"type": "Gradient"
								},
								"param3": 0,
								"param4": 0.5,
								"param5": 0
							},
							"seed": 0,
							"seed_locked": false,
							"type": "remote",
							"widgets": [
								{
									"label": "Board Size",
									"linked_widgets": [
										{
											"node": "sdf3d_box",
											"widget": "sx"
										},
										{
											"node": "sdf3d_box",
											"widget": "sz"
										}
									],
									"name": "param0",
									"type": "linked_control"
								},
								{
									"default": 1,
									"label": "Checker Size",
									"max": 20,
									"min": 0,
									"name": "checkersize",
									"step": 0.001,
									"type": "named_parameter"
								},
								{
									"label": "Position",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "TranlateY"
										}
									],
									"name": "param1",
									"type": "linked_control"
								},
								{
									"label": "Color",
									"linked_widgets": [
										{
											"node": "tex3d_colorize_3",
											"widget": "g"
										}
									],
									"name": "param2",
									"type": "linked_control"
								},
								{
									"label": "Metallic",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Metallic"
										}
									],
									"name": "param3",
									"type": "linked_control"
								},
								{
									"label": "Specular",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Specular"
										}
									],
									"name": "param4",
									"type": "linked_control"
								},
								{
									"label": "Roughness",
									"linked_widgets": [
										{
											"node": "pxflib_4",
											"widget": "Roughness"
										}
									],
									"name": "param5",
									"type": "linked_control"
								}
							]
						},
						{
							"name": "tex3d_colorize_3",
							"node_position": {
								"x": -850,
								"y": -377.021362
							},
							"parameters": {
								"g": {
									"interpolation": 1,
									"points": [
										{
											"a": 1,
											"b": 0.808594,
											"g": 0.808594,
											"pos": 0,
											"r": 0.808594
										},
										{
											"a": 1,
											"b": 0.53125,
											"g": 0.53125,
											"pos": 1,
											"r": 0.53125
										}
									],
									"type": "Gradient"
								}
							},
							"seed": 0,
							"seed_locked": false,
							"type": "tex3d_colorize"
						},
						{
							"name": "pxflib_4",
							"node_position": {
								"x": -591.953735,
								"y": -359.458862
							},
							"parameters": {
								"BaseColor": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1,
									"type": "Color"
								},
								"Emission": 0,
								"Metallic": 0,
								"RotateX": 0,
								"RotateY": 0,
								"RotateZ": 0,
								"Roughness": 0,
								"Specular": 0.5,
								"TranlateX": 0,
								"TranlateY": -1,
								"TranlateZ": 0,
								"scale": 1
							},
							"seed": -5947,
							"seed_locked": true,
							"shader_model": {
								"code": "",
								"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
								"inputs": [
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "BaseColor",
										"name": "BaseColor_tex3d",
										"shortdesc": "TEX3D",
										"type": "tex3d"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Metallic",
										"name": "Metallic_tex3d",
										"shortdesc": "Grayscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Specular",
										"name": "Specular_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Roughness",
										"name": "Roughness_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "Emission",
										"name": "Emission_tex3d",
										"type": "tex3d"
									},
									{
										"default": "length($uv)-0.4 ",
										"function": true,
										"label": "Object",
										"name": "sdf3d",
										"shortdesc": "SDF3D",
										"type": "sdf3d"
									}
								],
								"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
								"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
								"name": "MFSDF Object",
								"outputs": [
									{
										"shortdesc": "V4->V4 MFSDF ",
										"type": "v4v4",
										"v4v4": "PBRObjectMaker_$name($uv)"
									}
								],
								"parameters": [
									{
										"default": {
											"a": 1,
											"b": 1,
											"g": 1,
											"r": 1
										},
										"label": "",
										"name": "BaseColor",
										"type": "color"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Metallic",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.5,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Specular",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Roughness",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"longdesc": "Emission Scale",
										"max": 500,
										"min": 0,
										"name": "Emission",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "S",
										"longdesc": "Object scale",
										"max": 4,
										"min": 0,
										"name": "scale",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "X",
										"max": 10,
										"min": -10,
										"name": "TranlateX",
										"shortdesc": "Translate X",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Y",
										"max": 10,
										"min": -10,
										"name": "TranlateY",
										"shortdesc": "Translate Y",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Z",
										"max": 10,
										"min": -10,
										"name": "TranlateZ",
										"shortdesc": "Translate Z",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Rx",
										"max": 180,
										"min": -180,
										"name": "RotateX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Ry",
										"max": 180,
										"min": -180,
										"name": "RotateY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Rz",
										"max": 180,
										"min": -180,
										"name": "RotateZ",
										"step": 0.001,
										"type": "float"
									}
								],
								"shortdesc": "MFSDF Object"
							},
							"type": "shader"
						}
					],
					"parameters": {
						"checkersize": 2,
						"param0": 6,
						"param1": -1,
						"param2": {
							"interpolation": 1,
							"points": [
								{
									"a": 1,
									"b": 0.808594,
									"g": 0.808594,
									"pos": 0,
									"r": 0.808594
								},
								{
									"a": 1,
									"b": 0.53125,
									"g": 0.53125,
									"pos": 1,
									"r": 0.53125
								}
							],
							"type": "Gradient"
						},
						"param3": 0,
						"param4": 0.5,
						"param5": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shortdesc": "",
					"type": "graph"
				},
				{
					"name": "sdf3d_torus",
					"node_position": {
						"x": -711.609192,
						"y": -119.045792
					},
					"parameters": {
						"R": 1,
						"axis": 1,
						"r": 0.34
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_torus"
				},
				{
					"name": "image",
					"node_position": {
						"x": -139.677063,
						"y": -151.710709
					},
					"parameters": {
						"image": "C:/Users/PauloFalcao/Desktop/material_maker_1_1_windows/environments/hdris/epping_forest_01_1k.hdr"
					},
					"seed": 0,
					"seed_locked": false,
					"type": "image"
				},
				{
					"connections": [
						{
							"from": "gen_inputs",
							"from_port": 0,
							"to": "pxflib",
							"to_port": 1
						},
						{
							"from": "gen_inputs",
							"from_port": 1,
							"to": "pxflib",
							"to_port": 0
						},
						{
							"from": "gen_inputs",
							"from_port": 1,
							"to": "pxflib_7",
							"to_port": 0
						},
						{
							"from": "gen_inputs",
							"from_port": 0,
							"to": "pxflib_7",
							"to_port": 1
						},
						{
							"from": "pxflib_7",
							"from_port": 0,
							"to": "gen_outputs",
							"to_port": 0
						}
					],
					"label": "Render Combined Path and Local",
					"longdesc": "",
					"name": "graph_5",
					"node_position": {
						"x": 42.503601,
						"y": -95.238785
					},
					"nodes": [
						{
							"name": "pxflib_7",
							"node_position": {
								"x": -724.168213,
								"y": 224.137207
							},
							"parameters": {
								"CamD": 1.5,
								"CamX": 0.861,
								"CamY": 2.133,
								"CamZ": 4.154,
								"CamZoom": 1,
								"LookAtX": 0,
								"LookAtY": 0,
								"LookAtZ": 0,
								"MaxDistance": 200,
								"MaxRayLoop": 5,
								"MaxRefIte": 4,
								"Precision": 2,
								"Samples": 0
							},
							"seed": 0,
							"seed_locked": false,
							"shader_model": {
								"code": "",
								"global": "\n//MATH\nconst float pathtracing_PI=3.14159265359;\nconst float pathtracing_TAU=6.28318530718;\n\nvoid pathtracing_Onb(in vec3 N, inout vec3 T, inout vec3 B){\n    vec3 UpVector=abs(N.z)<0.999?vec3(0,0,1):vec3(1,0,0);\n    T=normalize(cross(UpVector,N));\n    B=cross(N,T);\n}\n\nvec2 pathtracing_equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*pathtracing_PI,pathtracing_PI);\n}\n\n// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint pathtracing_rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat pathtracing_RandomFloat01(inout uint state){\n    uint r=pathtracing_rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n// SAMPLING START\n\nvec3 pathtracing_uniformSampleSphere(float r1,float r2){\n    float z=1.0-2.0*r1;\n    float r=sqrt(max(0.0,1.0-z*z));\n    float phi=pathtracing_TAU*r2;\n    return vec3(r*cos(phi),r*sin(phi),z);\n}\n\nvec3 pathtracing_cosineSampleHemissphere(inout uint state,vec3 n){\n    float u1=pathtracing_RandomFloat01(state);\n    float u2=pathtracing_RandomFloat01(state);\n    return normalize(n+pathtracing_uniformSampleSphere(u1,u2)); \n}\n\n// Adapted from \"Sampling the GGX Distribution of Visible Normals\",\n// http://jcgt.org/published/0007/04/01/\nvec3 pathtracing_SampleGGXVNDF(inout uint state,vec3 Ve,float alpha_x,float alpha_y){\n    float U1=pathtracing_RandomFloat01(state);\n    float U2=pathtracing_RandomFloat01(state);\n    \n    //transforming the view direction to the hemisphere configuration\n    vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));\n\n    //orthonormal basis\n    vec3 T1;vec3 T2;\n    pathtracing_Onb(Vh,T1,T2);\n\n    //parameterization of the projected area\n    float r = sqrt(U1); \n    float phi = 2.0 * pathtracing_PI * U2;    \n    float t1 = r * cos(phi);\n    float t2 = r * sin(phi);\n    float s = 0.5 * (1.0 + Vh.z);\n    t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;\n\n    //reprojection onto hemisphere\n    vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2))*Vh;\n\n    //transforming the normal back to the ellipsoid configuration\n    vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0f, Nh.z))); \n\n    return Ne;\n}\n\nfloat pathtracing_schlickWeight(float cosTheta) {\n    float m=clamp(1.-cosTheta,0.,1.);\n    float m2=m*m;\n    return m2*m2*m;\n}\n\n// SAMPLING END\n\n",
								"inputs": [
									{
										"default": "vec4(1.0,0.0,0.0,length($uv)-0.4)",
										"function": true,
										"label": "MFSDF",
										"name": "mfsdf",
										"shortdesc": "V4->V4 Multi-Field SDF",
										"type": "v4v4"
									},
									{
										"default": "vec3(0.0)",
										"function": true,
										"label": "360 HDRI Image",
										"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
										"name": "hdri",
										"shortdesc": "Image 360 HDRI",
										"type": "rgb"
									}
								],
								"instance": "\n//tetrahedron normal by PauloFalcao\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.$Precision,-0.$Precision,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid raymarch_$name(in vec3 o,in vec3 v,out vec3 p,inout float d){\n  float s;\n  for(int i=0;i<$MaxRayLoop;i++){\n    p=o+v*d;\n    s=$mfsdf(vec4(p,0.0)).w;\n    if (abs(s)<0.0$Precision) break;\n    d+=s;\n    if (d>$MaxDistance) break;\n  } \n}\n\nvec3 pathtracing_$name(vec2 uv) {\n\n\tfloat dx = dFdx(uv.x);\n\tfloat dy = dFdy(uv.y);\n\t\n\t// Init random\n\tvec2 rndgen=(uv+100.0)*10000.0;\n    uint rngState=uint(uint(rndgen.x)*uint(1973)+uint(rndgen.y)*uint(9277) + uint(TIME*100000.0)*uint(26699));\n\n\tvec3 o=vec3($CamX,$CamY,$CamZ)*$CamZoom; \n    vec3 t=vec3($LookAtX,$LookAtY,$LookAtZ);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 c=normalize(t-o);\n    vec3 cx=normalize(cross(u,c));\n    vec3 cy=normalize(cross(cx,c));\n\n    vec3 AAColor=vec3(0.0);\n\t\n    for(int AALoop=0;AALoop<$Samples;AALoop++){\n\t    \n\t    vec2 xy=((uv.xy+(vec2(pathtracing_RandomFloat01(rngState),pathtracing_RandomFloat01(rngState))-0.5)*vec2(dx,dy)))-0.5;\n\n\t    vec3 v=normalize(c*$CamD+cx*xy.x+cy*xy.y);\n\n\t    vec3 p;\n\t    float d=0.01;\n\t    vec3 rgb=vec3(1.0);\n\t    vec3 io=o;\n\t    int i;\n\n\t    for(i=0;i<$MaxRefIte;i++){\n\t    \n\t        raymarch_$name(io,v,p,d);\n\t        \n\t        vec3 n=normal_$name(p);\n\t        \n\t        //View direction to tangent space\n\t        vec3 ot;vec3 ob;pathtracing_Onb(n,ot,ob);\n\t        vec3 vt=vec3(dot(-v,ot),dot(-v,ob),dot(-v,n));\n\t\t\n\t        if (d<$MaxDistance){\t\n\t        //if (length(p-o)<$MaxDistance){\n\t        vec3 obj_Emission=$mfsdf(vec4(p,13.0)).rgb;\n\t        \n\t        if ((obj_Emission.x+obj_Emission.y+obj_Emission.z)>0.001){\n\t            rgb=obj_Emission*rgb;\n\t            break;\n\t        } else {\n\t            float s=pathtracing_RandomFloat01(rngState);\n\t\t\t\t\n\t            vec3 obj_BaseColor=$mfsdf(vec4(p,1.0)).rgb; // 1 - BaseColor  (r,g,b,sdf)\n\t            float obj_Metallic=clamp($mfsdf(vec4(p,2.0)).x,0.0,1.0);   // 2 - Metallic   (v,0,0,sdf)\n\t            float obj_Specular=clamp(max($mfsdf(vec4(p,4.0)).x,obj_Metallic),0.0,1.0);   // 4 - Specular   (v,0,0,sdf)\n\t            float obj_Roughness=$mfsdf(vec4(p,5.0)).x;  // 5 - Roughness  (v,0,0,sdf)\n\n\t            if (s>obj_Specular*obj_Specular*0.5){\n\t                rgb=(obj_BaseColor-obj_BaseColor*obj_Metallic)*rgb;\n\t                v=pathtracing_cosineSampleHemissphere(rngState,n);\n\t            } else {\n\n\t                float r2=obj_Roughness*obj_Roughness*0.5;\n\t                vec3 vndf=pathtracing_SampleGGXVNDF(rngState,vt,r2,r2);\n\t                vec3 nv=reflect(-vt,vndf);\n\n\t                //Sample direction back to camera space\n\t                nv=nv.x*ot+nv.y*ob+nv.z*n;\n\n\t                float FH=pathtracing_schlickWeight(dot(n,nv));\n\t\t\t\t\tvec3 Cspec0=mix(vec3(obj_Specular*0.25),obj_BaseColor,obj_Metallic);\n\t                vec3 Fs=mix(Cspec0,vec3(1.0),FH);\n\t                rgb=Fs*rgb;\n\t                \n\t                v=nv;\n\t            }\n\t            io=p;\n\t            d=0.01;\n\t        }\n\t        } else {\n\t        rgb*=$hdri(pathtracing_equirectangularMap(v.xzy)).xyz;\n\t        break;\n\t        }\n\t    }//for(int i\n\t    if (i==$MaxRefIte) rgb=vec3(0.0);//did not hit any light source\n\n\t\tAAColor+=max(rgb,vec3(0));\n\t}\n\n\treturn AAColor/floor($Samples);\n\t\n}\n\n",
								"longdesc": "Type - MFSDF Render\nCode - PauloFalcao\n\nPath tracing ray marching node for MFSDF objects using a environment 360 HDRI image\n\n",
								"name": "MFSDF Render Path Tracing",
								"outputs": [
									{
										"rgb": "pathtracing_$name($uv)",
										"shortdesc": "Image output",
										"type": "rgb"
									}
								],
								"parameters": [
									{
										"control": "None",
										"default": 0,
										"label": "CamX",
										"longdesc": "Camera position X",
										"max": 5,
										"min": -5,
										"name": "CamX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "CamY",
										"longdesc": "Camera position Y",
										"max": 5,
										"min": -5,
										"name": "CamY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 2,
										"label": "CamZ",
										"longdesc": "Camera position Z",
										"max": 5,
										"min": -5,
										"name": "CamZ",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "LookAtX",
										"longdesc": "Look at position with coordinate X",
										"max": 5,
										"min": -5,
										"name": "LookAtX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "LookAtY",
										"longdesc": "Look at position with coordinate Y",
										"max": 5,
										"min": -5,
										"name": "LookAtY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "LookAtZ",
										"longdesc": "Look at position with coordinate Z",
										"max": 5,
										"min": -5,
										"name": "LookAtZ",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 5,
										"label": "CamDistance",
										"longdesc": "Camera distance to the view plane, used to define the Field Of View",
										"max": 5,
										"min": 0,
										"name": "CamD",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "CamZoom",
										"longdesc": "Camera zoom",
										"max": 5,
										"min": 0,
										"name": "CamZoom",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 50,
										"label": "MaxDistance",
										"longdesc": "Maximum render distance",
										"max": 500,
										"min": 1,
										"name": "MaxDistance",
										"step": 0.01,
										"type": "float"
									},
									{
										"default": 2,
										"label": "MaxRefIte",
										"longdesc": "Maximum reflection iterations",
										"name": "MaxRefIte",
										"type": "enum",
										"values": [
											{
												"name": "1",
												"value": "1"
											},
											{
												"name": "2",
												"value": "2"
											},
											{
												"name": "3",
												"value": "3"
											},
											{
												"name": "4",
												"value": "4"
											},
											{
												"name": "5",
												"value": "5"
											},
											{
												"name": "6",
												"value": "6"
											},
											{
												"name": "7",
												"value": "7"
											},
											{
												"name": "8",
												"value": "8"
											},
											{
												"name": "9",
												"value": "9"
											},
											{
												"name": "10",
												"value": "10"
											},
											{
												"name": "12",
												"value": "12"
											},
											{
												"name": "14",
												"value": "14"
											},
											{
												"name": "16",
												"value": "16"
											},
											{
												"name": "18",
												"value": "18"
											},
											{
												"name": "20",
												"value": "20"
											},
											{
												"name": "25",
												"value": "25"
											},
											{
												"name": "30",
												"value": "30"
											},
											{
												"name": "40",
												"value": "40"
											},
											{
												"name": "50",
												"value": "50"
											}
										]
									},
									{
										"default": 2,
										"label": "MaxRayLoop",
										"name": "MaxRayLoop",
										"type": "enum",
										"values": [
											{
												"name": "16",
												"value": "16"
											},
											{
												"name": "32",
												"value": "32"
											},
											{
												"name": "64",
												"value": "64"
											},
											{
												"name": "128",
												"value": "128"
											},
											{
												"name": "256",
												"value": "256"
											},
											{
												"name": "512",
												"value": "512"
											},
											{
												"name": "1024",
												"value": "1024"
											},
											{
												"name": "2048",
												"value": "2048"
											},
											{
												"name": "4096",
												"value": "4096"
											}
										]
									},
									{
										"default": 6,
										"label": "Precision",
										"name": "Precision",
										"type": "enum",
										"values": [
											{
												"name": "1",
												"value": "01"
											},
											{
												"name": "2",
												"value": "005"
											},
											{
												"name": "3",
												"value": "001"
											},
											{
												"name": "4",
												"value": "0005"
											},
											{
												"name": "5",
												"value": "0001"
											},
											{
												"name": "6",
												"value": "00005"
											},
											{
												"name": "7",
												"value": "00001"
											}
										]
									},
									{
										"default": 0,
										"label": "Samples",
										"name": "Samples",
										"type": "enum",
										"values": [
											{
												"name": "1",
												"value": "1"
											},
											{
												"name": "2",
												"value": "2"
											},
											{
												"name": "4",
												"value": "4"
											},
											{
												"name": "8",
												"value": "8"
											},
											{
												"name": "12",
												"value": "12"
											},
											{
												"name": "16",
												"value": "16"
											},
											{
												"name": "24",
												"value": "24"
											},
											{
												"name": "32",
												"value": "32"
											},
											{
												"name": "48",
												"value": "48"
											},
											{
												"name": "64",
												"value": "64"
											},
											{
												"name": "96",
												"value": "96"
											},
											{
												"name": "128",
												"value": "128"
											}
										]
									}
								],
								"shortdesc": "MFSDF Render Path Tracing"
							},
							"type": "shader"
						},
						{
							"name": "pxflib",
							"node_position": {
								"x": -751.168213,
								"y": -222.862793
							},
							"parameters": {
								"AmbLight": 0.25,
								"AmbOcclusion": 1,
								"CamD": 1.5,
								"CamX": 0.861,
								"CamY": 2.133,
								"CamZ": 4.154,
								"CamZoom": 1,
								"Gamma": 1.4,
								"LookAtX": 0,
								"LookAtY": 0,
								"LookAtZ": 0,
								"Shadow": 1,
								"SunX": 2.5,
								"SunY": 2.5,
								"SunZ": 2.5
							},
							"seed": 0,
							"seed_locked": false,
							"shader_model": {
								"code": "",
								"global": "vec2 Simple360HDR_equirectangularMap(vec3 dir) {\n    const float PI=3.14159265359;\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
								"inputs": [
									{
										"default": "vec4((($uv.w>0.5&&$uv.w<1.5)||($uv.w>3.5&&$uv.w<4.5))?1.0:0.0,0.0,0.0,length($uv)-0.4)",
										"function": true,
										"label": "MFSDF",
										"name": "mfsdf",
										"shortdesc": "V4->V4 Multi-Field SDF",
										"type": "v4v4"
									},
									{
										"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
										"function": true,
										"label": "360 HDRI Image",
										"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
										"name": "hdri",
										"shortdesc": "Image 360 HDRI",
										"type": "rgb"
									}
								],
								"instance": "\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = $mfsdf(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = $mfsdf(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t    vec3 p=ro + rd*t;\n\t\tfloat h = $mfsdf(vec4(p,0.0)).w;\n\t\tfloat isLight=$mfsdf(vec4(p,13.0)).x;\n\t\tif (isLight>0.0) h=999999.0;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=$mfsdf(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1)\n\tfloat objMetallic=clamp($mfsdf(vec4(p,2.0)).x,0.0,1.0);  // 2 - Metallic  (v,0,0,sdf)\n\tfloat objSpecular=clamp(max($mfsdf(vec4(p,4.0)).x*0.2,objMetallic),0.0,1.0);  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=$mfsdf(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 objEmission=$mfsdf(vec4(p,13.0)).xyz; // 13 - Emission (r,g,b,sdf)\n\tobjColor=max(objColor,objEmission);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tif (objEmission.x>0.0){\n\t\t\tcolor=objEmission;\n\t\t} else {\n\t\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*((1.0-objMetallic)*objColor)+\n\t\t\tpow(r,pow(256.0,(1.0-objRoughness)))*objSpecular*mix(vec3(1.0),objColor,objMetallic)*(1.0-objRoughness)*16.0;\n\t\t}\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tvec3 objEmissionRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=$mfsdf(vec4(p,1.0)).xyz;\n\t\t\tobjEmissionRef=$mfsdf(vec4(p,13.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tif (objEmissionRef.x>0.0){\n\t\t\t  objColorRef=objEmissionRef;\n\t\t\t} else {\n\t\t\t  objColorRef=max(l,$AmbLight)*objColorRef;\n\t\t\t}\n\t\t} else {\n\t\t\tobjColorRef=$hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular*mix(vec3(1.0),objColor,objMetallic));\n\t} else {\n\t\tcolor=$hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
								"longdesc": "Type - MFSDF Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
								"name": "MFSDF Render",
								"outputs": [
									{
										"rgb": "raymarch_$name($uv)",
										"shortdesc": "Image output",
										"type": "rgb"
									}
								],
								"parameters": [
									{
										"control": "None",
										"default": 0,
										"label": "CamX",
										"longdesc": "Camera position X",
										"max": 5,
										"min": -5,
										"name": "CamX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "CamY",
										"longdesc": "Camera position Y",
										"max": 5,
										"min": -5,
										"name": "CamY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 2,
										"label": "CamZ",
										"longdesc": "Camera position Z",
										"max": 5,
										"min": -5,
										"name": "CamZ",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "LookAtX",
										"longdesc": "Look at position with coordinate X",
										"max": 5,
										"min": -5,
										"name": "LookAtX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "LookAtY",
										"longdesc": "Look at position with coordinate Y",
										"max": 5,
										"min": -5,
										"name": "LookAtY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "LookAtZ",
										"longdesc": "Look at position with coordinate Z",
										"max": 5,
										"min": -5,
										"name": "LookAtZ",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 5,
										"label": "CamDistance",
										"longdesc": "Camera distance to the view plane, used to define the Field Of View",
										"max": 5,
										"min": 0,
										"name": "CamD",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "CamZoom",
										"longdesc": "Camera zoom",
										"max": 5,
										"min": 0,
										"name": "CamZoom",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "SunX",
										"longdesc": "Sun position coordinate X",
										"max": 10,
										"min": -10,
										"name": "SunX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "SunY",
										"longdesc": "Sun position coordinate Y",
										"max": 10,
										"min": -10,
										"name": "SunY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "SunZ",
										"longdesc": "Sun position coordinate Z",
										"max": 10,
										"min": -10,
										"name": "SunZ",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.2,
										"label": "AmbLight",
										"longdesc": "Strength of ambient light",
										"max": 1,
										"min": 0,
										"name": "AmbLight",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "AmbOcclusion",
										"longdesc": "Strength of ambient occlusion",
										"max": 1,
										"min": 0,
										"name": "AmbOcclusion",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "Shadow",
										"longdesc": "Shadow strength",
										"max": 1,
										"min": 0,
										"name": "Shadow",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 2.2,
										"label": "Gamma",
										"longdesc": "Gamma Correction",
										"max": 3,
										"min": 0,
										"name": "Gamma",
										"step": 0.001,
										"type": "float"
									}
								]
							},
							"type": "shader"
						},
						{
							"name": "gen_inputs",
							"node_position": {
								"x": -1221.168213,
								"y": 77.137207
							},
							"parameters": {

							},
							"ports": [
								{
									"name": "360 HDRI Image",
									"type": "rgb"
								},
								{
									"name": "MFSDF",
									"type": "v4v4"
								}
							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_outputs",
							"node_position": {
								"x": -354.168213,
								"y": 105.137207
							},
							"parameters": {

							},
							"ports": [
								{
									"name": "",
									"type": "rgb"
								}
							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_parameters",
							"node_position": {
								"x": -1257.168213,
								"y": -431.862793
							},
							"parameters": {
								"param0": 0.861,
								"param1": 2.133,
								"param2": 4.154,
								"param3": 0,
								"param4": 0,
								"param5": 0,
								"param6": 1.5,
								"param7": 1
							},
							"seed": 0,
							"seed_locked": false,
							"type": "remote",
							"widgets": [
								{
									"label": "CamX",
									"linked_widgets": [
										{
											"node": "pxflib",
											"widget": "CamX"
										},
										{
											"node": "pxflib_7",
											"widget": "CamX"
										}
									],
									"name": "param0",
									"type": "linked_control"
								},
								{
									"label": "CamY",
									"linked_widgets": [
										{
											"node": "pxflib",
											"widget": "CamY"
										},
										{
											"node": "pxflib_7",
											"widget": "CamY"
										}
									],
									"name": "param1",
									"type": "linked_control"
								},
								{
									"label": "CamZ",
									"linked_widgets": [
										{
											"node": "pxflib",
											"widget": "CamZ"
										},
										{
											"node": "pxflib_7",
											"widget": "CamZ"
										}
									],
									"name": "param2",
									"type": "linked_control"
								},
								{
									"label": "LookAtX",
									"linked_widgets": [
										{
											"node": "pxflib",
											"widget": "LookAtX"
										},
										{
											"node": "pxflib_7",
											"widget": "LookAtX"
										}
									],
									"name": "param3",
									"type": "linked_control"
								},
								{
									"label": "LookAtY",
									"linked_widgets": [
										{
											"node": "pxflib",
											"widget": "LookAtY"
										},
										{
											"node": "pxflib_7",
											"widget": "LookAtY"
										}
									],
									"name": "param4",
									"type": "linked_control"
								},
								{
									"label": "LookAtZ",
									"linked_widgets": [
										{
											"node": "pxflib",
											"widget": "LookAtZ"
										}
									],
									"name": "param5",
									"type": "linked_control"
								},
								{
									"label": "CamDistance",
									"linked_widgets": [
										{
											"node": "pxflib",
											"widget": "CamD"
										},
										{
											"node": "pxflib_7",
											"widget": "CamD"
										}
									],
									"name": "param6",
									"type": "linked_control"
								},
								{
									"label": "CamZoom",
									"linked_widgets": [
										{
											"node": "pxflib",
											"widget": "CamZoom"
										},
										{
											"node": "pxflib_7",
											"widget": "CamZoom"
										}
									],
									"name": "param7",
									"type": "linked_control"
								}
							]
						}
					],
					"parameters": {
						"param0": 0.861,
						"param1": 2.133,
						"param2": 4.154,
						"param3": 0,
						"param4": 0,
						"param5": 0,
						"param6": 1.5,
						"param7": 1
					},
					"seed": 0,
					"seed_locked": false,
					"shortdesc": "",
					"type": "graph"
				}
			],
			"tree_item": "PauloFalcao/MFSDF/Render/MFSDF Combined Path and Local"
		},
		{
			"connections": [
				{
					"from": "pxflib",
					"from_port": 0,
					"to": "shader_3",
					"to_port": 1
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "shader_3",
					"to_port": 2
				},
				{
					"from": "pxflib_3",
					"from_port": 0,
					"to": "shader_3",
					"to_port": 3
				},
				{
					"from": "shader_3",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 1
				},
				{
					"from": "sdf3d_boolean",
					"from_port": 0,
					"to": "shader_3",
					"to_port": 0
				},
				{
					"from": "sdf3d_boolean",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 0
				},
				{
					"from": "sdf3d_box_2",
					"from_port": 0,
					"to": "pxflib_5",
					"to_port": 0
				},
				{
					"from": "pxflib_5",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 0
				},
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 1
				}
			],
			"icon_data": "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",
			"nodes": [
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -121.520111,
						"y": -176.288788
					},
					"parameters": {
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"TranslateX": 0,
						"TranslateY": 0.2,
						"TranslateZ": 0.2,
						"scale": 0.5
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"export_paths": {

					},
					"name": "Material",
					"node_position": {
						"x": 367.000397,
						"y": -44.164886
					},
					"parameters": {
						"albedo_color": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"ao": 1,
						"depth_scale": 0.5,
						"emission_energy": 1,
						"flags_transparent": true,
						"metallic": 0,
						"normal": 1,
						"roughness": 1,
						"size": 11,
						"sss": 1
					},
					"seed": 0,
					"seed_locked": false,
					"type": "material"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -324.520111,
						"y": 5.711212
					},
					"parameters": {
						"color": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						}
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -325.520111,
						"y": 69.711212
					},
					"parameters": {
						"color": {
							"a": 1,
							"b": 0,
							"g": 0,
							"r": 1,
							"type": "Color"
						}
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -325.520111,
						"y": 151.711212
					},
					"parameters": {
						"color": {
							"a": 1,
							"b": 0,
							"g": 0,
							"r": 0,
							"type": "Color"
						}
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -368.520111,
						"y": -171.288788
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -360.520111,
						"y": -320.288788
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": 107.479889,
						"y": -245.288788
					},
					"parameters": {
						"op": 1
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_boolean"
				},
				{
					"name": "shader_3",
					"node_position": {
						"x": -70.839569,
						"y": 76.475128
					},
					"parameters": {
						"edges": 0.0377,
						"f": 2,
						"h": 0,
						"iterations": 4
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "float $(name_uv)_sdfa=$sdfa($uv.xyz);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$f*100.,0.0,1.0));\n",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Base SDF",
								"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
								"name": "sdfa",
								"shortdesc": "Main SDF",
								"type": "sdf3d"
							},
							{
								"default": "vec3(0.8,0.6,0.6)",
								"function": true,
								"label": "Tex Bump ",
								"longdesc": "Bump Texture, where the SDF difference is negative",
								"name": "texa",
								"shortdesc": "Bump Texture",
								"type": "tex3d"
							},
							{
								"default": "vec3(1.0,0.0,0.0)",
								"function": true,
								"label": "Tex Surface",
								"longdesc": "Surface Texture, where the SDF difference is close to zero",
								"name": "texb",
								"shortdesc": "Surface Texture",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.3,0.1,0.1)",
								"function": true,
								"label": "Tex Hole",
								"longdesc": "Hole Texture, where the SDF difference is positive",
								"name": "texc",
								"shortdesc": "Hole Texture",
								"type": "tex3d"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$sdfa(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$sdfa(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - Tex3D Operator\nCode - PauloFalcao\n\nModifies an SDF by comparing the base SDF and a modified blured version of the base SDF.\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.\n\n",
						"name": "Tex3D Paint Edges",
						"outputs": [
							{
								"tex3d": "$(name_uv)_tex",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.04,
								"label": "Edge Size",
								"longdesc": "Blur amount applied to the original SDF generating a new SDF",
								"max": 0.1,
								"min": 0,
								"name": "edges",
								"shortdesc": "Edge Size",
								"step": 0.0001,
								"type": "float"
							},
							{
								"default": 6,
								"label": "Edge Precision",
								"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
								"name": "iterations",
								"shortdesc": "Edge Blur precision",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									}
								]
							},
							{
								"control": "None",
								"default": 0,
								"label": "Color Contrast",
								"max": 1,
								"min": 0,
								"name": "f",
								"shortdesc": "Increases the difference between Textures",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Color Shift",
								"max": 1,
								"min": -1,
								"name": "h",
								"shortdesc": "Shift  difference between Textures",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "Tex3D Paint Edges"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_4",
					"node_position": {
						"x": 325.479889,
						"y": -149.288788
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2,
						"CamZ": 3,
						"CamZoom": 0.452,
						"LookAtX": 0,
						"LookAtY": 0,
						"LookAtZ": 0,
						"Pow": 64,
						"Reflection": 0.115,
						"Shadow": 1,
						"Specular": 0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D A",
								"name": "sdf_a",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.1,0.1)",
								"function": true,
								"label": "TEX3D A",
								"name": "tex3d_a",
								"shortdesc": "TEX3D A",
								"type": "tex3d"
							},
							{
								"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
								"function": true,
								"label": "SDF3D B",
								"name": "sdf_b",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
								"function": true,
								"label": "TEX3D B",
								"name": "tex3d_b",
								"shortdesc": "TEX3D B",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "SDF Render 2 Objs",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1,
								"min": 0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024,
								"min": 0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/TEX3D/Operator/TEX3D Paint Edges Example"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box_2",
					"from_port": 0,
					"to": "pxflib_5",
					"to_port": 0
				},
				{
					"from": "pxflib_5",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 0
				},
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 1
				},
				{
					"from": "sdf3d_boolean",
					"from_port": 0,
					"to": "shader_2",
					"to_port": 0
				},
				{
					"from": "pxflib",
					"from_port": 0,
					"to": "shader_2",
					"to_port": 2
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "shader_2",
					"to_port": 3
				},
				{
					"from": "pxflib_3",
					"from_port": 0,
					"to": "shader_2",
					"to_port": 4
				},
				{
					"from": "shader_2",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 0
				},
				{
					"from": "shader_2",
					"from_port": 1,
					"to": "pxflib_4",
					"to_port": 1
				},
				{
					"from": "pxflib_6",
					"from_port": 0,
					"to": "shader_2",
					"to_port": 1
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"name": "pxflib_6",
					"node_position": {
						"x": -282.883942,
						"y": 168.93103
					},
					"parameters": {
						"brightness": 0,
						"clamp": 1,
						"contrast": 2,
						"iterations": 5,
						"persistence": 0.5,
						"scale": 26.044,
						"scale_x": 1,
						"scale_y": 1,
						"scale_z": 1,
						"transx": 0,
						"transy": 0,
						"transz": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
						"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
						"inputs": [

						],
						"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
						"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB",
						"name": "TEX3D Simplex Noise Octaves",
						"outputs": [
							{
								"shortdesc": "TEX3D output",
								"tex3d": "$clamp",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 8,
								"label": "Scale",
								"longdesc": "Noise scale",
								"max": 32,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale X",
								"longdesc": "Noise X scale",
								"max": 16,
								"min": 0,
								"name": "scale_x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Y",
								"longdesc": "Noise Y scale",
								"max": 16,
								"min": 0,
								"name": "scale_y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Z",
								"longdesc": "Noise Z scale",
								"max": 16,
								"min": 0,
								"name": "scale_z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate X",
								"longdesc": "Noise X translate",
								"max": 100,
								"min": 0,
								"name": "transx",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate Y",
								"longdesc": "Noise Y translate",
								"max": 100,
								"min": 0,
								"name": "transy",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate Z",
								"longdesc": "Noise Z translate",
								"max": 100,
								"min": 0,
								"name": "transz",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 12,
								"label": "Iterations",
								"longdesc": "Noise iterations / octaves",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Persistence",
								"longdesc": "How higher octaves affect the output",
								"max": 1,
								"min": 0,
								"name": "persistence",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Brightness",
								"longdesc": "Overall brightness",
								"max": 1,
								"min": 0,
								"name": "brightness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Contrast",
								"longdesc": "Overall Contrast",
								"max": 1,
								"min": 0,
								"name": "contrast",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1,
								"label": "Clamp",
								"longdesc": "Makes the output restricted between 0 and 1",
								"name": "clamp",
								"type": "enum",
								"values": [
									{
										"name": "false",
										"value": "$(name_uv)_out"
									},
									{
										"name": "true",
										"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
									}
								]
							}
						],
						"shortdesc": "TEX3D Simplex Noise Octaves"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -120.404083,
						"y": 78.642242
					},
					"parameters": {
						"color": {
							"a": 1,
							"b": 0,
							"g": 0,
							"r": 0,
							"type": "Color"
						}
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": -119.404083,
						"y": -67.357758
					},
					"parameters": {
						"color": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						}
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -117.404083,
						"y": 8.642242
					},
					"parameters": {
						"color": {
							"a": 1,
							"b": 0,
							"g": 0,
							"r": 1,
							"type": "Color"
						}
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [

						],
						"instance": "",
						"longdesc": "Type - TEX3D Generator\nCode - PauloFalcao\n\nA 3D Texture with a single color",
						"name": "TEX3D Color",
						"outputs": [
							{
								"shortdesc": "TEX3D Output",
								"tex3d": "$color.xyz",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "Color",
								"name": "color",
								"type": "color"
							}
						],
						"shortdesc": "TEX3D Color"
					},
					"type": "shader"
				},
				{
					"name": "shader_2",
					"node_position": {
						"x": 124.116058,
						"y": -6.06897
					},
					"parameters": {
						"edgeb": 0.019,
						"edges": 0.0378,
						"f": 2,
						"g": 2,
						"h": 0,
						"iterations": 3,
						"m": 0,
						"texdb": -0.38,
						"texdc": 1.768
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "float $(name_uv)_sdfa=blursdf3d_$name($uv.xyz,$edgeb,1.01);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_mix=clamp($texd(vec4($uv.xyz,1.0))*$texdc+$texdb+0.5-$texdc*0.5,0.0,1.0);\nvec3 $(name_uv)_b=$texb(vec4($uv.xyz,1.0));\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=($(name_uv)_sdfdiff>0.0)?\nmix($(name_uv)_b,$texa(vec4($uv.xyz,1.0)),clamp($(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.0,0.0,1.0)):\nmix($(name_uv)_b,$texc(vec4($uv.xyz,1.0)),clamp(-$(name_uv)_sdfdiff*$(name_uv)_mix*$f*100.,0.0,1.0));\n",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Base SDF",
								"longdesc": "Main SDF goes here, adding a small SDF blur can help to avoid hard edges",
								"name": "sdfa",
								"shortdesc": "Main SDF",
								"type": "sdf3d"
							},
							{
								"default": "0.5",
								"function": true,
								"label": "Surface Deform",
								"longdesc": "Surface deformation texture based on the difference between the two PDFs",
								"name": "texd",
								"shortdesc": "Surface Deform Texture",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(0.8,0.6,0.6)",
								"function": true,
								"label": "Tex Bump",
								"longdesc": "Bump Texture, where the SDF difference is negative",
								"name": "texa",
								"shortdesc": "Bump Texture",
								"type": "tex3d"
							},
							{
								"default": "vec3(1.0,0.0,0.0)",
								"function": true,
								"label": "Tex Surface",
								"longdesc": "Surface Texture, where the SDF difference is close to zero",
								"name": "texb",
								"shortdesc": "Surface Texture",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.3,0.1,0.1)",
								"function": true,
								"label": "Tex Hole",
								"longdesc": "Hole Texture, where the SDF difference is positive",
								"name": "texc",
								"shortdesc": "Hole Texture",
								"type": "tex3d"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$sdfa(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$sdfa(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - SDF Operator\nCode - PauloFalcao\n\nModifies an SDF by comparing the base SDF and a modified blured version of the base SDF.\nObject colors are modified based on the difference of the two SDFs, with a texture for surface where the two SDFs are equal, a texture for holes where the difference is negative, and a texture for bumps where the difference is positive.",
						"name": "SDF Deform Edges",
						"outputs": [
							{
								"sdf3d": "$(name_uv)_modsdf",
								"type": "sdf3d"
							},
							{
								"tex3d": "$(name_uv)_tex",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.04,
								"label": "Edge Size",
								"longdesc": "Blur amount applied to the original SDF generating a new SDF",
								"max": 0.1,
								"min": 0,
								"name": "edges",
								"shortdesc": "Edge Size",
								"step": 0.0001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.02,
								"label": "Obj Blur",
								"longdesc": "A small Blur applied to the original SDF",
								"max": 0.5,
								"min": 0,
								"name": "edgeb",
								"shortdesc": "Obj Blur",
								"step": 0.0001,
								"type": "float"
							},
							{
								"default": 6,
								"label": "Edge Precision",
								"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
								"name": "iterations",
								"shortdesc": "Edge Blur precision",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									}
								]
							},
							{
								"control": "None",
								"default": 0,
								"label": "Deform",
								"max": 4,
								"min": 0,
								"name": "g",
								"shortdesc": "SDF Deformation amount",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Deform Brigh.",
								"max": 1,
								"min": -1,
								"name": "texdb",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Deform Cont.",
								"max": 2,
								"min": 0,
								"name": "texdc",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Select",
								"max": 1,
								"min": 0,
								"name": "m",
								"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Color Contrast",
								"max": 1,
								"min": 0,
								"name": "f",
								"shortdesc": "Increases the difference between Textures",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Color Shift",
								"max": 1,
								"min": -1,
								"name": "h",
								"shortdesc": "Shift  difference between Textures",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Deform Edges"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -458.404083,
						"y": -352.357788
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -211.404083,
						"y": -357.357788
					},
					"parameters": {
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"TranslateX": 0,
						"TranslateY": 0.2,
						"TranslateZ": 0.2,
						"scale": 0.5
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -467.404083,
						"y": -153.357758
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": -14.404083,
						"y": -202.357758
					},
					"parameters": {
						"op": 1
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_boolean"
				},
				{
					"name": "pxflib_4",
					"node_position": {
						"x": 559.595947,
						"y": -11.357758
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2,
						"CamZ": 3,
						"CamZoom": 0.29,
						"LookAtX": 0,
						"LookAtY": 0,
						"LookAtZ": 0,
						"Pow": 64,
						"Reflection": 0.115,
						"Shadow": 1,
						"Specular": 0,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 1
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D A",
								"name": "sdf_a",
								"shortdesc": "SDF3D A",
								"type": "sdf3d"
							},
							{
								"default": "vec3(1.0,0.1,0.1)",
								"function": true,
								"label": "TEX3D A",
								"name": "tex3d_a",
								"shortdesc": "TEX3D A",
								"type": "tex3d"
							},
							{
								"default": "max($uv.y+1.0,length(vec3($uv.x,$uv.y+1.0,$uv.z))-10.0)",
								"function": true,
								"label": "SDF3D B",
								"name": "sdf_b",
								"shortdesc": "SDF3D B",
								"type": "sdf3d"
							},
							{
								"default": "vec3(mod(floor($uv.x*2.0)+floor($uv.z*2.0),2.0))*0.9+0.1",
								"function": true,
								"label": "TEX3D B",
								"name": "tex3d_b",
								"shortdesc": "TEX3D B",
								"type": "tex3d"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "vec2 input_$name(vec3 p) {\n    float sdfa=$sdf_a(p);\n\tfloat sdfb=$sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_$name(p+e.xyy).x;\n  float v2=input_$name(p+e.yyx).x;\n  float v3=input_$name(p+e.yxy).x;\n  float v4=input_$name(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_$name(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_$name( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_$name( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*objColor+pow(r,$Pow)*$Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?$tex3d_a(vec4(p,1.0)):$tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,$AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=$hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,$Reflection);\n\t} else {\n\t\tcolor=$hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}",
						"longdesc": "Type - SDF3D Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "SDF Render 2 Objs",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Reflection",
								"longdesc": "Reflection strength, reflects other objects or the environment HDRI 360 image ",
								"max": 1,
								"min": 0,
								"name": "Reflection",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.4,
								"label": "Specular",
								"longdesc": "Objects shading specular component strength, it's the strength  of the highlight.",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 32,
								"label": "Pow",
								"longdesc": "Shininess of the specular component, it's the size of the specular component, it tries to simulate more shininess surfaces or more rough surfaces.",
								"max": 1024,
								"min": 0,
								"name": "Pow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/SDF3D/Operator/SDF Deform Edges Example"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box_2",
					"from_port": 0,
					"to": "pxflib_5",
					"to_port": 0
				},
				{
					"from": "pxflib_5",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 0
				},
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 1
				},
				{
					"from": "sdf3d_boolean",
					"from_port": 0,
					"to": "pxflib_6",
					"to_port": 5
				},
				{
					"from": "pxflib_6",
					"from_port": 0,
					"to": "shader_2",
					"to_port": 0
				},
				{
					"from": "shader_2",
					"from_port": 0,
					"to": "pxflib",
					"to_port": 0
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "shader_2",
					"to_port": 1
				},
				{
					"from": "pxflib_3",
					"from_port": 0,
					"to": "shader_2",
					"to_port": 2
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"name": "pxflib_3",
					"node_position": {
						"x": -455.528168,
						"y": -46.438614
					},
					"parameters": {
						"brightness": 0,
						"clamp": 1,
						"contrast": 2,
						"iterations": 5,
						"persistence": 0.5,
						"scale": 30.38,
						"scale_x": 1,
						"scale_y": 1,
						"scale_z": 1,
						"transx": 0,
						"transy": 0,
						"transz": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
						"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
						"inputs": [

						],
						"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
						"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB",
						"name": "TEX3D Simplex Noise Octaves",
						"outputs": [
							{
								"shortdesc": "TEX3D output",
								"tex3d": "$clamp",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 8,
								"label": "Scale",
								"longdesc": "Noise scale",
								"max": 32,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale X",
								"longdesc": "Noise X scale",
								"max": 16,
								"min": 0,
								"name": "scale_x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Y",
								"longdesc": "Noise Y scale",
								"max": 16,
								"min": 0,
								"name": "scale_y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Z",
								"longdesc": "Noise Z scale",
								"max": 16,
								"min": 0,
								"name": "scale_z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate X",
								"longdesc": "Noise X translate",
								"max": 100,
								"min": 0,
								"name": "transx",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate Y",
								"longdesc": "Noise Y translate",
								"max": 100,
								"min": 0,
								"name": "transy",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate Z",
								"longdesc": "Noise Z translate",
								"max": 100,
								"min": 0,
								"name": "transz",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 12,
								"label": "Iterations",
								"longdesc": "Noise iterations / octaves",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Persistence",
								"longdesc": "How higher octaves affect the output",
								"max": 1,
								"min": 0,
								"name": "persistence",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Brightness",
								"longdesc": "Overall brightness",
								"max": 1,
								"min": 0,
								"name": "brightness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Contrast",
								"longdesc": "Overall Contrast",
								"max": 1,
								"min": 0,
								"name": "contrast",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1,
								"label": "Clamp",
								"longdesc": "Makes the output restricted between 0 and 1",
								"name": "clamp",
								"type": "enum",
								"values": [
									{
										"name": "false",
										"value": "$(name_uv)_out"
									},
									{
										"name": "true",
										"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
									}
								]
							}
						],
						"shortdesc": "TEX3D Simplex Noise Octaves"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_6",
					"node_position": {
						"x": -10.528168,
						"y": -396.518555
					},
					"parameters": {
						"BaseColor": {
							"a": 1,
							"b": 0,
							"g": 0,
							"r": 1,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 0,
						"Specular": 1,
						"TranlateX": 0,
						"TranlateY": 0,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": -194.528168,
						"y": -362.518555
					},
					"parameters": {
						"op": 1
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_boolean"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -61.028107,
						"y": 127.561386
					},
					"parameters": {
						"BaseColor": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 0,
						"Specular": 0,
						"TranlateX": 0,
						"TranlateY": 0,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"name": "shader_2",
					"node_position": {
						"x": 261.071869,
						"y": -76.558609
					},
					"parameters": {
						"edgeb": 0.01,
						"edges": 0.044,
						"f": 2,
						"g": 1.997,
						"h": 0,
						"iterations": 3,
						"m": 0,
						"texdb": -0.405,
						"texdc": 1
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "float $(name_uv)_sdfa=blursdf3d_$name($uv.xyz,$edgeb,1.01);\nfloat $(name_uv)_sdfb=blursdf3d_$name($uv.xyz,$edges,1.01);\nfloat $(name_uv)_mix =clamp($texd(vec4($uv.xyz,1.0))*$texdc+$texdb+0.5-$texdc*0.5,0.0,1.0);\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nfloat $(name_uv)_modsdf=mix($(name_uv)_sdfa,$(name_uv)_sdfb,$(name_uv)_mix*$g+$m);\nvec3 $(name_uv)_tex=mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$(name_uv)_mix*$f*100.0,0.0,1.0));\n\n",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Base MFSDF",
								"longdesc": "Main MFSDF goes here, adding a small SDF blur can help to avoid hard edges",
								"name": "mfsdfa",
								"shortdesc": "Main MFSDF",
								"type": "v4v4"
							},
							{
								"default": "0.0",
								"function": true,
								"label": "Modified MFSDF",
								"longdesc": "Modified MFSDF goes here, only Material attibutes will be used the SDF is ignored",
								"name": "mfsdfb",
								"shortdesc": "Modified MFSDF",
								"type": "v4v4"
							},
							{
								"default": "0.0",
								"function": true,
								"label": "Surface Deform",
								"longdesc": "Surface deformation texture based on the difference between the two PDFs",
								"name": "texd",
								"shortdesc": "Surface Deform Texture",
								"type": "tex3d_gs"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$mfsdfa(vec4(p,0.0)).w;\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$mfsdfa(vec4(p+vec3(cos(t)*r,y,sin(t)*r)*b,0.0)).w;\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao\n\nModifies an MFSDF by comparing the base SDF and a modified blured version of the base SDF.",
						"name": "MFSDF Deform Edges",
						"outputs": [
							{
								"type": "v4v4",
								"v4v4": "vec4($(name_uv)_tex,$(name_uv)_modsdf)"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.04,
								"label": "Edge Size",
								"longdesc": "Blur amount applied to the original SDF generating a new SDF",
								"max": 0.1,
								"min": 0,
								"name": "edges",
								"shortdesc": "Edge Size",
								"step": 0.0001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.02,
								"label": "Obj Blur",
								"longdesc": "A small Blur applied to the original SDF",
								"max": 0.05,
								"min": 0,
								"name": "edgeb",
								"shortdesc": "Original SDF Blur",
								"step": 0.0001,
								"type": "float"
							},
							{
								"default": 3,
								"label": "Edge Precision",
								"longdesc": "Blur precision. Is the number of SDF sample point points used to make a SDF Blur. Increasing this value will result in much greater rendering times. Keep this value as low as possible.",
								"name": "iterations",
								"shortdesc": "Edge Blur precision",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									}
								]
							},
							{
								"control": "None",
								"default": 0,
								"label": "Deform",
								"max": 4,
								"min": 0,
								"name": "g",
								"shortdesc": "SDF Deformation amount",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Deform Brigh.",
								"max": 1,
								"min": -1,
								"name": "texdb",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Deform Cont.",
								"max": 2,
								"min": 0,
								"name": "texdc",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Select",
								"max": 1,
								"min": 0,
								"name": "m",
								"shortdesc": "SDF Selection between the base SDF (value 0) and the modified SDF (value 1)",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Color Contrast",
								"max": 1,
								"min": 0,
								"name": "f",
								"shortdesc": "Increases the difference between Textures",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Color Shift",
								"max": 1,
								"min": -1,
								"name": "h",
								"shortdesc": "Shift difference between Textures",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Deform Edges"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -662.528198,
						"y": -437.518616
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -670.528198,
						"y": -288.518555
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.3,
						"sy": 0.25,
						"sz": 0.25
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -423.528168,
						"y": -293.518555
					},
					"parameters": {
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"TranslateX": 0,
						"TranslateY": 0.2,
						"TranslateZ": 0.2,
						"scale": 0.5
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"export_paths": {

					},
					"minimized": true,
					"name": "Material",
					"node_position": {
						"x": 361.181183,
						"y": 655.967346
					},
					"parameters": {
						"albedo_color": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"ao": 1,
						"depth_scale": 0.5,
						"emission_energy": 1,
						"flags_transparent": true,
						"metallic": 0,
						"normal": 1,
						"roughness": 1,
						"size": 11,
						"sss": 1
					},
					"seed": 0,
					"seed_locked": false,
					"type": "material"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": 684.444092,
						"y": -81.438614
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2,
						"CamZ": 3,
						"CamZoom": 0.314,
						"Gamma": 1.4,
						"LookAtX": 0,
						"LookAtY": 0,
						"LookAtZ": 0,
						"Shadow": 1,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 2.5
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "vec2 Simple360HDR_equirectangularMap(vec3 dir) {\n    const float PI=3.14159265359;\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "vec4((($uv.w>0.5&&$uv.w<1.5)||($uv.w>3.5&&$uv.w<4.5))?1.0:0.0,0.0,0.0,length($uv)-0.4)",
								"function": true,
								"label": "MFSDF",
								"name": "mfsdf",
								"shortdesc": "V4->V4 Multi-Field SDF",
								"type": "v4v4"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = $mfsdf(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = $mfsdf(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t    vec3 p=ro + rd*t;\n\t\tfloat h = $mfsdf(vec4(p,0.0)).w;\n\t\tfloat isLight=$mfsdf(vec4(p,13.0)).x;\n\t\tif (isLight>0.0) h=999999.0;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=$mfsdf(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1)\n\tfloat objMetallic=clamp($mfsdf(vec4(p,2.0)).x,0.0,1.0);  // 2 - Metallic  (v,0,0,sdf)\n\tfloat objSpecular=clamp(max($mfsdf(vec4(p,4.0)).x*0.2,objMetallic),0.0,1.0);  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=$mfsdf(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 objEmission=$mfsdf(vec4(p,13.0)).xyz; // 13 - Emission (r,g,b,sdf)\n\tobjColor=max(objColor,objEmission);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tif (objEmission.x>0.0){\n\t\t\tcolor=objEmission;\n\t\t} else {\n\t\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*((1.0-objMetallic)*objColor)+\n\t\t\tpow(r,pow(256.0,(1.0-objRoughness)))*objSpecular*mix(vec3(1.0),objColor,objMetallic)*(1.0-objRoughness)*16.0;\n\t\t}\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tvec3 objEmissionRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=$mfsdf(vec4(p,1.0)).xyz;\n\t\t\tobjEmissionRef=$mfsdf(vec4(p,13.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tif (objEmissionRef.x>0.0){\n\t\t\t  objColorRef=objEmissionRef;\n\t\t\t} else {\n\t\t\t  objColorRef=max(l,$AmbLight)*objColorRef;\n\t\t\t}\n\t\t} else {\n\t\t\tobjColorRef=$hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular*mix(vec3(1.0),objColor,objMetallic));\n\t} else {\n\t\tcolor=$hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
						"longdesc": "Type - MFSDF Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "MFSDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.2,
								"label": "Gamma",
								"longdesc": "Gamma Correction",
								"max": 3,
								"min": 0,
								"name": "Gamma",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Deform Edges Example"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box_2",
					"from_port": 0,
					"to": "pxflib_5",
					"to_port": 0
				},
				{
					"from": "pxflib_5",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 0
				},
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 1
				},
				{
					"from": "pxflib_6",
					"from_port": 0,
					"to": "shader_1",
					"to_port": 0
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "shader_1",
					"to_port": 1
				},
				{
					"from": "shader_1",
					"from_port": 0,
					"to": "pxflib",
					"to_port": 0
				},
				{
					"from": "pxflib_8",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 0
				},
				{
					"from": "pxflib_7",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 5
				},
				{
					"from": "pxflib_3",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 0
				},
				{
					"from": "pxflib_4",
					"from_port": 0,
					"to": "pxflib_6",
					"to_port": 5
				},
				{
					"from": "pxflib_9",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 1
				},
				{
					"from": "sdf3d_box_3",
					"from_port": 0,
					"to": "pxflib_10",
					"to_port": 0
				},
				{
					"from": "pxflib_10",
					"from_port": 0,
					"to": "pxflib_11",
					"to_port": 0
				},
				{
					"from": "pxflib_11",
					"from_port": 0,
					"to": "sdf3d_smoothboolean",
					"to_port": 0
				},
				{
					"from": "sdf3d_boolean",
					"from_port": 0,
					"to": "sdf3d_smoothboolean",
					"to_port": 1
				},
				{
					"from": "sdf3d_smoothboolean",
					"from_port": 0,
					"to": "pxflib_3",
					"to_port": 0
				},
				{
					"from": "sdf3d_smoothboolean",
					"from_port": 0,
					"to": "pxflib_7",
					"to_port": 0
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"name": "sdf3d_smoothboolean",
					"node_position": {
						"x": -188.58728,
						"y": -280.217072
					},
					"parameters": {
						"k": 0.15,
						"op": 0
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_smoothboolean"
				},
				{
					"name": "pxflib_4",
					"node_position": {
						"x": 286.989502,
						"y": -267.030487
					},
					"parameters": {
						"Bound": 0.01,
						"Correction": 0,
						"Distort": 0.005
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "length($uv)-0.4",
								"function": true,
								"label": "SDF3D",
								"name": "sdf",
								"shortdesc": "SDF3D Input",
								"type": "sdf3d"
							},
							{
								"default": "vec3(0)",
								"function": true,
								"label": "TEX3D",
								"name": "tex3d",
								"shortdesc": "TEX3D Input",
								"type": "tex3d"
							}
						],
						"instance": "\nfloat distort_$name(vec3 uv){\n    float sdf=$sdf(uv);\n\tif (abs(sdf)>(abs($Distort)+$Bound)){\n\t\treturn sdf;\n\t} else {\n\t\tvec3 s=$tex3d(vec4(uv,0.0));\n\t    return sdf-s.x*$Distort;\n\t}\n}\n",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nDisplace a 3DSDF based on a TEX3D in a direction",
						"name": "SDF Displace",
						"outputs": [
							{
								"sdf3d": "distort_$name($uv)/(1.0+abs($Distort*$Correction))",
								"shortdesc": "SDF3D Output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0.1,
								"label": "Amount",
								"longdesc": "Displace amount",
								"max": 1,
								"min": 0,
								"name": "Distort",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 10,
								"min": 0,
								"name": "Correction",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.1,
								"label": "Bound",
								"max": 10,
								"min": 0,
								"name": "Bound",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "pxflib_3",
					"node_position": {
						"x": 3.989502,
						"y": -191.030487
					},
					"parameters": {
						"blur": 0.01,
						"bound": 1,
						"iterations": 3
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "",
								"longdesc": "SDF3D Input",
								"name": "in",
								"type": "sdf3d"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$in(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$in(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nBlurs a SDF3D sampling fibonacci points on a sphere surface",
						"name": "SDF Blur",
						"outputs": [
							{
								"longdesc": "SDF3D Output",
								"sdf3d": "blursdf3d_$name($uv,$blur,$bound)",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 3,
								"label": "Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									},
									{
										"name": "89",
										"value": "89"
									},
									{
										"name": "144",
										"value": "144"
									},
									{
										"name": "233",
										"value": "233"
									},
									{
										"name": "377",
										"value": "377"
									},
									{
										"name": "610",
										"value": "610"
									}
								]
							},
							{
								"control": "None",
								"default": 0,
								"label": "Blur",
								"max": 5,
								"min": 0,
								"name": "blur",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Bound",
								"max": 10,
								"min": 0,
								"name": "bound",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_box_2",
					"node_position": {
						"x": -652.458984,
						"y": -13.376587
					},
					"parameters": {
						"r": 0,
						"sx": 0.3,
						"sy": 0.24,
						"sz": 0.25
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"export_paths": {

					},
					"minimized": true,
					"name": "Material",
					"node_position": {
						"x": 569.250366,
						"y": 967.109375
					},
					"parameters": {
						"albedo_color": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"ao": 1,
						"depth_scale": 0.5,
						"emission_energy": 1,
						"flags_transparent": true,
						"metallic": 0,
						"normal": 1,
						"roughness": 1,
						"size": 11,
						"sss": 1
					},
					"seed": 0,
					"seed_locked": false,
					"type": "material"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": 252.041077,
						"y": 281.703369
					},
					"parameters": {
						"BaseColor": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 0,
						"Specular": 0,
						"TranlateX": 0,
						"TranlateY": 0,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_6",
					"node_position": {
						"x": 229.969818,
						"y": -141.995819
					},
					"parameters": {
						"BaseColor": {
							"a": 1,
							"b": 0,
							"g": 0,
							"r": 1,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 0,
						"Specular": 0.268,
						"TranlateX": 0,
						"TranlateY": 0,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				},
				{
					"name": "shader_1",
					"node_position": {
						"x": 538.448059,
						"y": 55.253204
					},
					"parameters": {
						"f": 1.497,
						"h": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "float $(name_uv)_sdfa=$mfsdfa(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfb=$mfsdfb(vec4($uv.xyz,0.0)).w;\nfloat $(name_uv)_sdfdiff=$(name_uv)_sdfb-$(name_uv)_sdfa+$h*0.1;\nvec4 $(name_uv)_tex=vec4(mix($mfsdfa($uv).xyz,$mfsdfb($uv).xyz,clamp(abs($(name_uv)_sdfdiff)*$f*100.0,0.0,1.0)),$(name_uv)_sdfa);",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "Base MFSDF",
								"longdesc": "Main MFSDF goes here",
								"name": "mfsdfa",
								"shortdesc": "Main MFSDF",
								"type": "v4v4"
							},
							{
								"default": "0.0",
								"function": true,
								"label": "Modified MFSDF",
								"longdesc": "Modified MFSDF goes here, typically is the Base SDF with Blur, using the SDF Blur node.",
								"name": "mfsdfb",
								"shortdesc": "Modified MFSDF",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - MFSDF Operator\nCode - PauloFalcao\n\nModifies an MFSDF by comparing the base SDF and a modified version of the base SDF, typically the Base SDF with Blur, using the SDF Blur node.\n\n\n",
						"name": "MFSDF Paint Edges Generic",
						"outputs": [
							{
								"type": "v4v4",
								"v4v4": "$(name_uv)_tex"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "Color Contrast",
								"max": 1,
								"min": 0,
								"name": "f",
								"shortdesc": "Increases the difference between Textures",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Color Shift",
								"max": 1,
								"min": -1,
								"name": "h",
								"shortdesc": "Shift difference between Textures",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Deform Edges Generic"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_7",
					"node_position": {
						"x": -27.777283,
						"y": 188.380829
					},
					"parameters": {
						"blur": 0.028,
						"bound": 1,
						"iterations": 3
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"function": true,
								"label": "",
								"longdesc": "SDF3D Input",
								"name": "in",
								"type": "sdf3d"
							}
						],
						"instance": "float blursdf3d_$name(in vec3 p,in float b,float f){\n\tfloat a=0.0;\n\tfloat d=$in(p);\n\tif (d<b*f){\n\t\tfor(int i=0;i<$iterations;i++){\n\t        float y=1.0-2.0*(float(i)/float($iterations));\n\t        float r=sqrt(1.0-y*y);\n\t        float t=2.39996322973*float(i);\n\t\t\ta+=$in(p+vec3(cos(t)*r,y,sin(t)*r)*b);\n\t\t}\n\t} else{\n\t\treturn d;\n\t}\n\treturn a/$iterations.0;\n}",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nBlurs a SDF3D sampling fibonacci points on a sphere surface",
						"name": "SDF Blur",
						"outputs": [
							{
								"longdesc": "SDF3D Output",
								"sdf3d": "blursdf3d_$name($uv,$blur,$bound)",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 3,
								"label": "Iterations",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "21",
										"value": "21"
									},
									{
										"name": "34",
										"value": "34"
									},
									{
										"name": "55",
										"value": "55"
									},
									{
										"name": "89",
										"value": "89"
									},
									{
										"name": "144",
										"value": "144"
									},
									{
										"name": "233",
										"value": "233"
									},
									{
										"name": "377",
										"value": "377"
									},
									{
										"name": "610",
										"value": "610"
									}
								]
							},
							{
								"control": "None",
								"default": 0,
								"label": "Blur",
								"max": 5,
								"min": 0,
								"name": "blur",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Bound",
								"max": 10,
								"min": 0,
								"name": "bound",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				},
				{
					"name": "pxflib_8",
					"node_position": {
						"x": -362.814209,
						"y": 297.092041
					},
					"parameters": {
						"brightness": 0,
						"clamp": 1,
						"contrast": 2,
						"iterations": 5,
						"persistence": 0.5,
						"scale": 172.26,
						"scale_x": 1,
						"scale_y": 1,
						"scale_z": 1,
						"transx": 0,
						"transy": 0,
						"transz": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
						"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
						"inputs": [

						],
						"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
						"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB",
						"name": "TEX3D Simplex Noise Octaves",
						"outputs": [
							{
								"shortdesc": "TEX3D output",
								"tex3d": "$clamp",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 8,
								"label": "Scale",
								"longdesc": "Noise scale",
								"max": 32,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale X",
								"longdesc": "Noise X scale",
								"max": 16,
								"min": 0,
								"name": "scale_x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Y",
								"longdesc": "Noise Y scale",
								"max": 16,
								"min": 0,
								"name": "scale_y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Z",
								"longdesc": "Noise Z scale",
								"max": 16,
								"min": 0,
								"name": "scale_z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate X",
								"longdesc": "Noise X translate",
								"max": 100,
								"min": 0,
								"name": "transx",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate Y",
								"longdesc": "Noise Y translate",
								"max": 100,
								"min": 0,
								"name": "transy",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate Z",
								"longdesc": "Noise Z translate",
								"max": 100,
								"min": 0,
								"name": "transz",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 12,
								"label": "Iterations",
								"longdesc": "Noise iterations / octaves",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Persistence",
								"longdesc": "How higher octaves affect the output",
								"max": 1,
								"min": 0,
								"name": "persistence",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Brightness",
								"longdesc": "Overall brightness",
								"max": 1,
								"min": 0,
								"name": "brightness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Contrast",
								"longdesc": "Overall Contrast",
								"max": 1,
								"min": 0,
								"name": "contrast",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1,
								"label": "Clamp",
								"longdesc": "Makes the output restricted between 0 and 1",
								"name": "clamp",
								"type": "enum",
								"values": [
									{
										"name": "false",
										"value": "$(name_uv)_out"
									},
									{
										"name": "true",
										"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
									}
								]
							}
						],
						"shortdesc": "TEX3D Simplex Noise Octaves"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_9",
					"node_position": {
						"x": -242.710571,
						"y": -670.070557
					},
					"parameters": {
						"brightness": 0,
						"clamp": 1,
						"contrast": 2,
						"iterations": 5,
						"persistence": 0.5,
						"scale": 32,
						"scale_x": 1,
						"scale_y": 1,
						"scale_z": 1,
						"transx": 0,
						"transy": 0,
						"transz": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "vec3 $(name_uv)_out = vec3($(name)_bc($(name)_fbm($uv.xyz*vec3($scale_x,$scale_y,$scale_z)*0.5*$scale+vec3($transx,$transy,$transz),$persistence)*0.5+0.5,$contrast,$brightness));",
						"global": "// https://www.shadertoy.com/view/XsX3zB\n//\n// The MIT License\n// Copyright © 2013 Nikita Miropolskiy\n// \n// ( license has been changed from CCA-NC-SA 3.0 to MIT\n//\n//   but thanks for attributing your source code when deriving from this sample \n//   with a following link: https://www.shadertoy.com/view/XsX3zB )\n//\n//\n// if you're looking for procedural noise implementation examples you might \n// also want to look at the following shaders:\n// \n// Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n//\n// Noise shaders by iq:\n//     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n//     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n//     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n//     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n//     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n//     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n//     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n//     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n//     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n//     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n//\n//\n//\n\n// discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n// skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n// 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t // 1. find current tetrahedron T and it's four vertices\n\t // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t // calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t // calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t // x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t // 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t // calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t // w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t // calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t // multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t // 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}",
						"inputs": [

						],
						"instance": "float $(name)_fbm(vec3 coord, float persistence) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < $iterations; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nfloat $(name)_bc(float f,float contrast, float brightness) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n",
						"longdesc": "Type - TEX3D Generator\nCode - Nikat\n\nMakes a non periodic noise with octaves using nikat code from https://www.shadertoy.com/view/XsX3zB",
						"name": "TEX3D Simplex Noise Octaves",
						"outputs": [
							{
								"shortdesc": "TEX3D output",
								"tex3d": "$clamp",
								"type": "tex3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 8,
								"label": "Scale",
								"longdesc": "Noise scale",
								"max": 32,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale X",
								"longdesc": "Noise X scale",
								"max": 16,
								"min": 0,
								"name": "scale_x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Y",
								"longdesc": "Noise Y scale",
								"max": 16,
								"min": 0,
								"name": "scale_y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Scale Z",
								"longdesc": "Noise Z scale",
								"max": 16,
								"min": 0,
								"name": "scale_z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate X",
								"longdesc": "Noise X translate",
								"max": 100,
								"min": 0,
								"name": "transx",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate Y",
								"longdesc": "Noise Y translate",
								"max": 100,
								"min": 0,
								"name": "transy",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Translate Z",
								"longdesc": "Noise Z translate",
								"max": 100,
								"min": 0,
								"name": "transz",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 12,
								"label": "Iterations",
								"longdesc": "Noise iterations / octaves",
								"name": "iterations",
								"type": "enum",
								"values": [
									{
										"name": "1",
										"value": "1"
									},
									{
										"name": "2",
										"value": "2"
									},
									{
										"name": "3",
										"value": "3"
									},
									{
										"name": "4",
										"value": "4"
									},
									{
										"name": "5",
										"value": "5"
									},
									{
										"name": "6",
										"value": "6"
									},
									{
										"name": "7",
										"value": "7"
									},
									{
										"name": "8",
										"value": "8"
									},
									{
										"name": "9",
										"value": "9"
									},
									{
										"name": "10",
										"value": "10"
									},
									{
										"name": "11",
										"value": "11"
									},
									{
										"name": "12",
										"value": "12"
									},
									{
										"name": "13",
										"value": "13"
									},
									{
										"name": "14",
										"value": "14"
									},
									{
										"name": "15",
										"value": "15"
									},
									{
										"name": "16",
										"value": "16"
									}
								]
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "Persistence",
								"longdesc": "How higher octaves affect the output",
								"max": 1,
								"min": 0,
								"name": "persistence",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Brightness",
								"longdesc": "Overall brightness",
								"max": 1,
								"min": 0,
								"name": "brightness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Contrast",
								"longdesc": "Overall Contrast",
								"max": 1,
								"min": 0,
								"name": "contrast",
								"step": 0.001,
								"type": "float"
							},
							{
								"default": 1,
								"label": "Clamp",
								"longdesc": "Makes the output restricted between 0 and 1",
								"name": "clamp",
								"type": "enum",
								"values": [
									{
										"name": "false",
										"value": "$(name_uv)_out"
									},
									{
										"name": "true",
										"value": "clamp($(name_uv)_out,vec3(0),vec3(1))"
									}
								]
							}
						],
						"shortdesc": "TEX3D Simplex Noise Octaves"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": -378.338989,
						"y": -171.216644
					},
					"parameters": {
						"op": 1
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_boolean"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -673.259033,
						"y": -211.336578
					},
					"parameters": {
						"r": 0,
						"sx": 0.3,
						"sy": 0.16,
						"sz": 0.25
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "sdf3d_box_3",
					"node_position": {
						"x": -777.58728,
						"y": -574.217041
					},
					"parameters": {
						"r": 0.03,
						"sx": 0.17,
						"sy": 0.29,
						"sz": 0.18
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_10",
					"node_position": {
						"x": -578.58728,
						"y": -554.217041
					},
					"parameters": {
						"angle": 222.183,
						"axis": 1,
						"correction": 0
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "vec2 twist_rot(vec2 v, float a) {\n\ta=a*0.01745329251;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(vec2(c, -s),vec2(s, c));\n\treturn m * v;\n}\n\nvec3 twistX(vec3 v, float a){\n\tv.yz=twist_rot(v.yz,v.x*a);\n\treturn v;\n}\n\nvec3 twistY(vec3 v, float a){\n\tv.xz=twist_rot(v.xz,v.y*a);\n\treturn v;\n}\n\nvec3 twistZ(vec3 v, float a){\n\tv.xy=twist_rot(v.xy,v.z*a);\n\treturn v;\n}\n\n",
						"inputs": [
							{
								"default": "vec2(0.0)",
								"label": "",
								"name": "in",
								"shortdesc": "SDF3D Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTwist a SDF3D on the specified axis by an angle.",
						"name": "SDF Twist",
						"outputs": [
							{
								"sdf3d": "$in(twist$axis($uv,$angle))/(1.0+$correction)",
								"shortdesc": "SDF3D Output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 0,
								"label": "Axis",
								"name": "axis",
								"type": "enum",
								"values": [
									{
										"name": "X",
										"value": "X"
									},
									{
										"name": "Y",
										"value": "Y"
									},
									{
										"name": "Z",
										"value": "Z"
									}
								]
							},
							{
								"control": "Angle1.a",
								"default": 0,
								"label": "Angle",
								"max": 360,
								"min": -360,
								"name": "angle",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Correction",
								"longdesc": "Keep this value as low as possible!\nIncrease this correction value if the resulting SDF is not perfect.\nA higher value will increase ray marching loop iterations and will result in higher render times.",
								"max": 5,
								"min": 0,
								"name": "correction",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Twist"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_5",
					"node_position": {
						"x": -405.458984,
						"y": -18.376587
					},
					"parameters": {
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"TranslateX": 0,
						"TranslateY": 0.2,
						"TranslateZ": 0.2,
						"scale": 0.5
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "pxflib_11",
					"node_position": {
						"x": -550.08728,
						"y": -449.217072
					},
					"parameters": {
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"TranslateX": 0,
						"TranslateY": 0.266,
						"TranslateZ": -0.019,
						"scale": 0.5
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "float o_$name_uv=$in(SDFTrans_Obj_Transform_Rot($uv.xyz-vec3($TranslateX,$TranslateY,$TranslateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale);\n\n",
						"global": "vec3 SDFTrans_Obj_Transform_Rot(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "0.0",
								"label": "",
								"name": "in",
								"shortdesc": "V4->V4 Input",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - RodZilla, PauloFalcao\n\nTranslates, Rotates, Scale a SDF3D\nAdapted from RodZilla Rotate",
						"name": "SDF Transform",
						"outputs": [
							{
								"sdf3d": "o_$name_uv*$scale",
								"shortdesc": "V4->V4 Ouput",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranslateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranslateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranslateZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"longdesc": "The rotation around the X axis",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"shortdesc": "Rotate.x",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"longdesc": "The rotation around the Y axis",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"shortdesc": "Rotate.y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"longdesc": "The rotation around the Z axis",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"shortdesc": "Rotate.z",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "SDF Transform"
					},
					"type": "shader"
				},
				{
					"name": "pxflib",
					"node_position": {
						"x": 903.978882,
						"y": 51.262207
					},
					"parameters": {
						"AmbLight": 0.25,
						"AmbOcclusion": 1,
						"CamD": 1.5,
						"CamX": 2.5,
						"CamY": 2,
						"CamZ": 3,
						"CamZoom": 0.314,
						"Gamma": 1.4,
						"LookAtX": 0,
						"LookAtY": 0,
						"LookAtZ": 0,
						"Shadow": 1,
						"SunX": 2.5,
						"SunY": 2.5,
						"SunZ": 2.5
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "vec2 Simple360HDR_equirectangularMap(vec3 dir) {\n    const float PI=3.14159265359;\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\n",
						"inputs": [
							{
								"default": "vec4((($uv.w>0.5&&$uv.w<1.5)||($uv.w>3.5&&$uv.w<4.5))?1.0:0.0,0.0,0.0,length($uv)-0.4)",
								"function": true,
								"label": "MFSDF",
								"name": "mfsdf",
								"shortdesc": "V4->V4 Multi-Field SDF",
								"type": "v4v4"
							},
							{
								"default": "Simple360HDR_make360hdri(vec2($uv.x,-$uv.y+1.0),normalize(vec3(-$SunX,$SunY,-$SunZ)))",
								"function": true,
								"label": "360 HDRI Image",
								"longdesc": "By default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/",
								"name": "hdri",
								"shortdesc": "Image 360 HDRI",
								"type": "rgb"
							}
						],
						"instance": "\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_$name(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=$mfsdf(vec4(p+e.xyy,0.0)).w;\n  float v2=$mfsdf(vec4(p+e.yyx,0.0)).w;\n  float v3=$mfsdf(vec4(p+e.yxy,0.0)).w;\n  float v4=$mfsdf(vec4(p+e.xxx,0.0)).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_$name(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = $mfsdf(vec4(p,0.0)).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_$name( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = $mfsdf(vec4( pos + h*nor ,0.0)).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_$name( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t    vec3 p=ro + rd*t;\n\t\tfloat h = $mfsdf(vec4(p,0.0)).w;\n\t\tfloat isLight=$mfsdf(vec4(p,13.0)).x;\n\t\tif (isLight>0.0) h=999999.0;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_$name(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3($CamX,$CamY,$CamZ)*$CamZoom;\n\tvec3 lookat=vec3($LookAtX,$LookAtY,$LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*$CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_$name(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=$mfsdf(vec4(p,1.0)).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1)\n\tfloat objMetallic=clamp($mfsdf(vec4(p,2.0)).x,0.0,1.0);  // 2 - Metallic  (v,0,0,sdf)\n\tfloat objSpecular=clamp(max($mfsdf(vec4(p,4.0)).x*0.2,objMetallic),0.0,1.0);  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=$mfsdf(vec4(p,5.0)).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 objEmission=$mfsdf(vec4(p,13.0)).xyz; // 13 - Emission (r,g,b,sdf)\n\tobjColor=max(objColor,objEmission);\n\tvec3 light=normalize(vec3($SunX,$SunY,$SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_$name(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_$name(p,n),$AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_$name(p,light,0.05,5.0),$Shadow);\n\t\tif (objEmission.x>0.0){\n\t\t\tcolor=objEmission;\n\t\t} else {\n\t\t\tcolor=min(vec3(max(shadow,$AmbLight)),max(l,$AmbLight))*max(cAO,$AmbLight)*((1.0-objMetallic)*objColor)+\n\t\t\tpow(r,pow(256.0,(1.0-objRoughness)))*objSpecular*mix(vec3(1.0),objColor,objMetallic)*(1.0-objRoughness)*16.0;\n\t\t}\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_$name(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tvec3 objEmissionRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=$mfsdf(vec4(p,1.0)).xyz;\n\t\t\tobjEmissionRef=$mfsdf(vec4(p,13.0)).xyz;\n\t\t\tn=normal_$name(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tif (objEmissionRef.x>0.0){\n\t\t\t  objColorRef=objEmissionRef;\n\t\t\t} else {\n\t\t\t  objColorRef=max(l,$AmbLight)*objColorRef;\n\t\t\t}\n\t\t} else {\n\t\t\tobjColorRef=$hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular*mix(vec3(1.0),objColor,objMetallic));\n\t} else {\n\t\tcolor=$hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn pow(color,vec3(1.0/$Gamma));\n}",
						"longdesc": "Type - MFSDF Render\nCode - PauloFalcao, IQ\n\nRay marching node for 2 objects using a environment 360 HDRI image\nBy default uses a very simple procedural hdri 360 image\nUse other procedural HDRI images from /PauloFalcao/Image/Generator\nOr download real ones from https://hdrihaven.com/\n\n",
						"name": "MFSDF Render",
						"outputs": [
							{
								"rgb": "raymarch_$name($uv)",
								"shortdesc": "Image output",
								"type": "rgb"
							}
						],
						"parameters": [
							{
								"control": "None",
								"default": 0,
								"label": "CamX",
								"longdesc": "Camera position X",
								"max": 5,
								"min": -5,
								"name": "CamX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamY",
								"longdesc": "Camera position Y",
								"max": 5,
								"min": -5,
								"name": "CamY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2,
								"label": "CamZ",
								"longdesc": "Camera position Z",
								"max": 5,
								"min": -5,
								"name": "CamZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtX",
								"longdesc": "Look at position with coordinate X",
								"max": 5,
								"min": -5,
								"name": "LookAtX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtY",
								"longdesc": "Look at position with coordinate Y",
								"max": 5,
								"min": -5,
								"name": "LookAtY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "LookAtZ",
								"longdesc": "Look at position with coordinate Z",
								"max": 5,
								"min": -5,
								"name": "LookAtZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 5,
								"label": "CamDistance",
								"longdesc": "Camera distance to the view plane, used to define the Field Of View",
								"max": 5,
								"min": 0,
								"name": "CamD",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "CamZoom",
								"longdesc": "Camera zoom",
								"max": 5,
								"min": 0,
								"name": "CamZoom",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunX",
								"longdesc": "Sun position coordinate X",
								"max": 10,
								"min": -10,
								"name": "SunX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunY",
								"longdesc": "Sun position coordinate Y",
								"max": 10,
								"min": -10,
								"name": "SunY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "SunZ",
								"longdesc": "Sun position coordinate Z",
								"max": 10,
								"min": -10,
								"name": "SunZ",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.2,
								"label": "AmbLight",
								"longdesc": "Strength of ambient light",
								"max": 1,
								"min": 0,
								"name": "AmbLight",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "AmbOcclusion",
								"longdesc": "Strength of ambient occlusion",
								"max": 1,
								"min": 0,
								"name": "AmbOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "Shadow",
								"longdesc": "Shadow strength",
								"max": 1,
								"min": 0,
								"name": "Shadow",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 2.2,
								"label": "Gamma",
								"longdesc": "Gamma Correction",
								"max": 3,
								"min": 0,
								"name": "Gamma",
								"step": 0.001,
								"type": "float"
							}
						]
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/MFSDF/Operator/MFSDF Paint Edges Generic Example"
		},
		{
			"connections": [
				{
					"from": "sdf3d_box",
					"from_port": 0,
					"to": "sdf3d_translate_3_2",
					"to_port": 0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0,
					"to": "sdf3d_rotate_2",
					"to_port": 0
				},
				{
					"from": "sdf3d_translate_3_2",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 0
				},
				{
					"from": "pxflib",
					"from_port": 0,
					"to": "sdf3d_boolean",
					"to_port": 1
				},
				{
					"from": "sdf3d_rotate_2",
					"from_port": 0,
					"to": "sdf3d_translate_3_3",
					"to_port": 0
				},
				{
					"from": "sdf3d_translate_3_3",
					"from_port": 0,
					"to": "pxflib",
					"to_port": 0
				},
				{
					"from": "sdf3d_boolean",
					"from_port": 0,
					"to": "pxflib_2",
					"to_port": 8
				},
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "gen_outputs",
					"to_port": 0
				}
			],
			"icon_data": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAAAXNSR0IArs4c6QAAAT5JREFUaIHtmksOwyAMRKHqPen9L+EuiEgXqeJvGITfHuyxx0CrlJIkSZLgQ0RBO9eITXu6tdbLvGv1DOqzl6LAXjJelsU9b509vExlKoM9CXsfJgs4ktDKICK9heIOFlECphnwwlILvQDf01CtYWELdSAsVOT9HOVDsZA6uqkDczV0UCwkZVjIoYSz7uMe931KAfCDAp8Xr7oJxqoR0bUARQCmhv4jwavb9wJGVOZ2luU6WAJEeTgWmBVLZF/AQZfdAyDvn1/EFxmaBs1NLNIQLVcjgD8JrbVPa6EaZEN8LoOZ5tjH3APjEivggTat+pwexA7xA4Qfo9Fs2QEo9hMA5Z+y42Nu+Q6gkQJmIxOANgBluw4AspMAwAEofAGY2RemgH+fbSBwnxls7TtHclP+WPaHiCwfoCRJkiTr8QX8x4xuMcVQtAAAAABJRU5ErkJggg==",
			"label": "Stage Lights",
			"longdesc": "",
			"name": "graph",
			"nodes": [
				{
					"name": "pxflib",
					"node_position": {
						"x": -893,
						"y": 634.5
					},
					"parameters": {
						"mode": 4
					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "",
						"inputs": [
							{
								"default": "0.0",
								"label": "SDF3D",
								"name": "in",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "",
						"longdesc": "Type - SDF3D Operator\nCode - PauloFalcao\n\nTransforms a SDF3D making a mirror symmetry using the chosen axis",
						"name": "Axis Symmetry",
						"outputs": [
							{
								"sdf3d": "$in(vec3($mode))",
								"shortdesc": "SDF3D output",
								"type": "sdf3d"
							}
						],
						"parameters": [
							{
								"default": 6,
								"label": "Axis",
								"longdesc": "Axis",
								"name": "mode",
								"type": "enum",
								"values": [
									{
										"name": "XYZ",
										"value": "abs($uv.xyz)"
									},
									{
										"name": "XY",
										"value": "abs($uv.xy),$uv.z"
									},
									{
										"name": "XZ",
										"value": "abs($uv.x),$uv.y,abs($uv.z)"
									},
									{
										"name": "YZ",
										"value": "$uv.x,abs($uv.yz)"
									},
									{
										"name": "X",
										"value": "abs($uv.x),$uv.yz"
									},
									{
										"name": "Y",
										"value": "$uv.x,abs($uv.y),$uv.z"
									},
									{
										"name": "Z",
										"value": "$uv.x,$uv.y,abs($uv.z)"
									}
								]
							}
						],
						"shortdesc": "Axis Symmetry"
					},
					"type": "shader"
				},
				{
					"name": "sdf3d_translate_3_3",
					"node_position": {
						"x": -847,
						"y": 491.5
					},
					"parameters": {
						"x": 2.95,
						"y": 1.36,
						"z": 1.36
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_boolean",
					"node_position": {
						"x": -536,
						"y": 227.5
					},
					"parameters": {
						"op": 0
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_boolean"
				},
				{
					"name": "sdf3d_rotate_2",
					"node_position": {
						"x": -830,
						"y": 283.5
					},
					"parameters": {
						"ax": 0,
						"ay": -39,
						"az": 65
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_rotate"
				},
				{
					"name": "sdf3d_translate_3_2",
					"node_position": {
						"x": -1031,
						"y": 220.5
					},
					"parameters": {
						"x": 0,
						"y": 3.23,
						"z": 0
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_translate"
				},
				{
					"name": "sdf3d_box",
					"node_position": {
						"x": -1269,
						"y": 253.5
					},
					"parameters": {
						"r": 1,
						"sx": 0.89,
						"sy": 0.05,
						"sz": 0.81
					},
					"seed": 0,
					"seed_locked": false,
					"type": "sdf3d_box"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -351,
						"y": 218
					},
					"parameters": {
						"Alpha": 0,
						"AmbientOcclusion": 0,
						"BaseColor": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						},
						"Emission": 3,
						"Metallic": 0,
						"Normal": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 0,
						"Specular": 0.5,
						"TranlateX": 0,
						"TranlateY": 0,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0,1.0,1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "vec3(0.0,1.0,0.0)",
								"function": true,
								"label": "Normal",
								"name": "Normal_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Alpha",
								"name": "Alpha_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "AO",
								"longdesc": "Fake Ambient Occlusion",
								"name": "AmbientOcclusion_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*6.28318530718)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4($AmbientOcclusion*$AmbientOcclusion_tex3d(vec4(uv.xyz,19.0)),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4($Alpha*$Alpha_tex3d(vec4(uv.xyz,15.0)),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4($Normal*$Normal_tex3d(vec4(uv.xyz,14.0)),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4($Roughness*$Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*$Specular_tex3d(vec4(uv.xyz,4.0)),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4($Metallic*$Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*$BaseColor_tex3d(vec4(uv.xyz,1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object Maker",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Clearcoat Normal Scale",
								"max": 1,
								"min": 0,
								"name": "Normal",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Alpha",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "AmbientOcclusion",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 1,
								"min": 0,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 1,
								"min": 0,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 1,
								"min": 0,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object Maker with Rot Scale Trans"
					},
					"type": "shader"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -1769,
						"y": 559.265259
					},
					"parameters": {

					},
					"ports": [

					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": -1.480026,
						"y": 275.265259
					},
					"parameters": {

					},
					"ports": [
						{
							"name": "unnamed",
							"type": "v4v4"
						}
					],
					"seed": 0,
					"seed_locked": false,
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -953.511108,
						"y": -82
					},
					"parameters": {
						"param0": 3
					},
					"seed": 0,
					"seed_locked": false,
					"type": "remote",
					"widgets": [
						{
							"label": "Emission",
							"linked_widgets": [
								{
									"node": "pxflib_2",
									"widget": "Emission"
								}
							],
							"name": "param0",
							"type": "linked_control"
						}
					]
				}
			],
			"parameters": {
				"param0": 3
			},
			"seed": 0,
			"seed_locked": false,
			"shortdesc": "",
			"tree_item": "PauloFalcao/MFSDF/Objects/MFSDF Stage Lights",
			"type": "graph"
		},
		{
			"connections": [
				{
					"from": "pxflib_2",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 3
				},
				{
					"from": "graph",
					"from_port": 0,
					"to": "pxflib_4",
					"to_port": 0
				}
			],
			"icon_data": "",
			"nodes": [
				{
					"connections": [
						{
							"from": "pxflib_3",
							"from_port": 0,
							"to": "pxflib_6",
							"to_port": 0
						},
						{
							"from": "sdf3d_box",
							"from_port": 0,
							"to": "pxflib_3",
							"to_port": 5
						},
						{
							"from": "graph_2",
							"from_port": 0,
							"to": "pxflib_6",
							"to_port": 2
						},
						{
							"from": "pxflib_6",
							"from_port": 0,
							"to": "gen_outputs",
							"to_port": 0
						},
						{
							"from": "pxflib_5",
							"from_port": 0,
							"to": "pxflib_6",
							"to_port": 1
						}
					],
					"label": "Stage",
					"longdesc": "",
					"name": "graph",
					"node_position": {
						"x": -165.559998,
						"y": -128.853302
					},
					"nodes": [
						{
							"name": "pxflib_5",
							"node_position": {
								"x": -926.450012,
								"y": -208.200012
							},
							"parameters": {
								"BaseColor": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1,
									"type": "Color"
								},
								"Emission": 10,
								"Metallic": 0,
								"RotateX": 0,
								"RotateY": -53.361,
								"RotateZ": 0,
								"Roughness": 0,
								"Specular": 0.5,
								"TranlateX": -1.354,
								"TranlateY": 4.42,
								"TranlateZ": 2.231,
								"scale": 1.359
							},
							"seed": -5947,
							"seed_locked": true,
							"shader_model": {
								"code": "",
								"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
								"inputs": [
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "BaseColor",
										"name": "BaseColor_tex3d",
										"shortdesc": "TEX3D",
										"type": "tex3d"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Metallic",
										"name": "Metallic_tex3d",
										"shortdesc": "Grayscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Specular",
										"name": "Specular_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Roughness",
										"name": "Roughness_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "Emission",
										"name": "Emission_tex3d",
										"type": "tex3d"
									},
									{
										"default": "length($uv)-0.4 ",
										"function": true,
										"label": "Object",
										"name": "sdf3d",
										"shortdesc": "SDF3D",
										"type": "sdf3d"
									}
								],
								"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
								"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
								"name": "MFSDF Object",
								"outputs": [
									{
										"shortdesc": "V4->V4 MFSDF ",
										"type": "v4v4",
										"v4v4": "PBRObjectMaker_$name($uv)"
									}
								],
								"parameters": [
									{
										"default": {
											"a": 1,
											"b": 1,
											"g": 1,
											"r": 1
										},
										"label": "",
										"name": "BaseColor",
										"type": "color"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Metallic",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.5,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Specular",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Roughness",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"longdesc": "Emission Scale",
										"max": 500,
										"min": 0,
										"name": "Emission",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "S",
										"longdesc": "Object scale",
										"max": 4,
										"min": 0,
										"name": "scale",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "X",
										"max": 10,
										"min": -10,
										"name": "TranlateX",
										"shortdesc": "Translate X",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Y",
										"max": 10,
										"min": -10,
										"name": "TranlateY",
										"shortdesc": "Translate Y",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Z",
										"max": 10,
										"min": -10,
										"name": "TranlateZ",
										"shortdesc": "Translate Z",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Rx",
										"max": 180,
										"min": -180,
										"name": "RotateX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Ry",
										"max": 180,
										"min": -180,
										"name": "RotateY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Rz",
										"max": 180,
										"min": -180,
										"name": "RotateZ",
										"step": 0.001,
										"type": "float"
									}
								],
								"shortdesc": "MFSDF Object"
							},
							"type": "shader"
						},
						{
							"name": "sdf3d_box",
							"node_position": {
								"x": -869.200012,
								"y": -361.700012
							},
							"parameters": {
								"r": 0.01,
								"sx": 0.16,
								"sy": 1.93,
								"sz": 3.57
							},
							"seed": 0,
							"seed_locked": false,
							"type": "sdf3d_box"
						},
						{
							"name": "pxflib_3",
							"node_position": {
								"x": -639.200012,
								"y": -494.700012
							},
							"parameters": {
								"BaseColor": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1,
									"type": "Color"
								},
								"Emission": 10,
								"Metallic": 0,
								"RotateX": 0,
								"RotateY": -53.361,
								"RotateZ": 0,
								"Roughness": 0,
								"Specular": 0.5,
								"TranlateX": 4.619,
								"TranlateY": 1.214,
								"TranlateZ": -3.706,
								"scale": 1
							},
							"seed": -5947,
							"seed_locked": true,
							"shader_model": {
								"code": "",
								"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
								"inputs": [
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "BaseColor",
										"name": "BaseColor_tex3d",
										"shortdesc": "TEX3D",
										"type": "tex3d"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Metallic",
										"name": "Metallic_tex3d",
										"shortdesc": "Grayscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Specular",
										"name": "Specular_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "1.0",
										"function": true,
										"label": "Roughness",
										"name": "Roughness_tex3d",
										"shortdesc": "Greyscale TEX3D",
										"type": "tex3d_gs"
									},
									{
										"default": "vec3(1.0)",
										"function": true,
										"label": "Emission",
										"name": "Emission_tex3d",
										"type": "tex3d"
									},
									{
										"default": "length($uv)-0.4 ",
										"function": true,
										"label": "Object",
										"name": "sdf3d",
										"shortdesc": "SDF3D",
										"type": "sdf3d"
									}
								],
								"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
								"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
								"name": "MFSDF Object",
								"outputs": [
									{
										"shortdesc": "V4->V4 MFSDF ",
										"type": "v4v4",
										"v4v4": "PBRObjectMaker_$name($uv)"
									}
								],
								"parameters": [
									{
										"default": {
											"a": 1,
											"b": 1,
											"g": 1,
											"r": 1
										},
										"label": "",
										"name": "BaseColor",
										"type": "color"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Metallic",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0.5,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Specular",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"max": 1,
										"min": 0,
										"name": "Roughness",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "",
										"longdesc": "Emission Scale",
										"max": 500,
										"min": 0,
										"name": "Emission",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 1,
										"label": "S",
										"longdesc": "Object scale",
										"max": 4,
										"min": 0,
										"name": "scale",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "X",
										"max": 10,
										"min": -10,
										"name": "TranlateX",
										"shortdesc": "Translate X",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Y",
										"max": 10,
										"min": -10,
										"name": "TranlateY",
										"shortdesc": "Translate Y",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Z",
										"max": 10,
										"min": -10,
										"name": "TranlateZ",
										"shortdesc": "Translate Z",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Rx",
										"max": 180,
										"min": -180,
										"name": "RotateX",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Ry",
										"max": 180,
										"min": -180,
										"name": "RotateY",
										"step": 0.001,
										"type": "float"
									},
									{
										"control": "None",
										"default": 0,
										"label": "Rz",
										"max": 180,
										"min": -180,
										"name": "RotateZ",
										"step": 0.001,
										"type": "float"
									}
								],
								"shortdesc": "MFSDF Object"
							},
							"type": "shader"
						},
						{
							"name": "pxflib_6",
							"node_position": {
								"x": -286.200012,
								"y": -317.700012
							},
							"parameters": {

							},
							"seed": 0,
							"seed_locked": false,
							"shader_model": {
								"code": "",
								"global": "vec4 MFSDF_Union_4(vec4 in1,vec4 in2,vec4 in3,vec4 in4){\n    vec4 t=(in1.w<in2.w)?vec4(in1):vec4(in2);\n    t=(t.w<in2.w)?vec4(t):vec4(in2);\n    t=(t.w<in3.w)?vec4(t):vec4(in3);\n    t=(t.w<in4.w)?vec4(t):vec4(in4);\n    return t;\n}\n\n",
								"inputs": [
									{
										"default": "vec4(0.0,0.0,0.0,9999999.0)",
										"label": "",
										"name": "in1",
										"shortdesc": "V4->V4 MFSDF 1",
										"type": "v4v4"
									},
									{
										"default": "vec4(0.0,0.0,0.0,9999999.0)",
										"label": "",
										"name": "in2",
										"shortdesc": "V4->V4 MFSDF 2",
										"type": "v4v4"
									},
									{
										"default": "vec4(0.0,0.0,0.0,9999999.0)",
										"label": "",
										"name": "in3",
										"shortdesc": "V4->V4 MFSDF 3",
										"type": "v4v4"
									},
									{
										"default": "vec4(0.0,0.0,0.0,9999999.0)",
										"label": "",
										"name": "in4",
										"shortdesc": "V4->V4 MFSDF 4",
										"type": "v4v4"
									}
								],
								"instance": "",
								"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean union operation between 4 shapes",
								"name": "MFSDF Union 4",
								"outputs": [
									{
										"shortdesc": "V4->V4 MFSDF",
										"type": "v4v4",
										"v4v4": "MFSDF_Union_4($in1($uv),$in2($uv),$in3($uv),$in4($uv))"
									}
								],
								"parameters": [

								]
							},
							"type": "shader"
						},
						{
							"connections": [
								{
									"from": "tex3d_pattern_2",
									"from_port": 0,
									"to": "tex3d_colorize_3",
									"to_port": 0
								},
								{
									"from": "tex3d_colorize_3",
									"from_port": 0,
									"to": "pxflib_4",
									"to_port": 0
								},
								{
									"from": "pxflib_4",
									"from_port": 0,
									"to": "gen_outputs",
									"to_port": 0
								},
								{
									"from": "sdf3d_box",
									"from_port": 0,
									"to": "pxflib_4",
									"to_port": 5
								}
							],
							"label": "Checkerboard",
							"longdesc": "",
							"name": "graph_2",
							"node_position": {
								"x": -622.200012,
								"y": -99.700012
							},
							"nodes": [
								{
									"name": "sdf3d_box",
									"node_position": {
										"x": -1041.340088,
										"y": -203.449951
									},
									"parameters": {
										"r": 0,
										"sx": 6,
										"sy": 0.5,
										"sz": 6
									},
									"seed": 0,
									"seed_locked": false,
									"type": "sdf3d_box"
								},
								{
									"name": "tex3d_pattern_2",
									"node_position": {
										"x": -1106.340088,
										"y": -381.449951
									},
									"parameters": {
										"mix": 4,
										"x_scale": "$checkersize",
										"x_wave": 2,
										"y_scale": 0,
										"y_wave": 2,
										"z_scale": "$checkersize",
										"z_wave": 2
									},
									"seed": 0,
									"seed_locked": false,
									"type": "tex3d_pattern"
								},
								{
									"name": "gen_inputs",
									"node_position": {
										"x": -1341.340088,
										"y": -277.949951
									},
									"parameters": {

									},
									"ports": [

									],
									"seed": 0,
									"seed_locked": false,
									"type": "ios"
								},
								{
									"name": "gen_outputs",
									"node_position": {
										"x": -171.340027,
										"y": -302.949951
									},
									"parameters": {

									},
									"ports": [
										{
											"group_size": 0,
											"name": "port0",
											"type": "v4v4"
										}
									],
									"seed": 0,
									"seed_locked": false,
									"type": "ios"
								},
								{
									"name": "gen_parameters",
									"node_position": {
										"x": -1055.590088,
										"y": -653.449951
									},
									"parameters": {
										"checkersize": 2.242,
										"param0": 6,
										"param1": -1,
										"param2": {
											"interpolation": 1,
											"points": [
												{
													"a": 1,
													"b": 0.808594,
													"g": 0.808594,
													"pos": 0,
													"r": 0.808594
												},
												{
													"a": 1,
													"b": 0.53125,
													"g": 0.53125,
													"pos": 1,
													"r": 0.53125
												}
											],
											"type": "Gradient"
										},
										"param3": 0,
										"param4": 1,
										"param5": 0.089
									},
									"seed": 0,
									"seed_locked": false,
									"type": "remote",
									"widgets": [
										{
											"label": "Board Size",
											"linked_widgets": [
												{
													"node": "sdf3d_box",
													"widget": "sx"
												},
												{
													"node": "sdf3d_box",
													"widget": "sz"
												}
											],
											"name": "param0",
											"type": "linked_control"
										},
										{
											"default": 1,
											"label": "Checker Size",
											"max": 20,
											"min": 0,
											"name": "checkersize",
											"step": 0.001,
											"type": "named_parameter"
										},
										{
											"label": "Position",
											"linked_widgets": [
												{
													"node": "pxflib_4",
													"widget": "TranlateY"
												}
											],
											"name": "param1",
											"type": "linked_control"
										},
										{
											"label": "Color",
											"linked_widgets": [
												{
													"node": "tex3d_colorize_3",
													"widget": "g"
												}
											],
											"name": "param2",
											"type": "linked_control"
										},
										{
											"label": "Metallic",
											"linked_widgets": [
												{
													"node": "pxflib_4",
													"widget": "Metallic"
												}
											],
											"name": "param3",
											"type": "linked_control"
										},
										{
											"label": "Specular",
											"linked_widgets": [
												{
													"node": "pxflib_4",
													"widget": "Specular"
												}
											],
											"name": "param4",
											"type": "linked_control"
										},
										{
											"label": "Roughness",
											"linked_widgets": [
												{
													"node": "pxflib_4",
													"widget": "Roughness"
												}
											],
											"name": "param5",
											"type": "linked_control"
										}
									]
								},
								{
									"name": "tex3d_colorize_3",
									"node_position": {
										"x": -850,
										"y": -377.021362
									},
									"parameters": {
										"g": {
											"interpolation": 1,
											"points": [
												{
													"a": 1,
													"b": 0.808594,
													"g": 0.808594,
													"pos": 0,
													"r": 0.808594
												},
												{
													"a": 1,
													"b": 0.53125,
													"g": 0.53125,
													"pos": 1,
													"r": 0.53125
												}
											],
											"type": "Gradient"
										}
									},
									"seed": 0,
									"seed_locked": false,
									"type": "tex3d_colorize"
								},
								{
									"name": "pxflib_4",
									"node_position": {
										"x": -591.953735,
										"y": -359.458862
									},
									"parameters": {
										"BaseColor": {
											"a": 1,
											"b": 1,
											"g": 1,
											"r": 1,
											"type": "Color"
										},
										"Emission": 0,
										"Metallic": 0,
										"RotateX": 0,
										"RotateY": 0,
										"RotateZ": 0,
										"Roughness": 0.089,
										"Specular": 1,
										"TranlateX": 0,
										"TranlateY": -1,
										"TranlateZ": 0,
										"scale": 1
									},
									"seed": -5947,
									"seed_locked": true,
									"shader_model": {
										"code": "",
										"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
										"inputs": [
											{
												"default": "vec3(1.0)",
												"function": true,
												"label": "BaseColor",
												"name": "BaseColor_tex3d",
												"shortdesc": "TEX3D",
												"type": "tex3d"
											},
											{
												"default": "1.0",
												"function": true,
												"label": "Metallic",
												"name": "Metallic_tex3d",
												"shortdesc": "Grayscale TEX3D",
												"type": "tex3d_gs"
											},
											{
												"default": "1.0",
												"function": true,
												"label": "Specular",
												"name": "Specular_tex3d",
												"shortdesc": "Greyscale TEX3D",
												"type": "tex3d_gs"
											},
											{
												"default": "1.0",
												"function": true,
												"label": "Roughness",
												"name": "Roughness_tex3d",
												"shortdesc": "Greyscale TEX3D",
												"type": "tex3d_gs"
											},
											{
												"default": "vec3(1.0)",
												"function": true,
												"label": "Emission",
												"name": "Emission_tex3d",
												"type": "tex3d"
											},
											{
												"default": "length($uv)-0.4 ",
												"function": true,
												"label": "Object",
												"name": "sdf3d",
												"shortdesc": "SDF3D",
												"type": "sdf3d"
											}
										],
										"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
										"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
										"name": "MFSDF Object",
										"outputs": [
											{
												"shortdesc": "V4->V4 MFSDF ",
												"type": "v4v4",
												"v4v4": "PBRObjectMaker_$name($uv)"
											}
										],
										"parameters": [
											{
												"default": {
													"a": 1,
													"b": 1,
													"g": 1,
													"r": 1
												},
												"label": "",
												"name": "BaseColor",
												"type": "color"
											},
											{
												"control": "None",
												"default": 0,
												"label": "",
												"max": 1,
												"min": 0,
												"name": "Metallic",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 0.5,
												"label": "",
												"max": 1,
												"min": 0,
												"name": "Specular",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 0,
												"label": "",
												"max": 1,
												"min": 0,
												"name": "Roughness",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 0,
												"label": "",
												"longdesc": "Emission Scale",
												"max": 500,
												"min": 0,
												"name": "Emission",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 1,
												"label": "S",
												"longdesc": "Object scale",
												"max": 4,
												"min": 0,
												"name": "scale",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 0,
												"label": "X",
												"max": 10,
												"min": -10,
												"name": "TranlateX",
												"shortdesc": "Translate X",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 0,
												"label": "Y",
												"max": 10,
												"min": -10,
												"name": "TranlateY",
												"shortdesc": "Translate Y",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 0,
												"label": "Z",
												"max": 10,
												"min": -10,
												"name": "TranlateZ",
												"shortdesc": "Translate Z",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 0,
												"label": "Rx",
												"max": 180,
												"min": -180,
												"name": "RotateX",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 0,
												"label": "Ry",
												"max": 180,
												"min": -180,
												"name": "RotateY",
												"step": 0.001,
												"type": "float"
											},
											{
												"control": "None",
												"default": 0,
												"label": "Rz",
												"max": 180,
												"min": -180,
												"name": "RotateZ",
												"step": 0.001,
												"type": "float"
											}
										],
										"shortdesc": "MFSDF Object"
									},
									"type": "shader"
								}
							],
							"parameters": {
								"checkersize": 2.242,
								"param0": 6,
								"param1": -1,
								"param2": {
									"interpolation": 1,
									"points": [
										{
											"a": 1,
											"b": 0.808594,
											"g": 0.808594,
											"pos": 0,
											"r": 0.808594
										},
										{
											"a": 1,
											"b": 0.53125,
											"g": 0.53125,
											"pos": 1,
											"r": 0.53125
										}
									],
									"type": "Gradient"
								},
								"param3": 0,
								"param4": 1,
								"param5": 0.089
							},
							"seed": 0,
							"seed_locked": false,
							"shortdesc": "",
							"type": "graph"
						},
						{
							"name": "gen_inputs",
							"node_position": {
								"x": -1426.449951,
								"y": -296.399994
							},
							"parameters": {

							},
							"ports": [

							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_outputs",
							"node_position": {
								"x": 13.799988,
								"y": -296.399994
							},
							"parameters": {

							},
							"ports": [
								{
									"name": "port0",
									"type": "v4v4"
								}
							],
							"seed": 0,
							"seed_locked": false,
							"type": "ios"
						},
						{
							"name": "gen_parameters",
							"node_position": {
								"x": -868.650024,
								"y": -794.700012
							},
							"parameters": {

							},
							"seed": 0,
							"seed_locked": false,
							"type": "remote",
							"widgets": [

							]
						}
					],
					"parameters": {

					},
					"seed": 0,
					"seed_locked": false,
					"shortdesc": "",
					"type": "graph"
				},
				{
					"name": "pxflib_4",
					"node_position": {
						"x": 120.309937,
						"y": -116.593338
					},
					"parameters": {

					},
					"seed": 0,
					"seed_locked": false,
					"shader_model": {
						"code": "",
						"global": "vec4 MFSDF_Union_4(vec4 in1,vec4 in2,vec4 in3,vec4 in4){\n    vec4 t=(in1.w<in2.w)?vec4(in1):vec4(in2);\n    t=(t.w<in2.w)?vec4(t):vec4(in2);\n    t=(t.w<in3.w)?vec4(t):vec4(in3);\n    t=(t.w<in4.w)?vec4(t):vec4(in4);\n    return t;\n}\n\n",
						"inputs": [
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in1",
								"shortdesc": "V4->V4 MFSDF 1",
								"type": "v4v4"
							},
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in2",
								"shortdesc": "V4->V4 MFSDF 2",
								"type": "v4v4"
							},
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in3",
								"shortdesc": "V4->V4 MFSDF 3",
								"type": "v4v4"
							},
							{
								"default": "vec4(0.0,0.0,0.0,9999999.0)",
								"label": "",
								"name": "in4",
								"shortdesc": "V4->V4 MFSDF 4",
								"type": "v4v4"
							}
						],
						"instance": "",
						"longdesc": "Type - V4->V4 Operator\nCode - PauloFalcao\n\nPerforms a boolean union operation between 4 shapes",
						"name": "MFSDF Union 4",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF",
								"type": "v4v4",
								"v4v4": "MFSDF_Union_4($in1($uv),$in2($uv),$in3($uv),$in4($uv))"
							}
						],
						"parameters": [

						]
					},
					"type": "shader"
				},
				{
					"name": "pxflib_2",
					"node_position": {
						"x": -224.75,
						"y": -17.553345
					},
					"parameters": {
						"BaseColor": {
							"a": 1,
							"b": 0,
							"g": 0,
							"r": 1,
							"type": "Color"
						},
						"Emission": 0,
						"Metallic": 0,
						"RotateX": 0,
						"RotateY": 0,
						"RotateZ": 0,
						"Roughness": 0,
						"Specular": 0.5,
						"TranlateX": 0,
						"TranlateY": 0,
						"TranlateZ": 0,
						"scale": 1
					},
					"seed": -5947,
					"seed_locked": true,
					"shader_model": {
						"code": "",
						"global": "vec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n",
						"inputs": [
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "BaseColor",
								"name": "BaseColor_tex3d",
								"shortdesc": "TEX3D",
								"type": "tex3d"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Metallic",
								"name": "Metallic_tex3d",
								"shortdesc": "Grayscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Specular",
								"name": "Specular_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "1.0",
								"function": true,
								"label": "Roughness",
								"name": "Roughness_tex3d",
								"shortdesc": "Greyscale TEX3D",
								"type": "tex3d_gs"
							},
							{
								"default": "vec3(1.0)",
								"function": true,
								"label": "Emission",
								"name": "Emission_tex3d",
								"type": "tex3d"
							},
							{
								"default": "length($uv)-0.4 ",
								"function": true,
								"label": "Object",
								"name": "sdf3d",
								"shortdesc": "SDF3D",
								"type": "sdf3d"
							}
						],
						"instance": "vec4 PBRObjectMaker_$name(vec4 uv){\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3($TranlateX,$TranlateY,$TranlateZ),vec3($RotateX,$RotateY,$RotateZ)*0.01745329251)/$scale;\n\tfloat sdf=$sdf3d(uv.xyz)*$scale;\n\t//13 - Emission\n\tif (uv.w>12.5&&uv.w<13.5) {\n\t\treturn vec4($Emission*$Emission_tex3d(vec4(uv.xyz,13.0)),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5&&uv.w<5.5) {\n\t\treturn vec4($Roughness*clamp($Roughness_tex3d(vec4(uv.xyz,5.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4($Specular*clamp($Specular_tex3d(vec4(uv.xyz,4.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5&&uv.w<2.5) {\n\t\treturn vec4($Metallic*clamp($Metallic_tex3d(vec4(uv.xyz,2.0)),0.0,1.0),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4($BaseColor.rgb*clamp($BaseColor_tex3d(vec4(uv.xyz,1.0)),vec3(0.0),vec3(1.0)),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}",
						"longdesc": "Type - V4->V4 Generator\nCode - PauloFalcao\n\nCreates a Multi Field SDF (MFSDF), a single function that defines the object (SDF) and all materials properties using a TEX3D for each property.\nThis also have Rotation, Scale and Translation",
						"name": "MFSDF Object",
						"outputs": [
							{
								"shortdesc": "V4->V4 MFSDF ",
								"type": "v4v4",
								"v4v4": "PBRObjectMaker_$name($uv)"
							}
						],
						"parameters": [
							{
								"default": {
									"a": 1,
									"b": 1,
									"g": 1,
									"r": 1
								},
								"label": "",
								"name": "BaseColor",
								"type": "color"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Metallic",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0.5,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Specular",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"max": 1,
								"min": 0,
								"name": "Roughness",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "",
								"longdesc": "Emission Scale",
								"max": 500,
								"min": 0,
								"name": "Emission",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 1,
								"label": "S",
								"longdesc": "Object scale",
								"max": 4,
								"min": 0,
								"name": "scale",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "X",
								"max": 10,
								"min": -10,
								"name": "TranlateX",
								"shortdesc": "Translate X",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Y",
								"max": 10,
								"min": -10,
								"name": "TranlateY",
								"shortdesc": "Translate Y",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Z",
								"max": 10,
								"min": -10,
								"name": "TranlateZ",
								"shortdesc": "Translate Z",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rx",
								"max": 180,
								"min": -180,
								"name": "RotateX",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Ry",
								"max": 180,
								"min": -180,
								"name": "RotateY",
								"step": 0.001,
								"type": "float"
							},
							{
								"control": "None",
								"default": 0,
								"label": "Rz",
								"max": 180,
								"min": -180,
								"name": "RotateZ",
								"step": 0.001,
								"type": "float"
							}
						],
						"shortdesc": "MFSDF Object"
					},
					"type": "shader"
				}
			],
			"tree_item": "PauloFalcao/MFSDF/Objects/MFSDF Stage Checkerboard"
		}
	],
	"name": "PauloFalcaoRayMarching"
}